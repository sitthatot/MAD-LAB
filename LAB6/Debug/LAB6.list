
LAB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005508  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08005708  08005708  00015708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800578c  0800578c  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e8  2000005c  080057f0  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000844  080057f0  00020844  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001687c  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000032a7  00000000  00000000  00036949  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001270  00000000  00000000  00039bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e4b  00000000  00000000  0003ae60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a0d7  00000000  00000000  0003bcab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c5c  00000000  00000000  00065d82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001034f1  00000000  00000000  0007e9de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005218  00000000  00000000  00181ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001870e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	080056f0 	.word	0x080056f0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	080056f0 	.word	0x080056f0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <MX_ADC1_Init+0xa0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000606:	2200      	movs	r2, #0
 8000608:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060a:	4b1f      	ldr	r3, [pc, #124]	; (8000688 <MX_ADC1_Init+0x9c>)
 800060c:	2200      	movs	r2, #0
 800060e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000610:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000616:	4b1c      	ldr	r3, [pc, #112]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061c:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x9c>)
 800061e:	2200      	movs	r2, #0
 8000620:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000624:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800062c:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_ADC1_Init+0x9c>)
 800062e:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000632:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000634:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063a:	4b13      	ldr	r3, [pc, #76]	; (8000688 <MX_ADC1_Init+0x9c>)
 800063c:	2201      	movs	r2, #1
 800063e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000640:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000642:	2200      	movs	r2, #0
 8000644:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000648:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x9c>)
 800064a:	2201      	movs	r2, #1
 800064c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064e:	480e      	ldr	r0, [pc, #56]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000650:	f000 fde2 	bl	8001218 <HAL_ADC_Init>
 8000654:	4603      	mov	r3, r0
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 800065a:	f000 f9fb 	bl	8000a54 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065e:	2303      	movs	r3, #3
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4806      	ldr	r0, [pc, #24]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000670:	f000 ff48 	bl	8001504 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 800067a:	f000 f9eb 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067e:	bf00      	nop
 8000680:	3710      	adds	r7, #16
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	20000078 	.word	0x20000078
 800068c:	40012000 	.word	0x40012000

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x84>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d12b      	bne.n	800070a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <HAL_ADC_MspInit+0x8c>)
 80006f6:	f001 fa71 	bl	8001bdc <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	2012      	movs	r0, #18
 8000700:	f001 fa35 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000704:	2012      	movs	r0, #18
 8000706:	f001 fa4e 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40012000 	.word	0x40012000
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000

08000720 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a67      	ldr	r2, [pc, #412]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b65      	ldr	r3, [pc, #404]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b62      	ldr	r3, [pc, #392]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a61      	ldr	r2, [pc, #388]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a5b      	ldr	r2, [pc, #364]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a4f      	ldr	r2, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b4d      	ldr	r3, [pc, #308]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a49      	ldr	r2, [pc, #292]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007cc:	4843      	ldr	r0, [pc, #268]	; (80008dc <MX_GPIO_Init+0x1bc>)
 80007ce:	f001 fbb1 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	4842      	ldr	r0, [pc, #264]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80007d8:	f001 fbac 	bl	8001f34 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	483c      	ldr	r0, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x1c4>)
 80007f4:	f001 f9f2 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f8:	2332      	movs	r3, #50	; 0x32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4834      	ldr	r0, [pc, #208]	; (80008e4 <MX_GPIO_Init+0x1c4>)
 8000814:	f001 f9e2 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	482d      	ldr	r0, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x1c8>)
 8000834:	f001 f9d2 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000852:	f001 f9c3 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000874:	f001 f9b2 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 8000890:	f001 f9a4 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80008a8:	f001 f998 	bl	8001bdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008be:	230b      	movs	r3, #11
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80008ca:	f001 f987 	bl	8001bdc <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40021800 	.word	0x40021800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020000 	.word	0x40020000

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f0:	f000 fc11 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f4:	f000 f818 	bl	8000928 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008f8:	f7ff ff12 	bl	8000720 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80008fc:	f000 faaa 	bl	8000e54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000900:	f000 fb38 	bl	8000f74 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000904:	f7ff fe72 	bl	80005ec <MX_ADC1_Init>
  MX_TIM2_Init();
 8000908:	f000 fa14 	bl	8000d34 <MX_TIM2_Init>
  MX_TIM1_Init();
 800090c:	f000 f9be 	bl	8000c8c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000910:	4803      	ldr	r0, [pc, #12]	; (8000920 <main+0x34>)
 8000912:	f002 fdef 	bl	80034f4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <main+0x38>)
 8000918:	f002 fdec 	bl	80034f4 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800091c:	e7fe      	b.n	800091c <main+0x30>
 800091e:	bf00      	nop
 8000920:	200000d0 	.word	0x200000d0
 8000924:	2000011c 	.word	0x2000011c

08000928 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b094      	sub	sp, #80	; 0x50
 800092c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800092e:	f107 031c 	add.w	r3, r7, #28
 8000932:	2234      	movs	r2, #52	; 0x34
 8000934:	2100      	movs	r1, #0
 8000936:	4618      	mov	r0, r3
 8000938:	f004 fa56 	bl	8004de8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800093c:	f107 0308 	add.w	r3, r7, #8
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
 8000948:	60da      	str	r2, [r3, #12]
 800094a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800094c:	f001 fc6e 	bl	800222c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000950:	4b29      	ldr	r3, [pc, #164]	; (80009f8 <SystemClock_Config+0xd0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	4a28      	ldr	r2, [pc, #160]	; (80009f8 <SystemClock_Config+0xd0>)
 8000956:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800095a:	6413      	str	r3, [r2, #64]	; 0x40
 800095c:	4b26      	ldr	r3, [pc, #152]	; (80009f8 <SystemClock_Config+0xd0>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000960:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000964:	607b      	str	r3, [r7, #4]
 8000966:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000968:	4b24      	ldr	r3, [pc, #144]	; (80009fc <SystemClock_Config+0xd4>)
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000970:	4a22      	ldr	r2, [pc, #136]	; (80009fc <SystemClock_Config+0xd4>)
 8000972:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000976:	6013      	str	r3, [r2, #0]
 8000978:	4b20      	ldr	r3, [pc, #128]	; (80009fc <SystemClock_Config+0xd4>)
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000980:	603b      	str	r3, [r7, #0]
 8000982:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000984:	2301      	movs	r3, #1
 8000986:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000988:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800098c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000992:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000996:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000998:	2304      	movs	r3, #4
 800099a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 800099c:	2360      	movs	r3, #96	; 0x60
 800099e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV6;
 80009a0:	2306      	movs	r3, #6
 80009a2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80009a4:	2304      	movs	r3, #4
 80009a6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80009a8:	2302      	movs	r3, #2
 80009aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	4618      	mov	r0, r3
 80009b2:	f001 fc4b 	bl	800224c <HAL_RCC_OscConfig>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80009bc:	f000 f84a 	bl	8000a54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009c0:	230f      	movs	r3, #15
 80009c2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009c4:	2302      	movs	r3, #2
 80009c6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009cc:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80009d2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009d6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009d8:	f107 0308 	add.w	r3, r7, #8
 80009dc:	2100      	movs	r1, #0
 80009de:	4618      	mov	r0, r3
 80009e0:	f001 fee2 	bl	80027a8 <HAL_RCC_ClockConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80009ea:	f000 f833 	bl	8000a54 <Error_Handler>
  }
}
 80009ee:	bf00      	nop
 80009f0:	3750      	adds	r7, #80	; 0x50
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	40023800 	.word	0x40023800
 80009fc:	40007000 	.word	0x40007000

08000a00 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08c      	sub	sp, #48	; 0x30
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
	uint32_t adcVal;
	char adcResult[30];

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	480f      	ldr	r0, [pc, #60]	; (8000a48 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a0c:	f001 faab 	bl	8001f66 <HAL_GPIO_TogglePin>
	adcVal = HAL_ADC_GetValue(hadc);
 8000a10:	6878      	ldr	r0, [r7, #4]
 8000a12:	f000 fd55 	bl	80014c0 <HAL_ADC_GetValue>
 8000a16:	62f8      	str	r0, [r7, #44]	; 0x2c
	sprintf(adcResult,"ADC_Val = 0x%010X \n\r", adcVal);
 8000a18:	f107 030c 	add.w	r3, r7, #12
 8000a1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a1e:	490b      	ldr	r1, [pc, #44]	; (8000a4c <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a20:	4618      	mov	r0, r3
 8000a22:	f004 f9c1 	bl	8004da8 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) adcResult,strlen(adcResult),100);
 8000a26:	f107 030c 	add.w	r3, r7, #12
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f7ff fc08 	bl	8000240 <strlen>
 8000a30:	4603      	mov	r3, r0
 8000a32:	b29a      	uxth	r2, r3
 8000a34:	f107 010c 	add.w	r1, r7, #12
 8000a38:	2364      	movs	r3, #100	; 0x64
 8000a3a:	4805      	ldr	r0, [pc, #20]	; (8000a50 <HAL_ADC_ConvCpltCallback+0x50>)
 8000a3c:	f003 fa22 	bl	8003e84 <HAL_UART_Transmit>

}
 8000a40:	bf00      	nop
 8000a42:	3730      	adds	r7, #48	; 0x30
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	40020400 	.word	0x40020400
 8000a4c:	08005710 	.word	0x08005710
 8000a50:	20000168 	.word	0x20000168

08000a54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a58:	b672      	cpsid	i
}
 8000a5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a5c:	e7fe      	b.n	8000a5c <Error_Handler+0x8>
	...

08000a60 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b082      	sub	sp, #8
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a70:	6413      	str	r3, [r2, #64]	; 0x40
 8000a72:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a88:	6453      	str	r3, [r2, #68]	; 0x44
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x44>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000a96:	2005      	movs	r0, #5
 8000a98:	f001 f85e 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <NMI_Handler+0x4>

08000aae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <HardFault_Handler+0x4>

08000ab4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <MemManage_Handler+0x4>

08000aba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <BusFault_Handler+0x4>

08000ac0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <UsageFault_Handler+0x4>

08000ac6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac6:	b480      	push	{r7}
 8000ac8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aca:	bf00      	nop
 8000acc:	46bd      	mov	sp, r7
 8000ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad2:	4770      	bx	lr

08000ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae2:	b480      	push	{r7}
 8000ae4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr

08000af0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af4:	f000 fb4c 	bl	8001190 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000af8:	bf00      	nop
 8000afa:	bd80      	pop	{r7, pc}

08000afc <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b00:	4802      	ldr	r0, [pc, #8]	; (8000b0c <ADC_IRQHandler+0x10>)
 8000b02:	f000 fbcd 	bl	80012a0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	20000078 	.word	0x20000078

08000b10 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <TIM1_UP_TIM10_IRQHandler+0x3c>)
 8000b16:	f002 fd65 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8000b1a:	4b0d      	ldr	r3, [pc, #52]	; (8000b50 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000b1c:	681b      	ldr	r3, [r3, #0]
 8000b1e:	3301      	adds	r3, #1
 8000b20:	4a0b      	ldr	r2, [pc, #44]	; (8000b50 <TIM1_UP_TIM10_IRQHandler+0x40>)
 8000b22:	6013      	str	r3, [r2, #0]
  second++;
 8000b24:	4b0b      	ldr	r3, [pc, #44]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	3301      	adds	r3, #1
 8000b2a:	4a0a      	ldr	r2, [pc, #40]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000b2c:	6013      	str	r3, [r2, #0]
  if(second == 60)
 8000b2e:	4b09      	ldr	r3, [pc, #36]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	2b3c      	cmp	r3, #60	; 0x3c
 8000b34:	d107      	bne.n	8000b46 <TIM1_UP_TIM10_IRQHandler+0x36>
  	{
  		minute++;
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	3301      	adds	r3, #1
 8000b3c:	4a06      	ldr	r2, [pc, #24]	; (8000b58 <TIM1_UP_TIM10_IRQHandler+0x48>)
 8000b3e:	6013      	str	r3, [r2, #0]

  		second = 0;
 8000b40:	4b04      	ldr	r3, [pc, #16]	; (8000b54 <TIM1_UP_TIM10_IRQHandler+0x44>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
  	}
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200000d0 	.word	0x200000d0
 8000b50:	200000c0 	.word	0x200000c0
 8000b54:	200000c8 	.word	0x200000c8
 8000b58:	200000c4 	.word	0x200000c4

08000b5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b086      	sub	sp, #24
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b62:	481f      	ldr	r0, [pc, #124]	; (8000be0 <TIM2_IRQHandler+0x84>)
 8000b64:	f002 fd3e 	bl	80035e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  //displayTime();
  char toMinute[10];
  char toSecond[10];
  sprintf(toMinute,"%02d",minute);
 8000b68:	4b1e      	ldr	r3, [pc, #120]	; (8000be4 <TIM2_IRQHandler+0x88>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	491d      	ldr	r1, [pc, #116]	; (8000be8 <TIM2_IRQHandler+0x8c>)
 8000b72:	4618      	mov	r0, r3
 8000b74:	f004 f918 	bl	8004da8 <siprintf>
  sprintf(toSecond,"%02d",second);
 8000b78:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <TIM2_IRQHandler+0x90>)
 8000b7a:	681a      	ldr	r2, [r3, #0]
 8000b7c:	463b      	mov	r3, r7
 8000b7e:	491a      	ldr	r1, [pc, #104]	; (8000be8 <TIM2_IRQHandler+0x8c>)
 8000b80:	4618      	mov	r0, r3
 8000b82:	f004 f911 	bl	8004da8 <siprintf>
  print("\r");
 8000b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	4918      	ldr	r1, [pc, #96]	; (8000bf0 <TIM2_IRQHandler+0x94>)
 8000b8e:	4819      	ldr	r0, [pc, #100]	; (8000bf4 <TIM2_IRQHandler+0x98>)
 8000b90:	f003 f978 	bl	8003e84 <HAL_UART_Transmit>
  print(toMinute);
 8000b94:	f107 030c 	add.w	r3, r7, #12
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fb51 	bl	8000240 <strlen>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b29a      	uxth	r2, r3
 8000ba2:	f107 010c 	add.w	r1, r7, #12
 8000ba6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000baa:	4812      	ldr	r0, [pc, #72]	; (8000bf4 <TIM2_IRQHandler+0x98>)
 8000bac:	f003 f96a 	bl	8003e84 <HAL_UART_Transmit>
  print(":");
 8000bb0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	4910      	ldr	r1, [pc, #64]	; (8000bf8 <TIM2_IRQHandler+0x9c>)
 8000bb8:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <TIM2_IRQHandler+0x98>)
 8000bba:	f003 f963 	bl	8003e84 <HAL_UART_Transmit>
  print(toSecond);
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	f7ff fb3d 	bl	8000240 <strlen>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	b29a      	uxth	r2, r3
 8000bca:	4639      	mov	r1, r7
 8000bcc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bd0:	4808      	ldr	r0, [pc, #32]	; (8000bf4 <TIM2_IRQHandler+0x98>)
 8000bd2:	f003 f957 	bl	8003e84 <HAL_UART_Transmit>
  /* USER CODE END TIM2_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	3718      	adds	r7, #24
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	2000011c 	.word	0x2000011c
 8000be4:	200000c4 	.word	0x200000c4
 8000be8:	08005728 	.word	0x08005728
 8000bec:	200000c8 	.word	0x200000c8
 8000bf0:	08005730 	.word	0x08005730
 8000bf4:	20000168 	.word	0x20000168
 8000bf8:	08005734 	.word	0x08005734

08000bfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c04:	4a14      	ldr	r2, [pc, #80]	; (8000c58 <_sbrk+0x5c>)
 8000c06:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <_sbrk+0x60>)
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c10:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <_sbrk+0x64>)
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d102      	bne.n	8000c1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c18:	4b11      	ldr	r3, [pc, #68]	; (8000c60 <_sbrk+0x64>)
 8000c1a:	4a12      	ldr	r2, [pc, #72]	; (8000c64 <_sbrk+0x68>)
 8000c1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c1e:	4b10      	ldr	r3, [pc, #64]	; (8000c60 <_sbrk+0x64>)
 8000c20:	681a      	ldr	r2, [r3, #0]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	4413      	add	r3, r2
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	429a      	cmp	r2, r3
 8000c2a:	d207      	bcs.n	8000c3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c2c:	f004 f8e4 	bl	8004df8 <__errno>
 8000c30:	4603      	mov	r3, r0
 8000c32:	220c      	movs	r2, #12
 8000c34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3a:	e009      	b.n	8000c50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c3c:	4b08      	ldr	r3, [pc, #32]	; (8000c60 <_sbrk+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c42:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <_sbrk+0x64>)
 8000c44:	681a      	ldr	r2, [r3, #0]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4413      	add	r3, r2
 8000c4a:	4a05      	ldr	r2, [pc, #20]	; (8000c60 <_sbrk+0x64>)
 8000c4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000c4e:	68fb      	ldr	r3, [r7, #12]
}
 8000c50:	4618      	mov	r0, r3
 8000c52:	3718      	adds	r7, #24
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	20080000 	.word	0x20080000
 8000c5c:	00000400 	.word	0x00000400
 8000c60:	200000cc 	.word	0x200000cc
 8000c64:	20000848 	.word	0x20000848

08000c68 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c6c:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <SystemInit+0x20>)
 8000c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c72:	4a05      	ldr	r2, [pc, #20]	; (8000c88 <SystemInit+0x20>)
 8000c74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b088      	sub	sp, #32
 8000c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c92:	f107 0310 	add.w	r3, r7, #16
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
 8000c9a:	605a      	str	r2, [r3, #4]
 8000c9c:	609a      	str	r2, [r3, #8]
 8000c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ca0:	1d3b      	adds	r3, r7, #4
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	601a      	str	r2, [r3, #0]
 8000ca6:	605a      	str	r2, [r3, #4]
 8000ca8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cac:	4a20      	ldr	r2, [pc, #128]	; (8000d30 <MX_TIM1_Init+0xa4>)
 8000cae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1600-1;
 8000cb0:	4b1e      	ldr	r3, [pc, #120]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cb2:	f240 623f 	movw	r2, #1599	; 0x63f
 8000cb6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 10000-1;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cc0:	f242 720f 	movw	r2, #9999	; 0x270f
 8000cc4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cc6:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ccc:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cd2:	4b16      	ldr	r3, [pc, #88]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cd8:	4814      	ldr	r0, [pc, #80]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cda:	f002 fbb3 	bl	8003444 <HAL_TIM_Base_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000ce4:	f7ff feb6 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ce8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cee:	f107 0310 	add.w	r3, r7, #16
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	480d      	ldr	r0, [pc, #52]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000cf6:	f002 fd95 	bl	8003824 <HAL_TIM_ConfigClockSource>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000d00:	f7ff fea8 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d04:	2300      	movs	r3, #0
 8000d06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d10:	1d3b      	adds	r3, r7, #4
 8000d12:	4619      	mov	r1, r3
 8000d14:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_TIM1_Init+0xa0>)
 8000d16:	f002 ffbb 	bl	8003c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8000d20:	f7ff fe98 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	3720      	adds	r7, #32
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	200000d0 	.word	0x200000d0
 8000d30:	40010000 	.word	0x40010000

08000d34 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b088      	sub	sp, #32
 8000d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d3a:	f107 0310 	add.w	r3, r7, #16
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
 8000d42:	605a      	str	r2, [r3, #4]
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d48:	1d3b      	adds	r3, r7, #4
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	601a      	str	r2, [r3, #0]
 8000d4e:	605a      	str	r2, [r3, #4]
 8000d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d58:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000-1;
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d68:	4a19      	ldr	r2, [pc, #100]	; (8000dd0 <MX_TIM2_Init+0x9c>)
 8000d6a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV4;
 8000d6c:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d6e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d72:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d7c:	f002 fb62 	bl	8003444 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000d86:	f7ff fe65 	bl	8000a54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000d98:	f002 fd44 	bl	8003824 <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000da2:	f7ff fe57 	bl	8000a54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000da6:	2320      	movs	r3, #32
 8000da8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000dae:	1d3b      	adds	r3, r7, #4
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM2_Init+0x98>)
 8000db4:	f002 ff6c 	bl	8003c90 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000dbe:	f7ff fe49 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3720      	adds	r7, #32
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000011c 	.word	0x2000011c
 8000dd0:	0001869f 	.word	0x0001869f

08000dd4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b084      	sub	sp, #16
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a1a      	ldr	r2, [pc, #104]	; (8000e4c <HAL_TIM_Base_MspInit+0x78>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d114      	bne.n	8000e10 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000de6:	4b1a      	ldr	r3, [pc, #104]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dea:	4a19      	ldr	r2, [pc, #100]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000dec:	f043 0301 	orr.w	r3, r3, #1
 8000df0:	6453      	str	r3, [r2, #68]	; 0x44
 8000df2:	4b17      	ldr	r3, [pc, #92]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df6:	f003 0301 	and.w	r3, r3, #1
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	2101      	movs	r1, #1
 8000e02:	2019      	movs	r0, #25
 8000e04:	f000 feb3 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000e08:	2019      	movs	r0, #25
 8000e0a:	f000 fecc 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000e0e:	e018      	b.n	8000e42 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e18:	d113      	bne.n	8000e42 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e1a:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a0c      	ldr	r2, [pc, #48]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b0a      	ldr	r3, [pc, #40]	; (8000e50 <HAL_TIM_Base_MspInit+0x7c>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000e32:	2200      	movs	r2, #0
 8000e34:	2102      	movs	r1, #2
 8000e36:	201c      	movs	r0, #28
 8000e38:	f000 fe99 	bl	8001b6e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e3c:	201c      	movs	r0, #28
 8000e3e:	f000 feb2 	bl	8001ba6 <HAL_NVIC_EnableIRQ>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	40010000 	.word	0x40010000
 8000e50:	40023800 	.word	0x40023800

08000e54 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e58:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e5a:	4a15      	ldr	r2, [pc, #84]	; (8000eb0 <MX_USART3_UART_Init+0x5c>)
 8000e5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e5e:	4b13      	ldr	r3, [pc, #76]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e72:	4b0e      	ldr	r3, [pc, #56]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e78:	4b0c      	ldr	r3, [pc, #48]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e7a:	220c      	movs	r2, #12
 8000e7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e7e:	4b0b      	ldr	r3, [pc, #44]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e84:	4b09      	ldr	r3, [pc, #36]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e8a:	4b08      	ldr	r3, [pc, #32]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_USART3_UART_Init+0x58>)
 8000e98:	f002 ffa6 	bl	8003de8 <HAL_UART_Init>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ea2:	f7ff fdd7 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	20000168 	.word	0x20000168
 8000eb0:	40004800 	.word	0x40004800

08000eb4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b0ae      	sub	sp, #184	; 0xb8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	601a      	str	r2, [r3, #0]
 8000ec4:	605a      	str	r2, [r3, #4]
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	60da      	str	r2, [r3, #12]
 8000eca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ecc:	f107 0314 	add.w	r3, r7, #20
 8000ed0:	2290      	movs	r2, #144	; 0x90
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f003 ff87 	bl	8004de8 <memset>
  if(uartHandle->Instance==USART3)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	4a22      	ldr	r2, [pc, #136]	; (8000f68 <HAL_UART_MspInit+0xb4>)
 8000ee0:	4293      	cmp	r3, r2
 8000ee2:	d13c      	bne.n	8000f5e <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000ee4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ee8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000eea:	2300      	movs	r3, #0
 8000eec:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4618      	mov	r0, r3
 8000ef4:	f001 fe7e 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000efe:	f7ff fda9 	bl	8000a54 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f02:	4b1a      	ldr	r3, [pc, #104]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f06:	4a19      	ldr	r2, [pc, #100]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f0e:	4b17      	ldr	r3, [pc, #92]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f16:	613b      	str	r3, [r7, #16]
 8000f18:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f1a:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	4a13      	ldr	r2, [pc, #76]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f20:	f043 0308 	orr.w	r3, r3, #8
 8000f24:	6313      	str	r3, [r2, #48]	; 0x30
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <HAL_UART_MspInit+0xb8>)
 8000f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2a:	f003 0308 	and.w	r3, r3, #8
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000f32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f46:	2303      	movs	r3, #3
 8000f48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000f4c:	2307      	movs	r3, #7
 8000f4e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f52:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <HAL_UART_MspInit+0xbc>)
 8000f5a:	f000 fe3f 	bl	8001bdc <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f5e:	bf00      	nop
 8000f60:	37b8      	adds	r7, #184	; 0xb8
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	40004800 	.word	0x40004800
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020c00 	.word	0x40020c00

08000f74 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f78:	4b14      	ldr	r3, [pc, #80]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f80:	4b12      	ldr	r3, [pc, #72]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f82:	2206      	movs	r2, #6
 8000f84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f86:	4b11      	ldr	r3, [pc, #68]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f88:	2202      	movs	r2, #2
 8000f8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f8c:	4b0f      	ldr	r3, [pc, #60]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f92:	4b0e      	ldr	r3, [pc, #56]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f94:	2202      	movs	r2, #2
 8000f96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f98:	4b0c      	ldr	r3, [pc, #48]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f9e:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000fa4:	4b09      	ldr	r3, [pc, #36]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000faa:	4b08      	ldr	r3, [pc, #32]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fac:	2201      	movs	r2, #1
 8000fae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000fb6:	4805      	ldr	r0, [pc, #20]	; (8000fcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000fb8:	f000 ffef 	bl	8001f9a <HAL_PCD_Init>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d001      	beq.n	8000fc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000fc2:	f7ff fd47 	bl	8000a54 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000fc6:	bf00      	nop
 8000fc8:	bd80      	pop	{r7, pc}
 8000fca:	bf00      	nop
 8000fcc:	200001f0 	.word	0x200001f0

08000fd0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b0ae      	sub	sp, #184	; 0xb8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000fe8:	f107 0314 	add.w	r3, r7, #20
 8000fec:	2290      	movs	r2, #144	; 0x90
 8000fee:	2100      	movs	r1, #0
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	f003 fef9 	bl	8004de8 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ffe:	d159      	bne.n	80010b4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001000:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001004:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800100c:	f107 0314 	add.w	r3, r7, #20
 8001010:	4618      	mov	r0, r3
 8001012:	f001 fdef 	bl	8002bf4 <HAL_RCCEx_PeriphCLKConfig>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800101c:	f7ff fd1a 	bl	8000a54 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001020:	4b26      	ldr	r3, [pc, #152]	; (80010bc <HAL_PCD_MspInit+0xec>)
 8001022:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001024:	4a25      	ldr	r2, [pc, #148]	; (80010bc <HAL_PCD_MspInit+0xec>)
 8001026:	f043 0301 	orr.w	r3, r3, #1
 800102a:	6313      	str	r3, [r2, #48]	; 0x30
 800102c:	4b23      	ldr	r3, [pc, #140]	; (80010bc <HAL_PCD_MspInit+0xec>)
 800102e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001030:	f003 0301 	and.w	r3, r3, #1
 8001034:	613b      	str	r3, [r7, #16]
 8001036:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001038:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800103c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001046:	2300      	movs	r3, #0
 8001048:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
 800104e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001052:	230a      	movs	r3, #10
 8001054:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800105c:	4619      	mov	r1, r3
 800105e:	4818      	ldr	r0, [pc, #96]	; (80010c0 <HAL_PCD_MspInit+0xf0>)
 8001060:	f000 fdbc 	bl	8001bdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001064:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001068:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001072:	2300      	movs	r3, #0
 8001074:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001078:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800107c:	4619      	mov	r1, r3
 800107e:	4810      	ldr	r0, [pc, #64]	; (80010c0 <HAL_PCD_MspInit+0xf0>)
 8001080:	f000 fdac 	bl	8001bdc <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001084:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <HAL_PCD_MspInit+0xec>)
 8001086:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001088:	4a0c      	ldr	r2, [pc, #48]	; (80010bc <HAL_PCD_MspInit+0xec>)
 800108a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800108e:	6353      	str	r3, [r2, #52]	; 0x34
 8001090:	4b0a      	ldr	r3, [pc, #40]	; (80010bc <HAL_PCD_MspInit+0xec>)
 8001092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001094:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <HAL_PCD_MspInit+0xec>)
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	4a06      	ldr	r2, [pc, #24]	; (80010bc <HAL_PCD_MspInit+0xec>)
 80010a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010a6:	6453      	str	r3, [r2, #68]	; 0x44
 80010a8:	4b04      	ldr	r3, [pc, #16]	; (80010bc <HAL_PCD_MspInit+0xec>)
 80010aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80010b4:	bf00      	nop
 80010b6:	37b8      	adds	r7, #184	; 0xb8
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40023800 	.word	0x40023800
 80010c0:	40020000 	.word	0x40020000

080010c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ee:	f7ff fdbb 	bl	8000c68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f003 fe87 	bl	8004e04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010f6:	f7ff fbf9 	bl	80008ec <main>
  bx  lr    
 80010fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010fc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8001108:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 800110c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001110:	20000844 	.word	0x20000844

08001114 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <CAN1_RX0_IRQHandler>

08001116 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800111a:	2003      	movs	r0, #3
 800111c:	f000 fd1c 	bl	8001b58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001120:	2000      	movs	r0, #0
 8001122:	f000 f805 	bl	8001130 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001126:	f7ff fc9b 	bl	8000a60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800112a:	2300      	movs	r3, #0
}
 800112c:	4618      	mov	r0, r3
 800112e:	bd80      	pop	{r7, pc}

08001130 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001138:	4b12      	ldr	r3, [pc, #72]	; (8001184 <HAL_InitTick+0x54>)
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <HAL_InitTick+0x58>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	4619      	mov	r1, r3
 8001142:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001146:	fbb3 f3f1 	udiv	r3, r3, r1
 800114a:	fbb2 f3f3 	udiv	r3, r2, r3
 800114e:	4618      	mov	r0, r3
 8001150:	f000 fd37 	bl	8001bc2 <HAL_SYSTICK_Config>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e00e      	b.n	800117c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b0f      	cmp	r3, #15
 8001162:	d80a      	bhi.n	800117a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001164:	2200      	movs	r2, #0
 8001166:	6879      	ldr	r1, [r7, #4]
 8001168:	f04f 30ff 	mov.w	r0, #4294967295
 800116c:	f000 fcff 	bl	8001b6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001170:	4a06      	ldr	r2, [pc, #24]	; (800118c <HAL_InitTick+0x5c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001176:	2300      	movs	r3, #0
 8001178:	e000      	b.n	800117c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800117a:	2301      	movs	r3, #1
}
 800117c:	4618      	mov	r0, r3
 800117e:	3708      	adds	r7, #8
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000000 	.word	0x20000000
 8001188:	20000008 	.word	0x20000008
 800118c:	20000004 	.word	0x20000004

08001190 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <HAL_IncTick+0x20>)
 8001196:	781b      	ldrb	r3, [r3, #0]
 8001198:	461a      	mov	r2, r3
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_IncTick+0x24>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4413      	add	r3, r2
 80011a0:	4a04      	ldr	r2, [pc, #16]	; (80011b4 <HAL_IncTick+0x24>)
 80011a2:	6013      	str	r3, [r2, #0]
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
 80011ae:	bf00      	nop
 80011b0:	20000008 	.word	0x20000008
 80011b4:	200006f8 	.word	0x200006f8

080011b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return uwTick;
 80011bc:	4b03      	ldr	r3, [pc, #12]	; (80011cc <HAL_GetTick+0x14>)
 80011be:	681b      	ldr	r3, [r3, #0]
}
 80011c0:	4618      	mov	r0, r3
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	200006f8 	.word	0x200006f8

080011d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d8:	f7ff ffee 	bl	80011b8 <HAL_GetTick>
 80011dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e8:	d005      	beq.n	80011f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011ea:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <HAL_Delay+0x44>)
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	461a      	mov	r2, r3
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	4413      	add	r3, r2
 80011f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011f6:	bf00      	nop
 80011f8:	f7ff ffde 	bl	80011b8 <HAL_GetTick>
 80011fc:	4602      	mov	r2, r0
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	1ad3      	subs	r3, r2, r3
 8001202:	68fa      	ldr	r2, [r7, #12]
 8001204:	429a      	cmp	r2, r3
 8001206:	d8f7      	bhi.n	80011f8 <HAL_Delay+0x28>
  {
  }
}
 8001208:	bf00      	nop
 800120a:	bf00      	nop
 800120c:	3710      	adds	r7, #16
 800120e:	46bd      	mov	sp, r7
 8001210:	bd80      	pop	{r7, pc}
 8001212:	bf00      	nop
 8001214:	20000008 	.word	0x20000008

08001218 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001220:	2300      	movs	r3, #0
 8001222:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d101      	bne.n	800122e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800122a:	2301      	movs	r3, #1
 800122c:	e031      	b.n	8001292 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001232:	2b00      	cmp	r3, #0
 8001234:	d109      	bne.n	800124a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001236:	6878      	ldr	r0, [r7, #4]
 8001238:	f7ff fa2a 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2200      	movs	r2, #0
 8001246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800124e:	f003 0310 	and.w	r3, r3, #16
 8001252:	2b00      	cmp	r3, #0
 8001254:	d116      	bne.n	8001284 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800125a:	4b10      	ldr	r3, [pc, #64]	; (800129c <HAL_ADC_Init+0x84>)
 800125c:	4013      	ands	r3, r2
 800125e:	f043 0202 	orr.w	r2, r3, #2
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f000 faa2 	bl	80017b0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001276:	f023 0303 	bic.w	r3, r3, #3
 800127a:	f043 0201 	orr.w	r2, r3, #1
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
 8001282:	e001      	b.n	8001288 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001290:	7bfb      	ldrb	r3, [r7, #15]
}
 8001292:	4618      	mov	r0, r3
 8001294:	3710      	adds	r7, #16
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	ffffeefd 	.word	0xffffeefd

080012a0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b086      	sub	sp, #24
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	f003 0302 	and.w	r3, r3, #2
 80012c6:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	f003 0320 	and.w	r3, r3, #32
 80012ce:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d049      	beq.n	800136a <HAL_ADC_IRQHandler+0xca>
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d046      	beq.n	800136a <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e0:	f003 0310 	and.w	r3, r3, #16
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d12b      	bne.n	800135a <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001306:	2b00      	cmp	r3, #0
 8001308:	d127      	bne.n	800135a <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001310:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001322:	2b00      	cmp	r3, #0
 8001324:	d119      	bne.n	800135a <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f022 0220 	bic.w	r2, r2, #32
 8001334:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d105      	bne.n	800135a <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f7ff fb50 	bl	8000a00 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f06f 0212 	mvn.w	r2, #18
 8001368:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800136a:	68fb      	ldr	r3, [r7, #12]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001378:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	2b00      	cmp	r3, #0
 800137e:	d057      	beq.n	8001430 <HAL_ADC_IRQHandler+0x190>
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d054      	beq.n	8001430 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f003 0310 	and.w	r3, r3, #16
 800138e:	2b00      	cmp	r3, #0
 8001390:	d105      	bne.n	800139e <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d139      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b2:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d006      	beq.n	80013c8 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d12b      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d124      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d11d      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d119      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	685a      	ldr	r2, [r3, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013fa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001410:	2b00      	cmp	r3, #0
 8001412:	d105      	bne.n	8001420 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	f043 0201 	orr.w	r2, r3, #1
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001420:	6878      	ldr	r0, [r7, #4]
 8001422:	f000 fabf 	bl	80019a4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	f06f 020c 	mvn.w	r2, #12
 800142e:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800143e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d017      	beq.n	8001476 <HAL_ADC_IRQHandler+0x1d6>
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d014      	beq.n	8001476 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	f003 0301 	and.w	r3, r3, #1
 8001456:	2b01      	cmp	r3, #1
 8001458:	d10d      	bne.n	8001476 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f837 	bl	80014da <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f06f 0201 	mvn.w	r2, #1
 8001474:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0320 	and.w	r3, r3, #32
 800147c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800147e:	68bb      	ldr	r3, [r7, #8]
 8001480:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001484:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d015      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x218>
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d012      	beq.n	80014b8 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f043 0202 	orr.w	r2, r3, #2
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f06f 0220 	mvn.w	r2, #32
 80014a6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f820 	bl	80014ee <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f06f 0220 	mvn.w	r2, #32
 80014b6:	601a      	str	r2, [r3, #0]
  }
}
 80014b8:	bf00      	nop
 80014ba:	3718      	adds	r7, #24
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80014ce:	4618      	mov	r0, r3
 80014d0:	370c      	adds	r7, #12
 80014d2:	46bd      	mov	sp, r7
 80014d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d8:	4770      	bx	lr

080014da <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80014da:	b480      	push	{r7}
 80014dc:	b083      	sub	sp, #12
 80014de:	af00      	add	r7, sp, #0
 80014e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr

080014ee <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
	...

08001504 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001504:	b480      	push	{r7}
 8001506:	b085      	sub	sp, #20
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001518:	2b01      	cmp	r3, #1
 800151a:	d101      	bne.n	8001520 <HAL_ADC_ConfigChannel+0x1c>
 800151c:	2302      	movs	r3, #2
 800151e:	e136      	b.n	800178e <HAL_ADC_ConfigChannel+0x28a>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	2201      	movs	r2, #1
 8001524:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b09      	cmp	r3, #9
 800152e:	d93a      	bls.n	80015a6 <HAL_ADC_ConfigChannel+0xa2>
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001538:	d035      	beq.n	80015a6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68d9      	ldr	r1, [r3, #12]
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	b29b      	uxth	r3, r3
 8001546:	461a      	mov	r2, r3
 8001548:	4613      	mov	r3, r2
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	4413      	add	r3, r2
 800154e:	3b1e      	subs	r3, #30
 8001550:	2207      	movs	r2, #7
 8001552:	fa02 f303 	lsl.w	r3, r2, r3
 8001556:	43da      	mvns	r2, r3
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	400a      	ands	r2, r1
 800155e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a8d      	ldr	r2, [pc, #564]	; (800179c <HAL_ADC_ConfigChannel+0x298>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10a      	bne.n	8001580 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	68d9      	ldr	r1, [r3, #12]
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	061a      	lsls	r2, r3, #24
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	430a      	orrs	r2, r1
 800157c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157e:	e035      	b.n	80015ec <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	68d9      	ldr	r1, [r3, #12]
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	689a      	ldr	r2, [r3, #8]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	b29b      	uxth	r3, r3
 8001590:	4618      	mov	r0, r3
 8001592:	4603      	mov	r3, r0
 8001594:	005b      	lsls	r3, r3, #1
 8001596:	4403      	add	r3, r0
 8001598:	3b1e      	subs	r3, #30
 800159a:	409a      	lsls	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015a4:	e022      	b.n	80015ec <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6919      	ldr	r1, [r3, #16]
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	b29b      	uxth	r3, r3
 80015b2:	461a      	mov	r2, r3
 80015b4:	4613      	mov	r3, r2
 80015b6:	005b      	lsls	r3, r3, #1
 80015b8:	4413      	add	r3, r2
 80015ba:	2207      	movs	r2, #7
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	43da      	mvns	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	400a      	ands	r2, r1
 80015c8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	6919      	ldr	r1, [r3, #16]
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	b29b      	uxth	r3, r3
 80015da:	4618      	mov	r0, r3
 80015dc:	4603      	mov	r3, r0
 80015de:	005b      	lsls	r3, r3, #1
 80015e0:	4403      	add	r3, r0
 80015e2:	409a      	lsls	r2, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	430a      	orrs	r2, r1
 80015ea:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	2b06      	cmp	r3, #6
 80015f2:	d824      	bhi.n	800163e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	685a      	ldr	r2, [r3, #4]
 80015fe:	4613      	mov	r3, r2
 8001600:	009b      	lsls	r3, r3, #2
 8001602:	4413      	add	r3, r2
 8001604:	3b05      	subs	r3, #5
 8001606:	221f      	movs	r2, #31
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	43da      	mvns	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	400a      	ands	r2, r1
 8001614:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	b29b      	uxth	r3, r3
 8001622:	4618      	mov	r0, r3
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	4613      	mov	r3, r2
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	4413      	add	r3, r2
 800162e:	3b05      	subs	r3, #5
 8001630:	fa00 f203 	lsl.w	r2, r0, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	635a      	str	r2, [r3, #52]	; 0x34
 800163c:	e04c      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685b      	ldr	r3, [r3, #4]
 8001642:	2b0c      	cmp	r3, #12
 8001644:	d824      	bhi.n	8001690 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685a      	ldr	r2, [r3, #4]
 8001650:	4613      	mov	r3, r2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	4413      	add	r3, r2
 8001656:	3b23      	subs	r3, #35	; 0x23
 8001658:	221f      	movs	r2, #31
 800165a:	fa02 f303 	lsl.w	r3, r2, r3
 800165e:	43da      	mvns	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	400a      	ands	r2, r1
 8001666:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	b29b      	uxth	r3, r3
 8001674:	4618      	mov	r0, r3
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685a      	ldr	r2, [r3, #4]
 800167a:	4613      	mov	r3, r2
 800167c:	009b      	lsls	r3, r3, #2
 800167e:	4413      	add	r3, r2
 8001680:	3b23      	subs	r3, #35	; 0x23
 8001682:	fa00 f203 	lsl.w	r2, r0, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	430a      	orrs	r2, r1
 800168c:	631a      	str	r2, [r3, #48]	; 0x30
 800168e:	e023      	b.n	80016d8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	4613      	mov	r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	4413      	add	r3, r2
 80016a0:	3b41      	subs	r3, #65	; 0x41
 80016a2:	221f      	movs	r2, #31
 80016a4:	fa02 f303 	lsl.w	r3, r2, r3
 80016a8:	43da      	mvns	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	400a      	ands	r2, r1
 80016b0:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	b29b      	uxth	r3, r3
 80016be:	4618      	mov	r0, r3
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685a      	ldr	r2, [r3, #4]
 80016c4:	4613      	mov	r3, r2
 80016c6:	009b      	lsls	r3, r3, #2
 80016c8:	4413      	add	r3, r2
 80016ca:	3b41      	subs	r3, #65	; 0x41
 80016cc:	fa00 f203 	lsl.w	r2, r0, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	430a      	orrs	r2, r1
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a30      	ldr	r2, [pc, #192]	; (80017a0 <HAL_ADC_ConfigChannel+0x29c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d10a      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1f4>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80016ea:	d105      	bne.n	80016f8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80016ec:	4b2d      	ldr	r3, [pc, #180]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	4a2c      	ldr	r2, [pc, #176]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016f6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a28      	ldr	r2, [pc, #160]	; (80017a0 <HAL_ADC_ConfigChannel+0x29c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d10f      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2b12      	cmp	r3, #18
 8001708:	d10b      	bne.n	8001722 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800170a:	4b26      	ldr	r3, [pc, #152]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	4a25      	ldr	r2, [pc, #148]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001710:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001714:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001716:	4b23      	ldr	r3, [pc, #140]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	4a22      	ldr	r2, [pc, #136]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800171c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001720:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a1e      	ldr	r2, [pc, #120]	; (80017a0 <HAL_ADC_ConfigChannel+0x29c>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d12b      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x280>
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1a      	ldr	r2, [pc, #104]	; (800179c <HAL_ADC_ConfigChannel+0x298>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d003      	beq.n	800173e <HAL_ADC_ConfigChannel+0x23a>
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	2b11      	cmp	r3, #17
 800173c:	d122      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800173e:	4b19      	ldr	r3, [pc, #100]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	4a18      	ldr	r2, [pc, #96]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001744:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001748:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800174a:	4b16      	ldr	r3, [pc, #88]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	4a15      	ldr	r2, [pc, #84]	; (80017a4 <HAL_ADC_ConfigChannel+0x2a0>)
 8001750:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001754:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_ADC_ConfigChannel+0x298>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d111      	bne.n	8001784 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001760:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_ADC_ConfigChannel+0x2a4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a11      	ldr	r2, [pc, #68]	; (80017ac <HAL_ADC_ConfigChannel+0x2a8>)
 8001766:	fba2 2303 	umull	r2, r3, r2, r3
 800176a:	0c9a      	lsrs	r2, r3, #18
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001776:	e002      	b.n	800177e <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3b01      	subs	r3, #1
 800177c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	2b00      	cmp	r3, #0
 8001782:	d1f9      	bne.n	8001778 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2200      	movs	r2, #0
 8001788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800178c:	2300      	movs	r3, #0
}
 800178e:	4618      	mov	r0, r3
 8001790:	3714      	adds	r7, #20
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	10000012 	.word	0x10000012
 80017a0:	40012000 	.word	0x40012000
 80017a4:	40012300 	.word	0x40012300
 80017a8:	20000000 	.word	0x20000000
 80017ac:	431bde83 	.word	0x431bde83

080017b0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80017b0:	b480      	push	{r7}
 80017b2:	b083      	sub	sp, #12
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80017b8:	4b78      	ldr	r3, [pc, #480]	; (800199c <ADC_Init+0x1ec>)
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4a77      	ldr	r2, [pc, #476]	; (800199c <ADC_Init+0x1ec>)
 80017be:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80017c2:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80017c4:	4b75      	ldr	r3, [pc, #468]	; (800199c <ADC_Init+0x1ec>)
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	685b      	ldr	r3, [r3, #4]
 80017cc:	4973      	ldr	r1, [pc, #460]	; (800199c <ADC_Init+0x1ec>)
 80017ce:	4313      	orrs	r3, r2
 80017d0:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80017e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6859      	ldr	r1, [r3, #4]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	021a      	lsls	r2, r3, #8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	685a      	ldr	r2, [r3, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001804:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	6859      	ldr	r1, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	689a      	ldr	r2, [r3, #8]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	430a      	orrs	r2, r1
 8001816:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001826:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	6899      	ldr	r1, [r3, #8]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800183e:	4a58      	ldr	r2, [pc, #352]	; (80019a0 <ADC_Init+0x1f0>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d022      	beq.n	800188a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	689a      	ldr	r2, [r3, #8]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001852:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	6899      	ldr	r1, [r3, #8]
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	430a      	orrs	r2, r1
 8001864:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	689a      	ldr	r2, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001874:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	6899      	ldr	r1, [r3, #8]
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	430a      	orrs	r2, r1
 8001886:	609a      	str	r2, [r3, #8]
 8001888:	e00f      	b.n	80018aa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001898:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	689a      	ldr	r2, [r3, #8]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0202 	bic.w	r2, r2, #2
 80018b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	6899      	ldr	r1, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	699b      	ldr	r3, [r3, #24]
 80018c4:	005a      	lsls	r2, r3, #1
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	430a      	orrs	r2, r1
 80018cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d01b      	beq.n	8001910 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	685a      	ldr	r2, [r3, #4]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80018e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	685a      	ldr	r2, [r3, #4]
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	6859      	ldr	r1, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001902:	3b01      	subs	r3, #1
 8001904:	035a      	lsls	r2, r3, #13
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	605a      	str	r2, [r3, #4]
 800190e:	e007      	b.n	8001920 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	685a      	ldr	r2, [r3, #4]
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800191e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800192e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69db      	ldr	r3, [r3, #28]
 800193a:	3b01      	subs	r3, #1
 800193c:	051a      	lsls	r2, r3, #20
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	430a      	orrs	r2, r1
 8001944:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	689a      	ldr	r2, [r3, #8]
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001954:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	6899      	ldr	r1, [r3, #8]
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001962:	025a      	lsls	r2, r3, #9
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	689a      	ldr	r2, [r3, #8]
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800197a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	6899      	ldr	r1, [r3, #8]
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	029a      	lsls	r2, r3, #10
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	430a      	orrs	r2, r1
 800198e:	609a      	str	r2, [r3, #8]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40012300 	.word	0x40012300
 80019a0:	0f000001 	.word	0x0f000001

080019a4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f003 0307 	and.w	r3, r3, #7
 80019c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <__NVIC_SetPriorityGrouping+0x40>)
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019d4:	4013      	ands	r3, r2
 80019d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80019e0:	4b06      	ldr	r3, [pc, #24]	; (80019fc <__NVIC_SetPriorityGrouping+0x44>)
 80019e2:	4313      	orrs	r3, r2
 80019e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e6:	4a04      	ldr	r2, [pc, #16]	; (80019f8 <__NVIC_SetPriorityGrouping+0x40>)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	60d3      	str	r3, [r2, #12]
}
 80019ec:	bf00      	nop
 80019ee:	3714      	adds	r7, #20
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	e000ed00 	.word	0xe000ed00
 80019fc:	05fa0000 	.word	0x05fa0000

08001a00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a00:	b480      	push	{r7}
 8001a02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a04:	4b04      	ldr	r3, [pc, #16]	; (8001a18 <__NVIC_GetPriorityGrouping+0x18>)
 8001a06:	68db      	ldr	r3, [r3, #12]
 8001a08:	0a1b      	lsrs	r3, r3, #8
 8001a0a:	f003 0307 	and.w	r3, r3, #7
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	4603      	mov	r3, r0
 8001a24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	db0b      	blt.n	8001a46 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a2e:	79fb      	ldrb	r3, [r7, #7]
 8001a30:	f003 021f 	and.w	r2, r3, #31
 8001a34:	4907      	ldr	r1, [pc, #28]	; (8001a54 <__NVIC_EnableIRQ+0x38>)
 8001a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3a:	095b      	lsrs	r3, r3, #5
 8001a3c:	2001      	movs	r0, #1
 8001a3e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000e100 	.word	0xe000e100

08001a58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b083      	sub	sp, #12
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	4603      	mov	r3, r0
 8001a60:	6039      	str	r1, [r7, #0]
 8001a62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	db0a      	blt.n	8001a82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	490c      	ldr	r1, [pc, #48]	; (8001aa4 <__NVIC_SetPriority+0x4c>)
 8001a72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a76:	0112      	lsls	r2, r2, #4
 8001a78:	b2d2      	uxtb	r2, r2
 8001a7a:	440b      	add	r3, r1
 8001a7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a80:	e00a      	b.n	8001a98 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	b2da      	uxtb	r2, r3
 8001a86:	4908      	ldr	r1, [pc, #32]	; (8001aa8 <__NVIC_SetPriority+0x50>)
 8001a88:	79fb      	ldrb	r3, [r7, #7]
 8001a8a:	f003 030f 	and.w	r3, r3, #15
 8001a8e:	3b04      	subs	r3, #4
 8001a90:	0112      	lsls	r2, r2, #4
 8001a92:	b2d2      	uxtb	r2, r2
 8001a94:	440b      	add	r3, r1
 8001a96:	761a      	strb	r2, [r3, #24]
}
 8001a98:	bf00      	nop
 8001a9a:	370c      	adds	r7, #12
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	e000e100 	.word	0xe000e100
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b089      	sub	sp, #36	; 0x24
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	60f8      	str	r0, [r7, #12]
 8001ab4:	60b9      	str	r1, [r7, #8]
 8001ab6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 0307 	and.w	r3, r3, #7
 8001abe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f1c3 0307 	rsb	r3, r3, #7
 8001ac6:	2b04      	cmp	r3, #4
 8001ac8:	bf28      	it	cs
 8001aca:	2304      	movcs	r3, #4
 8001acc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	2b06      	cmp	r3, #6
 8001ad4:	d902      	bls.n	8001adc <NVIC_EncodePriority+0x30>
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	3b03      	subs	r3, #3
 8001ada:	e000      	b.n	8001ade <NVIC_EncodePriority+0x32>
 8001adc:	2300      	movs	r3, #0
 8001ade:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ae4:	69bb      	ldr	r3, [r7, #24]
 8001ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aea:	43da      	mvns	r2, r3
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	401a      	ands	r2, r3
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001af4:	f04f 31ff 	mov.w	r1, #4294967295
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	fa01 f303 	lsl.w	r3, r1, r3
 8001afe:	43d9      	mvns	r1, r3
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	4313      	orrs	r3, r2
         );
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	3724      	adds	r7, #36	; 0x24
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
	...

08001b14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	3b01      	subs	r3, #1
 8001b20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b24:	d301      	bcc.n	8001b2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b26:	2301      	movs	r3, #1
 8001b28:	e00f      	b.n	8001b4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b2a:	4a0a      	ldr	r2, [pc, #40]	; (8001b54 <SysTick_Config+0x40>)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b32:	210f      	movs	r1, #15
 8001b34:	f04f 30ff 	mov.w	r0, #4294967295
 8001b38:	f7ff ff8e 	bl	8001a58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b3c:	4b05      	ldr	r3, [pc, #20]	; (8001b54 <SysTick_Config+0x40>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b42:	4b04      	ldr	r3, [pc, #16]	; (8001b54 <SysTick_Config+0x40>)
 8001b44:	2207      	movs	r2, #7
 8001b46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	e000e010 	.word	0xe000e010

08001b58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ff29 	bl	80019b8 <__NVIC_SetPriorityGrouping>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b086      	sub	sp, #24
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	4603      	mov	r3, r0
 8001b76:	60b9      	str	r1, [r7, #8]
 8001b78:	607a      	str	r2, [r7, #4]
 8001b7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b80:	f7ff ff3e 	bl	8001a00 <__NVIC_GetPriorityGrouping>
 8001b84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b86:	687a      	ldr	r2, [r7, #4]
 8001b88:	68b9      	ldr	r1, [r7, #8]
 8001b8a:	6978      	ldr	r0, [r7, #20]
 8001b8c:	f7ff ff8e 	bl	8001aac <NVIC_EncodePriority>
 8001b90:	4602      	mov	r2, r0
 8001b92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b96:	4611      	mov	r1, r2
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7ff ff5d 	bl	8001a58 <__NVIC_SetPriority>
}
 8001b9e:	bf00      	nop
 8001ba0:	3718      	adds	r7, #24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}

08001ba6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ba6:	b580      	push	{r7, lr}
 8001ba8:	b082      	sub	sp, #8
 8001baa:	af00      	add	r7, sp, #0
 8001bac:	4603      	mov	r3, r0
 8001bae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bb0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f7ff ff31 	bl	8001a1c <__NVIC_EnableIRQ>
}
 8001bba:	bf00      	nop
 8001bbc:	3708      	adds	r7, #8
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}

08001bc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bc2:	b580      	push	{r7, lr}
 8001bc4:	b082      	sub	sp, #8
 8001bc6:	af00      	add	r7, sp, #0
 8001bc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bca:	6878      	ldr	r0, [r7, #4]
 8001bcc:	f7ff ffa2 	bl	8001b14 <SysTick_Config>
 8001bd0:	4603      	mov	r3, r0
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3708      	adds	r7, #8
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}
	...

08001bdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b089      	sub	sp, #36	; 0x24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	61fb      	str	r3, [r7, #28]
 8001bfa:	e175      	b.n	8001ee8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	69fb      	ldr	r3, [r7, #28]
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	697a      	ldr	r2, [r7, #20]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c10:	693a      	ldr	r2, [r7, #16]
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	f040 8164 	bne.w	8001ee2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b01      	cmp	r3, #1
 8001c24:	d005      	beq.n	8001c32 <HAL_GPIO_Init+0x56>
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d130      	bne.n	8001c94 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001c38:	69fb      	ldr	r3, [r7, #28]
 8001c3a:	005b      	lsls	r3, r3, #1
 8001c3c:	2203      	movs	r2, #3
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	4013      	ands	r3, r2
 8001c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	68da      	ldr	r2, [r3, #12]
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	005b      	lsls	r3, r3, #1
 8001c52:	fa02 f303 	lsl.w	r3, r2, r3
 8001c56:	69ba      	ldr	r2, [r7, #24]
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c68:	2201      	movs	r2, #1
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	43db      	mvns	r3, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4013      	ands	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	091b      	lsrs	r3, r3, #4
 8001c7e:	f003 0201 	and.w	r2, r3, #1
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	fa02 f303 	lsl.w	r3, r2, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	f003 0303 	and.w	r3, r3, #3
 8001c9c:	2b03      	cmp	r3, #3
 8001c9e:	d017      	beq.n	8001cd0 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	005b      	lsls	r3, r3, #1
 8001caa:	2203      	movs	r2, #3
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	689a      	ldr	r2, [r3, #8]
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	69ba      	ldr	r2, [r7, #24]
 8001cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0303 	and.w	r3, r3, #3
 8001cd8:	2b02      	cmp	r3, #2
 8001cda:	d123      	bne.n	8001d24 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	08da      	lsrs	r2, r3, #3
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3208      	adds	r2, #8
 8001ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	220f      	movs	r2, #15
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	691a      	ldr	r2, [r3, #16]
 8001d04:	69fb      	ldr	r3, [r7, #28]
 8001d06:	f003 0307 	and.w	r3, r3, #7
 8001d0a:	009b      	lsls	r3, r3, #2
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001d16:	69fb      	ldr	r3, [r7, #28]
 8001d18:	08da      	lsrs	r2, r3, #3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	3208      	adds	r2, #8
 8001d1e:	69b9      	ldr	r1, [r7, #24]
 8001d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	005b      	lsls	r3, r3, #1
 8001d2e:	2203      	movs	r2, #3
 8001d30:	fa02 f303 	lsl.w	r3, r2, r3
 8001d34:	43db      	mvns	r3, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	f003 0203 	and.w	r2, r3, #3
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f000 80be 	beq.w	8001ee2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d66:	4b66      	ldr	r3, [pc, #408]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6a:	4a65      	ldr	r2, [pc, #404]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d70:	6453      	str	r3, [r2, #68]	; 0x44
 8001d72:	4b63      	ldr	r3, [pc, #396]	; (8001f00 <HAL_GPIO_Init+0x324>)
 8001d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d7e:	4a61      	ldr	r2, [pc, #388]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	089b      	lsrs	r3, r3, #2
 8001d84:	3302      	adds	r3, #2
 8001d86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	220f      	movs	r2, #15
 8001d96:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9a:	43db      	mvns	r3, r3
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	4013      	ands	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <HAL_GPIO_Init+0x32c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d037      	beq.n	8001e1a <HAL_GPIO_Init+0x23e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a57      	ldr	r2, [pc, #348]	; (8001f0c <HAL_GPIO_Init+0x330>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d031      	beq.n	8001e16 <HAL_GPIO_Init+0x23a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a56      	ldr	r2, [pc, #344]	; (8001f10 <HAL_GPIO_Init+0x334>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d02b      	beq.n	8001e12 <HAL_GPIO_Init+0x236>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a55      	ldr	r2, [pc, #340]	; (8001f14 <HAL_GPIO_Init+0x338>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d025      	beq.n	8001e0e <HAL_GPIO_Init+0x232>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a54      	ldr	r2, [pc, #336]	; (8001f18 <HAL_GPIO_Init+0x33c>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d01f      	beq.n	8001e0a <HAL_GPIO_Init+0x22e>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a53      	ldr	r2, [pc, #332]	; (8001f1c <HAL_GPIO_Init+0x340>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d019      	beq.n	8001e06 <HAL_GPIO_Init+0x22a>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a52      	ldr	r2, [pc, #328]	; (8001f20 <HAL_GPIO_Init+0x344>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <HAL_GPIO_Init+0x226>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a51      	ldr	r2, [pc, #324]	; (8001f24 <HAL_GPIO_Init+0x348>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d00d      	beq.n	8001dfe <HAL_GPIO_Init+0x222>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a50      	ldr	r2, [pc, #320]	; (8001f28 <HAL_GPIO_Init+0x34c>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d007      	beq.n	8001dfa <HAL_GPIO_Init+0x21e>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	; (8001f2c <HAL_GPIO_Init+0x350>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d101      	bne.n	8001df6 <HAL_GPIO_Init+0x21a>
 8001df2:	2309      	movs	r3, #9
 8001df4:	e012      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001df6:	230a      	movs	r3, #10
 8001df8:	e010      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfa:	2308      	movs	r3, #8
 8001dfc:	e00e      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001dfe:	2307      	movs	r3, #7
 8001e00:	e00c      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e02:	2306      	movs	r3, #6
 8001e04:	e00a      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e06:	2305      	movs	r3, #5
 8001e08:	e008      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0a:	2304      	movs	r3, #4
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e0e:	2303      	movs	r3, #3
 8001e10:	e004      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e12:	2302      	movs	r3, #2
 8001e14:	e002      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e16:	2301      	movs	r3, #1
 8001e18:	e000      	b.n	8001e1c <HAL_GPIO_Init+0x240>
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	69fa      	ldr	r2, [r7, #28]
 8001e1e:	f002 0203 	and.w	r2, r2, #3
 8001e22:	0092      	lsls	r2, r2, #2
 8001e24:	4093      	lsls	r3, r2
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001e2c:	4935      	ldr	r1, [pc, #212]	; (8001f04 <HAL_GPIO_Init+0x328>)
 8001e2e:	69fb      	ldr	r3, [r7, #28]
 8001e30:	089b      	lsrs	r3, r3, #2
 8001e32:	3302      	adds	r3, #2
 8001e34:	69ba      	ldr	r2, [r7, #24]
 8001e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e3a:	4b3d      	ldr	r3, [pc, #244]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e5e:	4a34      	ldr	r2, [pc, #208]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e64:	4b32      	ldr	r3, [pc, #200]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e88:	4a29      	ldr	r2, [pc, #164]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e8e:	4b28      	ldr	r3, [pc, #160]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d003      	beq.n	8001eb2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001eaa:	69ba      	ldr	r2, [r7, #24]
 8001eac:	693b      	ldr	r3, [r7, #16]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb2:	4a1f      	ldr	r2, [pc, #124]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001eb4:	69bb      	ldr	r3, [r7, #24]
 8001eb6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ebe:	693b      	ldr	r3, [r7, #16]
 8001ec0:	43db      	mvns	r3, r3
 8001ec2:	69ba      	ldr	r2, [r7, #24]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d003      	beq.n	8001edc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001edc:	4a14      	ldr	r2, [pc, #80]	; (8001f30 <HAL_GPIO_Init+0x354>)
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3301      	adds	r3, #1
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	69fb      	ldr	r3, [r7, #28]
 8001eea:	2b0f      	cmp	r3, #15
 8001eec:	f67f ae86 	bls.w	8001bfc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001ef0:	bf00      	nop
 8001ef2:	bf00      	nop
 8001ef4:	3724      	adds	r7, #36	; 0x24
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40013800 	.word	0x40013800
 8001f08:	40020000 	.word	0x40020000
 8001f0c:	40020400 	.word	0x40020400
 8001f10:	40020800 	.word	0x40020800
 8001f14:	40020c00 	.word	0x40020c00
 8001f18:	40021000 	.word	0x40021000
 8001f1c:	40021400 	.word	0x40021400
 8001f20:	40021800 	.word	0x40021800
 8001f24:	40021c00 	.word	0x40021c00
 8001f28:	40022000 	.word	0x40022000
 8001f2c:	40022400 	.word	0x40022400
 8001f30:	40013c00 	.word	0x40013c00

08001f34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	807b      	strh	r3, [r7, #2]
 8001f40:	4613      	mov	r3, r2
 8001f42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f44:	787b      	ldrb	r3, [r7, #1]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f4a:	887a      	ldrh	r2, [r7, #2]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001f50:	e003      	b.n	8001f5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001f52:	887b      	ldrh	r3, [r7, #2]
 8001f54:	041a      	lsls	r2, r3, #16
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	619a      	str	r2, [r3, #24]
}
 8001f5a:	bf00      	nop
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr

08001f66 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f66:	b480      	push	{r7}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	6078      	str	r0, [r7, #4]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f78:	887a      	ldrh	r2, [r7, #2]
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	041a      	lsls	r2, r3, #16
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	43d9      	mvns	r1, r3
 8001f84:	887b      	ldrh	r3, [r7, #2]
 8001f86:	400b      	ands	r3, r1
 8001f88:	431a      	orrs	r2, r3
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	619a      	str	r2, [r3, #24]
}
 8001f8e:	bf00      	nop
 8001f90:	3714      	adds	r7, #20
 8001f92:	46bd      	mov	sp, r7
 8001f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f98:	4770      	bx	lr

08001f9a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f9a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f9c:	b08f      	sub	sp, #60	; 0x3c
 8001f9e:	af0a      	add	r7, sp, #40	; 0x28
 8001fa0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d101      	bne.n	8001fac <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e116      	b.n	80021da <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff f802 	bl	8000fd0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2203      	movs	r2, #3
 8001fd0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d102      	bne.n	8001fe6 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 fc40 	bl	8004870 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	603b      	str	r3, [r7, #0]
 8001ff6:	687e      	ldr	r6, [r7, #4]
 8001ff8:	466d      	mov	r5, sp
 8001ffa:	f106 0410 	add.w	r4, r6, #16
 8001ffe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002000:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002002:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002004:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002006:	e894 0003 	ldmia.w	r4, {r0, r1}
 800200a:	e885 0003 	stmia.w	r5, {r0, r1}
 800200e:	1d33      	adds	r3, r6, #4
 8002010:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002012:	6838      	ldr	r0, [r7, #0]
 8002014:	f002 fbd4 	bl	80047c0 <USB_CoreInit>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d005      	beq.n	800202a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2202      	movs	r2, #2
 8002022:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e0d7      	b.n	80021da <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2100      	movs	r1, #0
 8002030:	4618      	mov	r0, r3
 8002032:	f002 fc2e 	bl	8004892 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	2300      	movs	r3, #0
 8002038:	73fb      	strb	r3, [r7, #15]
 800203a:	e04a      	b.n	80020d2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	333d      	adds	r3, #61	; 0x3d
 800204c:	2201      	movs	r2, #1
 800204e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	333c      	adds	r3, #60	; 0x3c
 8002060:	7bfa      	ldrb	r2, [r7, #15]
 8002062:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	7bfb      	ldrb	r3, [r7, #15]
 8002068:	b298      	uxth	r0, r3
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	4413      	add	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	3344      	adds	r3, #68	; 0x44
 8002078:	4602      	mov	r2, r0
 800207a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800207c:	7bfa      	ldrb	r2, [r7, #15]
 800207e:	6879      	ldr	r1, [r7, #4]
 8002080:	4613      	mov	r3, r2
 8002082:	00db      	lsls	r3, r3, #3
 8002084:	4413      	add	r3, r2
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	440b      	add	r3, r1
 800208a:	3340      	adds	r3, #64	; 0x40
 800208c:	2200      	movs	r2, #0
 800208e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002090:	7bfa      	ldrb	r2, [r7, #15]
 8002092:	6879      	ldr	r1, [r7, #4]
 8002094:	4613      	mov	r3, r2
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4413      	add	r3, r2
 800209a:	009b      	lsls	r3, r3, #2
 800209c:	440b      	add	r3, r1
 800209e:	3348      	adds	r3, #72	; 0x48
 80020a0:	2200      	movs	r2, #0
 80020a2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	334c      	adds	r3, #76	; 0x4c
 80020b4:	2200      	movs	r2, #0
 80020b6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80020b8:	7bfa      	ldrb	r2, [r7, #15]
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	4413      	add	r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3354      	adds	r3, #84	; 0x54
 80020c8:	2200      	movs	r2, #0
 80020ca:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020cc:	7bfb      	ldrb	r3, [r7, #15]
 80020ce:	3301      	adds	r3, #1
 80020d0:	73fb      	strb	r3, [r7, #15]
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	429a      	cmp	r2, r3
 80020da:	d3af      	bcc.n	800203c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020dc:	2300      	movs	r3, #0
 80020de:	73fb      	strb	r3, [r7, #15]
 80020e0:	e044      	b.n	800216c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020e2:	7bfa      	ldrb	r2, [r7, #15]
 80020e4:	6879      	ldr	r1, [r7, #4]
 80020e6:	4613      	mov	r3, r2
 80020e8:	00db      	lsls	r3, r3, #3
 80020ea:	4413      	add	r3, r2
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	440b      	add	r3, r1
 80020f0:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020f4:	2200      	movs	r2, #0
 80020f6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020f8:	7bfa      	ldrb	r2, [r7, #15]
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	4613      	mov	r3, r2
 80020fe:	00db      	lsls	r3, r3, #3
 8002100:	4413      	add	r3, r2
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	440b      	add	r3, r1
 8002106:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800210a:	7bfa      	ldrb	r2, [r7, #15]
 800210c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800210e:	7bfa      	ldrb	r2, [r7, #15]
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	440b      	add	r3, r1
 800211c:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002120:	2200      	movs	r2, #0
 8002122:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002124:	7bfa      	ldrb	r2, [r7, #15]
 8002126:	6879      	ldr	r1, [r7, #4]
 8002128:	4613      	mov	r3, r2
 800212a:	00db      	lsls	r3, r3, #3
 800212c:	4413      	add	r3, r2
 800212e:	009b      	lsls	r3, r3, #2
 8002130:	440b      	add	r3, r1
 8002132:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002136:	2200      	movs	r2, #0
 8002138:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800213a:	7bfa      	ldrb	r2, [r7, #15]
 800213c:	6879      	ldr	r1, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	00db      	lsls	r3, r3, #3
 8002142:	4413      	add	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	440b      	add	r3, r1
 8002148:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800214c:	2200      	movs	r2, #0
 800214e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002150:	7bfa      	ldrb	r2, [r7, #15]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4413      	add	r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	3301      	adds	r3, #1
 800216a:	73fb      	strb	r3, [r7, #15]
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	429a      	cmp	r2, r3
 8002174:	d3b5      	bcc.n	80020e2 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	603b      	str	r3, [r7, #0]
 800217c:	687e      	ldr	r6, [r7, #4]
 800217e:	466d      	mov	r5, sp
 8002180:	f106 0410 	add.w	r4, r6, #16
 8002184:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002186:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002188:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800218a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800218c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002190:	e885 0003 	stmia.w	r5, {r0, r1}
 8002194:	1d33      	adds	r3, r6, #4
 8002196:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002198:	6838      	ldr	r0, [r7, #0]
 800219a:	f002 fbc7 	bl	800492c <USB_DevInit>
 800219e:	4603      	mov	r3, r0
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d005      	beq.n	80021b0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2202      	movs	r2, #2
 80021a8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	e014      	b.n	80021da <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2201      	movs	r2, #1
 80021bc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c4:	2b01      	cmp	r3, #1
 80021c6:	d102      	bne.n	80021ce <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80021c8:	6878      	ldr	r0, [r7, #4]
 80021ca:	f000 f80b 	bl	80021e4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4618      	mov	r0, r3
 80021d4:	f002 fd85 	bl	8004ce2 <USB_DevDisconnect>

  return HAL_OK;
 80021d8:	2300      	movs	r3, #0
}
 80021da:	4618      	mov	r0, r3
 80021dc:	3714      	adds	r7, #20
 80021de:	46bd      	mov	sp, r7
 80021e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021e4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2201      	movs	r2, #1
 80021f6:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2200      	movs	r2, #0
 80021fe:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	699b      	ldr	r3, [r3, #24]
 8002206:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002212:	4b05      	ldr	r3, [pc, #20]	; (8002228 <HAL_PCDEx_ActivateLPM+0x44>)
 8002214:	4313      	orrs	r3, r2
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3714      	adds	r7, #20
 8002220:	46bd      	mov	sp, r7
 8002222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002226:	4770      	bx	lr
 8002228:	10000003 	.word	0x10000003

0800222c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4b05      	ldr	r3, [pc, #20]	; (8002248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a04      	ldr	r2, [pc, #16]	; (8002248 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40007000 	.word	0x40007000

0800224c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b086      	sub	sp, #24
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002254:	2300      	movs	r3, #0
 8002256:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e29b      	b.n	800279a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8087 	beq.w	800237e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002270:	4b96      	ldr	r3, [pc, #600]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	f003 030c 	and.w	r3, r3, #12
 8002278:	2b04      	cmp	r3, #4
 800227a:	d00c      	beq.n	8002296 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227c:	4b93      	ldr	r3, [pc, #588]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800227e:	689b      	ldr	r3, [r3, #8]
 8002280:	f003 030c 	and.w	r3, r3, #12
 8002284:	2b08      	cmp	r3, #8
 8002286:	d112      	bne.n	80022ae <HAL_RCC_OscConfig+0x62>
 8002288:	4b90      	ldr	r3, [pc, #576]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800228a:	685b      	ldr	r3, [r3, #4]
 800228c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002290:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002294:	d10b      	bne.n	80022ae <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002296:	4b8d      	ldr	r3, [pc, #564]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d06c      	beq.n	800237c <HAL_RCC_OscConfig+0x130>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d168      	bne.n	800237c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e275      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b6:	d106      	bne.n	80022c6 <HAL_RCC_OscConfig+0x7a>
 80022b8:	4b84      	ldr	r3, [pc, #528]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a83      	ldr	r2, [pc, #524]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c2:	6013      	str	r3, [r2, #0]
 80022c4:	e02e      	b.n	8002324 <HAL_RCC_OscConfig+0xd8>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x9c>
 80022ce:	4b7f      	ldr	r3, [pc, #508]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a7e      	ldr	r2, [pc, #504]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022d4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b7c      	ldr	r3, [pc, #496]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a7b      	ldr	r2, [pc, #492]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e01d      	b.n	8002324 <HAL_RCC_OscConfig+0xd8>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	685b      	ldr	r3, [r3, #4]
 80022ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022f0:	d10c      	bne.n	800230c <HAL_RCC_OscConfig+0xc0>
 80022f2:	4b76      	ldr	r3, [pc, #472]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a75      	ldr	r2, [pc, #468]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80022f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022fc:	6013      	str	r3, [r2, #0]
 80022fe:	4b73      	ldr	r3, [pc, #460]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a72      	ldr	r2, [pc, #456]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002304:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002308:	6013      	str	r3, [r2, #0]
 800230a:	e00b      	b.n	8002324 <HAL_RCC_OscConfig+0xd8>
 800230c:	4b6f      	ldr	r3, [pc, #444]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a6e      	ldr	r2, [pc, #440]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002312:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002316:	6013      	str	r3, [r2, #0]
 8002318:	4b6c      	ldr	r3, [pc, #432]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a6b      	ldr	r2, [pc, #428]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800231e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002322:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d013      	beq.n	8002354 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800232c:	f7fe ff44 	bl	80011b8 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002332:	e008      	b.n	8002346 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002334:	f7fe ff40 	bl	80011b8 <HAL_GetTick>
 8002338:	4602      	mov	r2, r0
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	1ad3      	subs	r3, r2, r3
 800233e:	2b64      	cmp	r3, #100	; 0x64
 8002340:	d901      	bls.n	8002346 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002342:	2303      	movs	r3, #3
 8002344:	e229      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002346:	4b61      	ldr	r3, [pc, #388]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d0f0      	beq.n	8002334 <HAL_RCC_OscConfig+0xe8>
 8002352:	e014      	b.n	800237e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002354:	f7fe ff30 	bl	80011b8 <HAL_GetTick>
 8002358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800235a:	e008      	b.n	800236e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800235c:	f7fe ff2c 	bl	80011b8 <HAL_GetTick>
 8002360:	4602      	mov	r2, r0
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	1ad3      	subs	r3, r2, r3
 8002366:	2b64      	cmp	r3, #100	; 0x64
 8002368:	d901      	bls.n	800236e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e215      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800236e:	4b57      	ldr	r3, [pc, #348]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002376:	2b00      	cmp	r3, #0
 8002378:	d1f0      	bne.n	800235c <HAL_RCC_OscConfig+0x110>
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800237c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d069      	beq.n	800245e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800238a:	4b50      	ldr	r3, [pc, #320]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	f003 030c 	and.w	r3, r3, #12
 8002392:	2b00      	cmp	r3, #0
 8002394:	d00b      	beq.n	80023ae <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002396:	4b4d      	ldr	r3, [pc, #308]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002398:	689b      	ldr	r3, [r3, #8]
 800239a:	f003 030c 	and.w	r3, r3, #12
 800239e:	2b08      	cmp	r3, #8
 80023a0:	d11c      	bne.n	80023dc <HAL_RCC_OscConfig+0x190>
 80023a2:	4b4a      	ldr	r3, [pc, #296]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023a4:	685b      	ldr	r3, [r3, #4]
 80023a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d116      	bne.n	80023dc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	4b47      	ldr	r3, [pc, #284]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0302 	and.w	r3, r3, #2
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d005      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17a>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	68db      	ldr	r3, [r3, #12]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d001      	beq.n	80023c6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	e1e9      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023c6:	4b41      	ldr	r3, [pc, #260]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	691b      	ldr	r3, [r3, #16]
 80023d2:	00db      	lsls	r3, r3, #3
 80023d4:	493d      	ldr	r1, [pc, #244]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023da:	e040      	b.n	800245e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	68db      	ldr	r3, [r3, #12]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d023      	beq.n	800242c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023e4:	4b39      	ldr	r3, [pc, #228]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a38      	ldr	r2, [pc, #224]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80023ea:	f043 0301 	orr.w	r3, r3, #1
 80023ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023f0:	f7fe fee2 	bl	80011b8 <HAL_GetTick>
 80023f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f6:	e008      	b.n	800240a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023f8:	f7fe fede 	bl	80011b8 <HAL_GetTick>
 80023fc:	4602      	mov	r2, r0
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	1ad3      	subs	r3, r2, r3
 8002402:	2b02      	cmp	r3, #2
 8002404:	d901      	bls.n	800240a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002406:	2303      	movs	r3, #3
 8002408:	e1c7      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800240a:	4b30      	ldr	r3, [pc, #192]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0f0      	beq.n	80023f8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002416:	4b2d      	ldr	r3, [pc, #180]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691b      	ldr	r3, [r3, #16]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	4929      	ldr	r1, [pc, #164]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002426:	4313      	orrs	r3, r2
 8002428:	600b      	str	r3, [r1, #0]
 800242a:	e018      	b.n	800245e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800242c:	4b27      	ldr	r3, [pc, #156]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a26      	ldr	r2, [pc, #152]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002438:	f7fe febe 	bl	80011b8 <HAL_GetTick>
 800243c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002440:	f7fe feba 	bl	80011b8 <HAL_GetTick>
 8002444:	4602      	mov	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e1a3      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002452:	4b1e      	ldr	r3, [pc, #120]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f0      	bne.n	8002440 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	2b00      	cmp	r3, #0
 8002468:	d038      	beq.n	80024dc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	695b      	ldr	r3, [r3, #20]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d019      	beq.n	80024a6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002472:	4b16      	ldr	r3, [pc, #88]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002474:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002476:	4a15      	ldr	r2, [pc, #84]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800247e:	f7fe fe9b 	bl	80011b8 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002486:	f7fe fe97 	bl	80011b8 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e180      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002498:	4b0c      	ldr	r3, [pc, #48]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 800249a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800249c:	f003 0302 	and.w	r3, r3, #2
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x23a>
 80024a4:	e01a      	b.n	80024dc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024a6:	4b09      	ldr	r3, [pc, #36]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80024a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024aa:	4a08      	ldr	r2, [pc, #32]	; (80024cc <HAL_RCC_OscConfig+0x280>)
 80024ac:	f023 0301 	bic.w	r3, r3, #1
 80024b0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024b2:	f7fe fe81 	bl	80011b8 <HAL_GetTick>
 80024b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024b8:	e00a      	b.n	80024d0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024ba:	f7fe fe7d 	bl	80011b8 <HAL_GetTick>
 80024be:	4602      	mov	r2, r0
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	1ad3      	subs	r3, r2, r3
 80024c4:	2b02      	cmp	r3, #2
 80024c6:	d903      	bls.n	80024d0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80024c8:	2303      	movs	r3, #3
 80024ca:	e166      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
 80024cc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024d0:	4b92      	ldr	r3, [pc, #584]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024d4:	f003 0302 	and.w	r3, r3, #2
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ee      	bne.n	80024ba <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f003 0304 	and.w	r3, r3, #4
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	f000 80a4 	beq.w	8002632 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ea:	4b8c      	ldr	r3, [pc, #560]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80024ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10d      	bne.n	8002512 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80024f6:	4b89      	ldr	r3, [pc, #548]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80024f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fa:	4a88      	ldr	r2, [pc, #544]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80024fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002500:	6413      	str	r3, [r2, #64]	; 0x40
 8002502:	4b86      	ldr	r3, [pc, #536]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800250e:	2301      	movs	r3, #1
 8002510:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002512:	4b83      	ldr	r3, [pc, #524]	; (8002720 <HAL_RCC_OscConfig+0x4d4>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800251a:	2b00      	cmp	r3, #0
 800251c:	d118      	bne.n	8002550 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800251e:	4b80      	ldr	r3, [pc, #512]	; (8002720 <HAL_RCC_OscConfig+0x4d4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a7f      	ldr	r2, [pc, #508]	; (8002720 <HAL_RCC_OscConfig+0x4d4>)
 8002524:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002528:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800252a:	f7fe fe45 	bl	80011b8 <HAL_GetTick>
 800252e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002530:	e008      	b.n	8002544 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002532:	f7fe fe41 	bl	80011b8 <HAL_GetTick>
 8002536:	4602      	mov	r2, r0
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	1ad3      	subs	r3, r2, r3
 800253c:	2b64      	cmp	r3, #100	; 0x64
 800253e:	d901      	bls.n	8002544 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002540:	2303      	movs	r3, #3
 8002542:	e12a      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002544:	4b76      	ldr	r3, [pc, #472]	; (8002720 <HAL_RCC_OscConfig+0x4d4>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0f0      	beq.n	8002532 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x31a>
 8002558:	4b70      	ldr	r3, [pc, #448]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	4a6f      	ldr	r2, [pc, #444]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800255e:	f043 0301 	orr.w	r3, r3, #1
 8002562:	6713      	str	r3, [r2, #112]	; 0x70
 8002564:	e02d      	b.n	80025c2 <HAL_RCC_OscConfig+0x376>
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10c      	bne.n	8002588 <HAL_RCC_OscConfig+0x33c>
 800256e:	4b6b      	ldr	r3, [pc, #428]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002572:	4a6a      	ldr	r2, [pc, #424]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002574:	f023 0301 	bic.w	r3, r3, #1
 8002578:	6713      	str	r3, [r2, #112]	; 0x70
 800257a:	4b68      	ldr	r3, [pc, #416]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800257c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800257e:	4a67      	ldr	r2, [pc, #412]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002580:	f023 0304 	bic.w	r3, r3, #4
 8002584:	6713      	str	r3, [r2, #112]	; 0x70
 8002586:	e01c      	b.n	80025c2 <HAL_RCC_OscConfig+0x376>
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	2b05      	cmp	r3, #5
 800258e:	d10c      	bne.n	80025aa <HAL_RCC_OscConfig+0x35e>
 8002590:	4b62      	ldr	r3, [pc, #392]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002594:	4a61      	ldr	r2, [pc, #388]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002596:	f043 0304 	orr.w	r3, r3, #4
 800259a:	6713      	str	r3, [r2, #112]	; 0x70
 800259c:	4b5f      	ldr	r3, [pc, #380]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800259e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a0:	4a5e      	ldr	r2, [pc, #376]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	6713      	str	r3, [r2, #112]	; 0x70
 80025a8:	e00b      	b.n	80025c2 <HAL_RCC_OscConfig+0x376>
 80025aa:	4b5c      	ldr	r3, [pc, #368]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ae:	4a5b      	ldr	r2, [pc, #364]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025b0:	f023 0301 	bic.w	r3, r3, #1
 80025b4:	6713      	str	r3, [r2, #112]	; 0x70
 80025b6:	4b59      	ldr	r3, [pc, #356]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ba:	4a58      	ldr	r2, [pc, #352]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	f023 0304 	bic.w	r3, r3, #4
 80025c0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d015      	beq.n	80025f6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025ca:	f7fe fdf5 	bl	80011b8 <HAL_GetTick>
 80025ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025d0:	e00a      	b.n	80025e8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025d2:	f7fe fdf1 	bl	80011b8 <HAL_GetTick>
 80025d6:	4602      	mov	r2, r0
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	1ad3      	subs	r3, r2, r3
 80025dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d901      	bls.n	80025e8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80025e4:	2303      	movs	r3, #3
 80025e6:	e0d8      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e8:	4b4c      	ldr	r3, [pc, #304]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	f003 0302 	and.w	r3, r3, #2
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d0ee      	beq.n	80025d2 <HAL_RCC_OscConfig+0x386>
 80025f4:	e014      	b.n	8002620 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f6:	f7fe fddf 	bl	80011b8 <HAL_GetTick>
 80025fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025fc:	e00a      	b.n	8002614 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025fe:	f7fe fddb 	bl	80011b8 <HAL_GetTick>
 8002602:	4602      	mov	r2, r0
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	1ad3      	subs	r3, r2, r3
 8002608:	f241 3288 	movw	r2, #5000	; 0x1388
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0c2      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002614:	4b41      	ldr	r3, [pc, #260]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1ee      	bne.n	80025fe <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002620:	7dfb      	ldrb	r3, [r7, #23]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d105      	bne.n	8002632 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002626:	4b3d      	ldr	r3, [pc, #244]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	4a3c      	ldr	r2, [pc, #240]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800262c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002630:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699b      	ldr	r3, [r3, #24]
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80ae 	beq.w	8002798 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800263c:	4b37      	ldr	r3, [pc, #220]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 800263e:	689b      	ldr	r3, [r3, #8]
 8002640:	f003 030c 	and.w	r3, r3, #12
 8002644:	2b08      	cmp	r3, #8
 8002646:	d06d      	beq.n	8002724 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	699b      	ldr	r3, [r3, #24]
 800264c:	2b02      	cmp	r3, #2
 800264e:	d14b      	bne.n	80026e8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002650:	4b32      	ldr	r3, [pc, #200]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a31      	ldr	r2, [pc, #196]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002656:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fdac 	bl	80011b8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002664:	f7fe fda8 	bl	80011b8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e091      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002676:	4b29      	ldr	r3, [pc, #164]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800267e:	2b00      	cmp	r3, #0
 8002680:	d1f0      	bne.n	8002664 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	69da      	ldr	r2, [r3, #28]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6a1b      	ldr	r3, [r3, #32]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002690:	019b      	lsls	r3, r3, #6
 8002692:	431a      	orrs	r2, r3
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	085b      	lsrs	r3, r3, #1
 800269a:	3b01      	subs	r3, #1
 800269c:	041b      	lsls	r3, r3, #16
 800269e:	431a      	orrs	r2, r3
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a4:	061b      	lsls	r3, r3, #24
 80026a6:	431a      	orrs	r2, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ac:	071b      	lsls	r3, r3, #28
 80026ae:	491b      	ldr	r1, [pc, #108]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026b0:	4313      	orrs	r3, r2
 80026b2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026b4:	4b19      	ldr	r3, [pc, #100]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c0:	f7fe fd7a 	bl	80011b8 <HAL_GetTick>
 80026c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026c6:	e008      	b.n	80026da <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c8:	f7fe fd76 	bl	80011b8 <HAL_GetTick>
 80026cc:	4602      	mov	r2, r0
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e05f      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026da:	4b10      	ldr	r3, [pc, #64]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d0f0      	beq.n	80026c8 <HAL_RCC_OscConfig+0x47c>
 80026e6:	e057      	b.n	8002798 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026e8:	4b0c      	ldr	r3, [pc, #48]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a0b      	ldr	r2, [pc, #44]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 80026ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026f2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f7fe fd60 	bl	80011b8 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026fc:	f7fe fd5c 	bl	80011b8 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e045      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800270e:	4b03      	ldr	r3, [pc, #12]	; (800271c <HAL_RCC_OscConfig+0x4d0>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d1f0      	bne.n	80026fc <HAL_RCC_OscConfig+0x4b0>
 800271a:	e03d      	b.n	8002798 <HAL_RCC_OscConfig+0x54c>
 800271c:	40023800 	.word	0x40023800
 8002720:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002724:	4b1f      	ldr	r3, [pc, #124]	; (80027a4 <HAL_RCC_OscConfig+0x558>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699b      	ldr	r3, [r3, #24]
 800272e:	2b01      	cmp	r3, #1
 8002730:	d030      	beq.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800273c:	429a      	cmp	r2, r3
 800273e:	d129      	bne.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800274a:	429a      	cmp	r2, r3
 800274c:	d122      	bne.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002754:	4013      	ands	r3, r2
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800275a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800275c:	4293      	cmp	r3, r2
 800275e:	d119      	bne.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	085b      	lsrs	r3, r3, #1
 800276c:	3b01      	subs	r3, #1
 800276e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002770:	429a      	cmp	r2, r3
 8002772:	d10f      	bne.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d107      	bne.n	8002794 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002790:	429a      	cmp	r2, r3
 8002792:	d001      	beq.n	8002798 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e000      	b.n	800279a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3718      	adds	r7, #24
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	40023800 	.word	0x40023800

080027a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d101      	bne.n	80027c0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0d0      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80027c0:	4b6a      	ldr	r3, [pc, #424]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f003 030f 	and.w	r3, r3, #15
 80027c8:	683a      	ldr	r2, [r7, #0]
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d910      	bls.n	80027f0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027ce:	4b67      	ldr	r3, [pc, #412]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f023 020f 	bic.w	r2, r3, #15
 80027d6:	4965      	ldr	r1, [pc, #404]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	4313      	orrs	r3, r2
 80027dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80027de:	4b63      	ldr	r3, [pc, #396]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 030f 	and.w	r3, r3, #15
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d001      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0b8      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0302 	and.w	r3, r3, #2
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d020      	beq.n	800283e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 0304 	and.w	r3, r3, #4
 8002804:	2b00      	cmp	r3, #0
 8002806:	d005      	beq.n	8002814 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002808:	4b59      	ldr	r3, [pc, #356]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	4a58      	ldr	r2, [pc, #352]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800280e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002812:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0308 	and.w	r3, r3, #8
 800281c:	2b00      	cmp	r3, #0
 800281e:	d005      	beq.n	800282c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002822:	689b      	ldr	r3, [r3, #8]
 8002824:	4a52      	ldr	r2, [pc, #328]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002826:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800282a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800282c:	4b50      	ldr	r3, [pc, #320]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	494d      	ldr	r1, [pc, #308]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0301 	and.w	r3, r3, #1
 8002846:	2b00      	cmp	r3, #0
 8002848:	d040      	beq.n	80028cc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d107      	bne.n	8002862 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002852:	4b47      	ldr	r3, [pc, #284]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d115      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e07f      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	685b      	ldr	r3, [r3, #4]
 8002866:	2b02      	cmp	r3, #2
 8002868:	d107      	bne.n	800287a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800286a:	4b41      	ldr	r3, [pc, #260]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d109      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e073      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800287a:	4b3d      	ldr	r3, [pc, #244]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e06b      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800288a:	4b39      	ldr	r3, [pc, #228]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f023 0203 	bic.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
 8002896:	4936      	ldr	r1, [pc, #216]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002898:	4313      	orrs	r3, r2
 800289a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800289c:	f7fe fc8c 	bl	80011b8 <HAL_GetTick>
 80028a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028a2:	e00a      	b.n	80028ba <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028a4:	f7fe fc88 	bl	80011b8 <HAL_GetTick>
 80028a8:	4602      	mov	r2, r0
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e053      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ba:	4b2d      	ldr	r3, [pc, #180]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f003 020c 	and.w	r2, r3, #12
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	429a      	cmp	r2, r3
 80028ca:	d1eb      	bne.n	80028a4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 030f 	and.w	r3, r3, #15
 80028d4:	683a      	ldr	r2, [r7, #0]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d210      	bcs.n	80028fc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028da:	4b24      	ldr	r3, [pc, #144]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f023 020f 	bic.w	r2, r3, #15
 80028e2:	4922      	ldr	r1, [pc, #136]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ea:	4b20      	ldr	r3, [pc, #128]	; (800296c <HAL_RCC_ClockConfig+0x1c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	683a      	ldr	r2, [r7, #0]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d001      	beq.n	80028fc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e032      	b.n	8002962 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0304 	and.w	r3, r3, #4
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002908:	4b19      	ldr	r3, [pc, #100]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	4916      	ldr	r1, [pc, #88]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002916:	4313      	orrs	r3, r2
 8002918:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0308 	and.w	r3, r3, #8
 8002922:	2b00      	cmp	r3, #0
 8002924:	d009      	beq.n	800293a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002926:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002928:	689b      	ldr	r3, [r3, #8]
 800292a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	691b      	ldr	r3, [r3, #16]
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	490e      	ldr	r1, [pc, #56]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002936:	4313      	orrs	r3, r2
 8002938:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800293a:	f000 f821 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800293e:	4602      	mov	r2, r0
 8002940:	4b0b      	ldr	r3, [pc, #44]	; (8002970 <HAL_RCC_ClockConfig+0x1c8>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	091b      	lsrs	r3, r3, #4
 8002946:	f003 030f 	and.w	r3, r3, #15
 800294a:	490a      	ldr	r1, [pc, #40]	; (8002974 <HAL_RCC_ClockConfig+0x1cc>)
 800294c:	5ccb      	ldrb	r3, [r1, r3]
 800294e:	fa22 f303 	lsr.w	r3, r2, r3
 8002952:	4a09      	ldr	r2, [pc, #36]	; (8002978 <HAL_RCC_ClockConfig+0x1d0>)
 8002954:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002956:	4b09      	ldr	r3, [pc, #36]	; (800297c <HAL_RCC_ClockConfig+0x1d4>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4618      	mov	r0, r3
 800295c:	f7fe fbe8 	bl	8001130 <HAL_InitTick>

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3710      	adds	r7, #16
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023c00 	.word	0x40023c00
 8002970:	40023800 	.word	0x40023800
 8002974:	08005738 	.word	0x08005738
 8002978:	20000000 	.word	0x20000000
 800297c:	20000004 	.word	0x20000004

08002980 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002980:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002984:	b094      	sub	sp, #80	; 0x50
 8002986:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002988:	2300      	movs	r3, #0
 800298a:	647b      	str	r3, [r7, #68]	; 0x44
 800298c:	2300      	movs	r3, #0
 800298e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002990:	2300      	movs	r3, #0
 8002992:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002994:	2300      	movs	r3, #0
 8002996:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002998:	4b79      	ldr	r3, [pc, #484]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 800299a:	689b      	ldr	r3, [r3, #8]
 800299c:	f003 030c 	and.w	r3, r3, #12
 80029a0:	2b08      	cmp	r3, #8
 80029a2:	d00d      	beq.n	80029c0 <HAL_RCC_GetSysClockFreq+0x40>
 80029a4:	2b08      	cmp	r3, #8
 80029a6:	f200 80e1 	bhi.w	8002b6c <HAL_RCC_GetSysClockFreq+0x1ec>
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d002      	beq.n	80029b4 <HAL_RCC_GetSysClockFreq+0x34>
 80029ae:	2b04      	cmp	r3, #4
 80029b0:	d003      	beq.n	80029ba <HAL_RCC_GetSysClockFreq+0x3a>
 80029b2:	e0db      	b.n	8002b6c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b73      	ldr	r3, [pc, #460]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x204>)
 80029b6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029b8:	e0db      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029ba:	4b73      	ldr	r3, [pc, #460]	; (8002b88 <HAL_RCC_GetSysClockFreq+0x208>)
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80029be:	e0d8      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029c0:	4b6f      	ldr	r3, [pc, #444]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80029c8:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80029ca:	4b6d      	ldr	r3, [pc, #436]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d063      	beq.n	8002a9e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029d6:	4b6a      	ldr	r3, [pc, #424]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	099b      	lsrs	r3, r3, #6
 80029dc:	2200      	movs	r2, #0
 80029de:	63bb      	str	r3, [r7, #56]	; 0x38
 80029e0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80029e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80029e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80029e8:	633b      	str	r3, [r7, #48]	; 0x30
 80029ea:	2300      	movs	r3, #0
 80029ec:	637b      	str	r3, [r7, #52]	; 0x34
 80029ee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80029f2:	4622      	mov	r2, r4
 80029f4:	462b      	mov	r3, r5
 80029f6:	f04f 0000 	mov.w	r0, #0
 80029fa:	f04f 0100 	mov.w	r1, #0
 80029fe:	0159      	lsls	r1, r3, #5
 8002a00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a04:	0150      	lsls	r0, r2, #5
 8002a06:	4602      	mov	r2, r0
 8002a08:	460b      	mov	r3, r1
 8002a0a:	4621      	mov	r1, r4
 8002a0c:	1a51      	subs	r1, r2, r1
 8002a0e:	6139      	str	r1, [r7, #16]
 8002a10:	4629      	mov	r1, r5
 8002a12:	eb63 0301 	sbc.w	r3, r3, r1
 8002a16:	617b      	str	r3, [r7, #20]
 8002a18:	f04f 0200 	mov.w	r2, #0
 8002a1c:	f04f 0300 	mov.w	r3, #0
 8002a20:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a24:	4659      	mov	r1, fp
 8002a26:	018b      	lsls	r3, r1, #6
 8002a28:	4651      	mov	r1, sl
 8002a2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a2e:	4651      	mov	r1, sl
 8002a30:	018a      	lsls	r2, r1, #6
 8002a32:	4651      	mov	r1, sl
 8002a34:	ebb2 0801 	subs.w	r8, r2, r1
 8002a38:	4659      	mov	r1, fp
 8002a3a:	eb63 0901 	sbc.w	r9, r3, r1
 8002a3e:	f04f 0200 	mov.w	r2, #0
 8002a42:	f04f 0300 	mov.w	r3, #0
 8002a46:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a4a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a4e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a52:	4690      	mov	r8, r2
 8002a54:	4699      	mov	r9, r3
 8002a56:	4623      	mov	r3, r4
 8002a58:	eb18 0303 	adds.w	r3, r8, r3
 8002a5c:	60bb      	str	r3, [r7, #8]
 8002a5e:	462b      	mov	r3, r5
 8002a60:	eb49 0303 	adc.w	r3, r9, r3
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	f04f 0200 	mov.w	r2, #0
 8002a6a:	f04f 0300 	mov.w	r3, #0
 8002a6e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002a72:	4629      	mov	r1, r5
 8002a74:	024b      	lsls	r3, r1, #9
 8002a76:	4621      	mov	r1, r4
 8002a78:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a7c:	4621      	mov	r1, r4
 8002a7e:	024a      	lsls	r2, r1, #9
 8002a80:	4610      	mov	r0, r2
 8002a82:	4619      	mov	r1, r3
 8002a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a86:	2200      	movs	r2, #0
 8002a88:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a8a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a8c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a90:	f7fd fc2e 	bl	80002f0 <__aeabi_uldivmod>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4613      	mov	r3, r2
 8002a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a9c:	e058      	b.n	8002b50 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a9e:	4b38      	ldr	r3, [pc, #224]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	099b      	lsrs	r3, r3, #6
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002aae:	623b      	str	r3, [r7, #32]
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002ab8:	4642      	mov	r2, r8
 8002aba:	464b      	mov	r3, r9
 8002abc:	f04f 0000 	mov.w	r0, #0
 8002ac0:	f04f 0100 	mov.w	r1, #0
 8002ac4:	0159      	lsls	r1, r3, #5
 8002ac6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002aca:	0150      	lsls	r0, r2, #5
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	ebb2 0a01 	subs.w	sl, r2, r1
 8002ad6:	4649      	mov	r1, r9
 8002ad8:	eb63 0b01 	sbc.w	fp, r3, r1
 8002adc:	f04f 0200 	mov.w	r2, #0
 8002ae0:	f04f 0300 	mov.w	r3, #0
 8002ae4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ae8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002aec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002af0:	ebb2 040a 	subs.w	r4, r2, sl
 8002af4:	eb63 050b 	sbc.w	r5, r3, fp
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	f04f 0300 	mov.w	r3, #0
 8002b00:	00eb      	lsls	r3, r5, #3
 8002b02:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b06:	00e2      	lsls	r2, r4, #3
 8002b08:	4614      	mov	r4, r2
 8002b0a:	461d      	mov	r5, r3
 8002b0c:	4643      	mov	r3, r8
 8002b0e:	18e3      	adds	r3, r4, r3
 8002b10:	603b      	str	r3, [r7, #0]
 8002b12:	464b      	mov	r3, r9
 8002b14:	eb45 0303 	adc.w	r3, r5, r3
 8002b18:	607b      	str	r3, [r7, #4]
 8002b1a:	f04f 0200 	mov.w	r2, #0
 8002b1e:	f04f 0300 	mov.w	r3, #0
 8002b22:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b26:	4629      	mov	r1, r5
 8002b28:	028b      	lsls	r3, r1, #10
 8002b2a:	4621      	mov	r1, r4
 8002b2c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b30:	4621      	mov	r1, r4
 8002b32:	028a      	lsls	r2, r1, #10
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	61bb      	str	r3, [r7, #24]
 8002b3e:	61fa      	str	r2, [r7, #28]
 8002b40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b44:	f7fd fbd4 	bl	80002f0 <__aeabi_uldivmod>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4613      	mov	r3, r2
 8002b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b50:	4b0b      	ldr	r3, [pc, #44]	; (8002b80 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	0c1b      	lsrs	r3, r3, #16
 8002b56:	f003 0303 	and.w	r3, r3, #3
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	005b      	lsls	r3, r3, #1
 8002b5e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002b60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002b62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002b64:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b6a:	e002      	b.n	8002b72 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b6c:	4b05      	ldr	r3, [pc, #20]	; (8002b84 <HAL_RCC_GetSysClockFreq+0x204>)
 8002b6e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002b70:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	3750      	adds	r7, #80	; 0x50
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	00f42400 	.word	0x00f42400
 8002b88:	007a1200 	.word	0x007a1200

08002b8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b90:	4b03      	ldr	r3, [pc, #12]	; (8002ba0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b92:	681b      	ldr	r3, [r3, #0]
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	20000000 	.word	0x20000000

08002ba4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ba8:	f7ff fff0 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bac:	4602      	mov	r2, r0
 8002bae:	4b05      	ldr	r3, [pc, #20]	; (8002bc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	0a9b      	lsrs	r3, r3, #10
 8002bb4:	f003 0307 	and.w	r3, r3, #7
 8002bb8:	4903      	ldr	r1, [pc, #12]	; (8002bc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002bba:	5ccb      	ldrb	r3, [r1, r3]
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	08005748 	.word	0x08005748

08002bcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002bd0:	f7ff ffdc 	bl	8002b8c <HAL_RCC_GetHCLKFreq>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	4b05      	ldr	r3, [pc, #20]	; (8002bec <HAL_RCC_GetPCLK2Freq+0x20>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	0b5b      	lsrs	r3, r3, #13
 8002bdc:	f003 0307 	and.w	r3, r3, #7
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002be2:	5ccb      	ldrb	r3, [r1, r3]
 8002be4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	40023800 	.word	0x40023800
 8002bf0:	08005748 	.word	0x08005748

08002bf4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c04:	2300      	movs	r3, #0
 8002c06:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d012      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c1c:	4b69      	ldr	r3, [pc, #420]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	4a68      	ldr	r2, [pc, #416]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c22:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c26:	6093      	str	r3, [r2, #8]
 8002c28:	4b66      	ldr	r3, [pc, #408]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c2a:	689a      	ldr	r2, [r3, #8]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c30:	4964      	ldr	r1, [pc, #400]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c32:	4313      	orrs	r3, r2
 8002c34:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c4e:	4b5d      	ldr	r3, [pc, #372]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c5c:	4959      	ldr	r1, [pc, #356]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5e:	4313      	orrs	r3, r2
 8002c60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c68:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c6c:	d101      	bne.n	8002c72 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d101      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d017      	beq.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002c8a:	4b4e      	ldr	r3, [pc, #312]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c90:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c98:	494a      	ldr	r1, [pc, #296]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002ca8:	d101      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002caa:	2301      	movs	r3, #1
 8002cac:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d101      	bne.n	8002cba <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	f000 808b 	beq.w	8002dee <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002cd8:	4b3a      	ldr	r3, [pc, #232]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cdc:	4a39      	ldr	r2, [pc, #228]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ce2:	6413      	str	r3, [r2, #64]	; 0x40
 8002ce4:	4b37      	ldr	r3, [pc, #220]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cec:	60bb      	str	r3, [r7, #8]
 8002cee:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002cf0:	4b35      	ldr	r3, [pc, #212]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a34      	ldr	r2, [pc, #208]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002cf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fa5c 	bl	80011b8 <HAL_GetTick>
 8002d00:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d04:	f7fe fa58 	bl	80011b8 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	697b      	ldr	r3, [r7, #20]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b64      	cmp	r3, #100	; 0x64
 8002d10:	d901      	bls.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e38f      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d16:	4b2c      	ldr	r3, [pc, #176]	; (8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d0f0      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d22:	4b28      	ldr	r3, [pc, #160]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d2a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d035      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	429a      	cmp	r2, r3
 8002d3e:	d02e      	beq.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d40:	4b20      	ldr	r3, [pc, #128]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d48:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d4a:	4b1e      	ldr	r3, [pc, #120]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d4e:	4a1d      	ldr	r2, [pc, #116]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d54:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d56:	4b1b      	ldr	r3, [pc, #108]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d5a:	4a1a      	ldr	r2, [pc, #104]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d60:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002d62:	4a18      	ldr	r2, [pc, #96]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002d68:	4b16      	ldr	r3, [pc, #88]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d6c:	f003 0301 	and.w	r3, r3, #1
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d114      	bne.n	8002d9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d74:	f7fe fa20 	bl	80011b8 <HAL_GetTick>
 8002d78:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d7a:	e00a      	b.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d7c:	f7fe fa1c 	bl	80011b8 <HAL_GetTick>
 8002d80:	4602      	mov	r2, r0
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	1ad3      	subs	r3, r2, r3
 8002d86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d901      	bls.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d8e:	2303      	movs	r3, #3
 8002d90:	e351      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d92:	4b0c      	ldr	r3, [pc, #48]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d0ee      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002daa:	d111      	bne.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002dac:	4b05      	ldr	r3, [pc, #20]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002db8:	4b04      	ldr	r3, [pc, #16]	; (8002dcc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002dba:	400b      	ands	r3, r1
 8002dbc:	4901      	ldr	r1, [pc, #4]	; (8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	608b      	str	r3, [r1, #8]
 8002dc2:	e00b      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002dc4:	40023800 	.word	0x40023800
 8002dc8:	40007000 	.word	0x40007000
 8002dcc:	0ffffcff 	.word	0x0ffffcff
 8002dd0:	4bac      	ldr	r3, [pc, #688]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	4aab      	ldr	r2, [pc, #684]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dd6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002dda:	6093      	str	r3, [r2, #8]
 8002ddc:	4ba9      	ldr	r3, [pc, #676]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002de8:	49a6      	ldr	r1, [pc, #664]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0310 	and.w	r3, r3, #16
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d010      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002dfa:	4ba2      	ldr	r3, [pc, #648]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dfc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e00:	4aa0      	ldr	r2, [pc, #640]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e06:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e0a:	4b9e      	ldr	r3, [pc, #632]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e14:	499b      	ldr	r1, [pc, #620]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e16:	4313      	orrs	r3, r2
 8002e18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d00a      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e28:	4b96      	ldr	r3, [pc, #600]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e36:	4993      	ldr	r1, [pc, #588]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00a      	beq.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e4a:	4b8e      	ldr	r3, [pc, #568]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e50:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002e58:	498a      	ldr	r1, [pc, #552]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d00a      	beq.n	8002e82 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e6c:	4b85      	ldr	r3, [pc, #532]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e72:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e7a:	4982      	ldr	r1, [pc, #520]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d00a      	beq.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e8e:	4b7d      	ldr	r3, [pc, #500]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e9c:	4979      	ldr	r1, [pc, #484]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00a      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002eb0:	4b74      	ldr	r3, [pc, #464]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb6:	f023 0203 	bic.w	r2, r3, #3
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ebe:	4971      	ldr	r1, [pc, #452]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d00a      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ed2:	4b6c      	ldr	r3, [pc, #432]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed8:	f023 020c 	bic.w	r2, r3, #12
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ee0:	4968      	ldr	r1, [pc, #416]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d00a      	beq.n	8002f0a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ef4:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efa:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f02:	4960      	ldr	r1, [pc, #384]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00a      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f16:	4b5b      	ldr	r3, [pc, #364]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f1c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f24:	4957      	ldr	r1, [pc, #348]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f26:	4313      	orrs	r3, r2
 8002f28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00a      	beq.n	8002f4e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f38:	4b52      	ldr	r3, [pc, #328]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f46:	494f      	ldr	r1, [pc, #316]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00a      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002f5a:	4b4a      	ldr	r3, [pc, #296]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f60:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f68:	4946      	ldr	r1, [pc, #280]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00a      	beq.n	8002f92 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002f7c:	4b41      	ldr	r3, [pc, #260]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f8a:	493e      	ldr	r1, [pc, #248]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d00a      	beq.n	8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f9e:	4b39      	ldr	r3, [pc, #228]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fa4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002fac:	4935      	ldr	r1, [pc, #212]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d00a      	beq.n	8002fd6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002fc0:	4b30      	ldr	r3, [pc, #192]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fce:	492d      	ldr	r1, [pc, #180]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d011      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002fe2:	4b28      	ldr	r3, [pc, #160]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ff0:	4924      	ldr	r1, [pc, #144]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ffc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003000:	d101      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003002:	2301      	movs	r3, #1
 8003004:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f003 0308 	and.w	r3, r3, #8
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003012:	2301      	movs	r3, #1
 8003014:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003022:	4b18      	ldr	r3, [pc, #96]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003028:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003030:	4914      	ldr	r1, [pc, #80]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003032:	4313      	orrs	r3, r2
 8003034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003044:	4b0f      	ldr	r3, [pc, #60]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800304a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003054:	490b      	ldr	r1, [pc, #44]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003056:	4313      	orrs	r3, r2
 8003058:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d00f      	beq.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800306a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800306e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003078:	4902      	ldr	r1, [pc, #8]	; (8003084 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003080:	e002      	b.n	8003088 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003082:	bf00      	nop
 8003084:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003094:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003096:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800309a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030a4:	4986      	ldr	r1, [pc, #536]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	4313      	orrs	r3, r2
 80030a8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d00b      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80030b8:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030be:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030c8:	497d      	ldr	r1, [pc, #500]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ca:	4313      	orrs	r3, r2
 80030cc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d006      	beq.n	80030e4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	f000 80d6 	beq.w	8003290 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80030e4:	4b76      	ldr	r3, [pc, #472]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a75      	ldr	r2, [pc, #468]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80030ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030f0:	f7fe f862 	bl	80011b8 <HAL_GetTick>
 80030f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80030f6:	e008      	b.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80030f8:	f7fe f85e 	bl	80011b8 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	2b64      	cmp	r3, #100	; 0x64
 8003104:	d901      	bls.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003106:	2303      	movs	r3, #3
 8003108:	e195      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800310a:	4b6d      	ldr	r3, [pc, #436]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d1f0      	bne.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f003 0301 	and.w	r3, r3, #1
 800311e:	2b00      	cmp	r3, #0
 8003120:	d021      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003126:	2b00      	cmp	r3, #0
 8003128:	d11d      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800312a:	4b65      	ldr	r3, [pc, #404]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003130:	0c1b      	lsrs	r3, r3, #16
 8003132:	f003 0303 	and.w	r3, r3, #3
 8003136:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003138:	4b61      	ldr	r3, [pc, #388]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800313e:	0e1b      	lsrs	r3, r3, #24
 8003140:	f003 030f 	and.w	r3, r3, #15
 8003144:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	019a      	lsls	r2, r3, #6
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	431a      	orrs	r2, r3
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	061b      	lsls	r3, r3, #24
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	071b      	lsls	r3, r3, #28
 800315e:	4958      	ldr	r1, [pc, #352]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003160:	4313      	orrs	r3, r2
 8003162:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800316e:	2b00      	cmp	r3, #0
 8003170:	d004      	beq.n	800317c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d00a      	beq.n	8003192 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003184:	2b00      	cmp	r3, #0
 8003186:	d02e      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003190:	d129      	bne.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003192:	4b4b      	ldr	r3, [pc, #300]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003194:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031a0:	4b47      	ldr	r3, [pc, #284]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031a6:	0f1b      	lsrs	r3, r3, #28
 80031a8:	f003 0307 	and.w	r3, r3, #7
 80031ac:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	041b      	lsls	r3, r3, #16
 80031b8:	431a      	orrs	r2, r3
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	061b      	lsls	r3, r3, #24
 80031c0:	431a      	orrs	r2, r3
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	071b      	lsls	r3, r3, #28
 80031c6:	493e      	ldr	r1, [pc, #248]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031c8:	4313      	orrs	r3, r2
 80031ca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80031ce:	4b3c      	ldr	r3, [pc, #240]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031d4:	f023 021f 	bic.w	r2, r3, #31
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	3b01      	subs	r3, #1
 80031de:	4938      	ldr	r1, [pc, #224]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d01d      	beq.n	800322e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80031f2:	4b33      	ldr	r3, [pc, #204]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f8:	0e1b      	lsrs	r3, r3, #24
 80031fa:	f003 030f 	and.w	r3, r3, #15
 80031fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003200:	4b2f      	ldr	r3, [pc, #188]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003202:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003206:	0f1b      	lsrs	r3, r3, #28
 8003208:	f003 0307 	and.w	r3, r3, #7
 800320c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	019a      	lsls	r2, r3, #6
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	691b      	ldr	r3, [r3, #16]
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	061b      	lsls	r3, r3, #24
 8003220:	431a      	orrs	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	071b      	lsls	r3, r3, #28
 8003226:	4926      	ldr	r1, [pc, #152]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003228:	4313      	orrs	r3, r2
 800322a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d011      	beq.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	019a      	lsls	r2, r3, #6
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	041b      	lsls	r3, r3, #16
 8003246:	431a      	orrs	r2, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	68db      	ldr	r3, [r3, #12]
 800324c:	061b      	lsls	r3, r3, #24
 800324e:	431a      	orrs	r2, r3
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	071b      	lsls	r3, r3, #28
 8003256:	491a      	ldr	r1, [pc, #104]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003258:	4313      	orrs	r3, r2
 800325a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800325e:	4b18      	ldr	r3, [pc, #96]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003264:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003268:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800326a:	f7fd ffa5 	bl	80011b8 <HAL_GetTick>
 800326e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003270:	e008      	b.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003272:	f7fd ffa1 	bl	80011b8 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b64      	cmp	r3, #100	; 0x64
 800327e:	d901      	bls.n	8003284 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0d8      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003284:	4b0e      	ldr	r3, [pc, #56]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0f0      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	2b01      	cmp	r3, #1
 8003294:	f040 80ce 	bne.w	8003434 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003298:	4b09      	ldr	r3, [pc, #36]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a08      	ldr	r2, [pc, #32]	; (80032c0 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800329e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032a4:	f7fd ff88 	bl	80011b8 <HAL_GetTick>
 80032a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032aa:	e00b      	b.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032ac:	f7fd ff84 	bl	80011b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	2b64      	cmp	r3, #100	; 0x64
 80032b8:	d904      	bls.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032ba:	2303      	movs	r3, #3
 80032bc:	e0bb      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80032be:	bf00      	nop
 80032c0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032c4:	4b5e      	ldr	r3, [pc, #376]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d0:	d0ec      	beq.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d003      	beq.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d009      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d02e      	beq.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d12a      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80032fa:	4b51      	ldr	r3, [pc, #324]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003300:	0c1b      	lsrs	r3, r3, #16
 8003302:	f003 0303 	and.w	r3, r3, #3
 8003306:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003308:	4b4d      	ldr	r3, [pc, #308]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800330a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800330e:	0f1b      	lsrs	r3, r3, #28
 8003310:	f003 0307 	and.w	r3, r3, #7
 8003314:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	695b      	ldr	r3, [r3, #20]
 800331a:	019a      	lsls	r2, r3, #6
 800331c:	693b      	ldr	r3, [r7, #16]
 800331e:	041b      	lsls	r3, r3, #16
 8003320:	431a      	orrs	r2, r3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	061b      	lsls	r3, r3, #24
 8003328:	431a      	orrs	r2, r3
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	071b      	lsls	r3, r3, #28
 800332e:	4944      	ldr	r1, [pc, #272]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003330:	4313      	orrs	r3, r2
 8003332:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003336:	4b42      	ldr	r3, [pc, #264]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003338:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800333c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003344:	3b01      	subs	r3, #1
 8003346:	021b      	lsls	r3, r3, #8
 8003348:	493d      	ldr	r1, [pc, #244]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800334a:	4313      	orrs	r3, r2
 800334c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d022      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003364:	d11d      	bne.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003366:	4b36      	ldr	r3, [pc, #216]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003368:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800336c:	0e1b      	lsrs	r3, r3, #24
 800336e:	f003 030f 	and.w	r3, r3, #15
 8003372:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003374:	4b32      	ldr	r3, [pc, #200]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003376:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800337a:	0f1b      	lsrs	r3, r3, #28
 800337c:	f003 0307 	and.w	r3, r3, #7
 8003380:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	695b      	ldr	r3, [r3, #20]
 8003386:	019a      	lsls	r2, r3, #6
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6a1b      	ldr	r3, [r3, #32]
 800338c:	041b      	lsls	r3, r3, #16
 800338e:	431a      	orrs	r2, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	061b      	lsls	r3, r3, #24
 8003394:	431a      	orrs	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	071b      	lsls	r3, r3, #28
 800339a:	4929      	ldr	r1, [pc, #164]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0308 	and.w	r3, r3, #8
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d028      	beq.n	8003400 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033ae:	4b24      	ldr	r3, [pc, #144]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b4:	0e1b      	lsrs	r3, r3, #24
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80033bc:	4b20      	ldr	r3, [pc, #128]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c2:	0c1b      	lsrs	r3, r3, #16
 80033c4:	f003 0303 	and.w	r3, r3, #3
 80033c8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	695b      	ldr	r3, [r3, #20]
 80033ce:	019a      	lsls	r2, r3, #6
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	041b      	lsls	r3, r3, #16
 80033d4:	431a      	orrs	r2, r3
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	061b      	lsls	r3, r3, #24
 80033da:	431a      	orrs	r2, r3
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	69db      	ldr	r3, [r3, #28]
 80033e0:	071b      	lsls	r3, r3, #28
 80033e2:	4917      	ldr	r1, [pc, #92]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80033ea:	4b15      	ldr	r3, [pc, #84]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033f8:	4911      	ldr	r1, [pc, #68]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003400:	4b0f      	ldr	r3, [pc, #60]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0e      	ldr	r2, [pc, #56]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003406:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800340a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800340c:	f7fd fed4 	bl	80011b8 <HAL_GetTick>
 8003410:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003414:	f7fd fed0 	bl	80011b8 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	; 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e007      	b.n	8003436 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003426:	4b06      	ldr	r3, [pc, #24]	; (8003440 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800342e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003432:	d1ef      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	3720      	adds	r7, #32
 800343a:	46bd      	mov	sp, r7
 800343c:	bd80      	pop	{r7, pc}
 800343e:	bf00      	nop
 8003440:	40023800 	.word	0x40023800

08003444 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b082      	sub	sp, #8
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d101      	bne.n	8003456 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003452:	2301      	movs	r3, #1
 8003454:	e049      	b.n	80034ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800345c:	b2db      	uxtb	r3, r3
 800345e:	2b00      	cmp	r3, #0
 8003460:	d106      	bne.n	8003470 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	2200      	movs	r2, #0
 8003466:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800346a:	6878      	ldr	r0, [r7, #4]
 800346c:	f7fd fcb2 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3304      	adds	r3, #4
 8003480:	4619      	mov	r1, r3
 8003482:	4610      	mov	r0, r2
 8003484:	f000 faca 	bl	8003a1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2201      	movs	r2, #1
 800348c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2201      	movs	r2, #1
 80034a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2201      	movs	r2, #1
 80034ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2201      	movs	r2, #1
 80034c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2201      	movs	r2, #1
 80034cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2201      	movs	r2, #1
 80034dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80034e8:	2300      	movs	r3, #0
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
	...

080034f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80034f4:	b480      	push	{r7}
 80034f6:	b085      	sub	sp, #20
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003508:	2301      	movs	r3, #1
 800350a:	e054      	b.n	80035b6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2202      	movs	r2, #2
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68da      	ldr	r2, [r3, #12]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f042 0201 	orr.w	r2, r2, #1
 8003522:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a26      	ldr	r2, [pc, #152]	; (80035c4 <HAL_TIM_Base_Start_IT+0xd0>)
 800352a:	4293      	cmp	r3, r2
 800352c:	d022      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003536:	d01d      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a22      	ldr	r2, [pc, #136]	; (80035c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d018      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4a21      	ldr	r2, [pc, #132]	; (80035cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d013      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d00e      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1e      	ldr	r2, [pc, #120]	; (80035d4 <HAL_TIM_Base_Start_IT+0xe0>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d009      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	4a1c      	ldr	r2, [pc, #112]	; (80035d8 <HAL_TIM_Base_Start_IT+0xe4>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d004      	beq.n	8003574 <HAL_TIM_Base_Start_IT+0x80>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a1b      	ldr	r2, [pc, #108]	; (80035dc <HAL_TIM_Base_Start_IT+0xe8>)
 8003570:	4293      	cmp	r3, r2
 8003572:	d115      	bne.n	80035a0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	4b19      	ldr	r3, [pc, #100]	; (80035e0 <HAL_TIM_Base_Start_IT+0xec>)
 800357c:	4013      	ands	r3, r2
 800357e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2b06      	cmp	r3, #6
 8003584:	d015      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800358c:	d011      	beq.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f042 0201 	orr.w	r2, r2, #1
 800359c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800359e:	e008      	b.n	80035b2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0201 	orr.w	r2, r2, #1
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	e000      	b.n	80035b4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035b2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3714      	adds	r7, #20
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	40010000 	.word	0x40010000
 80035c8:	40000400 	.word	0x40000400
 80035cc:	40000800 	.word	0x40000800
 80035d0:	40000c00 	.word	0x40000c00
 80035d4:	40010400 	.word	0x40010400
 80035d8:	40014000 	.word	0x40014000
 80035dc:	40001800 	.word	0x40001800
 80035e0:	00010007 	.word	0x00010007

080035e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	f003 0302 	and.w	r3, r3, #2
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d122      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	f003 0302 	and.w	r3, r3, #2
 8003604:	2b02      	cmp	r3, #2
 8003606:	d11b      	bne.n	8003640 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f06f 0202 	mvn.w	r2, #2
 8003610:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	699b      	ldr	r3, [r3, #24]
 800361e:	f003 0303 	and.w	r3, r3, #3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d003      	beq.n	800362e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f000 f9da 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 800362c:	e005      	b.n	800363a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800362e:	6878      	ldr	r0, [r7, #4]
 8003630:	f000 f9cc 	bl	80039cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f000 f9dd 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2200      	movs	r2, #0
 800363e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	f003 0304 	and.w	r3, r3, #4
 800364a:	2b04      	cmp	r3, #4
 800364c:	d122      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f003 0304 	and.w	r3, r3, #4
 8003658:	2b04      	cmp	r3, #4
 800365a:	d11b      	bne.n	8003694 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f06f 0204 	mvn.w	r2, #4
 8003664:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2202      	movs	r2, #2
 800366a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	699b      	ldr	r3, [r3, #24]
 8003672:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9b0 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 8003680:	e005      	b.n	800368e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f000 f9a2 	bl	80039cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003688:	6878      	ldr	r0, [r7, #4]
 800368a:	f000 f9b3 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2200      	movs	r2, #0
 8003692:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f003 0308 	and.w	r3, r3, #8
 800369e:	2b08      	cmp	r3, #8
 80036a0:	d122      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0308 	and.w	r3, r3, #8
 80036ac:	2b08      	cmp	r3, #8
 80036ae:	d11b      	bne.n	80036e8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f06f 0208 	mvn.w	r2, #8
 80036b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2204      	movs	r2, #4
 80036be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	f003 0303 	and.w	r3, r3, #3
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d003      	beq.n	80036d6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f986 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 80036d4:	e005      	b.n	80036e2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036d6:	6878      	ldr	r0, [r7, #4]
 80036d8:	f000 f978 	bl	80039cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f000 f989 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	f003 0310 	and.w	r3, r3, #16
 80036f2:	2b10      	cmp	r3, #16
 80036f4:	d122      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	68db      	ldr	r3, [r3, #12]
 80036fc:	f003 0310 	and.w	r3, r3, #16
 8003700:	2b10      	cmp	r3, #16
 8003702:	d11b      	bne.n	800373c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f06f 0210 	mvn.w	r2, #16
 800370c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2208      	movs	r2, #8
 8003712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800371e:	2b00      	cmp	r3, #0
 8003720:	d003      	beq.n	800372a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f95c 	bl	80039e0 <HAL_TIM_IC_CaptureCallback>
 8003728:	e005      	b.n	8003736 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	f000 f94e 	bl	80039cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f000 f95f 	bl	80039f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	691b      	ldr	r3, [r3, #16]
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b01      	cmp	r3, #1
 8003748:	d10e      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f06f 0201 	mvn.w	r2, #1
 8003760:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f928 	bl	80039b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003772:	2b80      	cmp	r3, #128	; 0x80
 8003774:	d10e      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003780:	2b80      	cmp	r3, #128	; 0x80
 8003782:	d107      	bne.n	8003794 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800378c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fb16 	bl	8003dc0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	691b      	ldr	r3, [r3, #16]
 800379a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800379e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037a2:	d10e      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68db      	ldr	r3, [r3, #12]
 80037aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ae:	2b80      	cmp	r3, #128	; 0x80
 80037b0:	d107      	bne.n	80037c2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80037ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80037bc:	6878      	ldr	r0, [r7, #4]
 80037be:	f000 fb09 	bl	8003dd4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	691b      	ldr	r3, [r3, #16]
 80037c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037cc:	2b40      	cmp	r3, #64	; 0x40
 80037ce:	d10e      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037da:	2b40      	cmp	r3, #64	; 0x40
 80037dc:	d107      	bne.n	80037ee <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80037e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f000 f90d 	bl	8003a08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	691b      	ldr	r3, [r3, #16]
 80037f4:	f003 0320 	and.w	r3, r3, #32
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d10e      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f003 0320 	and.w	r3, r3, #32
 8003806:	2b20      	cmp	r3, #32
 8003808:	d107      	bne.n	800381a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f06f 0220 	mvn.w	r2, #32
 8003812:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003814:	6878      	ldr	r0, [r7, #4]
 8003816:	f000 fac9 	bl	8003dac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800381a:	bf00      	nop
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}
	...

08003824 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800382e:	2300      	movs	r3, #0
 8003830:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003838:	2b01      	cmp	r3, #1
 800383a:	d101      	bne.n	8003840 <HAL_TIM_ConfigClockSource+0x1c>
 800383c:	2302      	movs	r3, #2
 800383e:	e0b4      	b.n	80039aa <HAL_TIM_ConfigClockSource+0x186>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2201      	movs	r2, #1
 8003844:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2202      	movs	r2, #2
 800384c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	689b      	ldr	r3, [r3, #8]
 8003856:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003858:	68ba      	ldr	r2, [r7, #8]
 800385a:	4b56      	ldr	r3, [pc, #344]	; (80039b4 <HAL_TIM_ConfigClockSource+0x190>)
 800385c:	4013      	ands	r3, r2
 800385e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003866:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	68ba      	ldr	r2, [r7, #8]
 800386e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003878:	d03e      	beq.n	80038f8 <HAL_TIM_ConfigClockSource+0xd4>
 800387a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800387e:	f200 8087 	bhi.w	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003882:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003886:	f000 8086 	beq.w	8003996 <HAL_TIM_ConfigClockSource+0x172>
 800388a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800388e:	d87f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b70      	cmp	r3, #112	; 0x70
 8003892:	d01a      	beq.n	80038ca <HAL_TIM_ConfigClockSource+0xa6>
 8003894:	2b70      	cmp	r3, #112	; 0x70
 8003896:	d87b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b60      	cmp	r3, #96	; 0x60
 800389a:	d050      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x11a>
 800389c:	2b60      	cmp	r3, #96	; 0x60
 800389e:	d877      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b50      	cmp	r3, #80	; 0x50
 80038a2:	d03c      	beq.n	800391e <HAL_TIM_ConfigClockSource+0xfa>
 80038a4:	2b50      	cmp	r3, #80	; 0x50
 80038a6:	d873      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038a8:	2b40      	cmp	r3, #64	; 0x40
 80038aa:	d058      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x13a>
 80038ac:	2b40      	cmp	r3, #64	; 0x40
 80038ae:	d86f      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038b0:	2b30      	cmp	r3, #48	; 0x30
 80038b2:	d064      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038b4:	2b30      	cmp	r3, #48	; 0x30
 80038b6:	d86b      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b20      	cmp	r3, #32
 80038ba:	d060      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038bc:	2b20      	cmp	r3, #32
 80038be:	d867      	bhi.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d05c      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038c4:	2b10      	cmp	r3, #16
 80038c6:	d05a      	beq.n	800397e <HAL_TIM_ConfigClockSource+0x15a>
 80038c8:	e062      	b.n	8003990 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038da:	f000 f9b9 	bl	8003c50 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80038ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68ba      	ldr	r2, [r7, #8]
 80038f4:	609a      	str	r2, [r3, #8]
      break;
 80038f6:	e04f      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003908:	f000 f9a2 	bl	8003c50 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800391a:	609a      	str	r2, [r3, #8]
      break;
 800391c:	e03c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800392a:	461a      	mov	r2, r3
 800392c:	f000 f916 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2150      	movs	r1, #80	; 0x50
 8003936:	4618      	mov	r0, r3
 8003938:	f000 f96f 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 800393c:	e02c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800394a:	461a      	mov	r2, r3
 800394c:	f000 f935 	bl	8003bba <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2160      	movs	r1, #96	; 0x60
 8003956:	4618      	mov	r0, r3
 8003958:	f000 f95f 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 800395c:	e01c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	461a      	mov	r2, r3
 800396c:	f000 f8f6 	bl	8003b5c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	2140      	movs	r1, #64	; 0x40
 8003976:	4618      	mov	r0, r3
 8003978:	f000 f94f 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 800397c:	e00c      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	4619      	mov	r1, r3
 8003988:	4610      	mov	r0, r2
 800398a:	f000 f946 	bl	8003c1a <TIM_ITRx_SetConfig>
      break;
 800398e:	e003      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	73fb      	strb	r3, [r7, #15]
      break;
 8003994:	e000      	b.n	8003998 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003996:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	fffeff88 	.word	0xfffeff88

080039b8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80039c0:	bf00      	nop
 80039c2:	370c      	adds	r7, #12
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b083      	sub	sp, #12
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039e0:	b480      	push	{r7}
 80039e2:	b083      	sub	sp, #12
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr

080039f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80039fc:	bf00      	nop
 80039fe:	370c      	adds	r7, #12
 8003a00:	46bd      	mov	sp, r7
 8003a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a06:	4770      	bx	lr

08003a08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b083      	sub	sp, #12
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a10:	bf00      	nop
 8003a12:	370c      	adds	r7, #12
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr

08003a1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a40      	ldr	r2, [pc, #256]	; (8003b30 <TIM_Base_SetConfig+0x114>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d013      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a3a:	d00f      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <TIM_Base_SetConfig+0x118>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d00b      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a3c      	ldr	r2, [pc, #240]	; (8003b38 <TIM_Base_SetConfig+0x11c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a3b      	ldr	r2, [pc, #236]	; (8003b3c <TIM_Base_SetConfig+0x120>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d003      	beq.n	8003a5c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a3a      	ldr	r2, [pc, #232]	; (8003b40 <TIM_Base_SetConfig+0x124>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d108      	bne.n	8003a6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003a62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	68fa      	ldr	r2, [r7, #12]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	4a2f      	ldr	r2, [pc, #188]	; (8003b30 <TIM_Base_SetConfig+0x114>)
 8003a72:	4293      	cmp	r3, r2
 8003a74:	d02b      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a7c:	d027      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a2c      	ldr	r2, [pc, #176]	; (8003b34 <TIM_Base_SetConfig+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d023      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a2b      	ldr	r2, [pc, #172]	; (8003b38 <TIM_Base_SetConfig+0x11c>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d01f      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a2a      	ldr	r2, [pc, #168]	; (8003b3c <TIM_Base_SetConfig+0x120>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d01b      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a29      	ldr	r2, [pc, #164]	; (8003b40 <TIM_Base_SetConfig+0x124>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d017      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a28      	ldr	r2, [pc, #160]	; (8003b44 <TIM_Base_SetConfig+0x128>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d013      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a27      	ldr	r2, [pc, #156]	; (8003b48 <TIM_Base_SetConfig+0x12c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d00f      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a26      	ldr	r2, [pc, #152]	; (8003b4c <TIM_Base_SetConfig+0x130>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a25      	ldr	r2, [pc, #148]	; (8003b50 <TIM_Base_SetConfig+0x134>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <TIM_Base_SetConfig+0x138>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a23      	ldr	r2, [pc, #140]	; (8003b58 <TIM_Base_SetConfig+0x13c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d108      	bne.n	8003ae0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68db      	ldr	r3, [r3, #12]
 8003ada:	68fa      	ldr	r2, [r7, #12]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	695b      	ldr	r3, [r3, #20]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	68fa      	ldr	r2, [r7, #12]
 8003af2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	689a      	ldr	r2, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a0a      	ldr	r2, [pc, #40]	; (8003b30 <TIM_Base_SetConfig+0x114>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_Base_SetConfig+0xf8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <TIM_Base_SetConfig+0x124>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d103      	bne.n	8003b1c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	691a      	ldr	r2, [r3, #16]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	615a      	str	r2, [r3, #20]
}
 8003b22:	bf00      	nop
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	40010000 	.word	0x40010000
 8003b34:	40000400 	.word	0x40000400
 8003b38:	40000800 	.word	0x40000800
 8003b3c:	40000c00 	.word	0x40000c00
 8003b40:	40010400 	.word	0x40010400
 8003b44:	40014000 	.word	0x40014000
 8003b48:	40014400 	.word	0x40014400
 8003b4c:	40014800 	.word	0x40014800
 8003b50:	40001800 	.word	0x40001800
 8003b54:	40001c00 	.word	0x40001c00
 8003b58:	40002000 	.word	0x40002000

08003b5c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b087      	sub	sp, #28
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	60f8      	str	r0, [r7, #12]
 8003b64:	60b9      	str	r1, [r7, #8]
 8003b66:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a1b      	ldr	r3, [r3, #32]
 8003b6c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	6a1b      	ldr	r3, [r3, #32]
 8003b72:	f023 0201 	bic.w	r2, r3, #1
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	699b      	ldr	r3, [r3, #24]
 8003b7e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	011b      	lsls	r3, r3, #4
 8003b8c:	693a      	ldr	r2, [r7, #16]
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	f023 030a 	bic.w	r3, r3, #10
 8003b98:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b9a:	697a      	ldr	r2, [r7, #20]
 8003b9c:	68bb      	ldr	r3, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	693a      	ldr	r2, [r7, #16]
 8003ba6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	621a      	str	r2, [r3, #32]
}
 8003bae:	bf00      	nop
 8003bb0:	371c      	adds	r7, #28
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr

08003bba <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bba:	b480      	push	{r7}
 8003bbc:	b087      	sub	sp, #28
 8003bbe:	af00      	add	r7, sp, #0
 8003bc0:	60f8      	str	r0, [r7, #12]
 8003bc2:	60b9      	str	r1, [r7, #8]
 8003bc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a1b      	ldr	r3, [r3, #32]
 8003bca:	f023 0210 	bic.w	r2, r3, #16
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	699b      	ldr	r3, [r3, #24]
 8003bd6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1b      	ldr	r3, [r3, #32]
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	031b      	lsls	r3, r3, #12
 8003bea:	697a      	ldr	r2, [r7, #20]
 8003bec:	4313      	orrs	r3, r2
 8003bee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bf6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	693a      	ldr	r2, [r7, #16]
 8003bfe:	4313      	orrs	r3, r2
 8003c00:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	693a      	ldr	r2, [r7, #16]
 8003c0c:	621a      	str	r2, [r3, #32]
}
 8003c0e:	bf00      	nop
 8003c10:	371c      	adds	r7, #28
 8003c12:	46bd      	mov	sp, r7
 8003c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c18:	4770      	bx	lr

08003c1a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c1a:	b480      	push	{r7}
 8003c1c:	b085      	sub	sp, #20
 8003c1e:	af00      	add	r7, sp, #0
 8003c20:	6078      	str	r0, [r7, #4]
 8003c22:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	689b      	ldr	r3, [r3, #8]
 8003c28:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c30:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c32:	683a      	ldr	r2, [r7, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	4313      	orrs	r3, r2
 8003c38:	f043 0307 	orr.w	r3, r3, #7
 8003c3c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	609a      	str	r2, [r3, #8]
}
 8003c44:	bf00      	nop
 8003c46:	3714      	adds	r7, #20
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b087      	sub	sp, #28
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
 8003c5c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c6a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	021a      	lsls	r2, r3, #8
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	431a      	orrs	r2, r3
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	697a      	ldr	r2, [r7, #20]
 8003c82:	609a      	str	r2, [r3, #8]
}
 8003c84:	bf00      	nop
 8003c86:	371c      	adds	r7, #28
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b085      	sub	sp, #20
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
 8003c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d101      	bne.n	8003ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ca4:	2302      	movs	r3, #2
 8003ca6:	e06d      	b.n	8003d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2202      	movs	r2, #2
 8003cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	685b      	ldr	r3, [r3, #4]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a30      	ldr	r2, [pc, #192]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d004      	beq.n	8003cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a2f      	ldr	r2, [pc, #188]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d108      	bne.n	8003cee <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ce2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685b      	ldr	r3, [r3, #4]
 8003ce8:	68fa      	ldr	r2, [r7, #12]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	68fa      	ldr	r2, [r7, #12]
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68fa      	ldr	r2, [r7, #12]
 8003d06:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a20      	ldr	r2, [pc, #128]	; (8003d90 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d022      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d1a:	d01d      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a1d      	ldr	r2, [pc, #116]	; (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d018      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a1c      	ldr	r2, [pc, #112]	; (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d013      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a1a      	ldr	r2, [pc, #104]	; (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d00e      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a15      	ldr	r2, [pc, #84]	; (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d009      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a16      	ldr	r2, [pc, #88]	; (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d004      	beq.n	8003d58 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a15      	ldr	r2, [pc, #84]	; (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003d54:	4293      	cmp	r3, r2
 8003d56:	d10c      	bne.n	8003d72 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d58:	68bb      	ldr	r3, [r7, #8]
 8003d5a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d5e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	68ba      	ldr	r2, [r7, #8]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	68ba      	ldr	r2, [r7, #8]
 8003d70:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	2201      	movs	r2, #1
 8003d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3714      	adds	r7, #20
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40010000 	.word	0x40010000
 8003d94:	40010400 	.word	0x40010400
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40014000 	.word	0x40014000
 8003da8:	40001800 	.word	0x40001800

08003dac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db4:	bf00      	nop
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b083      	sub	sp, #12
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dc8:	bf00      	nop
 8003dca:	370c      	adds	r7, #12
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd2:	4770      	bx	lr

08003dd4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003dd4:	b480      	push	{r7}
 8003dd6:	b083      	sub	sp, #12
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e040      	b.n	8003e7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d106      	bne.n	8003e10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e0a:	6878      	ldr	r0, [r7, #4]
 8003e0c:	f7fd f852 	bl	8000eb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2224      	movs	r2, #36	; 0x24
 8003e14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f022 0201 	bic.w	r2, r2, #1
 8003e24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8b0 	bl	8003f8c <UART_SetConfig>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	2b01      	cmp	r3, #1
 8003e30:	d101      	bne.n	8003e36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e022      	b.n	8003e7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d002      	beq.n	8003e44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 fb08 	bl	8004454 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	685a      	ldr	r2, [r3, #4]
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689a      	ldr	r2, [r3, #8]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f042 0201 	orr.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 fb8f 	bl	8004598 <UART_CheckIdleState>
 8003e7a:	4603      	mov	r3, r0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3708      	adds	r7, #8
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e84:	b580      	push	{r7, lr}
 8003e86:	b08a      	sub	sp, #40	; 0x28
 8003e88:	af02      	add	r7, sp, #8
 8003e8a:	60f8      	str	r0, [r7, #12]
 8003e8c:	60b9      	str	r1, [r7, #8]
 8003e8e:	603b      	str	r3, [r7, #0]
 8003e90:	4613      	mov	r3, r2
 8003e92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e98:	2b20      	cmp	r3, #32
 8003e9a:	d171      	bne.n	8003f80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e9c:	68bb      	ldr	r3, [r7, #8]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d002      	beq.n	8003ea8 <HAL_UART_Transmit+0x24>
 8003ea2:	88fb      	ldrh	r3, [r7, #6]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ea8:	2301      	movs	r3, #1
 8003eaa:	e06a      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2221      	movs	r2, #33	; 0x21
 8003eb8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003eba:	f7fd f97d 	bl	80011b8 <HAL_GetTick>
 8003ebe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	88fa      	ldrh	r2, [r7, #6]
 8003ec4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ed8:	d108      	bne.n	8003eec <HAL_UART_Transmit+0x68>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	691b      	ldr	r3, [r3, #16]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d104      	bne.n	8003eec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003ee2:	2300      	movs	r3, #0
 8003ee4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	61bb      	str	r3, [r7, #24]
 8003eea:	e003      	b.n	8003ef4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef0:	2300      	movs	r3, #0
 8003ef2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003ef4:	e02c      	b.n	8003f50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	9300      	str	r3, [sp, #0]
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2200      	movs	r2, #0
 8003efe:	2180      	movs	r1, #128	; 0x80
 8003f00:	68f8      	ldr	r0, [r7, #12]
 8003f02:	f000 fb96 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d001      	beq.n	8003f10 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003f0c:	2303      	movs	r3, #3
 8003f0e:	e038      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f10:	69fb      	ldr	r3, [r7, #28]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d10b      	bne.n	8003f2e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f16:	69bb      	ldr	r3, [r7, #24]
 8003f18:	881b      	ldrh	r3, [r3, #0]
 8003f1a:	461a      	mov	r2, r3
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	3302      	adds	r3, #2
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	e007      	b.n	8003f3e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	781a      	ldrb	r2, [r3, #0]
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f38:	69fb      	ldr	r3, [r7, #28]
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f44:	b29b      	uxth	r3, r3
 8003f46:	3b01      	subs	r3, #1
 8003f48:	b29a      	uxth	r2, r3
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f56:	b29b      	uxth	r3, r3
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d1cc      	bne.n	8003ef6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	9300      	str	r3, [sp, #0]
 8003f60:	697b      	ldr	r3, [r7, #20]
 8003f62:	2200      	movs	r2, #0
 8003f64:	2140      	movs	r1, #64	; 0x40
 8003f66:	68f8      	ldr	r0, [r7, #12]
 8003f68:	f000 fb63 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e005      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e000      	b.n	8003f82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003f80:	2302      	movs	r3, #2
  }
}
 8003f82:	4618      	mov	r0, r3
 8003f84:	3720      	adds	r7, #32
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
	...

08003f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003f94:	2300      	movs	r3, #0
 8003f96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689a      	ldr	r2, [r3, #8]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	691b      	ldr	r3, [r3, #16]
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	695b      	ldr	r3, [r3, #20]
 8003fa6:	431a      	orrs	r2, r3
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	681a      	ldr	r2, [r3, #0]
 8003fb6:	4ba6      	ldr	r3, [pc, #664]	; (8004250 <UART_SetConfig+0x2c4>)
 8003fb8:	4013      	ands	r3, r2
 8003fba:	687a      	ldr	r2, [r7, #4]
 8003fbc:	6812      	ldr	r2, [r2, #0]
 8003fbe:	6979      	ldr	r1, [r7, #20]
 8003fc0:	430b      	orrs	r3, r1
 8003fc2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	68da      	ldr	r2, [r3, #12]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	430a      	orrs	r2, r1
 8003fd8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	699b      	ldr	r3, [r3, #24]
 8003fde:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	689b      	ldr	r3, [r3, #8]
 8003ff0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a94      	ldr	r2, [pc, #592]	; (8004254 <UART_SetConfig+0x2c8>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d120      	bne.n	800404a <UART_SetConfig+0xbe>
 8004008:	4b93      	ldr	r3, [pc, #588]	; (8004258 <UART_SetConfig+0x2cc>)
 800400a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b03      	cmp	r3, #3
 8004014:	d816      	bhi.n	8004044 <UART_SetConfig+0xb8>
 8004016:	a201      	add	r2, pc, #4	; (adr r2, 800401c <UART_SetConfig+0x90>)
 8004018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800401c:	0800402d 	.word	0x0800402d
 8004020:	08004039 	.word	0x08004039
 8004024:	08004033 	.word	0x08004033
 8004028:	0800403f 	.word	0x0800403f
 800402c:	2301      	movs	r3, #1
 800402e:	77fb      	strb	r3, [r7, #31]
 8004030:	e150      	b.n	80042d4 <UART_SetConfig+0x348>
 8004032:	2302      	movs	r3, #2
 8004034:	77fb      	strb	r3, [r7, #31]
 8004036:	e14d      	b.n	80042d4 <UART_SetConfig+0x348>
 8004038:	2304      	movs	r3, #4
 800403a:	77fb      	strb	r3, [r7, #31]
 800403c:	e14a      	b.n	80042d4 <UART_SetConfig+0x348>
 800403e:	2308      	movs	r3, #8
 8004040:	77fb      	strb	r3, [r7, #31]
 8004042:	e147      	b.n	80042d4 <UART_SetConfig+0x348>
 8004044:	2310      	movs	r3, #16
 8004046:	77fb      	strb	r3, [r7, #31]
 8004048:	e144      	b.n	80042d4 <UART_SetConfig+0x348>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a83      	ldr	r2, [pc, #524]	; (800425c <UART_SetConfig+0x2d0>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d132      	bne.n	80040ba <UART_SetConfig+0x12e>
 8004054:	4b80      	ldr	r3, [pc, #512]	; (8004258 <UART_SetConfig+0x2cc>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 030c 	and.w	r3, r3, #12
 800405e:	2b0c      	cmp	r3, #12
 8004060:	d828      	bhi.n	80040b4 <UART_SetConfig+0x128>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0xdc>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800409d 	.word	0x0800409d
 800406c:	080040b5 	.word	0x080040b5
 8004070:	080040b5 	.word	0x080040b5
 8004074:	080040b5 	.word	0x080040b5
 8004078:	080040a9 	.word	0x080040a9
 800407c:	080040b5 	.word	0x080040b5
 8004080:	080040b5 	.word	0x080040b5
 8004084:	080040b5 	.word	0x080040b5
 8004088:	080040a3 	.word	0x080040a3
 800408c:	080040b5 	.word	0x080040b5
 8004090:	080040b5 	.word	0x080040b5
 8004094:	080040b5 	.word	0x080040b5
 8004098:	080040af 	.word	0x080040af
 800409c:	2300      	movs	r3, #0
 800409e:	77fb      	strb	r3, [r7, #31]
 80040a0:	e118      	b.n	80042d4 <UART_SetConfig+0x348>
 80040a2:	2302      	movs	r3, #2
 80040a4:	77fb      	strb	r3, [r7, #31]
 80040a6:	e115      	b.n	80042d4 <UART_SetConfig+0x348>
 80040a8:	2304      	movs	r3, #4
 80040aa:	77fb      	strb	r3, [r7, #31]
 80040ac:	e112      	b.n	80042d4 <UART_SetConfig+0x348>
 80040ae:	2308      	movs	r3, #8
 80040b0:	77fb      	strb	r3, [r7, #31]
 80040b2:	e10f      	b.n	80042d4 <UART_SetConfig+0x348>
 80040b4:	2310      	movs	r3, #16
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e10c      	b.n	80042d4 <UART_SetConfig+0x348>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a68      	ldr	r2, [pc, #416]	; (8004260 <UART_SetConfig+0x2d4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d120      	bne.n	8004106 <UART_SetConfig+0x17a>
 80040c4:	4b64      	ldr	r3, [pc, #400]	; (8004258 <UART_SetConfig+0x2cc>)
 80040c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80040ce:	2b30      	cmp	r3, #48	; 0x30
 80040d0:	d013      	beq.n	80040fa <UART_SetConfig+0x16e>
 80040d2:	2b30      	cmp	r3, #48	; 0x30
 80040d4:	d814      	bhi.n	8004100 <UART_SetConfig+0x174>
 80040d6:	2b20      	cmp	r3, #32
 80040d8:	d009      	beq.n	80040ee <UART_SetConfig+0x162>
 80040da:	2b20      	cmp	r3, #32
 80040dc:	d810      	bhi.n	8004100 <UART_SetConfig+0x174>
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <UART_SetConfig+0x15c>
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d006      	beq.n	80040f4 <UART_SetConfig+0x168>
 80040e6:	e00b      	b.n	8004100 <UART_SetConfig+0x174>
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e0f2      	b.n	80042d4 <UART_SetConfig+0x348>
 80040ee:	2302      	movs	r3, #2
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e0ef      	b.n	80042d4 <UART_SetConfig+0x348>
 80040f4:	2304      	movs	r3, #4
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e0ec      	b.n	80042d4 <UART_SetConfig+0x348>
 80040fa:	2308      	movs	r3, #8
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e0e9      	b.n	80042d4 <UART_SetConfig+0x348>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e0e6      	b.n	80042d4 <UART_SetConfig+0x348>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a56      	ldr	r2, [pc, #344]	; (8004264 <UART_SetConfig+0x2d8>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d120      	bne.n	8004152 <UART_SetConfig+0x1c6>
 8004110:	4b51      	ldr	r3, [pc, #324]	; (8004258 <UART_SetConfig+0x2cc>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800411a:	2bc0      	cmp	r3, #192	; 0xc0
 800411c:	d013      	beq.n	8004146 <UART_SetConfig+0x1ba>
 800411e:	2bc0      	cmp	r3, #192	; 0xc0
 8004120:	d814      	bhi.n	800414c <UART_SetConfig+0x1c0>
 8004122:	2b80      	cmp	r3, #128	; 0x80
 8004124:	d009      	beq.n	800413a <UART_SetConfig+0x1ae>
 8004126:	2b80      	cmp	r3, #128	; 0x80
 8004128:	d810      	bhi.n	800414c <UART_SetConfig+0x1c0>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x1a8>
 800412e:	2b40      	cmp	r3, #64	; 0x40
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x1b4>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x1c0>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e0cc      	b.n	80042d4 <UART_SetConfig+0x348>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e0c9      	b.n	80042d4 <UART_SetConfig+0x348>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e0c6      	b.n	80042d4 <UART_SetConfig+0x348>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e0c3      	b.n	80042d4 <UART_SetConfig+0x348>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e0c0      	b.n	80042d4 <UART_SetConfig+0x348>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a44      	ldr	r2, [pc, #272]	; (8004268 <UART_SetConfig+0x2dc>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d125      	bne.n	80041a8 <UART_SetConfig+0x21c>
 800415c:	4b3e      	ldr	r3, [pc, #248]	; (8004258 <UART_SetConfig+0x2cc>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004166:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800416a:	d017      	beq.n	800419c <UART_SetConfig+0x210>
 800416c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004170:	d817      	bhi.n	80041a2 <UART_SetConfig+0x216>
 8004172:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004176:	d00b      	beq.n	8004190 <UART_SetConfig+0x204>
 8004178:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800417c:	d811      	bhi.n	80041a2 <UART_SetConfig+0x216>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <UART_SetConfig+0x1fe>
 8004182:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004186:	d006      	beq.n	8004196 <UART_SetConfig+0x20a>
 8004188:	e00b      	b.n	80041a2 <UART_SetConfig+0x216>
 800418a:	2300      	movs	r3, #0
 800418c:	77fb      	strb	r3, [r7, #31]
 800418e:	e0a1      	b.n	80042d4 <UART_SetConfig+0x348>
 8004190:	2302      	movs	r3, #2
 8004192:	77fb      	strb	r3, [r7, #31]
 8004194:	e09e      	b.n	80042d4 <UART_SetConfig+0x348>
 8004196:	2304      	movs	r3, #4
 8004198:	77fb      	strb	r3, [r7, #31]
 800419a:	e09b      	b.n	80042d4 <UART_SetConfig+0x348>
 800419c:	2308      	movs	r3, #8
 800419e:	77fb      	strb	r3, [r7, #31]
 80041a0:	e098      	b.n	80042d4 <UART_SetConfig+0x348>
 80041a2:	2310      	movs	r3, #16
 80041a4:	77fb      	strb	r3, [r7, #31]
 80041a6:	e095      	b.n	80042d4 <UART_SetConfig+0x348>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a2f      	ldr	r2, [pc, #188]	; (800426c <UART_SetConfig+0x2e0>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d125      	bne.n	80041fe <UART_SetConfig+0x272>
 80041b2:	4b29      	ldr	r3, [pc, #164]	; (8004258 <UART_SetConfig+0x2cc>)
 80041b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c0:	d017      	beq.n	80041f2 <UART_SetConfig+0x266>
 80041c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041c6:	d817      	bhi.n	80041f8 <UART_SetConfig+0x26c>
 80041c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041cc:	d00b      	beq.n	80041e6 <UART_SetConfig+0x25a>
 80041ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041d2:	d811      	bhi.n	80041f8 <UART_SetConfig+0x26c>
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <UART_SetConfig+0x254>
 80041d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041dc:	d006      	beq.n	80041ec <UART_SetConfig+0x260>
 80041de:	e00b      	b.n	80041f8 <UART_SetConfig+0x26c>
 80041e0:	2301      	movs	r3, #1
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e076      	b.n	80042d4 <UART_SetConfig+0x348>
 80041e6:	2302      	movs	r3, #2
 80041e8:	77fb      	strb	r3, [r7, #31]
 80041ea:	e073      	b.n	80042d4 <UART_SetConfig+0x348>
 80041ec:	2304      	movs	r3, #4
 80041ee:	77fb      	strb	r3, [r7, #31]
 80041f0:	e070      	b.n	80042d4 <UART_SetConfig+0x348>
 80041f2:	2308      	movs	r3, #8
 80041f4:	77fb      	strb	r3, [r7, #31]
 80041f6:	e06d      	b.n	80042d4 <UART_SetConfig+0x348>
 80041f8:	2310      	movs	r3, #16
 80041fa:	77fb      	strb	r3, [r7, #31]
 80041fc:	e06a      	b.n	80042d4 <UART_SetConfig+0x348>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	4a1b      	ldr	r2, [pc, #108]	; (8004270 <UART_SetConfig+0x2e4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d138      	bne.n	800427a <UART_SetConfig+0x2ee>
 8004208:	4b13      	ldr	r3, [pc, #76]	; (8004258 <UART_SetConfig+0x2cc>)
 800420a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800420e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004212:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004216:	d017      	beq.n	8004248 <UART_SetConfig+0x2bc>
 8004218:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800421c:	d82a      	bhi.n	8004274 <UART_SetConfig+0x2e8>
 800421e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004222:	d00b      	beq.n	800423c <UART_SetConfig+0x2b0>
 8004224:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004228:	d824      	bhi.n	8004274 <UART_SetConfig+0x2e8>
 800422a:	2b00      	cmp	r3, #0
 800422c:	d003      	beq.n	8004236 <UART_SetConfig+0x2aa>
 800422e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004232:	d006      	beq.n	8004242 <UART_SetConfig+0x2b6>
 8004234:	e01e      	b.n	8004274 <UART_SetConfig+0x2e8>
 8004236:	2300      	movs	r3, #0
 8004238:	77fb      	strb	r3, [r7, #31]
 800423a:	e04b      	b.n	80042d4 <UART_SetConfig+0x348>
 800423c:	2302      	movs	r3, #2
 800423e:	77fb      	strb	r3, [r7, #31]
 8004240:	e048      	b.n	80042d4 <UART_SetConfig+0x348>
 8004242:	2304      	movs	r3, #4
 8004244:	77fb      	strb	r3, [r7, #31]
 8004246:	e045      	b.n	80042d4 <UART_SetConfig+0x348>
 8004248:	2308      	movs	r3, #8
 800424a:	77fb      	strb	r3, [r7, #31]
 800424c:	e042      	b.n	80042d4 <UART_SetConfig+0x348>
 800424e:	bf00      	nop
 8004250:	efff69f3 	.word	0xefff69f3
 8004254:	40011000 	.word	0x40011000
 8004258:	40023800 	.word	0x40023800
 800425c:	40004400 	.word	0x40004400
 8004260:	40004800 	.word	0x40004800
 8004264:	40004c00 	.word	0x40004c00
 8004268:	40005000 	.word	0x40005000
 800426c:	40011400 	.word	0x40011400
 8004270:	40007800 	.word	0x40007800
 8004274:	2310      	movs	r3, #16
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e02c      	b.n	80042d4 <UART_SetConfig+0x348>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	4a72      	ldr	r2, [pc, #456]	; (8004448 <UART_SetConfig+0x4bc>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d125      	bne.n	80042d0 <UART_SetConfig+0x344>
 8004284:	4b71      	ldr	r3, [pc, #452]	; (800444c <UART_SetConfig+0x4c0>)
 8004286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800428a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800428e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004292:	d017      	beq.n	80042c4 <UART_SetConfig+0x338>
 8004294:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004298:	d817      	bhi.n	80042ca <UART_SetConfig+0x33e>
 800429a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800429e:	d00b      	beq.n	80042b8 <UART_SetConfig+0x32c>
 80042a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042a4:	d811      	bhi.n	80042ca <UART_SetConfig+0x33e>
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d003      	beq.n	80042b2 <UART_SetConfig+0x326>
 80042aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042ae:	d006      	beq.n	80042be <UART_SetConfig+0x332>
 80042b0:	e00b      	b.n	80042ca <UART_SetConfig+0x33e>
 80042b2:	2300      	movs	r3, #0
 80042b4:	77fb      	strb	r3, [r7, #31]
 80042b6:	e00d      	b.n	80042d4 <UART_SetConfig+0x348>
 80042b8:	2302      	movs	r3, #2
 80042ba:	77fb      	strb	r3, [r7, #31]
 80042bc:	e00a      	b.n	80042d4 <UART_SetConfig+0x348>
 80042be:	2304      	movs	r3, #4
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e007      	b.n	80042d4 <UART_SetConfig+0x348>
 80042c4:	2308      	movs	r3, #8
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e004      	b.n	80042d4 <UART_SetConfig+0x348>
 80042ca:	2310      	movs	r3, #16
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e001      	b.n	80042d4 <UART_SetConfig+0x348>
 80042d0:	2310      	movs	r3, #16
 80042d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042dc:	d15b      	bne.n	8004396 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80042de:	7ffb      	ldrb	r3, [r7, #31]
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d828      	bhi.n	8004336 <UART_SetConfig+0x3aa>
 80042e4:	a201      	add	r2, pc, #4	; (adr r2, 80042ec <UART_SetConfig+0x360>)
 80042e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042ea:	bf00      	nop
 80042ec:	08004311 	.word	0x08004311
 80042f0:	08004319 	.word	0x08004319
 80042f4:	08004321 	.word	0x08004321
 80042f8:	08004337 	.word	0x08004337
 80042fc:	08004327 	.word	0x08004327
 8004300:	08004337 	.word	0x08004337
 8004304:	08004337 	.word	0x08004337
 8004308:	08004337 	.word	0x08004337
 800430c:	0800432f 	.word	0x0800432f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004310:	f7fe fc48 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 8004314:	61b8      	str	r0, [r7, #24]
        break;
 8004316:	e013      	b.n	8004340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004318:	f7fe fc58 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 800431c:	61b8      	str	r0, [r7, #24]
        break;
 800431e:	e00f      	b.n	8004340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <UART_SetConfig+0x4c4>)
 8004322:	61bb      	str	r3, [r7, #24]
        break;
 8004324:	e00c      	b.n	8004340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004326:	f7fe fb2b 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 800432a:	61b8      	str	r0, [r7, #24]
        break;
 800432c:	e008      	b.n	8004340 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800432e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004332:	61bb      	str	r3, [r7, #24]
        break;
 8004334:	e004      	b.n	8004340 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004336:	2300      	movs	r3, #0
 8004338:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77bb      	strb	r3, [r7, #30]
        break;
 800433e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d074      	beq.n	8004430 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004346:	69bb      	ldr	r3, [r7, #24]
 8004348:	005a      	lsls	r2, r3, #1
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	085b      	lsrs	r3, r3, #1
 8004350:	441a      	add	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	fbb2 f3f3 	udiv	r3, r2, r3
 800435a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800435c:	693b      	ldr	r3, [r7, #16]
 800435e:	2b0f      	cmp	r3, #15
 8004360:	d916      	bls.n	8004390 <UART_SetConfig+0x404>
 8004362:	693b      	ldr	r3, [r7, #16]
 8004364:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004368:	d212      	bcs.n	8004390 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	b29b      	uxth	r3, r3
 800436e:	f023 030f 	bic.w	r3, r3, #15
 8004372:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	085b      	lsrs	r3, r3, #1
 8004378:	b29b      	uxth	r3, r3
 800437a:	f003 0307 	and.w	r3, r3, #7
 800437e:	b29a      	uxth	r2, r3
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	4313      	orrs	r3, r2
 8004384:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	89fa      	ldrh	r2, [r7, #14]
 800438c:	60da      	str	r2, [r3, #12]
 800438e:	e04f      	b.n	8004430 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	77bb      	strb	r3, [r7, #30]
 8004394:	e04c      	b.n	8004430 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004396:	7ffb      	ldrb	r3, [r7, #31]
 8004398:	2b08      	cmp	r3, #8
 800439a:	d828      	bhi.n	80043ee <UART_SetConfig+0x462>
 800439c:	a201      	add	r2, pc, #4	; (adr r2, 80043a4 <UART_SetConfig+0x418>)
 800439e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043a2:	bf00      	nop
 80043a4:	080043c9 	.word	0x080043c9
 80043a8:	080043d1 	.word	0x080043d1
 80043ac:	080043d9 	.word	0x080043d9
 80043b0:	080043ef 	.word	0x080043ef
 80043b4:	080043df 	.word	0x080043df
 80043b8:	080043ef 	.word	0x080043ef
 80043bc:	080043ef 	.word	0x080043ef
 80043c0:	080043ef 	.word	0x080043ef
 80043c4:	080043e7 	.word	0x080043e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c8:	f7fe fbec 	bl	8002ba4 <HAL_RCC_GetPCLK1Freq>
 80043cc:	61b8      	str	r0, [r7, #24]
        break;
 80043ce:	e013      	b.n	80043f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043d0:	f7fe fbfc 	bl	8002bcc <HAL_RCC_GetPCLK2Freq>
 80043d4:	61b8      	str	r0, [r7, #24]
        break;
 80043d6:	e00f      	b.n	80043f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d8:	4b1d      	ldr	r3, [pc, #116]	; (8004450 <UART_SetConfig+0x4c4>)
 80043da:	61bb      	str	r3, [r7, #24]
        break;
 80043dc:	e00c      	b.n	80043f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043de:	f7fe facf 	bl	8002980 <HAL_RCC_GetSysClockFreq>
 80043e2:	61b8      	str	r0, [r7, #24]
        break;
 80043e4:	e008      	b.n	80043f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ea:	61bb      	str	r3, [r7, #24]
        break;
 80043ec:	e004      	b.n	80043f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80043ee:	2300      	movs	r3, #0
 80043f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	77bb      	strb	r3, [r7, #30]
        break;
 80043f6:	bf00      	nop
    }

    if (pclk != 0U)
 80043f8:	69bb      	ldr	r3, [r7, #24]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d018      	beq.n	8004430 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	085a      	lsrs	r2, r3, #1
 8004404:	69bb      	ldr	r3, [r7, #24]
 8004406:	441a      	add	r2, r3
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004410:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	2b0f      	cmp	r3, #15
 8004416:	d909      	bls.n	800442c <UART_SetConfig+0x4a0>
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800441e:	d205      	bcs.n	800442c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	b29a      	uxth	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	e001      	b.n	8004430 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2200      	movs	r2, #0
 8004434:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800443c:	7fbb      	ldrb	r3, [r7, #30]
}
 800443e:	4618      	mov	r0, r3
 8004440:	3720      	adds	r7, #32
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}
 8004446:	bf00      	nop
 8004448:	40007c00 	.word	0x40007c00
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400

08004454 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	f003 0301 	and.w	r3, r3, #1
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	430a      	orrs	r2, r1
 800447c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d00a      	beq.n	80044a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	430a      	orrs	r2, r1
 800449e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00a      	beq.n	80044c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	430a      	orrs	r2, r1
 80044c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	f003 0308 	and.w	r3, r3, #8
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d00a      	beq.n	80044e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	430a      	orrs	r2, r1
 80044e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0310 	and.w	r3, r3, #16
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0320 	and.w	r3, r3, #32
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004530:	2b00      	cmp	r3, #0
 8004532:	d01a      	beq.n	800456a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800454e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004552:	d10a      	bne.n	800456a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	430a      	orrs	r2, r1
 8004568:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	430a      	orrs	r2, r1
 800458a:	605a      	str	r2, [r3, #4]
  }
}
 800458c:	bf00      	nop
 800458e:	370c      	adds	r7, #12
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b086      	sub	sp, #24
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045a8:	f7fc fe06 	bl	80011b8 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d10e      	bne.n	80045da <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045bc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045c0:	9300      	str	r3, [sp, #0]
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f000 f831 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 80045d0:	4603      	mov	r3, r0
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d001      	beq.n	80045da <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80045d6:	2303      	movs	r3, #3
 80045d8:	e027      	b.n	800462a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f003 0304 	and.w	r3, r3, #4
 80045e4:	2b04      	cmp	r3, #4
 80045e6:	d10e      	bne.n	8004606 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 f81b 	bl	8004632 <UART_WaitOnFlagUntilTimeout>
 80045fc:	4603      	mov	r3, r0
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d001      	beq.n	8004606 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004602:	2303      	movs	r3, #3
 8004604:	e011      	b.n	800462a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2220      	movs	r2, #32
 800460a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2220      	movs	r2, #32
 8004610:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2200      	movs	r2, #0
 8004618:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}

08004632 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	b09c      	sub	sp, #112	; 0x70
 8004636:	af00      	add	r7, sp, #0
 8004638:	60f8      	str	r0, [r7, #12]
 800463a:	60b9      	str	r1, [r7, #8]
 800463c:	603b      	str	r3, [r7, #0]
 800463e:	4613      	mov	r3, r2
 8004640:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004642:	e0a7      	b.n	8004794 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004644:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800464a:	f000 80a3 	beq.w	8004794 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800464e:	f7fc fdb3 	bl	80011b8 <HAL_GetTick>
 8004652:	4602      	mov	r2, r0
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	1ad3      	subs	r3, r2, r3
 8004658:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800465a:	429a      	cmp	r2, r3
 800465c:	d302      	bcc.n	8004664 <UART_WaitOnFlagUntilTimeout+0x32>
 800465e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004660:	2b00      	cmp	r3, #0
 8004662:	d13f      	bne.n	80046e4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004672:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004674:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004678:	667b      	str	r3, [r7, #100]	; 0x64
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	461a      	mov	r2, r3
 8004680:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004682:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004684:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004688:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e6      	bne.n	8004664 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3308      	adds	r3, #8
 800469c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	663b      	str	r3, [r7, #96]	; 0x60
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3308      	adds	r3, #8
 80046b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80046b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80046b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80046bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046be:	e841 2300 	strex	r3, r2, [r1]
 80046c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80046c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d1e5      	bne.n	8004696 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2220      	movs	r2, #32
 80046ce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e068      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f003 0304 	and.w	r3, r3, #4
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d050      	beq.n	8004794 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	69db      	ldr	r3, [r3, #28]
 80046f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004700:	d148      	bne.n	8004794 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800470a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004714:	e853 3f00 	ldrex	r3, [r3]
 8004718:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800471a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800471c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004720:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	461a      	mov	r2, r3
 8004728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800472a:	637b      	str	r3, [r7, #52]	; 0x34
 800472c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800472e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004732:	e841 2300 	strex	r3, r2, [r1]
 8004736:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800473a:	2b00      	cmp	r3, #0
 800473c:	d1e6      	bne.n	800470c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	3308      	adds	r3, #8
 8004744:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	e853 3f00 	ldrex	r3, [r3]
 800474c:	613b      	str	r3, [r7, #16]
   return(result);
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f023 0301 	bic.w	r3, r3, #1
 8004754:	66bb      	str	r3, [r7, #104]	; 0x68
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	3308      	adds	r3, #8
 800475c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800475e:	623a      	str	r2, [r7, #32]
 8004760:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004762:	69f9      	ldr	r1, [r7, #28]
 8004764:	6a3a      	ldr	r2, [r7, #32]
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	61bb      	str	r3, [r7, #24]
   return(result);
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1e5      	bne.n	800473e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	2220      	movs	r2, #32
 8004784:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	2200      	movs	r2, #0
 800478c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004790:	2303      	movs	r3, #3
 8004792:	e010      	b.n	80047b6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	69da      	ldr	r2, [r3, #28]
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	4013      	ands	r3, r2
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	429a      	cmp	r2, r3
 80047a2:	bf0c      	ite	eq
 80047a4:	2301      	moveq	r3, #1
 80047a6:	2300      	movne	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
 80047ac:	79fb      	ldrb	r3, [r7, #7]
 80047ae:	429a      	cmp	r2, r3
 80047b0:	f43f af48 	beq.w	8004644 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3770      	adds	r7, #112	; 0x70
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
	...

080047c0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c0:	b084      	sub	sp, #16
 80047c2:	b580      	push	{r7, lr}
 80047c4:	b084      	sub	sp, #16
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
 80047ca:	f107 001c 	add.w	r0, r7, #28
 80047ce:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80047d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d120      	bne.n	800481a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047dc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	68da      	ldr	r2, [r3, #12]
 80047e8:	4b20      	ldr	r3, [pc, #128]	; (800486c <USB_CoreInit+0xac>)
 80047ea:	4013      	ands	r3, r2
 80047ec:	687a      	ldr	r2, [r7, #4]
 80047ee:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80047fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d105      	bne.n	800480e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa96 	bl	8004d40 <USB_CoreReset>
 8004814:	4603      	mov	r3, r0
 8004816:	73fb      	strb	r3, [r7, #15]
 8004818:	e010      	b.n	800483c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004826:	6878      	ldr	r0, [r7, #4]
 8004828:	f000 fa8a 	bl	8004d40 <USB_CoreReset>
 800482c:	4603      	mov	r3, r0
 800482e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004834:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	2b01      	cmp	r3, #1
 8004840:	d10b      	bne.n	800485a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	689b      	ldr	r3, [r3, #8]
 8004846:	f043 0206 	orr.w	r2, r3, #6
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f043 0220 	orr.w	r2, r3, #32
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800485a:	7bfb      	ldrb	r3, [r7, #15]
}
 800485c:	4618      	mov	r0, r3
 800485e:	3710      	adds	r7, #16
 8004860:	46bd      	mov	sp, r7
 8004862:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004866:	b004      	add	sp, #16
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	ffbdffbf 	.word	0xffbdffbf

08004870 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004870:	b480      	push	{r7}
 8004872:	b083      	sub	sp, #12
 8004874:	af00      	add	r7, sp, #0
 8004876:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 0201 	bic.w	r2, r3, #1
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004884:	2300      	movs	r3, #0
}
 8004886:	4618      	mov	r0, r3
 8004888:	370c      	adds	r7, #12
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b084      	sub	sp, #16
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	460b      	mov	r3, r1
 800489c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800489e:	2300      	movs	r3, #0
 80048a0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048ae:	78fb      	ldrb	r3, [r7, #3]
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d115      	bne.n	80048e0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048c0:	2001      	movs	r0, #1
 80048c2:	f7fc fc85 	bl	80011d0 <HAL_Delay>
      ms++;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3301      	adds	r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 fa29 	bl	8004d24 <USB_GetMode>
 80048d2:	4603      	mov	r3, r0
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d01e      	beq.n	8004916 <USB_SetCurrentMode+0x84>
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b31      	cmp	r3, #49	; 0x31
 80048dc:	d9f0      	bls.n	80048c0 <USB_SetCurrentMode+0x2e>
 80048de:	e01a      	b.n	8004916 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80048e0:	78fb      	ldrb	r3, [r7, #3]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d115      	bne.n	8004912 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	68db      	ldr	r3, [r3, #12]
 80048ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80048f2:	2001      	movs	r0, #1
 80048f4:	f7fc fc6c 	bl	80011d0 <HAL_Delay>
      ms++;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	3301      	adds	r3, #1
 80048fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 fa10 	bl	8004d24 <USB_GetMode>
 8004904:	4603      	mov	r3, r0
 8004906:	2b00      	cmp	r3, #0
 8004908:	d005      	beq.n	8004916 <USB_SetCurrentMode+0x84>
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	2b31      	cmp	r3, #49	; 0x31
 800490e:	d9f0      	bls.n	80048f2 <USB_SetCurrentMode+0x60>
 8004910:	e001      	b.n	8004916 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	e005      	b.n	8004922 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2b32      	cmp	r3, #50	; 0x32
 800491a:	d101      	bne.n	8004920 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800491c:	2301      	movs	r3, #1
 800491e:	e000      	b.n	8004922 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3710      	adds	r7, #16
 8004926:	46bd      	mov	sp, r7
 8004928:	bd80      	pop	{r7, pc}
	...

0800492c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800492c:	b084      	sub	sp, #16
 800492e:	b580      	push	{r7, lr}
 8004930:	b086      	sub	sp, #24
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800493a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800493e:	2300      	movs	r3, #0
 8004940:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004946:	2300      	movs	r3, #0
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e009      	b.n	8004960 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	693b      	ldr	r3, [r7, #16]
 8004950:	3340      	adds	r3, #64	; 0x40
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	4413      	add	r3, r2
 8004956:	2200      	movs	r2, #0
 8004958:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	3301      	adds	r3, #1
 800495e:	613b      	str	r3, [r7, #16]
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b0e      	cmp	r3, #14
 8004964:	d9f2      	bls.n	800494c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004966:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004968:	2b00      	cmp	r3, #0
 800496a:	d11c      	bne.n	80049a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800497a:	f043 0302 	orr.w	r3, r3, #2
 800497e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004984:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
 80049a4:	e005      	b.n	80049b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80049b8:	461a      	mov	r2, r3
 80049ba:	2300      	movs	r3, #0
 80049bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c4:	4619      	mov	r1, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049cc:	461a      	mov	r2, r3
 80049ce:	680b      	ldr	r3, [r1, #0]
 80049d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80049d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d10c      	bne.n	80049f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80049d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d104      	bne.n	80049e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80049de:	2100      	movs	r1, #0
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f000 f965 	bl	8004cb0 <USB_SetDevSpeed>
 80049e6:	e008      	b.n	80049fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80049e8:	2101      	movs	r1, #1
 80049ea:	6878      	ldr	r0, [r7, #4]
 80049ec:	f000 f960 	bl	8004cb0 <USB_SetDevSpeed>
 80049f0:	e003      	b.n	80049fa <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80049f2:	2103      	movs	r1, #3
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f000 f95b 	bl	8004cb0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80049fa:	2110      	movs	r1, #16
 80049fc:	6878      	ldr	r0, [r7, #4]
 80049fe:	f000 f8f3 	bl	8004be8 <USB_FlushTxFifo>
 8004a02:	4603      	mov	r3, r0
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d001      	beq.n	8004a0c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f000 f91f 	bl	8004c50 <USB_FlushRxFifo>
 8004a12:	4603      	mov	r3, r0
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d001      	beq.n	8004a1c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a22:	461a      	mov	r2, r3
 8004a24:	2300      	movs	r3, #0
 8004a26:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2e:	461a      	mov	r2, r3
 8004a30:	2300      	movs	r3, #0
 8004a32:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a40:	2300      	movs	r3, #0
 8004a42:	613b      	str	r3, [r7, #16]
 8004a44:	e043      	b.n	8004ace <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	015a      	lsls	r2, r3, #5
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	4413      	add	r3, r2
 8004a4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a5c:	d118      	bne.n	8004a90 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10a      	bne.n	8004a7a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004a64:	693b      	ldr	r3, [r7, #16]
 8004a66:	015a      	lsls	r2, r3, #5
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a70:	461a      	mov	r2, r3
 8004a72:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a76:	6013      	str	r3, [r2, #0]
 8004a78:	e013      	b.n	8004aa2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	015a      	lsls	r2, r3, #5
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	4413      	add	r3, r2
 8004a82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a86:	461a      	mov	r2, r3
 8004a88:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a8c:	6013      	str	r3, [r2, #0]
 8004a8e:	e008      	b.n	8004aa2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	015a      	lsls	r2, r3, #5
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	461a      	mov	r2, r3
 8004ab0:	2300      	movs	r3, #0
 8004ab2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	015a      	lsls	r2, r3, #5
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4413      	add	r3, r2
 8004abc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ac0:	461a      	mov	r2, r3
 8004ac2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ac6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	3301      	adds	r3, #1
 8004acc:	613b      	str	r3, [r7, #16]
 8004ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad0:	693a      	ldr	r2, [r7, #16]
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d3b7      	bcc.n	8004a46 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	613b      	str	r3, [r7, #16]
 8004ada:	e043      	b.n	8004b64 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004af2:	d118      	bne.n	8004b26 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10a      	bne.n	8004b10 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	015a      	lsls	r2, r3, #5
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	4413      	add	r3, r2
 8004b02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b06:	461a      	mov	r2, r3
 8004b08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b0c:	6013      	str	r3, [r2, #0]
 8004b0e:	e013      	b.n	8004b38 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b22:	6013      	str	r3, [r2, #0]
 8004b24:	e008      	b.n	8004b38 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	461a      	mov	r2, r3
 8004b34:	2300      	movs	r3, #0
 8004b36:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	461a      	mov	r2, r3
 8004b46:	2300      	movs	r3, #0
 8004b48:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b4a:	693b      	ldr	r3, [r7, #16]
 8004b4c:	015a      	lsls	r2, r3, #5
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	4413      	add	r3, r2
 8004b52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b56:	461a      	mov	r2, r3
 8004b58:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b5c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	3301      	adds	r3, #1
 8004b62:	613b      	str	r3, [r7, #16]
 8004b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d3b7      	bcc.n	8004adc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	691b      	ldr	r3, [r3, #16]
 8004b74:	68fa      	ldr	r2, [r7, #12]
 8004b76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b7a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004b8c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	699b      	ldr	r3, [r3, #24]
 8004b98:	f043 0210 	orr.w	r2, r3, #16
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	699a      	ldr	r2, [r3, #24]
 8004ba4:	4b0e      	ldr	r3, [pc, #56]	; (8004be0 <USB_DevInit+0x2b4>)
 8004ba6:	4313      	orrs	r3, r2
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d005      	beq.n	8004bbe <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	699b      	ldr	r3, [r3, #24]
 8004bb6:	f043 0208 	orr.w	r2, r3, #8
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004bbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d105      	bne.n	8004bd0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	699a      	ldr	r2, [r3, #24]
 8004bc8:	4b06      	ldr	r3, [pc, #24]	; (8004be4 <USB_DevInit+0x2b8>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004bd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3718      	adds	r7, #24
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004bdc:	b004      	add	sp, #16
 8004bde:	4770      	bx	lr
 8004be0:	803c3800 	.word	0x803c3800
 8004be4:	40000004 	.word	0x40000004

08004be8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b085      	sub	sp, #20
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
 8004bf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <USB_FlushTxFifo+0x64>)
 8004c00:	4293      	cmp	r3, r2
 8004c02:	d901      	bls.n	8004c08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c04:	2303      	movs	r3, #3
 8004c06:	e01b      	b.n	8004c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	daf2      	bge.n	8004bf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	019b      	lsls	r3, r3, #6
 8004c18:	f043 0220 	orr.w	r2, r3, #32
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	3301      	adds	r3, #1
 8004c24:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a08      	ldr	r2, [pc, #32]	; (8004c4c <USB_FlushTxFifo+0x64>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d901      	bls.n	8004c32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c2e:	2303      	movs	r3, #3
 8004c30:	e006      	b.n	8004c40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	f003 0320 	and.w	r3, r3, #32
 8004c3a:	2b20      	cmp	r3, #32
 8004c3c:	d0f0      	beq.n	8004c20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3714      	adds	r7, #20
 8004c44:	46bd      	mov	sp, r7
 8004c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c4a:	4770      	bx	lr
 8004c4c:	00030d40 	.word	0x00030d40

08004c50 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	3301      	adds	r3, #1
 8004c60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	4a11      	ldr	r2, [pc, #68]	; (8004cac <USB_FlushRxFifo+0x5c>)
 8004c66:	4293      	cmp	r3, r2
 8004c68:	d901      	bls.n	8004c6e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c6a:	2303      	movs	r3, #3
 8004c6c:	e018      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	daf2      	bge.n	8004c5c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2210      	movs	r2, #16
 8004c7e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	3301      	adds	r3, #1
 8004c84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	4a08      	ldr	r2, [pc, #32]	; (8004cac <USB_FlushRxFifo+0x5c>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d901      	bls.n	8004c92 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e006      	b.n	8004ca0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	f003 0310 	and.w	r3, r3, #16
 8004c9a:	2b10      	cmp	r3, #16
 8004c9c:	d0f0      	beq.n	8004c80 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	3714      	adds	r7, #20
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr
 8004cac:	00030d40 	.word	0x00030d40

08004cb0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	460b      	mov	r3, r1
 8004cba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	78fb      	ldrb	r3, [r7, #3]
 8004cca:	68f9      	ldr	r1, [r7, #12]
 8004ccc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004cd4:	2300      	movs	r3, #0
}
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	3714      	adds	r7, #20
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce0:	4770      	bx	lr

08004ce2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004ce2:	b480      	push	{r7}
 8004ce4:	b085      	sub	sp, #20
 8004ce6:	af00      	add	r7, sp, #0
 8004ce8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004cfc:	f023 0303 	bic.w	r3, r3, #3
 8004d00:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	68fa      	ldr	r2, [r7, #12]
 8004d0c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d10:	f043 0302 	orr.w	r3, r3, #2
 8004d14:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d16:	2300      	movs	r3, #0
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3714      	adds	r7, #20
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d22:	4770      	bx	lr

08004d24 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0301 	and.w	r3, r3, #1
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	370c      	adds	r7, #12
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr

08004d40 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	3301      	adds	r3, #1
 8004d50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	4a13      	ldr	r2, [pc, #76]	; (8004da4 <USB_CoreReset+0x64>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d901      	bls.n	8004d5e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d5a:	2303      	movs	r3, #3
 8004d5c:	e01b      	b.n	8004d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	691b      	ldr	r3, [r3, #16]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	daf2      	bge.n	8004d4c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d66:	2300      	movs	r3, #0
 8004d68:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	f043 0201 	orr.w	r2, r3, #1
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	3301      	adds	r3, #1
 8004d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4a09      	ldr	r2, [pc, #36]	; (8004da4 <USB_CoreReset+0x64>)
 8004d80:	4293      	cmp	r3, r2
 8004d82:	d901      	bls.n	8004d88 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e006      	b.n	8004d96 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
 8004d90:	2b01      	cmp	r3, #1
 8004d92:	d0f0      	beq.n	8004d76 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d94:	2300      	movs	r3, #0
}
 8004d96:	4618      	mov	r0, r3
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	00030d40 	.word	0x00030d40

08004da8 <siprintf>:
 8004da8:	b40e      	push	{r1, r2, r3}
 8004daa:	b500      	push	{lr}
 8004dac:	b09c      	sub	sp, #112	; 0x70
 8004dae:	ab1d      	add	r3, sp, #116	; 0x74
 8004db0:	9002      	str	r0, [sp, #8]
 8004db2:	9006      	str	r0, [sp, #24]
 8004db4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004db8:	4809      	ldr	r0, [pc, #36]	; (8004de0 <siprintf+0x38>)
 8004dba:	9107      	str	r1, [sp, #28]
 8004dbc:	9104      	str	r1, [sp, #16]
 8004dbe:	4909      	ldr	r1, [pc, #36]	; (8004de4 <siprintf+0x3c>)
 8004dc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004dc4:	9105      	str	r1, [sp, #20]
 8004dc6:	6800      	ldr	r0, [r0, #0]
 8004dc8:	9301      	str	r3, [sp, #4]
 8004dca:	a902      	add	r1, sp, #8
 8004dcc:	f000 f992 	bl	80050f4 <_svfiprintf_r>
 8004dd0:	9b02      	ldr	r3, [sp, #8]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	701a      	strb	r2, [r3, #0]
 8004dd6:	b01c      	add	sp, #112	; 0x70
 8004dd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004ddc:	b003      	add	sp, #12
 8004dde:	4770      	bx	lr
 8004de0:	20000058 	.word	0x20000058
 8004de4:	ffff0208 	.word	0xffff0208

08004de8 <memset>:
 8004de8:	4402      	add	r2, r0
 8004dea:	4603      	mov	r3, r0
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d100      	bne.n	8004df2 <memset+0xa>
 8004df0:	4770      	bx	lr
 8004df2:	f803 1b01 	strb.w	r1, [r3], #1
 8004df6:	e7f9      	b.n	8004dec <memset+0x4>

08004df8 <__errno>:
 8004df8:	4b01      	ldr	r3, [pc, #4]	; (8004e00 <__errno+0x8>)
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	20000058 	.word	0x20000058

08004e04 <__libc_init_array>:
 8004e04:	b570      	push	{r4, r5, r6, lr}
 8004e06:	4d0d      	ldr	r5, [pc, #52]	; (8004e3c <__libc_init_array+0x38>)
 8004e08:	4c0d      	ldr	r4, [pc, #52]	; (8004e40 <__libc_init_array+0x3c>)
 8004e0a:	1b64      	subs	r4, r4, r5
 8004e0c:	10a4      	asrs	r4, r4, #2
 8004e0e:	2600      	movs	r6, #0
 8004e10:	42a6      	cmp	r6, r4
 8004e12:	d109      	bne.n	8004e28 <__libc_init_array+0x24>
 8004e14:	4d0b      	ldr	r5, [pc, #44]	; (8004e44 <__libc_init_array+0x40>)
 8004e16:	4c0c      	ldr	r4, [pc, #48]	; (8004e48 <__libc_init_array+0x44>)
 8004e18:	f000 fc6a 	bl	80056f0 <_init>
 8004e1c:	1b64      	subs	r4, r4, r5
 8004e1e:	10a4      	asrs	r4, r4, #2
 8004e20:	2600      	movs	r6, #0
 8004e22:	42a6      	cmp	r6, r4
 8004e24:	d105      	bne.n	8004e32 <__libc_init_array+0x2e>
 8004e26:	bd70      	pop	{r4, r5, r6, pc}
 8004e28:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e2c:	4798      	blx	r3
 8004e2e:	3601      	adds	r6, #1
 8004e30:	e7ee      	b.n	8004e10 <__libc_init_array+0xc>
 8004e32:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e36:	4798      	blx	r3
 8004e38:	3601      	adds	r6, #1
 8004e3a:	e7f2      	b.n	8004e22 <__libc_init_array+0x1e>
 8004e3c:	0800578c 	.word	0x0800578c
 8004e40:	0800578c 	.word	0x0800578c
 8004e44:	0800578c 	.word	0x0800578c
 8004e48:	08005790 	.word	0x08005790

08004e4c <__retarget_lock_acquire_recursive>:
 8004e4c:	4770      	bx	lr

08004e4e <__retarget_lock_release_recursive>:
 8004e4e:	4770      	bx	lr

08004e50 <_free_r>:
 8004e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e52:	2900      	cmp	r1, #0
 8004e54:	d044      	beq.n	8004ee0 <_free_r+0x90>
 8004e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5a:	9001      	str	r0, [sp, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8004e62:	bfb8      	it	lt
 8004e64:	18e4      	addlt	r4, r4, r3
 8004e66:	f000 f8df 	bl	8005028 <__malloc_lock>
 8004e6a:	4a1e      	ldr	r2, [pc, #120]	; (8004ee4 <_free_r+0x94>)
 8004e6c:	9801      	ldr	r0, [sp, #4]
 8004e6e:	6813      	ldr	r3, [r2, #0]
 8004e70:	b933      	cbnz	r3, 8004e80 <_free_r+0x30>
 8004e72:	6063      	str	r3, [r4, #4]
 8004e74:	6014      	str	r4, [r2, #0]
 8004e76:	b003      	add	sp, #12
 8004e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004e7c:	f000 b8da 	b.w	8005034 <__malloc_unlock>
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d908      	bls.n	8004e96 <_free_r+0x46>
 8004e84:	6825      	ldr	r5, [r4, #0]
 8004e86:	1961      	adds	r1, r4, r5
 8004e88:	428b      	cmp	r3, r1
 8004e8a:	bf01      	itttt	eq
 8004e8c:	6819      	ldreq	r1, [r3, #0]
 8004e8e:	685b      	ldreq	r3, [r3, #4]
 8004e90:	1949      	addeq	r1, r1, r5
 8004e92:	6021      	streq	r1, [r4, #0]
 8004e94:	e7ed      	b.n	8004e72 <_free_r+0x22>
 8004e96:	461a      	mov	r2, r3
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	b10b      	cbz	r3, 8004ea0 <_free_r+0x50>
 8004e9c:	42a3      	cmp	r3, r4
 8004e9e:	d9fa      	bls.n	8004e96 <_free_r+0x46>
 8004ea0:	6811      	ldr	r1, [r2, #0]
 8004ea2:	1855      	adds	r5, r2, r1
 8004ea4:	42a5      	cmp	r5, r4
 8004ea6:	d10b      	bne.n	8004ec0 <_free_r+0x70>
 8004ea8:	6824      	ldr	r4, [r4, #0]
 8004eaa:	4421      	add	r1, r4
 8004eac:	1854      	adds	r4, r2, r1
 8004eae:	42a3      	cmp	r3, r4
 8004eb0:	6011      	str	r1, [r2, #0]
 8004eb2:	d1e0      	bne.n	8004e76 <_free_r+0x26>
 8004eb4:	681c      	ldr	r4, [r3, #0]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	6053      	str	r3, [r2, #4]
 8004eba:	440c      	add	r4, r1
 8004ebc:	6014      	str	r4, [r2, #0]
 8004ebe:	e7da      	b.n	8004e76 <_free_r+0x26>
 8004ec0:	d902      	bls.n	8004ec8 <_free_r+0x78>
 8004ec2:	230c      	movs	r3, #12
 8004ec4:	6003      	str	r3, [r0, #0]
 8004ec6:	e7d6      	b.n	8004e76 <_free_r+0x26>
 8004ec8:	6825      	ldr	r5, [r4, #0]
 8004eca:	1961      	adds	r1, r4, r5
 8004ecc:	428b      	cmp	r3, r1
 8004ece:	bf04      	itt	eq
 8004ed0:	6819      	ldreq	r1, [r3, #0]
 8004ed2:	685b      	ldreq	r3, [r3, #4]
 8004ed4:	6063      	str	r3, [r4, #4]
 8004ed6:	bf04      	itt	eq
 8004ed8:	1949      	addeq	r1, r1, r5
 8004eda:	6021      	streq	r1, [r4, #0]
 8004edc:	6054      	str	r4, [r2, #4]
 8004ede:	e7ca      	b.n	8004e76 <_free_r+0x26>
 8004ee0:	b003      	add	sp, #12
 8004ee2:	bd30      	pop	{r4, r5, pc}
 8004ee4:	2000083c 	.word	0x2000083c

08004ee8 <sbrk_aligned>:
 8004ee8:	b570      	push	{r4, r5, r6, lr}
 8004eea:	4e0e      	ldr	r6, [pc, #56]	; (8004f24 <sbrk_aligned+0x3c>)
 8004eec:	460c      	mov	r4, r1
 8004eee:	6831      	ldr	r1, [r6, #0]
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	b911      	cbnz	r1, 8004efa <sbrk_aligned+0x12>
 8004ef4:	f000 fba6 	bl	8005644 <_sbrk_r>
 8004ef8:	6030      	str	r0, [r6, #0]
 8004efa:	4621      	mov	r1, r4
 8004efc:	4628      	mov	r0, r5
 8004efe:	f000 fba1 	bl	8005644 <_sbrk_r>
 8004f02:	1c43      	adds	r3, r0, #1
 8004f04:	d00a      	beq.n	8004f1c <sbrk_aligned+0x34>
 8004f06:	1cc4      	adds	r4, r0, #3
 8004f08:	f024 0403 	bic.w	r4, r4, #3
 8004f0c:	42a0      	cmp	r0, r4
 8004f0e:	d007      	beq.n	8004f20 <sbrk_aligned+0x38>
 8004f10:	1a21      	subs	r1, r4, r0
 8004f12:	4628      	mov	r0, r5
 8004f14:	f000 fb96 	bl	8005644 <_sbrk_r>
 8004f18:	3001      	adds	r0, #1
 8004f1a:	d101      	bne.n	8004f20 <sbrk_aligned+0x38>
 8004f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8004f20:	4620      	mov	r0, r4
 8004f22:	bd70      	pop	{r4, r5, r6, pc}
 8004f24:	20000840 	.word	0x20000840

08004f28 <_malloc_r>:
 8004f28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f2c:	1ccd      	adds	r5, r1, #3
 8004f2e:	f025 0503 	bic.w	r5, r5, #3
 8004f32:	3508      	adds	r5, #8
 8004f34:	2d0c      	cmp	r5, #12
 8004f36:	bf38      	it	cc
 8004f38:	250c      	movcc	r5, #12
 8004f3a:	2d00      	cmp	r5, #0
 8004f3c:	4607      	mov	r7, r0
 8004f3e:	db01      	blt.n	8004f44 <_malloc_r+0x1c>
 8004f40:	42a9      	cmp	r1, r5
 8004f42:	d905      	bls.n	8004f50 <_malloc_r+0x28>
 8004f44:	230c      	movs	r3, #12
 8004f46:	603b      	str	r3, [r7, #0]
 8004f48:	2600      	movs	r6, #0
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f50:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005024 <_malloc_r+0xfc>
 8004f54:	f000 f868 	bl	8005028 <__malloc_lock>
 8004f58:	f8d8 3000 	ldr.w	r3, [r8]
 8004f5c:	461c      	mov	r4, r3
 8004f5e:	bb5c      	cbnz	r4, 8004fb8 <_malloc_r+0x90>
 8004f60:	4629      	mov	r1, r5
 8004f62:	4638      	mov	r0, r7
 8004f64:	f7ff ffc0 	bl	8004ee8 <sbrk_aligned>
 8004f68:	1c43      	adds	r3, r0, #1
 8004f6a:	4604      	mov	r4, r0
 8004f6c:	d155      	bne.n	800501a <_malloc_r+0xf2>
 8004f6e:	f8d8 4000 	ldr.w	r4, [r8]
 8004f72:	4626      	mov	r6, r4
 8004f74:	2e00      	cmp	r6, #0
 8004f76:	d145      	bne.n	8005004 <_malloc_r+0xdc>
 8004f78:	2c00      	cmp	r4, #0
 8004f7a:	d048      	beq.n	800500e <_malloc_r+0xe6>
 8004f7c:	6823      	ldr	r3, [r4, #0]
 8004f7e:	4631      	mov	r1, r6
 8004f80:	4638      	mov	r0, r7
 8004f82:	eb04 0903 	add.w	r9, r4, r3
 8004f86:	f000 fb5d 	bl	8005644 <_sbrk_r>
 8004f8a:	4581      	cmp	r9, r0
 8004f8c:	d13f      	bne.n	800500e <_malloc_r+0xe6>
 8004f8e:	6821      	ldr	r1, [r4, #0]
 8004f90:	1a6d      	subs	r5, r5, r1
 8004f92:	4629      	mov	r1, r5
 8004f94:	4638      	mov	r0, r7
 8004f96:	f7ff ffa7 	bl	8004ee8 <sbrk_aligned>
 8004f9a:	3001      	adds	r0, #1
 8004f9c:	d037      	beq.n	800500e <_malloc_r+0xe6>
 8004f9e:	6823      	ldr	r3, [r4, #0]
 8004fa0:	442b      	add	r3, r5
 8004fa2:	6023      	str	r3, [r4, #0]
 8004fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d038      	beq.n	800501e <_malloc_r+0xf6>
 8004fac:	685a      	ldr	r2, [r3, #4]
 8004fae:	42a2      	cmp	r2, r4
 8004fb0:	d12b      	bne.n	800500a <_malloc_r+0xe2>
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	605a      	str	r2, [r3, #4]
 8004fb6:	e00f      	b.n	8004fd8 <_malloc_r+0xb0>
 8004fb8:	6822      	ldr	r2, [r4, #0]
 8004fba:	1b52      	subs	r2, r2, r5
 8004fbc:	d41f      	bmi.n	8004ffe <_malloc_r+0xd6>
 8004fbe:	2a0b      	cmp	r2, #11
 8004fc0:	d917      	bls.n	8004ff2 <_malloc_r+0xca>
 8004fc2:	1961      	adds	r1, r4, r5
 8004fc4:	42a3      	cmp	r3, r4
 8004fc6:	6025      	str	r5, [r4, #0]
 8004fc8:	bf18      	it	ne
 8004fca:	6059      	strne	r1, [r3, #4]
 8004fcc:	6863      	ldr	r3, [r4, #4]
 8004fce:	bf08      	it	eq
 8004fd0:	f8c8 1000 	streq.w	r1, [r8]
 8004fd4:	5162      	str	r2, [r4, r5]
 8004fd6:	604b      	str	r3, [r1, #4]
 8004fd8:	4638      	mov	r0, r7
 8004fda:	f104 060b 	add.w	r6, r4, #11
 8004fde:	f000 f829 	bl	8005034 <__malloc_unlock>
 8004fe2:	f026 0607 	bic.w	r6, r6, #7
 8004fe6:	1d23      	adds	r3, r4, #4
 8004fe8:	1af2      	subs	r2, r6, r3
 8004fea:	d0ae      	beq.n	8004f4a <_malloc_r+0x22>
 8004fec:	1b9b      	subs	r3, r3, r6
 8004fee:	50a3      	str	r3, [r4, r2]
 8004ff0:	e7ab      	b.n	8004f4a <_malloc_r+0x22>
 8004ff2:	42a3      	cmp	r3, r4
 8004ff4:	6862      	ldr	r2, [r4, #4]
 8004ff6:	d1dd      	bne.n	8004fb4 <_malloc_r+0x8c>
 8004ff8:	f8c8 2000 	str.w	r2, [r8]
 8004ffc:	e7ec      	b.n	8004fd8 <_malloc_r+0xb0>
 8004ffe:	4623      	mov	r3, r4
 8005000:	6864      	ldr	r4, [r4, #4]
 8005002:	e7ac      	b.n	8004f5e <_malloc_r+0x36>
 8005004:	4634      	mov	r4, r6
 8005006:	6876      	ldr	r6, [r6, #4]
 8005008:	e7b4      	b.n	8004f74 <_malloc_r+0x4c>
 800500a:	4613      	mov	r3, r2
 800500c:	e7cc      	b.n	8004fa8 <_malloc_r+0x80>
 800500e:	230c      	movs	r3, #12
 8005010:	603b      	str	r3, [r7, #0]
 8005012:	4638      	mov	r0, r7
 8005014:	f000 f80e 	bl	8005034 <__malloc_unlock>
 8005018:	e797      	b.n	8004f4a <_malloc_r+0x22>
 800501a:	6025      	str	r5, [r4, #0]
 800501c:	e7dc      	b.n	8004fd8 <_malloc_r+0xb0>
 800501e:	605b      	str	r3, [r3, #4]
 8005020:	deff      	udf	#255	; 0xff
 8005022:	bf00      	nop
 8005024:	2000083c 	.word	0x2000083c

08005028 <__malloc_lock>:
 8005028:	4801      	ldr	r0, [pc, #4]	; (8005030 <__malloc_lock+0x8>)
 800502a:	f7ff bf0f 	b.w	8004e4c <__retarget_lock_acquire_recursive>
 800502e:	bf00      	nop
 8005030:	20000838 	.word	0x20000838

08005034 <__malloc_unlock>:
 8005034:	4801      	ldr	r0, [pc, #4]	; (800503c <__malloc_unlock+0x8>)
 8005036:	f7ff bf0a 	b.w	8004e4e <__retarget_lock_release_recursive>
 800503a:	bf00      	nop
 800503c:	20000838 	.word	0x20000838

08005040 <__ssputs_r>:
 8005040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005044:	688e      	ldr	r6, [r1, #8]
 8005046:	461f      	mov	r7, r3
 8005048:	42be      	cmp	r6, r7
 800504a:	680b      	ldr	r3, [r1, #0]
 800504c:	4682      	mov	sl, r0
 800504e:	460c      	mov	r4, r1
 8005050:	4690      	mov	r8, r2
 8005052:	d82c      	bhi.n	80050ae <__ssputs_r+0x6e>
 8005054:	898a      	ldrh	r2, [r1, #12]
 8005056:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800505a:	d026      	beq.n	80050aa <__ssputs_r+0x6a>
 800505c:	6965      	ldr	r5, [r4, #20]
 800505e:	6909      	ldr	r1, [r1, #16]
 8005060:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005064:	eba3 0901 	sub.w	r9, r3, r1
 8005068:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800506c:	1c7b      	adds	r3, r7, #1
 800506e:	444b      	add	r3, r9
 8005070:	106d      	asrs	r5, r5, #1
 8005072:	429d      	cmp	r5, r3
 8005074:	bf38      	it	cc
 8005076:	461d      	movcc	r5, r3
 8005078:	0553      	lsls	r3, r2, #21
 800507a:	d527      	bpl.n	80050cc <__ssputs_r+0x8c>
 800507c:	4629      	mov	r1, r5
 800507e:	f7ff ff53 	bl	8004f28 <_malloc_r>
 8005082:	4606      	mov	r6, r0
 8005084:	b360      	cbz	r0, 80050e0 <__ssputs_r+0xa0>
 8005086:	6921      	ldr	r1, [r4, #16]
 8005088:	464a      	mov	r2, r9
 800508a:	f000 faeb 	bl	8005664 <memcpy>
 800508e:	89a3      	ldrh	r3, [r4, #12]
 8005090:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005094:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005098:	81a3      	strh	r3, [r4, #12]
 800509a:	6126      	str	r6, [r4, #16]
 800509c:	6165      	str	r5, [r4, #20]
 800509e:	444e      	add	r6, r9
 80050a0:	eba5 0509 	sub.w	r5, r5, r9
 80050a4:	6026      	str	r6, [r4, #0]
 80050a6:	60a5      	str	r5, [r4, #8]
 80050a8:	463e      	mov	r6, r7
 80050aa:	42be      	cmp	r6, r7
 80050ac:	d900      	bls.n	80050b0 <__ssputs_r+0x70>
 80050ae:	463e      	mov	r6, r7
 80050b0:	6820      	ldr	r0, [r4, #0]
 80050b2:	4632      	mov	r2, r6
 80050b4:	4641      	mov	r1, r8
 80050b6:	f000 faab 	bl	8005610 <memmove>
 80050ba:	68a3      	ldr	r3, [r4, #8]
 80050bc:	1b9b      	subs	r3, r3, r6
 80050be:	60a3      	str	r3, [r4, #8]
 80050c0:	6823      	ldr	r3, [r4, #0]
 80050c2:	4433      	add	r3, r6
 80050c4:	6023      	str	r3, [r4, #0]
 80050c6:	2000      	movs	r0, #0
 80050c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050cc:	462a      	mov	r2, r5
 80050ce:	f000 fad7 	bl	8005680 <_realloc_r>
 80050d2:	4606      	mov	r6, r0
 80050d4:	2800      	cmp	r0, #0
 80050d6:	d1e0      	bne.n	800509a <__ssputs_r+0x5a>
 80050d8:	6921      	ldr	r1, [r4, #16]
 80050da:	4650      	mov	r0, sl
 80050dc:	f7ff feb8 	bl	8004e50 <_free_r>
 80050e0:	230c      	movs	r3, #12
 80050e2:	f8ca 3000 	str.w	r3, [sl]
 80050e6:	89a3      	ldrh	r3, [r4, #12]
 80050e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80050ec:	81a3      	strh	r3, [r4, #12]
 80050ee:	f04f 30ff 	mov.w	r0, #4294967295
 80050f2:	e7e9      	b.n	80050c8 <__ssputs_r+0x88>

080050f4 <_svfiprintf_r>:
 80050f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80050f8:	4698      	mov	r8, r3
 80050fa:	898b      	ldrh	r3, [r1, #12]
 80050fc:	061b      	lsls	r3, r3, #24
 80050fe:	b09d      	sub	sp, #116	; 0x74
 8005100:	4607      	mov	r7, r0
 8005102:	460d      	mov	r5, r1
 8005104:	4614      	mov	r4, r2
 8005106:	d50e      	bpl.n	8005126 <_svfiprintf_r+0x32>
 8005108:	690b      	ldr	r3, [r1, #16]
 800510a:	b963      	cbnz	r3, 8005126 <_svfiprintf_r+0x32>
 800510c:	2140      	movs	r1, #64	; 0x40
 800510e:	f7ff ff0b 	bl	8004f28 <_malloc_r>
 8005112:	6028      	str	r0, [r5, #0]
 8005114:	6128      	str	r0, [r5, #16]
 8005116:	b920      	cbnz	r0, 8005122 <_svfiprintf_r+0x2e>
 8005118:	230c      	movs	r3, #12
 800511a:	603b      	str	r3, [r7, #0]
 800511c:	f04f 30ff 	mov.w	r0, #4294967295
 8005120:	e0d0      	b.n	80052c4 <_svfiprintf_r+0x1d0>
 8005122:	2340      	movs	r3, #64	; 0x40
 8005124:	616b      	str	r3, [r5, #20]
 8005126:	2300      	movs	r3, #0
 8005128:	9309      	str	r3, [sp, #36]	; 0x24
 800512a:	2320      	movs	r3, #32
 800512c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005130:	f8cd 800c 	str.w	r8, [sp, #12]
 8005134:	2330      	movs	r3, #48	; 0x30
 8005136:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80052dc <_svfiprintf_r+0x1e8>
 800513a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800513e:	f04f 0901 	mov.w	r9, #1
 8005142:	4623      	mov	r3, r4
 8005144:	469a      	mov	sl, r3
 8005146:	f813 2b01 	ldrb.w	r2, [r3], #1
 800514a:	b10a      	cbz	r2, 8005150 <_svfiprintf_r+0x5c>
 800514c:	2a25      	cmp	r2, #37	; 0x25
 800514e:	d1f9      	bne.n	8005144 <_svfiprintf_r+0x50>
 8005150:	ebba 0b04 	subs.w	fp, sl, r4
 8005154:	d00b      	beq.n	800516e <_svfiprintf_r+0x7a>
 8005156:	465b      	mov	r3, fp
 8005158:	4622      	mov	r2, r4
 800515a:	4629      	mov	r1, r5
 800515c:	4638      	mov	r0, r7
 800515e:	f7ff ff6f 	bl	8005040 <__ssputs_r>
 8005162:	3001      	adds	r0, #1
 8005164:	f000 80a9 	beq.w	80052ba <_svfiprintf_r+0x1c6>
 8005168:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800516a:	445a      	add	r2, fp
 800516c:	9209      	str	r2, [sp, #36]	; 0x24
 800516e:	f89a 3000 	ldrb.w	r3, [sl]
 8005172:	2b00      	cmp	r3, #0
 8005174:	f000 80a1 	beq.w	80052ba <_svfiprintf_r+0x1c6>
 8005178:	2300      	movs	r3, #0
 800517a:	f04f 32ff 	mov.w	r2, #4294967295
 800517e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005182:	f10a 0a01 	add.w	sl, sl, #1
 8005186:	9304      	str	r3, [sp, #16]
 8005188:	9307      	str	r3, [sp, #28]
 800518a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800518e:	931a      	str	r3, [sp, #104]	; 0x68
 8005190:	4654      	mov	r4, sl
 8005192:	2205      	movs	r2, #5
 8005194:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005198:	4850      	ldr	r0, [pc, #320]	; (80052dc <_svfiprintf_r+0x1e8>)
 800519a:	f7fb f859 	bl	8000250 <memchr>
 800519e:	9a04      	ldr	r2, [sp, #16]
 80051a0:	b9d8      	cbnz	r0, 80051da <_svfiprintf_r+0xe6>
 80051a2:	06d0      	lsls	r0, r2, #27
 80051a4:	bf44      	itt	mi
 80051a6:	2320      	movmi	r3, #32
 80051a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051ac:	0711      	lsls	r1, r2, #28
 80051ae:	bf44      	itt	mi
 80051b0:	232b      	movmi	r3, #43	; 0x2b
 80051b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051b6:	f89a 3000 	ldrb.w	r3, [sl]
 80051ba:	2b2a      	cmp	r3, #42	; 0x2a
 80051bc:	d015      	beq.n	80051ea <_svfiprintf_r+0xf6>
 80051be:	9a07      	ldr	r2, [sp, #28]
 80051c0:	4654      	mov	r4, sl
 80051c2:	2000      	movs	r0, #0
 80051c4:	f04f 0c0a 	mov.w	ip, #10
 80051c8:	4621      	mov	r1, r4
 80051ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80051ce:	3b30      	subs	r3, #48	; 0x30
 80051d0:	2b09      	cmp	r3, #9
 80051d2:	d94d      	bls.n	8005270 <_svfiprintf_r+0x17c>
 80051d4:	b1b0      	cbz	r0, 8005204 <_svfiprintf_r+0x110>
 80051d6:	9207      	str	r2, [sp, #28]
 80051d8:	e014      	b.n	8005204 <_svfiprintf_r+0x110>
 80051da:	eba0 0308 	sub.w	r3, r0, r8
 80051de:	fa09 f303 	lsl.w	r3, r9, r3
 80051e2:	4313      	orrs	r3, r2
 80051e4:	9304      	str	r3, [sp, #16]
 80051e6:	46a2      	mov	sl, r4
 80051e8:	e7d2      	b.n	8005190 <_svfiprintf_r+0x9c>
 80051ea:	9b03      	ldr	r3, [sp, #12]
 80051ec:	1d19      	adds	r1, r3, #4
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	9103      	str	r1, [sp, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	bfbb      	ittet	lt
 80051f6:	425b      	neglt	r3, r3
 80051f8:	f042 0202 	orrlt.w	r2, r2, #2
 80051fc:	9307      	strge	r3, [sp, #28]
 80051fe:	9307      	strlt	r3, [sp, #28]
 8005200:	bfb8      	it	lt
 8005202:	9204      	strlt	r2, [sp, #16]
 8005204:	7823      	ldrb	r3, [r4, #0]
 8005206:	2b2e      	cmp	r3, #46	; 0x2e
 8005208:	d10c      	bne.n	8005224 <_svfiprintf_r+0x130>
 800520a:	7863      	ldrb	r3, [r4, #1]
 800520c:	2b2a      	cmp	r3, #42	; 0x2a
 800520e:	d134      	bne.n	800527a <_svfiprintf_r+0x186>
 8005210:	9b03      	ldr	r3, [sp, #12]
 8005212:	1d1a      	adds	r2, r3, #4
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	9203      	str	r2, [sp, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	bfb8      	it	lt
 800521c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005220:	3402      	adds	r4, #2
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80052ec <_svfiprintf_r+0x1f8>
 8005228:	7821      	ldrb	r1, [r4, #0]
 800522a:	2203      	movs	r2, #3
 800522c:	4650      	mov	r0, sl
 800522e:	f7fb f80f 	bl	8000250 <memchr>
 8005232:	b138      	cbz	r0, 8005244 <_svfiprintf_r+0x150>
 8005234:	9b04      	ldr	r3, [sp, #16]
 8005236:	eba0 000a 	sub.w	r0, r0, sl
 800523a:	2240      	movs	r2, #64	; 0x40
 800523c:	4082      	lsls	r2, r0
 800523e:	4313      	orrs	r3, r2
 8005240:	3401      	adds	r4, #1
 8005242:	9304      	str	r3, [sp, #16]
 8005244:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005248:	4825      	ldr	r0, [pc, #148]	; (80052e0 <_svfiprintf_r+0x1ec>)
 800524a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800524e:	2206      	movs	r2, #6
 8005250:	f7fa fffe 	bl	8000250 <memchr>
 8005254:	2800      	cmp	r0, #0
 8005256:	d038      	beq.n	80052ca <_svfiprintf_r+0x1d6>
 8005258:	4b22      	ldr	r3, [pc, #136]	; (80052e4 <_svfiprintf_r+0x1f0>)
 800525a:	bb1b      	cbnz	r3, 80052a4 <_svfiprintf_r+0x1b0>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	3307      	adds	r3, #7
 8005260:	f023 0307 	bic.w	r3, r3, #7
 8005264:	3308      	adds	r3, #8
 8005266:	9303      	str	r3, [sp, #12]
 8005268:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800526a:	4433      	add	r3, r6
 800526c:	9309      	str	r3, [sp, #36]	; 0x24
 800526e:	e768      	b.n	8005142 <_svfiprintf_r+0x4e>
 8005270:	fb0c 3202 	mla	r2, ip, r2, r3
 8005274:	460c      	mov	r4, r1
 8005276:	2001      	movs	r0, #1
 8005278:	e7a6      	b.n	80051c8 <_svfiprintf_r+0xd4>
 800527a:	2300      	movs	r3, #0
 800527c:	3401      	adds	r4, #1
 800527e:	9305      	str	r3, [sp, #20]
 8005280:	4619      	mov	r1, r3
 8005282:	f04f 0c0a 	mov.w	ip, #10
 8005286:	4620      	mov	r0, r4
 8005288:	f810 2b01 	ldrb.w	r2, [r0], #1
 800528c:	3a30      	subs	r2, #48	; 0x30
 800528e:	2a09      	cmp	r2, #9
 8005290:	d903      	bls.n	800529a <_svfiprintf_r+0x1a6>
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0c6      	beq.n	8005224 <_svfiprintf_r+0x130>
 8005296:	9105      	str	r1, [sp, #20]
 8005298:	e7c4      	b.n	8005224 <_svfiprintf_r+0x130>
 800529a:	fb0c 2101 	mla	r1, ip, r1, r2
 800529e:	4604      	mov	r4, r0
 80052a0:	2301      	movs	r3, #1
 80052a2:	e7f0      	b.n	8005286 <_svfiprintf_r+0x192>
 80052a4:	ab03      	add	r3, sp, #12
 80052a6:	9300      	str	r3, [sp, #0]
 80052a8:	462a      	mov	r2, r5
 80052aa:	4b0f      	ldr	r3, [pc, #60]	; (80052e8 <_svfiprintf_r+0x1f4>)
 80052ac:	a904      	add	r1, sp, #16
 80052ae:	4638      	mov	r0, r7
 80052b0:	f3af 8000 	nop.w
 80052b4:	1c42      	adds	r2, r0, #1
 80052b6:	4606      	mov	r6, r0
 80052b8:	d1d6      	bne.n	8005268 <_svfiprintf_r+0x174>
 80052ba:	89ab      	ldrh	r3, [r5, #12]
 80052bc:	065b      	lsls	r3, r3, #25
 80052be:	f53f af2d 	bmi.w	800511c <_svfiprintf_r+0x28>
 80052c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80052c4:	b01d      	add	sp, #116	; 0x74
 80052c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052ca:	ab03      	add	r3, sp, #12
 80052cc:	9300      	str	r3, [sp, #0]
 80052ce:	462a      	mov	r2, r5
 80052d0:	4b05      	ldr	r3, [pc, #20]	; (80052e8 <_svfiprintf_r+0x1f4>)
 80052d2:	a904      	add	r1, sp, #16
 80052d4:	4638      	mov	r0, r7
 80052d6:	f000 f879 	bl	80053cc <_printf_i>
 80052da:	e7eb      	b.n	80052b4 <_svfiprintf_r+0x1c0>
 80052dc:	08005750 	.word	0x08005750
 80052e0:	0800575a 	.word	0x0800575a
 80052e4:	00000000 	.word	0x00000000
 80052e8:	08005041 	.word	0x08005041
 80052ec:	08005756 	.word	0x08005756

080052f0 <_printf_common>:
 80052f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f4:	4616      	mov	r6, r2
 80052f6:	4699      	mov	r9, r3
 80052f8:	688a      	ldr	r2, [r1, #8]
 80052fa:	690b      	ldr	r3, [r1, #16]
 80052fc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005300:	4293      	cmp	r3, r2
 8005302:	bfb8      	it	lt
 8005304:	4613      	movlt	r3, r2
 8005306:	6033      	str	r3, [r6, #0]
 8005308:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800530c:	4607      	mov	r7, r0
 800530e:	460c      	mov	r4, r1
 8005310:	b10a      	cbz	r2, 8005316 <_printf_common+0x26>
 8005312:	3301      	adds	r3, #1
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	6823      	ldr	r3, [r4, #0]
 8005318:	0699      	lsls	r1, r3, #26
 800531a:	bf42      	ittt	mi
 800531c:	6833      	ldrmi	r3, [r6, #0]
 800531e:	3302      	addmi	r3, #2
 8005320:	6033      	strmi	r3, [r6, #0]
 8005322:	6825      	ldr	r5, [r4, #0]
 8005324:	f015 0506 	ands.w	r5, r5, #6
 8005328:	d106      	bne.n	8005338 <_printf_common+0x48>
 800532a:	f104 0a19 	add.w	sl, r4, #25
 800532e:	68e3      	ldr	r3, [r4, #12]
 8005330:	6832      	ldr	r2, [r6, #0]
 8005332:	1a9b      	subs	r3, r3, r2
 8005334:	42ab      	cmp	r3, r5
 8005336:	dc26      	bgt.n	8005386 <_printf_common+0x96>
 8005338:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800533c:	1e13      	subs	r3, r2, #0
 800533e:	6822      	ldr	r2, [r4, #0]
 8005340:	bf18      	it	ne
 8005342:	2301      	movne	r3, #1
 8005344:	0692      	lsls	r2, r2, #26
 8005346:	d42b      	bmi.n	80053a0 <_printf_common+0xb0>
 8005348:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800534c:	4649      	mov	r1, r9
 800534e:	4638      	mov	r0, r7
 8005350:	47c0      	blx	r8
 8005352:	3001      	adds	r0, #1
 8005354:	d01e      	beq.n	8005394 <_printf_common+0xa4>
 8005356:	6823      	ldr	r3, [r4, #0]
 8005358:	6922      	ldr	r2, [r4, #16]
 800535a:	f003 0306 	and.w	r3, r3, #6
 800535e:	2b04      	cmp	r3, #4
 8005360:	bf02      	ittt	eq
 8005362:	68e5      	ldreq	r5, [r4, #12]
 8005364:	6833      	ldreq	r3, [r6, #0]
 8005366:	1aed      	subeq	r5, r5, r3
 8005368:	68a3      	ldr	r3, [r4, #8]
 800536a:	bf0c      	ite	eq
 800536c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005370:	2500      	movne	r5, #0
 8005372:	4293      	cmp	r3, r2
 8005374:	bfc4      	itt	gt
 8005376:	1a9b      	subgt	r3, r3, r2
 8005378:	18ed      	addgt	r5, r5, r3
 800537a:	2600      	movs	r6, #0
 800537c:	341a      	adds	r4, #26
 800537e:	42b5      	cmp	r5, r6
 8005380:	d11a      	bne.n	80053b8 <_printf_common+0xc8>
 8005382:	2000      	movs	r0, #0
 8005384:	e008      	b.n	8005398 <_printf_common+0xa8>
 8005386:	2301      	movs	r3, #1
 8005388:	4652      	mov	r2, sl
 800538a:	4649      	mov	r1, r9
 800538c:	4638      	mov	r0, r7
 800538e:	47c0      	blx	r8
 8005390:	3001      	adds	r0, #1
 8005392:	d103      	bne.n	800539c <_printf_common+0xac>
 8005394:	f04f 30ff 	mov.w	r0, #4294967295
 8005398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539c:	3501      	adds	r5, #1
 800539e:	e7c6      	b.n	800532e <_printf_common+0x3e>
 80053a0:	18e1      	adds	r1, r4, r3
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	2030      	movs	r0, #48	; 0x30
 80053a6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053aa:	4422      	add	r2, r4
 80053ac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b4:	3302      	adds	r3, #2
 80053b6:	e7c7      	b.n	8005348 <_printf_common+0x58>
 80053b8:	2301      	movs	r3, #1
 80053ba:	4622      	mov	r2, r4
 80053bc:	4649      	mov	r1, r9
 80053be:	4638      	mov	r0, r7
 80053c0:	47c0      	blx	r8
 80053c2:	3001      	adds	r0, #1
 80053c4:	d0e6      	beq.n	8005394 <_printf_common+0xa4>
 80053c6:	3601      	adds	r6, #1
 80053c8:	e7d9      	b.n	800537e <_printf_common+0x8e>
	...

080053cc <_printf_i>:
 80053cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d0:	7e0f      	ldrb	r7, [r1, #24]
 80053d2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d4:	2f78      	cmp	r7, #120	; 0x78
 80053d6:	4691      	mov	r9, r2
 80053d8:	4680      	mov	r8, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	469a      	mov	sl, r3
 80053de:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053e2:	d807      	bhi.n	80053f4 <_printf_i+0x28>
 80053e4:	2f62      	cmp	r7, #98	; 0x62
 80053e6:	d80a      	bhi.n	80053fe <_printf_i+0x32>
 80053e8:	2f00      	cmp	r7, #0
 80053ea:	f000 80d4 	beq.w	8005596 <_printf_i+0x1ca>
 80053ee:	2f58      	cmp	r7, #88	; 0x58
 80053f0:	f000 80c0 	beq.w	8005574 <_printf_i+0x1a8>
 80053f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053f8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80053fc:	e03a      	b.n	8005474 <_printf_i+0xa8>
 80053fe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005402:	2b15      	cmp	r3, #21
 8005404:	d8f6      	bhi.n	80053f4 <_printf_i+0x28>
 8005406:	a101      	add	r1, pc, #4	; (adr r1, 800540c <_printf_i+0x40>)
 8005408:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800540c:	08005465 	.word	0x08005465
 8005410:	08005479 	.word	0x08005479
 8005414:	080053f5 	.word	0x080053f5
 8005418:	080053f5 	.word	0x080053f5
 800541c:	080053f5 	.word	0x080053f5
 8005420:	080053f5 	.word	0x080053f5
 8005424:	08005479 	.word	0x08005479
 8005428:	080053f5 	.word	0x080053f5
 800542c:	080053f5 	.word	0x080053f5
 8005430:	080053f5 	.word	0x080053f5
 8005434:	080053f5 	.word	0x080053f5
 8005438:	0800557d 	.word	0x0800557d
 800543c:	080054a5 	.word	0x080054a5
 8005440:	08005537 	.word	0x08005537
 8005444:	080053f5 	.word	0x080053f5
 8005448:	080053f5 	.word	0x080053f5
 800544c:	0800559f 	.word	0x0800559f
 8005450:	080053f5 	.word	0x080053f5
 8005454:	080054a5 	.word	0x080054a5
 8005458:	080053f5 	.word	0x080053f5
 800545c:	080053f5 	.word	0x080053f5
 8005460:	0800553f 	.word	0x0800553f
 8005464:	682b      	ldr	r3, [r5, #0]
 8005466:	1d1a      	adds	r2, r3, #4
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	602a      	str	r2, [r5, #0]
 800546c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005470:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005474:	2301      	movs	r3, #1
 8005476:	e09f      	b.n	80055b8 <_printf_i+0x1ec>
 8005478:	6820      	ldr	r0, [r4, #0]
 800547a:	682b      	ldr	r3, [r5, #0]
 800547c:	0607      	lsls	r7, r0, #24
 800547e:	f103 0104 	add.w	r1, r3, #4
 8005482:	6029      	str	r1, [r5, #0]
 8005484:	d501      	bpl.n	800548a <_printf_i+0xbe>
 8005486:	681e      	ldr	r6, [r3, #0]
 8005488:	e003      	b.n	8005492 <_printf_i+0xc6>
 800548a:	0646      	lsls	r6, r0, #25
 800548c:	d5fb      	bpl.n	8005486 <_printf_i+0xba>
 800548e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005492:	2e00      	cmp	r6, #0
 8005494:	da03      	bge.n	800549e <_printf_i+0xd2>
 8005496:	232d      	movs	r3, #45	; 0x2d
 8005498:	4276      	negs	r6, r6
 800549a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800549e:	485a      	ldr	r0, [pc, #360]	; (8005608 <_printf_i+0x23c>)
 80054a0:	230a      	movs	r3, #10
 80054a2:	e012      	b.n	80054ca <_printf_i+0xfe>
 80054a4:	682b      	ldr	r3, [r5, #0]
 80054a6:	6820      	ldr	r0, [r4, #0]
 80054a8:	1d19      	adds	r1, r3, #4
 80054aa:	6029      	str	r1, [r5, #0]
 80054ac:	0605      	lsls	r5, r0, #24
 80054ae:	d501      	bpl.n	80054b4 <_printf_i+0xe8>
 80054b0:	681e      	ldr	r6, [r3, #0]
 80054b2:	e002      	b.n	80054ba <_printf_i+0xee>
 80054b4:	0641      	lsls	r1, r0, #25
 80054b6:	d5fb      	bpl.n	80054b0 <_printf_i+0xe4>
 80054b8:	881e      	ldrh	r6, [r3, #0]
 80054ba:	4853      	ldr	r0, [pc, #332]	; (8005608 <_printf_i+0x23c>)
 80054bc:	2f6f      	cmp	r7, #111	; 0x6f
 80054be:	bf0c      	ite	eq
 80054c0:	2308      	moveq	r3, #8
 80054c2:	230a      	movne	r3, #10
 80054c4:	2100      	movs	r1, #0
 80054c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ca:	6865      	ldr	r5, [r4, #4]
 80054cc:	60a5      	str	r5, [r4, #8]
 80054ce:	2d00      	cmp	r5, #0
 80054d0:	bfa2      	ittt	ge
 80054d2:	6821      	ldrge	r1, [r4, #0]
 80054d4:	f021 0104 	bicge.w	r1, r1, #4
 80054d8:	6021      	strge	r1, [r4, #0]
 80054da:	b90e      	cbnz	r6, 80054e0 <_printf_i+0x114>
 80054dc:	2d00      	cmp	r5, #0
 80054de:	d04b      	beq.n	8005578 <_printf_i+0x1ac>
 80054e0:	4615      	mov	r5, r2
 80054e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80054e6:	fb03 6711 	mls	r7, r3, r1, r6
 80054ea:	5dc7      	ldrb	r7, [r0, r7]
 80054ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054f0:	4637      	mov	r7, r6
 80054f2:	42bb      	cmp	r3, r7
 80054f4:	460e      	mov	r6, r1
 80054f6:	d9f4      	bls.n	80054e2 <_printf_i+0x116>
 80054f8:	2b08      	cmp	r3, #8
 80054fa:	d10b      	bne.n	8005514 <_printf_i+0x148>
 80054fc:	6823      	ldr	r3, [r4, #0]
 80054fe:	07de      	lsls	r6, r3, #31
 8005500:	d508      	bpl.n	8005514 <_printf_i+0x148>
 8005502:	6923      	ldr	r3, [r4, #16]
 8005504:	6861      	ldr	r1, [r4, #4]
 8005506:	4299      	cmp	r1, r3
 8005508:	bfde      	ittt	le
 800550a:	2330      	movle	r3, #48	; 0x30
 800550c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005510:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005514:	1b52      	subs	r2, r2, r5
 8005516:	6122      	str	r2, [r4, #16]
 8005518:	f8cd a000 	str.w	sl, [sp]
 800551c:	464b      	mov	r3, r9
 800551e:	aa03      	add	r2, sp, #12
 8005520:	4621      	mov	r1, r4
 8005522:	4640      	mov	r0, r8
 8005524:	f7ff fee4 	bl	80052f0 <_printf_common>
 8005528:	3001      	adds	r0, #1
 800552a:	d14a      	bne.n	80055c2 <_printf_i+0x1f6>
 800552c:	f04f 30ff 	mov.w	r0, #4294967295
 8005530:	b004      	add	sp, #16
 8005532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005536:	6823      	ldr	r3, [r4, #0]
 8005538:	f043 0320 	orr.w	r3, r3, #32
 800553c:	6023      	str	r3, [r4, #0]
 800553e:	4833      	ldr	r0, [pc, #204]	; (800560c <_printf_i+0x240>)
 8005540:	2778      	movs	r7, #120	; 0x78
 8005542:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005546:	6823      	ldr	r3, [r4, #0]
 8005548:	6829      	ldr	r1, [r5, #0]
 800554a:	061f      	lsls	r7, r3, #24
 800554c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005550:	d402      	bmi.n	8005558 <_printf_i+0x18c>
 8005552:	065f      	lsls	r7, r3, #25
 8005554:	bf48      	it	mi
 8005556:	b2b6      	uxthmi	r6, r6
 8005558:	07df      	lsls	r7, r3, #31
 800555a:	bf48      	it	mi
 800555c:	f043 0320 	orrmi.w	r3, r3, #32
 8005560:	6029      	str	r1, [r5, #0]
 8005562:	bf48      	it	mi
 8005564:	6023      	strmi	r3, [r4, #0]
 8005566:	b91e      	cbnz	r6, 8005570 <_printf_i+0x1a4>
 8005568:	6823      	ldr	r3, [r4, #0]
 800556a:	f023 0320 	bic.w	r3, r3, #32
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	2310      	movs	r3, #16
 8005572:	e7a7      	b.n	80054c4 <_printf_i+0xf8>
 8005574:	4824      	ldr	r0, [pc, #144]	; (8005608 <_printf_i+0x23c>)
 8005576:	e7e4      	b.n	8005542 <_printf_i+0x176>
 8005578:	4615      	mov	r5, r2
 800557a:	e7bd      	b.n	80054f8 <_printf_i+0x12c>
 800557c:	682b      	ldr	r3, [r5, #0]
 800557e:	6826      	ldr	r6, [r4, #0]
 8005580:	6961      	ldr	r1, [r4, #20]
 8005582:	1d18      	adds	r0, r3, #4
 8005584:	6028      	str	r0, [r5, #0]
 8005586:	0635      	lsls	r5, r6, #24
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	d501      	bpl.n	8005590 <_printf_i+0x1c4>
 800558c:	6019      	str	r1, [r3, #0]
 800558e:	e002      	b.n	8005596 <_printf_i+0x1ca>
 8005590:	0670      	lsls	r0, r6, #25
 8005592:	d5fb      	bpl.n	800558c <_printf_i+0x1c0>
 8005594:	8019      	strh	r1, [r3, #0]
 8005596:	2300      	movs	r3, #0
 8005598:	6123      	str	r3, [r4, #16]
 800559a:	4615      	mov	r5, r2
 800559c:	e7bc      	b.n	8005518 <_printf_i+0x14c>
 800559e:	682b      	ldr	r3, [r5, #0]
 80055a0:	1d1a      	adds	r2, r3, #4
 80055a2:	602a      	str	r2, [r5, #0]
 80055a4:	681d      	ldr	r5, [r3, #0]
 80055a6:	6862      	ldr	r2, [r4, #4]
 80055a8:	2100      	movs	r1, #0
 80055aa:	4628      	mov	r0, r5
 80055ac:	f7fa fe50 	bl	8000250 <memchr>
 80055b0:	b108      	cbz	r0, 80055b6 <_printf_i+0x1ea>
 80055b2:	1b40      	subs	r0, r0, r5
 80055b4:	6060      	str	r0, [r4, #4]
 80055b6:	6863      	ldr	r3, [r4, #4]
 80055b8:	6123      	str	r3, [r4, #16]
 80055ba:	2300      	movs	r3, #0
 80055bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c0:	e7aa      	b.n	8005518 <_printf_i+0x14c>
 80055c2:	6923      	ldr	r3, [r4, #16]
 80055c4:	462a      	mov	r2, r5
 80055c6:	4649      	mov	r1, r9
 80055c8:	4640      	mov	r0, r8
 80055ca:	47d0      	blx	sl
 80055cc:	3001      	adds	r0, #1
 80055ce:	d0ad      	beq.n	800552c <_printf_i+0x160>
 80055d0:	6823      	ldr	r3, [r4, #0]
 80055d2:	079b      	lsls	r3, r3, #30
 80055d4:	d413      	bmi.n	80055fe <_printf_i+0x232>
 80055d6:	68e0      	ldr	r0, [r4, #12]
 80055d8:	9b03      	ldr	r3, [sp, #12]
 80055da:	4298      	cmp	r0, r3
 80055dc:	bfb8      	it	lt
 80055de:	4618      	movlt	r0, r3
 80055e0:	e7a6      	b.n	8005530 <_printf_i+0x164>
 80055e2:	2301      	movs	r3, #1
 80055e4:	4632      	mov	r2, r6
 80055e6:	4649      	mov	r1, r9
 80055e8:	4640      	mov	r0, r8
 80055ea:	47d0      	blx	sl
 80055ec:	3001      	adds	r0, #1
 80055ee:	d09d      	beq.n	800552c <_printf_i+0x160>
 80055f0:	3501      	adds	r5, #1
 80055f2:	68e3      	ldr	r3, [r4, #12]
 80055f4:	9903      	ldr	r1, [sp, #12]
 80055f6:	1a5b      	subs	r3, r3, r1
 80055f8:	42ab      	cmp	r3, r5
 80055fa:	dcf2      	bgt.n	80055e2 <_printf_i+0x216>
 80055fc:	e7eb      	b.n	80055d6 <_printf_i+0x20a>
 80055fe:	2500      	movs	r5, #0
 8005600:	f104 0619 	add.w	r6, r4, #25
 8005604:	e7f5      	b.n	80055f2 <_printf_i+0x226>
 8005606:	bf00      	nop
 8005608:	08005761 	.word	0x08005761
 800560c:	08005772 	.word	0x08005772

08005610 <memmove>:
 8005610:	4288      	cmp	r0, r1
 8005612:	b510      	push	{r4, lr}
 8005614:	eb01 0402 	add.w	r4, r1, r2
 8005618:	d902      	bls.n	8005620 <memmove+0x10>
 800561a:	4284      	cmp	r4, r0
 800561c:	4623      	mov	r3, r4
 800561e:	d807      	bhi.n	8005630 <memmove+0x20>
 8005620:	1e43      	subs	r3, r0, #1
 8005622:	42a1      	cmp	r1, r4
 8005624:	d008      	beq.n	8005638 <memmove+0x28>
 8005626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800562a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800562e:	e7f8      	b.n	8005622 <memmove+0x12>
 8005630:	4402      	add	r2, r0
 8005632:	4601      	mov	r1, r0
 8005634:	428a      	cmp	r2, r1
 8005636:	d100      	bne.n	800563a <memmove+0x2a>
 8005638:	bd10      	pop	{r4, pc}
 800563a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800563e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005642:	e7f7      	b.n	8005634 <memmove+0x24>

08005644 <_sbrk_r>:
 8005644:	b538      	push	{r3, r4, r5, lr}
 8005646:	4d06      	ldr	r5, [pc, #24]	; (8005660 <_sbrk_r+0x1c>)
 8005648:	2300      	movs	r3, #0
 800564a:	4604      	mov	r4, r0
 800564c:	4608      	mov	r0, r1
 800564e:	602b      	str	r3, [r5, #0]
 8005650:	f7fb fad4 	bl	8000bfc <_sbrk>
 8005654:	1c43      	adds	r3, r0, #1
 8005656:	d102      	bne.n	800565e <_sbrk_r+0x1a>
 8005658:	682b      	ldr	r3, [r5, #0]
 800565a:	b103      	cbz	r3, 800565e <_sbrk_r+0x1a>
 800565c:	6023      	str	r3, [r4, #0]
 800565e:	bd38      	pop	{r3, r4, r5, pc}
 8005660:	20000834 	.word	0x20000834

08005664 <memcpy>:
 8005664:	440a      	add	r2, r1
 8005666:	4291      	cmp	r1, r2
 8005668:	f100 33ff 	add.w	r3, r0, #4294967295
 800566c:	d100      	bne.n	8005670 <memcpy+0xc>
 800566e:	4770      	bx	lr
 8005670:	b510      	push	{r4, lr}
 8005672:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005676:	f803 4f01 	strb.w	r4, [r3, #1]!
 800567a:	4291      	cmp	r1, r2
 800567c:	d1f9      	bne.n	8005672 <memcpy+0xe>
 800567e:	bd10      	pop	{r4, pc}

08005680 <_realloc_r>:
 8005680:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005684:	4680      	mov	r8, r0
 8005686:	4614      	mov	r4, r2
 8005688:	460e      	mov	r6, r1
 800568a:	b921      	cbnz	r1, 8005696 <_realloc_r+0x16>
 800568c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005690:	4611      	mov	r1, r2
 8005692:	f7ff bc49 	b.w	8004f28 <_malloc_r>
 8005696:	b92a      	cbnz	r2, 80056a4 <_realloc_r+0x24>
 8005698:	f7ff fbda 	bl	8004e50 <_free_r>
 800569c:	4625      	mov	r5, r4
 800569e:	4628      	mov	r0, r5
 80056a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056a4:	f000 f81b 	bl	80056de <_malloc_usable_size_r>
 80056a8:	4284      	cmp	r4, r0
 80056aa:	4607      	mov	r7, r0
 80056ac:	d802      	bhi.n	80056b4 <_realloc_r+0x34>
 80056ae:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056b2:	d812      	bhi.n	80056da <_realloc_r+0x5a>
 80056b4:	4621      	mov	r1, r4
 80056b6:	4640      	mov	r0, r8
 80056b8:	f7ff fc36 	bl	8004f28 <_malloc_r>
 80056bc:	4605      	mov	r5, r0
 80056be:	2800      	cmp	r0, #0
 80056c0:	d0ed      	beq.n	800569e <_realloc_r+0x1e>
 80056c2:	42bc      	cmp	r4, r7
 80056c4:	4622      	mov	r2, r4
 80056c6:	4631      	mov	r1, r6
 80056c8:	bf28      	it	cs
 80056ca:	463a      	movcs	r2, r7
 80056cc:	f7ff ffca 	bl	8005664 <memcpy>
 80056d0:	4631      	mov	r1, r6
 80056d2:	4640      	mov	r0, r8
 80056d4:	f7ff fbbc 	bl	8004e50 <_free_r>
 80056d8:	e7e1      	b.n	800569e <_realloc_r+0x1e>
 80056da:	4635      	mov	r5, r6
 80056dc:	e7df      	b.n	800569e <_realloc_r+0x1e>

080056de <_malloc_usable_size_r>:
 80056de:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80056e2:	1f18      	subs	r0, r3, #4
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	bfbc      	itt	lt
 80056e8:	580b      	ldrlt	r3, [r1, r0]
 80056ea:	18c0      	addlt	r0, r0, r3
 80056ec:	4770      	bx	lr
	...

080056f0 <_init>:
 80056f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056f2:	bf00      	nop
 80056f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056f6:	bc08      	pop	{r3}
 80056f8:	469e      	mov	lr, r3
 80056fa:	4770      	bx	lr

080056fc <_fini>:
 80056fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056fe:	bf00      	nop
 8005700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005702:	bc08      	pop	{r3}
 8005704:	469e      	mov	lr, r3
 8005706:	4770      	bx	lr
