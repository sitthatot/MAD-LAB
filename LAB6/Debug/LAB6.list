
LAB6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005554  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057c0  080057c0  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080057c0  080057c0  000157c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080057c8  080057c8  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057c8  080057c8  000157c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057cc  080057cc  000157cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080057d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007e0  2000005c  0800582c  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000083c  0800582c  0002083c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c72  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000033fc  00000000  00000000  00036d3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012e8  00000000  00000000  0003a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ea3  00000000  00000000  0003b428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a1f3  00000000  00000000  0003c2cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019516  00000000  00000000  000664be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00103673  00000000  00000000  0007f9d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000053b4  00000000  00000000  00183048  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  001883fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	0800573c 	.word	0x0800573c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	0800573c 	.word	0x0800573c

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b22      	ldr	r3, [pc, #136]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000600:	4a22      	ldr	r2, [pc, #136]	; (800068c <MX_ADC1_Init+0xa0>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b20      	ldr	r3, [pc, #128]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <MX_ADC1_Init+0x9c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1d      	ldr	r3, [pc, #116]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000618:	4b1b      	ldr	r3, [pc, #108]	; (8000688 <MX_ADC1_Init+0x9c>)
 800061a:	2200      	movs	r2, #0
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b1a      	ldr	r3, [pc, #104]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000626:	4b18      	ldr	r3, [pc, #96]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000628:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800062c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 800062e:	4b16      	ldr	r3, [pc, #88]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000630:	f04f 6230 	mov.w	r2, #184549376	; 0xb000000
 8000634:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000636:	4b14      	ldr	r3, [pc, #80]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000638:	2200      	movs	r2, #0
 800063a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800063c:	4b12      	ldr	r3, [pc, #72]	; (8000688 <MX_ADC1_Init+0x9c>)
 800063e:	2201      	movs	r2, #1
 8000640:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000642:	4b11      	ldr	r3, [pc, #68]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000644:	2200      	movs	r2, #0
 8000646:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800064a:	4b0f      	ldr	r3, [pc, #60]	; (8000688 <MX_ADC1_Init+0x9c>)
 800064c:	2201      	movs	r2, #1
 800064e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000650:	480d      	ldr	r0, [pc, #52]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000652:	f000 fdb7 	bl	80011c4 <HAL_ADC_Init>
 8000656:	4603      	mov	r3, r0
 8000658:	2b00      	cmp	r3, #0
 800065a:	d001      	beq.n	8000660 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 800065c:	f000 fa2e 	bl	8000abc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000660:	2303      	movs	r3, #3
 8000662:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000664:	2301      	movs	r3, #1
 8000666:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000668:	2300      	movs	r3, #0
 800066a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	4619      	mov	r1, r3
 8000670:	4805      	ldr	r0, [pc, #20]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000672:	f000 ff1d 	bl	80014b0 <HAL_ADC_ConfigChannel>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 800067c:	f000 fa1e 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	3710      	adds	r7, #16
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000078 	.word	0x20000078
 800068c:	40012000 	.word	0x40012000

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a19      	ldr	r2, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x84>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d12b      	bne.n	800070a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b19      	ldr	r3, [pc, #100]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a18      	ldr	r2, [pc, #96]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b16      	ldr	r3, [pc, #88]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b13      	ldr	r3, [pc, #76]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a12      	ldr	r2, [pc, #72]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006d0:	f043 0301 	orr.w	r3, r3, #1
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b10      	ldr	r3, [pc, #64]	; (8000718 <HAL_ADC_MspInit+0x88>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006e2:	2308      	movs	r3, #8
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4809      	ldr	r0, [pc, #36]	; (800071c <HAL_ADC_MspInit+0x8c>)
 80006f6:	f001 fa47 	bl	8001b88 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80006fa:	2200      	movs	r2, #0
 80006fc:	2102      	movs	r1, #2
 80006fe:	2012      	movs	r0, #18
 8000700:	f001 fa0b 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000704:	2012      	movs	r0, #18
 8000706:	f001 fa24 	bl	8001b52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800070a:	bf00      	nop
 800070c:	3728      	adds	r7, #40	; 0x28
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40012000 	.word	0x40012000
 8000718:	40023800 	.word	0x40023800
 800071c:	40020000 	.word	0x40020000

08000720 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b08c      	sub	sp, #48	; 0x30
 8000724:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000726:	f107 031c 	add.w	r3, r7, #28
 800072a:	2200      	movs	r2, #0
 800072c:	601a      	str	r2, [r3, #0]
 800072e:	605a      	str	r2, [r3, #4]
 8000730:	609a      	str	r2, [r3, #8]
 8000732:	60da      	str	r2, [r3, #12]
 8000734:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000736:	4b68      	ldr	r3, [pc, #416]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800073a:	4a67      	ldr	r2, [pc, #412]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800073c:	f043 0304 	orr.w	r3, r3, #4
 8000740:	6313      	str	r3, [r2, #48]	; 0x30
 8000742:	4b65      	ldr	r3, [pc, #404]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	f003 0304 	and.w	r3, r3, #4
 800074a:	61bb      	str	r3, [r7, #24]
 800074c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800074e:	4b62      	ldr	r3, [pc, #392]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a61      	ldr	r2, [pc, #388]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b5f      	ldr	r3, [pc, #380]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000766:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076a:	4a5b      	ldr	r2, [pc, #364]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800076c:	f043 0301 	orr.w	r3, r3, #1
 8000770:	6313      	str	r3, [r2, #48]	; 0x30
 8000772:	4b59      	ldr	r3, [pc, #356]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000776:	f003 0301 	and.w	r3, r3, #1
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800077e:	4b56      	ldr	r3, [pc, #344]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000782:	4a55      	ldr	r2, [pc, #340]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000784:	f043 0302 	orr.w	r3, r3, #2
 8000788:	6313      	str	r3, [r2, #48]	; 0x30
 800078a:	4b53      	ldr	r3, [pc, #332]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	f003 0302 	and.w	r3, r3, #2
 8000792:	60fb      	str	r3, [r7, #12]
 8000794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000796:	4b50      	ldr	r3, [pc, #320]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a4f      	ldr	r2, [pc, #316]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 800079c:	f043 0308 	orr.w	r3, r3, #8
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b4d      	ldr	r3, [pc, #308]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0308 	and.w	r3, r3, #8
 80007aa:	60bb      	str	r3, [r7, #8]
 80007ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ae:	4b4a      	ldr	r3, [pc, #296]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	4a49      	ldr	r2, [pc, #292]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007b8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <MX_GPIO_Init+0x1b8>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007c2:	607b      	str	r3, [r7, #4]
 80007c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80007c6:	2200      	movs	r2, #0
 80007c8:	f244 0181 	movw	r1, #16513	; 0x4081
 80007cc:	4843      	ldr	r0, [pc, #268]	; (80008dc <MX_GPIO_Init+0x1bc>)
 80007ce:	f001 fb87 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80007d2:	2200      	movs	r2, #0
 80007d4:	2140      	movs	r1, #64	; 0x40
 80007d6:	4842      	ldr	r0, [pc, #264]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80007d8:	f001 fb82 	bl	8001ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80007dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 031c 	add.w	r3, r7, #28
 80007f0:	4619      	mov	r1, r3
 80007f2:	483c      	ldr	r0, [pc, #240]	; (80008e4 <MX_GPIO_Init+0x1c4>)
 80007f4:	f001 f9c8 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80007f8:	2332      	movs	r3, #50	; 0x32
 80007fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000808:	230b      	movs	r3, #11
 800080a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080c:	f107 031c 	add.w	r3, r7, #28
 8000810:	4619      	mov	r1, r3
 8000812:	4834      	ldr	r0, [pc, #208]	; (80008e4 <MX_GPIO_Init+0x1c4>)
 8000814:	f001 f9b8 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000818:	2386      	movs	r3, #134	; 0x86
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800082c:	f107 031c 	add.w	r3, r7, #28
 8000830:	4619      	mov	r1, r3
 8000832:	482d      	ldr	r0, [pc, #180]	; (80008e8 <MX_GPIO_Init+0x1c8>)
 8000834:	f001 f9a8 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000838:	f244 0381 	movw	r3, #16513	; 0x4081
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083e:	2301      	movs	r3, #1
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000846:	2300      	movs	r3, #0
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	4619      	mov	r1, r3
 8000850:	4822      	ldr	r0, [pc, #136]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000852:	f001 f999 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000856:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800085a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085c:	2302      	movs	r3, #2
 800085e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000864:	2303      	movs	r3, #3
 8000866:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000868:	230b      	movs	r3, #11
 800086a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800086c:	f107 031c 	add.w	r3, r7, #28
 8000870:	4619      	mov	r1, r3
 8000872:	481a      	ldr	r0, [pc, #104]	; (80008dc <MX_GPIO_Init+0x1bc>)
 8000874:	f001 f988 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000878:	2340      	movs	r3, #64	; 0x40
 800087a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800087c:	2301      	movs	r3, #1
 800087e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000880:	2300      	movs	r3, #0
 8000882:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000884:	2300      	movs	r3, #0
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	4814      	ldr	r0, [pc, #80]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 8000890:	f001 f97a 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000894:	2380      	movs	r3, #128	; 0x80
 8000896:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	480e      	ldr	r0, [pc, #56]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80008a8:	f001 f96e 	bl	8001b88 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ac:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008b2:	2302      	movs	r3, #2
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ba:	2303      	movs	r3, #3
 80008bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008be:	230b      	movs	r3, #11
 80008c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	4805      	ldr	r0, [pc, #20]	; (80008e0 <MX_GPIO_Init+0x1c0>)
 80008ca:	f001 f95d 	bl	8001b88 <HAL_GPIO_Init>

}
 80008ce:	bf00      	nop
 80008d0:	3730      	adds	r7, #48	; 0x30
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	40023800 	.word	0x40023800
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40021800 	.word	0x40021800
 80008e4:	40020800 	.word	0x40020800
 80008e8:	40020000 	.word	0x40020000

080008ec <displayNumber>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayNumber(uint32_t myInteger)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	; 0x40
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	char toBaseTen[50];
	sprintf(toBaseTen,"%d",myInteger);
 80008f4:	f107 030c 	add.w	r3, r7, #12
 80008f8:	687a      	ldr	r2, [r7, #4]
 80008fa:	490e      	ldr	r1, [pc, #56]	; (8000934 <displayNumber+0x48>)
 80008fc:	4618      	mov	r0, r3
 80008fe:	f004 fa79 	bl	8004df4 <siprintf>
	print(toBaseTen);
 8000902:	f107 030c 	add.w	r3, r7, #12
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc9a 	bl	8000240 <strlen>
 800090c:	4603      	mov	r3, r0
 800090e:	b29a      	uxth	r2, r3
 8000910:	f107 010c 	add.w	r1, r7, #12
 8000914:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000918:	4807      	ldr	r0, [pc, #28]	; (8000938 <displayNumber+0x4c>)
 800091a:	f003 fad9 	bl	8003ed0 <HAL_UART_Transmit>
	print("\r");
 800091e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000922:	2201      	movs	r2, #1
 8000924:	4905      	ldr	r1, [pc, #20]	; (800093c <displayNumber+0x50>)
 8000926:	4804      	ldr	r0, [pc, #16]	; (8000938 <displayNumber+0x4c>)
 8000928:	f003 fad2 	bl	8003ed0 <HAL_UART_Transmit>

}
 800092c:	bf00      	nop
 800092e:	3740      	adds	r7, #64	; 0x40
 8000930:	46bd      	mov	sp, r7
 8000932:	bd80      	pop	{r7, pc}
 8000934:	08005754 	.word	0x08005754
 8000938:	20000160 	.word	0x20000160
 800093c:	08005758 	.word	0x08005758

08000940 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000944:	f000 fbbd 	bl	80010c2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000948:	f000 f81e 	bl	8000988 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800094c:	f7ff fee8 	bl	8000720 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000950:	f000 fa56 	bl	8000e00 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000954:	f000 fae4 	bl	8000f20 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000958:	f7ff fe48 	bl	80005ec <MX_ADC1_Init>
  MX_TIM2_Init();
 800095c:	f000 f9c2 	bl	8000ce4 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000960:	f000 f96c 	bl	8000c3c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim1);
 8000964:	4806      	ldr	r0, [pc, #24]	; (8000980 <main+0x40>)
 8000966:	f002 fdeb 	bl	8003540 <HAL_TIM_Base_Start_IT>
  {

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  displayNumber(count);
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <main+0x44>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ffbc 	bl	80008ec <displayNumber>
	  HAL_Delay(400);
 8000974:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000978:	f000 fc00 	bl	800117c <HAL_Delay>
	  displayNumber(count);
 800097c:	e7f5      	b.n	800096a <main+0x2a>
 800097e:	bf00      	nop
 8000980:	200000c8 	.word	0x200000c8
 8000984:	200000c0 	.word	0x200000c0

08000988 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b094      	sub	sp, #80	; 0x50
 800098c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800098e:	f107 031c 	add.w	r3, r7, #28
 8000992:	2234      	movs	r2, #52	; 0x34
 8000994:	2100      	movs	r1, #0
 8000996:	4618      	mov	r0, r3
 8000998:	f004 fa4c 	bl	8004e34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800099c:	f107 0308 	add.w	r3, r7, #8
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
 80009a8:	60da      	str	r2, [r3, #12]
 80009aa:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80009ac:	f001 fc14 	bl	80021d8 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	4b2b      	ldr	r3, [pc, #172]	; (8000a60 <SystemClock_Config+0xd8>)
 80009b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b4:	4a2a      	ldr	r2, [pc, #168]	; (8000a60 <SystemClock_Config+0xd8>)
 80009b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009ba:	6413      	str	r3, [r2, #64]	; 0x40
 80009bc:	4b28      	ldr	r3, [pc, #160]	; (8000a60 <SystemClock_Config+0xd8>)
 80009be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c4:	607b      	str	r3, [r7, #4]
 80009c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c8:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <SystemClock_Config+0xdc>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <SystemClock_Config+0xdc>)
 80009ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009d2:	6013      	str	r3, [r2, #0]
 80009d4:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <SystemClock_Config+0xdc>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009dc:	603b      	str	r3, [r7, #0]
 80009de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e0:	2301      	movs	r3, #1
 80009e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009e8:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	2302      	movs	r3, #2
 80009ec:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009f4:	2304      	movs	r3, #4
 80009f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009f8:	23d8      	movs	r3, #216	; 0xd8
 80009fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80009fc:	2302      	movs	r3, #2
 80009fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000a00:	2309      	movs	r3, #9
 8000a02:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a04:	2302      	movs	r3, #2
 8000a06:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a08:	f107 031c 	add.w	r3, r7, #28
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f001 fc43 	bl	8002298 <HAL_RCC_OscConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a18:	f000 f850 	bl	8000abc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a1c:	f001 fbec 	bl	80021f8 <HAL_PWREx_EnableOverDrive>
 8000a20:	4603      	mov	r3, r0
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d001      	beq.n	8000a2a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000a26:	f000 f849 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a2a:	230f      	movs	r3, #15
 8000a2c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a2e:	2302      	movs	r3, #2
 8000a30:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a32:	2300      	movs	r3, #0
 8000a34:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a36:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a3a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a40:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a42:	f107 0308 	add.w	r3, r7, #8
 8000a46:	2107      	movs	r1, #7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f001 fed3 	bl	80027f4 <HAL_RCC_ClockConfig>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000a54:	f000 f832 	bl	8000abc <Error_Handler>
  }
}
 8000a58:	bf00      	nop
 8000a5a:	3750      	adds	r7, #80	; 0x50
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40007000 	.word	0x40007000

08000a68 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b08c      	sub	sp, #48	; 0x30
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
	uint32_t adcVal;
	char adcResult[30];

	HAL_GPIO_TogglePin(GPIOB,GPIO_PIN_7);
 8000a70:	2180      	movs	r1, #128	; 0x80
 8000a72:	480f      	ldr	r0, [pc, #60]	; (8000ab0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000a74:	f001 fa4d 	bl	8001f12 <HAL_GPIO_TogglePin>
	adcVal = HAL_ADC_GetValue(hadc);
 8000a78:	6878      	ldr	r0, [r7, #4]
 8000a7a:	f000 fcf7 	bl	800146c <HAL_ADC_GetValue>
 8000a7e:	62f8      	str	r0, [r7, #44]	; 0x2c
	sprintf(adcResult,"ADC_Val = 0x%010X \n\r", adcVal);
 8000a80:	f107 030c 	add.w	r3, r7, #12
 8000a84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000a86:	490b      	ldr	r1, [pc, #44]	; (8000ab4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f004 f9b3 	bl	8004df4 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t*) adcResult,strlen(adcResult),100);
 8000a8e:	f107 030c 	add.w	r3, r7, #12
 8000a92:	4618      	mov	r0, r3
 8000a94:	f7ff fbd4 	bl	8000240 <strlen>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	b29a      	uxth	r2, r3
 8000a9c:	f107 010c 	add.w	r1, r7, #12
 8000aa0:	2364      	movs	r3, #100	; 0x64
 8000aa2:	4805      	ldr	r0, [pc, #20]	; (8000ab8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000aa4:	f003 fa14 	bl	8003ed0 <HAL_UART_Transmit>

}
 8000aa8:	bf00      	nop
 8000aaa:	3730      	adds	r7, #48	; 0x30
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40020400 	.word	0x40020400
 8000ab4:	0800575c 	.word	0x0800575c
 8000ab8:	20000160 	.word	0x20000160

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000afe:	2005      	movs	r0, #5
 8000b00:	f001 f800 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b04:	bf00      	nop
 8000b06:	3708      	adds	r7, #8
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 faee 	bl	800113c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000b68:	4802      	ldr	r0, [pc, #8]	; (8000b74 <ADC_IRQHandler+0x10>)
 8000b6a:	f000 fb6f 	bl	800124c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000078 	.word	0x20000078

08000b78 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000b7c:	4804      	ldr	r0, [pc, #16]	; (8000b90 <TIM1_UP_TIM10_IRQHandler+0x18>)
 8000b7e:	f002 fd57 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */
  count++;
 8000b82:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	3301      	adds	r3, #1
 8000b88:	4a02      	ldr	r2, [pc, #8]	; (8000b94 <TIM1_UP_TIM10_IRQHandler+0x1c>)
 8000b8a:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b8c:	bf00      	nop
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	200000c8 	.word	0x200000c8
 8000b94:	200000c0 	.word	0x200000c0

08000b98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b9c:	4802      	ldr	r0, [pc, #8]	; (8000ba8 <TIM2_IRQHandler+0x10>)
 8000b9e:	f002 fd47 	bl	8003630 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000ba2:	bf00      	nop
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000114 	.word	0x20000114

08000bac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000bb4:	4a14      	ldr	r2, [pc, #80]	; (8000c08 <_sbrk+0x5c>)
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <_sbrk+0x60>)
 8000bb8:	1ad3      	subs	r3, r2, r3
 8000bba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000bbc:	697b      	ldr	r3, [r7, #20]
 8000bbe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000bc0:	4b13      	ldr	r3, [pc, #76]	; (8000c10 <_sbrk+0x64>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000bc8:	4b11      	ldr	r3, [pc, #68]	; (8000c10 <_sbrk+0x64>)
 8000bca:	4a12      	ldr	r2, [pc, #72]	; (8000c14 <_sbrk+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000bce:	4b10      	ldr	r3, [pc, #64]	; (8000c10 <_sbrk+0x64>)
 8000bd0:	681a      	ldr	r2, [r3, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d207      	bcs.n	8000bec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000bdc:	f004 f932 	bl	8004e44 <__errno>
 8000be0:	4603      	mov	r3, r0
 8000be2:	220c      	movs	r2, #12
 8000be4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000be6:	f04f 33ff 	mov.w	r3, #4294967295
 8000bea:	e009      	b.n	8000c00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000bec:	4b08      	ldr	r3, [pc, #32]	; (8000c10 <_sbrk+0x64>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000bf2:	4b07      	ldr	r3, [pc, #28]	; (8000c10 <_sbrk+0x64>)
 8000bf4:	681a      	ldr	r2, [r3, #0]
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <_sbrk+0x64>)
 8000bfc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bfe:	68fb      	ldr	r3, [r7, #12]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20080000 	.word	0x20080000
 8000c0c:	00000400 	.word	0x00000400
 8000c10:	200000c4 	.word	0x200000c4
 8000c14:	20000840 	.word	0x20000840

08000c18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c1c:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <SystemInit+0x20>)
 8000c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c22:	4a05      	ldr	r2, [pc, #20]	; (8000c38 <SystemInit+0x20>)
 8000c24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c2c:	bf00      	nop
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	2200      	movs	r2, #0
 8000c48:	601a      	str	r2, [r3, #0]
 8000c4a:	605a      	str	r2, [r3, #4]
 8000c4c:	609a      	str	r2, [r3, #8]
 8000c4e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c50:	1d3b      	adds	r3, r7, #4
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c5a:	4b20      	ldr	r3, [pc, #128]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c5c:	4a20      	ldr	r2, [pc, #128]	; (8000ce0 <MX_TIM1_Init+0xa4>)
 8000c5e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 216-1;
 8000c60:	4b1e      	ldr	r3, [pc, #120]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c62:	22d7      	movs	r2, #215	; 0xd7
 8000c64:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c66:	4b1d      	ldr	r3, [pc, #116]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 8000c6c:	4b1b      	ldr	r3, [pc, #108]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c6e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c72:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c74:	4b19      	ldr	r3, [pc, #100]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c7a:	4b18      	ldr	r3, [pc, #96]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c80:	4b16      	ldr	r3, [pc, #88]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c86:	4815      	ldr	r0, [pc, #84]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000c88:	f002 fc02 	bl	8003490 <HAL_TIM_Base_Init>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d001      	beq.n	8000c96 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000c92:	f7ff ff13 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c9a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c9c:	f107 0310 	add.w	r3, r7, #16
 8000ca0:	4619      	mov	r1, r3
 8000ca2:	480e      	ldr	r0, [pc, #56]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000ca4:	f002 fde4 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cae:	f7ff ff05 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	4619      	mov	r1, r3
 8000cc2:	4806      	ldr	r0, [pc, #24]	; (8000cdc <MX_TIM1_Init+0xa0>)
 8000cc4:	f003 f80a 	bl	8003cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000cce:	f7ff fef5 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	3720      	adds	r7, #32
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000c8 	.word	0x200000c8
 8000ce0:	40010000 	.word	0x40010000

08000ce4 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b088      	sub	sp, #32
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0310 	add.w	r3, r7, #16
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	1d3b      	adds	r3, r7, #4
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d02:	4b1e      	ldr	r3, [pc, #120]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d04:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d08:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10800-1;
 8000d0a:	4b1c      	ldr	r3, [pc, #112]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d0c:	f642 222f 	movw	r2, #10799	; 0x2a2f
 8000d10:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b1a      	ldr	r3, [pc, #104]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000d18:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d1e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b16      	ldr	r3, [pc, #88]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d26:	4b15      	ldr	r3, [pc, #84]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d2c:	4813      	ldr	r0, [pc, #76]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d2e:	f002 fbaf 	bl	8003490 <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 8000d38:	f7ff fec0 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0310 	add.w	r3, r7, #16
 8000d46:	4619      	mov	r1, r3
 8000d48:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d4a:	f002 fd91 	bl	8003870 <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM2_Init+0x74>
  {
    Error_Handler();
 8000d54:	f7ff feb2 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000d58:	2320      	movs	r3, #32
 8000d5a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d60:	1d3b      	adds	r3, r7, #4
 8000d62:	4619      	mov	r1, r3
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_TIM2_Init+0x98>)
 8000d66:	f002 ffb9 	bl	8003cdc <HAL_TIMEx_MasterConfigSynchronization>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d70:	f7ff fea4 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000114 	.word	0x20000114

08000d80 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b084      	sub	sp, #16
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	4a1a      	ldr	r2, [pc, #104]	; (8000df8 <HAL_TIM_Base_MspInit+0x78>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d114      	bne.n	8000dbc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d92:	4b1a      	ldr	r3, [pc, #104]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a19      	ldr	r2, [pc, #100]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60fb      	str	r3, [r7, #12]
 8000da8:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 1, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	2101      	movs	r1, #1
 8000dae:	2019      	movs	r0, #25
 8000db0:	f000 feb3 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000db4:	2019      	movs	r0, #25
 8000db6:	f000 fecc 	bl	8001b52 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000dba:	e018      	b.n	8000dee <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM2)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000dc4:	d113      	bne.n	8000dee <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000dc6:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	4a0c      	ldr	r2, [pc, #48]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000dcc:	f043 0301 	orr.w	r3, r3, #1
 8000dd0:	6413      	str	r3, [r2, #64]	; 0x40
 8000dd2:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <HAL_TIM_Base_MspInit+0x7c>)
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dd6:	f003 0301 	and.w	r3, r3, #1
 8000dda:	60bb      	str	r3, [r7, #8]
 8000ddc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8000dde:	2200      	movs	r2, #0
 8000de0:	2102      	movs	r1, #2
 8000de2:	201c      	movs	r0, #28
 8000de4:	f000 fe99 	bl	8001b1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000de8:	201c      	movs	r0, #28
 8000dea:	f000 feb2 	bl	8001b52 <HAL_NVIC_EnableIRQ>
}
 8000dee:	bf00      	nop
 8000df0:	3710      	adds	r7, #16
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40010000 	.word	0x40010000
 8000dfc:	40023800 	.word	0x40023800

08000e00 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e04:	4b14      	ldr	r3, [pc, #80]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e06:	4a15      	ldr	r2, [pc, #84]	; (8000e5c <MX_USART3_UART_Init+0x5c>)
 8000e08:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e0a:	4b13      	ldr	r3, [pc, #76]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e10:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e26:	220c      	movs	r2, #12
 8000e28:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e2a:	4b0b      	ldr	r3, [pc, #44]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e36:	4b08      	ldr	r3, [pc, #32]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e3c:	4b06      	ldr	r3, [pc, #24]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e42:	4805      	ldr	r0, [pc, #20]	; (8000e58 <MX_USART3_UART_Init+0x58>)
 8000e44:	f002 fff6 	bl	8003e34 <HAL_UART_Init>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000e4e:	f7ff fe35 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e52:	bf00      	nop
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	20000160 	.word	0x20000160
 8000e5c:	40004800 	.word	0x40004800

08000e60 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b0ae      	sub	sp, #184	; 0xb8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e68:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	2290      	movs	r2, #144	; 0x90
 8000e7e:	2100      	movs	r1, #0
 8000e80:	4618      	mov	r0, r3
 8000e82:	f003 ffd7 	bl	8004e34 <memset>
  if(uartHandle->Instance==USART3)
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	4a22      	ldr	r2, [pc, #136]	; (8000f14 <HAL_UART_MspInit+0xb4>)
 8000e8c:	4293      	cmp	r3, r2
 8000e8e:	d13c      	bne.n	8000f0a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e94:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e96:	2300      	movs	r3, #0
 8000e98:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f001 fece 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000eaa:	f7ff fe07 	bl	8000abc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000eb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000eb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000ec2:	613b      	str	r3, [r7, #16]
 8000ec4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a13      	ldr	r2, [pc, #76]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000ecc:	f043 0308 	orr.w	r3, r3, #8
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_UART_MspInit+0xb8>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0308 	and.w	r3, r3, #8
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000ede:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ee2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee6:	2302      	movs	r3, #2
 8000ee8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ef2:	2303      	movs	r3, #3
 8000ef4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ef8:	2307      	movs	r3, #7
 8000efa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000efe:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	; (8000f1c <HAL_UART_MspInit+0xbc>)
 8000f06:	f000 fe3f 	bl	8001b88 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000f0a:	bf00      	nop
 8000f0c:	37b8      	adds	r7, #184	; 0xb8
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004800 	.word	0x40004800
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020c00 	.word	0x40020c00

08000f20 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000f24:	4b14      	ldr	r3, [pc, #80]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000f2c:	4b12      	ldr	r3, [pc, #72]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f2e:	2206      	movs	r2, #6
 8000f30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000f32:	4b11      	ldr	r3, [pc, #68]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f34:	2202      	movs	r2, #2
 8000f36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000f38:	4b0f      	ldr	r3, [pc, #60]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000f3e:	4b0e      	ldr	r3, [pc, #56]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f40:	2202      	movs	r2, #2
 8000f42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000f44:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f46:	2201      	movs	r2, #1
 8000f48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000f4a:	4b0b      	ldr	r3, [pc, #44]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000f50:	4b09      	ldr	r3, [pc, #36]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f58:	2201      	movs	r2, #1
 8000f5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000f64:	f000 ffef 	bl	8001f46 <HAL_PCD_Init>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d001      	beq.n	8000f72 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000f6e:	f7ff fda5 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000f72:	bf00      	nop
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	200001e8 	.word	0x200001e8

08000f7c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b0ae      	sub	sp, #184	; 0xb8
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
 8000f90:	60da      	str	r2, [r3, #12]
 8000f92:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f94:	f107 0314 	add.w	r3, r7, #20
 8000f98:	2290      	movs	r2, #144	; 0x90
 8000f9a:	2100      	movs	r1, #0
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f003 ff49 	bl	8004e34 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000faa:	d159      	bne.n	8001060 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8000fac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000fb0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fb8:	f107 0314 	add.w	r3, r7, #20
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f001 fe3f 	bl	8002c40 <HAL_RCCEx_PeriphCLKConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8000fc8:	f7ff fd78 	bl	8000abc <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	4b26      	ldr	r3, [pc, #152]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	4a25      	ldr	r2, [pc, #148]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6313      	str	r3, [r2, #48]	; 0x30
 8000fd8:	4b23      	ldr	r3, [pc, #140]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8000fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fdc:	f003 0301 	and.w	r3, r3, #1
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000fe4:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000fe8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fec:	2302      	movs	r3, #2
 8000fee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff8:	2303      	movs	r3, #3
 8000ffa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ffe:	230a      	movs	r3, #10
 8001000:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001004:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001008:	4619      	mov	r1, r3
 800100a:	4818      	ldr	r0, [pc, #96]	; (800106c <HAL_PCD_MspInit+0xf0>)
 800100c:	f000 fdbc 	bl	8001b88 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001010:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001014:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001018:	2300      	movs	r3, #0
 800101a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001024:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <HAL_PCD_MspInit+0xf0>)
 800102c:	f000 fdac 	bl	8001b88 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001030:	4b0d      	ldr	r3, [pc, #52]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001032:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001034:	4a0c      	ldr	r2, [pc, #48]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001036:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800103a:	6353      	str	r3, [r2, #52]	; 0x34
 800103c:	4b0a      	ldr	r3, [pc, #40]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800103e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4b07      	ldr	r3, [pc, #28]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800104a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_PCD_MspInit+0xec>)
 800104e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001052:	6453      	str	r3, [r2, #68]	; 0x44
 8001054:	4b04      	ldr	r3, [pc, #16]	; (8001068 <HAL_PCD_MspInit+0xec>)
 8001056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001058:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800105c:	60bb      	str	r3, [r7, #8]
 800105e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001060:	bf00      	nop
 8001062:	37b8      	adds	r7, #184	; 0xb8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	40023800 	.word	0x40023800
 800106c:	40020000 	.word	0x40020000

08001070 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001070:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010a8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001074:	480d      	ldr	r0, [pc, #52]	; (80010ac <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001076:	490e      	ldr	r1, [pc, #56]	; (80010b0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001078:	4a0e      	ldr	r2, [pc, #56]	; (80010b4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800107a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800107c:	e002      	b.n	8001084 <LoopCopyDataInit>

0800107e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800107e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001080:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001082:	3304      	adds	r3, #4

08001084 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001084:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001086:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001088:	d3f9      	bcc.n	800107e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800108a:	4a0b      	ldr	r2, [pc, #44]	; (80010b8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800108c:	4c0b      	ldr	r4, [pc, #44]	; (80010bc <LoopFillZerobss+0x26>)
  movs r3, #0
 800108e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001090:	e001      	b.n	8001096 <LoopFillZerobss>

08001092 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001092:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001094:	3204      	adds	r2, #4

08001096 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001096:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001098:	d3fb      	bcc.n	8001092 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800109a:	f7ff fdbd 	bl	8000c18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800109e:	f003 fed7 	bl	8004e50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010a2:	f7ff fc4d 	bl	8000940 <main>
  bx  lr    
 80010a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80010a8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80010b4:	080057d0 	.word	0x080057d0
  ldr r2, =_sbss
 80010b8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80010bc:	2000083c 	.word	0x2000083c

080010c0 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <CAN1_RX0_IRQHandler>

080010c2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010c6:	2003      	movs	r0, #3
 80010c8:	f000 fd1c 	bl	8001b04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010cc:	2000      	movs	r0, #0
 80010ce:	f000 f805 	bl	80010dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010d2:	f7ff fcf9 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010d6:	2300      	movs	r3, #0
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}

080010dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010e4:	4b12      	ldr	r3, [pc, #72]	; (8001130 <HAL_InitTick+0x54>)
 80010e6:	681a      	ldr	r2, [r3, #0]
 80010e8:	4b12      	ldr	r3, [pc, #72]	; (8001134 <HAL_InitTick+0x58>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	4619      	mov	r1, r3
 80010ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80010f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80010fa:	4618      	mov	r0, r3
 80010fc:	f000 fd37 	bl	8001b6e <HAL_SYSTICK_Config>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e00e      	b.n	8001128 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	2b0f      	cmp	r3, #15
 800110e:	d80a      	bhi.n	8001126 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001110:	2200      	movs	r2, #0
 8001112:	6879      	ldr	r1, [r7, #4]
 8001114:	f04f 30ff 	mov.w	r0, #4294967295
 8001118:	f000 fcff 	bl	8001b1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800111c:	4a06      	ldr	r2, [pc, #24]	; (8001138 <HAL_InitTick+0x5c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001122:	2300      	movs	r3, #0
 8001124:	e000      	b.n	8001128 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001126:	2301      	movs	r3, #1
}
 8001128:	4618      	mov	r0, r3
 800112a:	3708      	adds	r7, #8
 800112c:	46bd      	mov	sp, r7
 800112e:	bd80      	pop	{r7, pc}
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008
 8001138:	20000004 	.word	0x20000004

0800113c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_IncTick+0x20>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	461a      	mov	r2, r3
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x24>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	4413      	add	r3, r2
 800114c:	4a04      	ldr	r2, [pc, #16]	; (8001160 <HAL_IncTick+0x24>)
 800114e:	6013      	str	r3, [r2, #0]
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000008 	.word	0x20000008
 8001160:	200006f0 	.word	0x200006f0

08001164 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  return uwTick;
 8001168:	4b03      	ldr	r3, [pc, #12]	; (8001178 <HAL_GetTick+0x14>)
 800116a:	681b      	ldr	r3, [r3, #0]
}
 800116c:	4618      	mov	r0, r3
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	200006f0 	.word	0x200006f0

0800117c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001184:	f7ff ffee 	bl	8001164 <HAL_GetTick>
 8001188:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001194:	d005      	beq.n	80011a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001196:	4b0a      	ldr	r3, [pc, #40]	; (80011c0 <HAL_Delay+0x44>)
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	4413      	add	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80011a2:	bf00      	nop
 80011a4:	f7ff ffde 	bl	8001164 <HAL_GetTick>
 80011a8:	4602      	mov	r2, r0
 80011aa:	68bb      	ldr	r3, [r7, #8]
 80011ac:	1ad3      	subs	r3, r2, r3
 80011ae:	68fa      	ldr	r2, [r7, #12]
 80011b0:	429a      	cmp	r2, r3
 80011b2:	d8f7      	bhi.n	80011a4 <HAL_Delay+0x28>
  {
  }
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	3710      	adds	r7, #16
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}
 80011be:	bf00      	nop
 80011c0:	20000008 	.word	0x20000008

080011c4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011d6:	2301      	movs	r3, #1
 80011d8:	e031      	b.n	800123e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d109      	bne.n	80011f6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff fa54 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	2200      	movs	r2, #0
 80011f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d116      	bne.n	8001230 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001206:	4b10      	ldr	r3, [pc, #64]	; (8001248 <HAL_ADC_Init+0x84>)
 8001208:	4013      	ands	r3, r2
 800120a:	f043 0202 	orr.w	r2, r3, #2
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001212:	6878      	ldr	r0, [r7, #4]
 8001214:	f000 faa2 	bl	800175c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2200      	movs	r2, #0
 800121c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001222:	f023 0303 	bic.w	r3, r3, #3
 8001226:	f043 0201 	orr.w	r2, r3, #1
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	641a      	str	r2, [r3, #64]	; 0x40
 800122e:	e001      	b.n	8001234 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001230:	2301      	movs	r3, #1
 8001232:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800123c:	7bfb      	ldrb	r3, [r7, #15]
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	ffffeefd 	.word	0xffffeefd

0800124c <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
 8001258:	2300      	movs	r3, #0
 800125a:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	f003 0302 	and.w	r3, r3, #2
 8001272:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001274:	68bb      	ldr	r3, [r7, #8]
 8001276:	f003 0320 	and.w	r3, r3, #32
 800127a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d049      	beq.n	8001316 <HAL_ADC_IRQHandler+0xca>
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d046      	beq.n	8001316 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128c:	f003 0310 	and.w	r3, r3, #16
 8001290:	2b00      	cmp	r3, #0
 8001292:	d105      	bne.n	80012a0 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001298:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d12b      	bne.n	8001306 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d127      	bne.n	8001306 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012bc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d006      	beq.n	80012d2 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d119      	bne.n	8001306 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0220 	bic.w	r2, r2, #32
 80012e0:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d105      	bne.n	8001306 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fe:	f043 0201 	orr.w	r2, r3, #1
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f7ff fbae 	bl	8000a68 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f06f 0212 	mvn.w	r2, #18
 8001314:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	f003 0304 	and.w	r3, r3, #4
 800131c:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800131e:	68bb      	ldr	r3, [r7, #8]
 8001320:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001324:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d057      	beq.n	80013dc <HAL_ADC_IRQHandler+0x190>
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d054      	beq.n	80013dc <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001336:	f003 0310 	and.w	r3, r3, #16
 800133a:	2b00      	cmp	r3, #0
 800133c:	d105      	bne.n	800134a <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001342:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001354:	2b00      	cmp	r3, #0
 8001356:	d139      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001362:	2b00      	cmp	r3, #0
 8001364:	d006      	beq.n	8001374 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	689b      	ldr	r3, [r3, #8]
 800136c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001370:	2b00      	cmp	r3, #0
 8001372:	d12b      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	685b      	ldr	r3, [r3, #4]
 800137a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800137e:	2b00      	cmp	r3, #0
 8001380:	d124      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689b      	ldr	r3, [r3, #8]
 8001388:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800138c:	2b00      	cmp	r3, #0
 800138e:	d11d      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001394:	2b00      	cmp	r3, #0
 8001396:	d119      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	685a      	ldr	r2, [r3, #4]
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013a6:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ac:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d105      	bne.n	80013cc <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	f043 0201 	orr.w	r2, r3, #1
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 fabf 	bl	8001950 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f06f 020c 	mvn.w	r2, #12
 80013da:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	f003 0301 	and.w	r3, r3, #1
 80013e2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80013ea:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d017      	beq.n	8001422 <HAL_ADC_IRQHandler+0x1d6>
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d014      	beq.n	8001422 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	2b01      	cmp	r3, #1
 8001404:	d10d      	bne.n	8001422 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f837 	bl	8001486 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f06f 0201 	mvn.w	r2, #1
 8001420:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0320 	and.w	r3, r3, #32
 8001428:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800142a:	68bb      	ldr	r3, [r7, #8]
 800142c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001430:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d015      	beq.n	8001464 <HAL_ADC_IRQHandler+0x218>
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	2b00      	cmp	r3, #0
 800143c:	d012      	beq.n	8001464 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001442:	f043 0202 	orr.w	r2, r3, #2
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f06f 0220 	mvn.w	r2, #32
 8001452:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001454:	6878      	ldr	r0, [r7, #4]
 8001456:	f000 f820 	bl	800149a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f06f 0220 	mvn.w	r2, #32
 8001462:	601a      	str	r2, [r3, #0]
  }
}
 8001464:	bf00      	nop
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800147a:	4618      	mov	r0, r3
 800147c:	370c      	adds	r7, #12
 800147e:	46bd      	mov	sp, r7
 8001480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001484:	4770      	bx	lr

08001486 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001486:	b480      	push	{r7}
 8001488:	b083      	sub	sp, #12
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800148e:	bf00      	nop
 8001490:	370c      	adds	r7, #12
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800149a:	b480      	push	{r7}
 800149c:	b083      	sub	sp, #12
 800149e:	af00      	add	r7, sp, #0
 80014a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80014a2:	bf00      	nop
 80014a4:	370c      	adds	r7, #12
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
	...

080014b0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80014ba:	2300      	movs	r3, #0
 80014bc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014c4:	2b01      	cmp	r3, #1
 80014c6:	d101      	bne.n	80014cc <HAL_ADC_ConfigChannel+0x1c>
 80014c8:	2302      	movs	r3, #2
 80014ca:	e136      	b.n	800173a <HAL_ADC_ConfigChannel+0x28a>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2201      	movs	r2, #1
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d93a      	bls.n	8001552 <HAL_ADC_ConfigChannel+0xa2>
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80014e4:	d035      	beq.n	8001552 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	68d9      	ldr	r1, [r3, #12]
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	b29b      	uxth	r3, r3
 80014f2:	461a      	mov	r2, r3
 80014f4:	4613      	mov	r3, r2
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	4413      	add	r3, r2
 80014fa:	3b1e      	subs	r3, #30
 80014fc:	2207      	movs	r2, #7
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a8d      	ldr	r2, [pc, #564]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d10a      	bne.n	800152c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68d9      	ldr	r1, [r3, #12]
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	689b      	ldr	r3, [r3, #8]
 8001520:	061a      	lsls	r2, r3, #24
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	430a      	orrs	r2, r1
 8001528:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800152a:	e035      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	68d9      	ldr	r1, [r3, #12]
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	689a      	ldr	r2, [r3, #8]
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	b29b      	uxth	r3, r3
 800153c:	4618      	mov	r0, r3
 800153e:	4603      	mov	r3, r0
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4403      	add	r3, r0
 8001544:	3b1e      	subs	r3, #30
 8001546:	409a      	lsls	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001550:	e022      	b.n	8001598 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6919      	ldr	r1, [r3, #16]
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	b29b      	uxth	r3, r3
 800155e:	461a      	mov	r2, r3
 8001560:	4613      	mov	r3, r2
 8001562:	005b      	lsls	r3, r3, #1
 8001564:	4413      	add	r3, r2
 8001566:	2207      	movs	r2, #7
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43da      	mvns	r2, r3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	400a      	ands	r2, r1
 8001574:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6919      	ldr	r1, [r3, #16]
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b29b      	uxth	r3, r3
 8001586:	4618      	mov	r0, r3
 8001588:	4603      	mov	r3, r0
 800158a:	005b      	lsls	r3, r3, #1
 800158c:	4403      	add	r3, r0
 800158e:	409a      	lsls	r2, r3
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	2b06      	cmp	r3, #6
 800159e:	d824      	bhi.n	80015ea <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685a      	ldr	r2, [r3, #4]
 80015aa:	4613      	mov	r3, r2
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	4413      	add	r3, r2
 80015b0:	3b05      	subs	r3, #5
 80015b2:	221f      	movs	r2, #31
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43da      	mvns	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	400a      	ands	r2, r1
 80015c0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	b29b      	uxth	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	685a      	ldr	r2, [r3, #4]
 80015d4:	4613      	mov	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	4413      	add	r3, r2
 80015da:	3b05      	subs	r3, #5
 80015dc:	fa00 f203 	lsl.w	r2, r0, r3
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	430a      	orrs	r2, r1
 80015e6:	635a      	str	r2, [r3, #52]	; 0x34
 80015e8:	e04c      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80015ea:	683b      	ldr	r3, [r7, #0]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	2b0c      	cmp	r3, #12
 80015f0:	d824      	bhi.n	800163c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	4613      	mov	r3, r2
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	4413      	add	r3, r2
 8001602:	3b23      	subs	r3, #35	; 0x23
 8001604:	221f      	movs	r2, #31
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43da      	mvns	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	400a      	ands	r2, r1
 8001612:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	b29b      	uxth	r3, r3
 8001620:	4618      	mov	r0, r3
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	009b      	lsls	r3, r3, #2
 800162a:	4413      	add	r3, r2
 800162c:	3b23      	subs	r3, #35	; 0x23
 800162e:	fa00 f203 	lsl.w	r2, r0, r3
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	430a      	orrs	r2, r1
 8001638:	631a      	str	r2, [r3, #48]	; 0x30
 800163a:	e023      	b.n	8001684 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001642:	683b      	ldr	r3, [r7, #0]
 8001644:	685a      	ldr	r2, [r3, #4]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	3b41      	subs	r3, #65	; 0x41
 800164e:	221f      	movs	r2, #31
 8001650:	fa02 f303 	lsl.w	r3, r2, r3
 8001654:	43da      	mvns	r2, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	400a      	ands	r2, r1
 800165c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	b29b      	uxth	r3, r3
 800166a:	4618      	mov	r0, r3
 800166c:	683b      	ldr	r3, [r7, #0]
 800166e:	685a      	ldr	r2, [r3, #4]
 8001670:	4613      	mov	r3, r2
 8001672:	009b      	lsls	r3, r3, #2
 8001674:	4413      	add	r3, r2
 8001676:	3b41      	subs	r3, #65	; 0x41
 8001678:	fa00 f203 	lsl.w	r2, r0, r3
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	430a      	orrs	r2, r1
 8001682:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a30      	ldr	r2, [pc, #192]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d10a      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001696:	d105      	bne.n	80016a4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001698:	4b2d      	ldr	r3, [pc, #180]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	4a2c      	ldr	r2, [pc, #176]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 800169e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80016a2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a28      	ldr	r2, [pc, #160]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d10f      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x21e>
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b12      	cmp	r3, #18
 80016b4:	d10b      	bne.n	80016ce <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80016b6:	4b26      	ldr	r3, [pc, #152]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	4a25      	ldr	r2, [pc, #148]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016bc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80016c0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80016c2:	4b23      	ldr	r3, [pc, #140]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	4a22      	ldr	r2, [pc, #136]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80016cc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a1e      	ldr	r2, [pc, #120]	; (800174c <HAL_ADC_ConfigChannel+0x29c>)
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d12b      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d003      	beq.n	80016ea <HAL_ADC_ConfigChannel+0x23a>
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	2b11      	cmp	r3, #17
 80016e8:	d122      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80016ea:	4b19      	ldr	r3, [pc, #100]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	4a18      	ldr	r2, [pc, #96]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f0:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80016f4:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80016f6:	4b16      	ldr	r3, [pc, #88]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	4a15      	ldr	r2, [pc, #84]	; (8001750 <HAL_ADC_ConfigChannel+0x2a0>)
 80016fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001700:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a10      	ldr	r2, [pc, #64]	; (8001748 <HAL_ADC_ConfigChannel+0x298>)
 8001708:	4293      	cmp	r3, r2
 800170a:	d111      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800170c:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_ADC_ConfigChannel+0x2a4>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a11      	ldr	r2, [pc, #68]	; (8001758 <HAL_ADC_ConfigChannel+0x2a8>)
 8001712:	fba2 2303 	umull	r2, r3, r2, r3
 8001716:	0c9a      	lsrs	r2, r3, #18
 8001718:	4613      	mov	r3, r2
 800171a:	009b      	lsls	r3, r3, #2
 800171c:	4413      	add	r3, r2
 800171e:	005b      	lsls	r3, r3, #1
 8001720:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001722:	e002      	b.n	800172a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	3b01      	subs	r3, #1
 8001728:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	2b00      	cmp	r3, #0
 800172e:	d1f9      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001738:	2300      	movs	r3, #0
}
 800173a:	4618      	mov	r0, r3
 800173c:	3714      	adds	r7, #20
 800173e:	46bd      	mov	sp, r7
 8001740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001744:	4770      	bx	lr
 8001746:	bf00      	nop
 8001748:	10000012 	.word	0x10000012
 800174c:	40012000 	.word	0x40012000
 8001750:	40012300 	.word	0x40012300
 8001754:	20000000 	.word	0x20000000
 8001758:	431bde83 	.word	0x431bde83

0800175c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001764:	4b78      	ldr	r3, [pc, #480]	; (8001948 <ADC_Init+0x1ec>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <ADC_Init+0x1ec>)
 800176a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800176e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001770:	4b75      	ldr	r3, [pc, #468]	; (8001948 <ADC_Init+0x1ec>)
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	4973      	ldr	r1, [pc, #460]	; (8001948 <ADC_Init+0x1ec>)
 800177a:	4313      	orrs	r3, r2
 800177c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800178c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	6859      	ldr	r1, [r3, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	021a      	lsls	r2, r3, #8
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	685a      	ldr	r2, [r3, #4]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80017b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6859      	ldr	r1, [r3, #4]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	689a      	ldr	r2, [r3, #8]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	689a      	ldr	r2, [r3, #8]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6899      	ldr	r1, [r3, #8]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68da      	ldr	r2, [r3, #12]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	430a      	orrs	r2, r1
 80017e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <ADC_Init+0x1f0>)
 80017ec:	4293      	cmp	r3, r2
 80017ee:	d022      	beq.n	8001836 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	689a      	ldr	r2, [r3, #8]
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6899      	ldr	r1, [r3, #8]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	430a      	orrs	r2, r1
 8001810:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689a      	ldr	r2, [r3, #8]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001820:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	6899      	ldr	r1, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	609a      	str	r2, [r3, #8]
 8001834:	e00f      	b.n	8001856 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001844:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001854:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 0202 	bic.w	r2, r2, #2
 8001864:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6899      	ldr	r1, [r3, #8]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	005a      	lsls	r2, r3, #1
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	430a      	orrs	r2, r1
 8001878:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d01b      	beq.n	80018bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001892:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	685a      	ldr	r2, [r3, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80018a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	6859      	ldr	r1, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ae:	3b01      	subs	r3, #1
 80018b0:	035a      	lsls	r2, r3, #13
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	430a      	orrs	r2, r1
 80018b8:	605a      	str	r2, [r3, #4]
 80018ba:	e007      	b.n	80018cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	685a      	ldr	r2, [r3, #4]
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80018da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	69db      	ldr	r3, [r3, #28]
 80018e6:	3b01      	subs	r3, #1
 80018e8:	051a      	lsls	r2, r3, #20
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	430a      	orrs	r2, r1
 80018f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	689a      	ldr	r2, [r3, #8]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001900:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6899      	ldr	r1, [r3, #8]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800190e:	025a      	lsls	r2, r3, #9
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	430a      	orrs	r2, r1
 8001916:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689a      	ldr	r2, [r3, #8]
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001926:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	6899      	ldr	r1, [r3, #8]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	695b      	ldr	r3, [r3, #20]
 8001932:	029a      	lsls	r2, r3, #10
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	609a      	str	r2, [r3, #8]
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40012300 	.word	0x40012300
 800194c:	0f000001 	.word	0x0f000001

08001950 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001950:	b480      	push	{r7}
 8001952:	b083      	sub	sp, #12
 8001954:	af00      	add	r7, sp, #0
 8001956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001958:	bf00      	nop
 800195a:	370c      	adds	r7, #12
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr

08001964 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001964:	b480      	push	{r7}
 8001966:	b085      	sub	sp, #20
 8001968:	af00      	add	r7, sp, #0
 800196a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	f003 0307 	and.w	r3, r3, #7
 8001972:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001976:	68db      	ldr	r3, [r3, #12]
 8001978:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800197a:	68ba      	ldr	r2, [r7, #8]
 800197c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001980:	4013      	ands	r3, r2
 8001982:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001988:	68bb      	ldr	r3, [r7, #8]
 800198a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <__NVIC_SetPriorityGrouping+0x44>)
 800198e:	4313      	orrs	r3, r2
 8001990:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001992:	4a04      	ldr	r2, [pc, #16]	; (80019a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	60d3      	str	r3, [r2, #12]
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000ed00 	.word	0xe000ed00
 80019a8:	05fa0000 	.word	0x05fa0000

080019ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019b0:	4b04      	ldr	r3, [pc, #16]	; (80019c4 <__NVIC_GetPriorityGrouping+0x18>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	0a1b      	lsrs	r3, r3, #8
 80019b6:	f003 0307 	and.w	r3, r3, #7
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	db0b      	blt.n	80019f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019da:	79fb      	ldrb	r3, [r7, #7]
 80019dc:	f003 021f 	and.w	r2, r3, #31
 80019e0:	4907      	ldr	r1, [pc, #28]	; (8001a00 <__NVIC_EnableIRQ+0x38>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	095b      	lsrs	r3, r3, #5
 80019e8:	2001      	movs	r0, #1
 80019ea:	fa00 f202 	lsl.w	r2, r0, r2
 80019ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019f2:	bf00      	nop
 80019f4:	370c      	adds	r7, #12
 80019f6:	46bd      	mov	sp, r7
 80019f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fc:	4770      	bx	lr
 80019fe:	bf00      	nop
 8001a00:	e000e100 	.word	0xe000e100

08001a04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	6039      	str	r1, [r7, #0]
 8001a0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	db0a      	blt.n	8001a2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a18:	683b      	ldr	r3, [r7, #0]
 8001a1a:	b2da      	uxtb	r2, r3
 8001a1c:	490c      	ldr	r1, [pc, #48]	; (8001a50 <__NVIC_SetPriority+0x4c>)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	0112      	lsls	r2, r2, #4
 8001a24:	b2d2      	uxtb	r2, r2
 8001a26:	440b      	add	r3, r1
 8001a28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a2c:	e00a      	b.n	8001a44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	b2da      	uxtb	r2, r3
 8001a32:	4908      	ldr	r1, [pc, #32]	; (8001a54 <__NVIC_SetPriority+0x50>)
 8001a34:	79fb      	ldrb	r3, [r7, #7]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	3b04      	subs	r3, #4
 8001a3c:	0112      	lsls	r2, r2, #4
 8001a3e:	b2d2      	uxtb	r2, r2
 8001a40:	440b      	add	r3, r1
 8001a42:	761a      	strb	r2, [r3, #24]
}
 8001a44:	bf00      	nop
 8001a46:	370c      	adds	r7, #12
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr
 8001a50:	e000e100 	.word	0xe000e100
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b089      	sub	sp, #36	; 0x24
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	f003 0307 	and.w	r3, r3, #7
 8001a6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	f1c3 0307 	rsb	r3, r3, #7
 8001a72:	2b04      	cmp	r3, #4
 8001a74:	bf28      	it	cs
 8001a76:	2304      	movcs	r3, #4
 8001a78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	3304      	adds	r3, #4
 8001a7e:	2b06      	cmp	r3, #6
 8001a80:	d902      	bls.n	8001a88 <NVIC_EncodePriority+0x30>
 8001a82:	69fb      	ldr	r3, [r7, #28]
 8001a84:	3b03      	subs	r3, #3
 8001a86:	e000      	b.n	8001a8a <NVIC_EncodePriority+0x32>
 8001a88:	2300      	movs	r3, #0
 8001a8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fa02 f303 	lsl.w	r3, r2, r3
 8001a96:	43da      	mvns	r2, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	401a      	ands	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aa0:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	fa01 f303 	lsl.w	r3, r1, r3
 8001aaa:	43d9      	mvns	r1, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ab0:	4313      	orrs	r3, r2
         );
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3724      	adds	r7, #36	; 0x24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	3b01      	subs	r3, #1
 8001acc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ad0:	d301      	bcc.n	8001ad6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e00f      	b.n	8001af6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ad6:	4a0a      	ldr	r2, [pc, #40]	; (8001b00 <SysTick_Config+0x40>)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	3b01      	subs	r3, #1
 8001adc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ade:	210f      	movs	r1, #15
 8001ae0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ae4:	f7ff ff8e 	bl	8001a04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ae8:	4b05      	ldr	r3, [pc, #20]	; (8001b00 <SysTick_Config+0x40>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aee:	4b04      	ldr	r3, [pc, #16]	; (8001b00 <SysTick_Config+0x40>)
 8001af0:	2207      	movs	r2, #7
 8001af2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	e000e010 	.word	0xe000e010

08001b04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b0c:	6878      	ldr	r0, [r7, #4]
 8001b0e:	f7ff ff29 	bl	8001964 <__NVIC_SetPriorityGrouping>
}
 8001b12:	bf00      	nop
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b086      	sub	sp, #24
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	4603      	mov	r3, r0
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
 8001b26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b2c:	f7ff ff3e 	bl	80019ac <__NVIC_GetPriorityGrouping>
 8001b30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	68b9      	ldr	r1, [r7, #8]
 8001b36:	6978      	ldr	r0, [r7, #20]
 8001b38:	f7ff ff8e 	bl	8001a58 <NVIC_EncodePriority>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b42:	4611      	mov	r1, r2
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff ff5d 	bl	8001a04 <__NVIC_SetPriority>
}
 8001b4a:	bf00      	nop
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}

08001b52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b52:	b580      	push	{r7, lr}
 8001b54:	b082      	sub	sp, #8
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	4603      	mov	r3, r0
 8001b5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff ff31 	bl	80019c8 <__NVIC_EnableIRQ>
}
 8001b66:	bf00      	nop
 8001b68:	3708      	adds	r7, #8
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}

08001b6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ffa2 	bl	8001ac0 <SysTick_Config>
 8001b7c:	4603      	mov	r3, r0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3708      	adds	r7, #8
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
	...

08001b88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	; 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e175      	b.n	8001e94 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8164 	bne.w	8001e8e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x56>
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80be 	beq.w	8001e8e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	4b66      	ldr	r3, [pc, #408]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d16:	4a65      	ldr	r2, [pc, #404]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001d18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d1c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <HAL_GPIO_Init+0x324>)
 8001d20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d26:	60fb      	str	r3, [r7, #12]
 8001d28:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d2a:	4a61      	ldr	r2, [pc, #388]	; (8001eb0 <HAL_GPIO_Init+0x328>)
 8001d2c:	69fb      	ldr	r3, [r7, #28]
 8001d2e:	089b      	lsrs	r3, r3, #2
 8001d30:	3302      	adds	r3, #2
 8001d32:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d36:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0303 	and.w	r3, r3, #3
 8001d3e:	009b      	lsls	r3, r3, #2
 8001d40:	220f      	movs	r2, #15
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a58      	ldr	r2, [pc, #352]	; (8001eb4 <HAL_GPIO_Init+0x32c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d037      	beq.n	8001dc6 <HAL_GPIO_Init+0x23e>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a57      	ldr	r2, [pc, #348]	; (8001eb8 <HAL_GPIO_Init+0x330>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d031      	beq.n	8001dc2 <HAL_GPIO_Init+0x23a>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <HAL_GPIO_Init+0x334>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d02b      	beq.n	8001dbe <HAL_GPIO_Init+0x236>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a55      	ldr	r2, [pc, #340]	; (8001ec0 <HAL_GPIO_Init+0x338>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d025      	beq.n	8001dba <HAL_GPIO_Init+0x232>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a54      	ldr	r2, [pc, #336]	; (8001ec4 <HAL_GPIO_Init+0x33c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d01f      	beq.n	8001db6 <HAL_GPIO_Init+0x22e>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a53      	ldr	r2, [pc, #332]	; (8001ec8 <HAL_GPIO_Init+0x340>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d019      	beq.n	8001db2 <HAL_GPIO_Init+0x22a>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a52      	ldr	r2, [pc, #328]	; (8001ecc <HAL_GPIO_Init+0x344>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0x226>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a51      	ldr	r2, [pc, #324]	; (8001ed0 <HAL_GPIO_Init+0x348>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d00d      	beq.n	8001daa <HAL_GPIO_Init+0x222>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a50      	ldr	r2, [pc, #320]	; (8001ed4 <HAL_GPIO_Init+0x34c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d007      	beq.n	8001da6 <HAL_GPIO_Init+0x21e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4f      	ldr	r2, [pc, #316]	; (8001ed8 <HAL_GPIO_Init+0x350>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d101      	bne.n	8001da2 <HAL_GPIO_Init+0x21a>
 8001d9e:	2309      	movs	r3, #9
 8001da0:	e012      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001da2:	230a      	movs	r3, #10
 8001da4:	e010      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001da6:	2308      	movs	r3, #8
 8001da8:	e00e      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00c      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001dae:	2306      	movs	r3, #6
 8001db0:	e00a      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001db2:	2305      	movs	r3, #5
 8001db4:	e008      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001db6:	2304      	movs	r3, #4
 8001db8:	e006      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e004      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001dbe:	2302      	movs	r3, #2
 8001dc0:	e002      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001dc2:	2301      	movs	r3, #1
 8001dc4:	e000      	b.n	8001dc8 <HAL_GPIO_Init+0x240>
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	69fa      	ldr	r2, [r7, #28]
 8001dca:	f002 0203 	and.w	r2, r2, #3
 8001dce:	0092      	lsls	r2, r2, #2
 8001dd0:	4093      	lsls	r3, r2
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dd8:	4935      	ldr	r1, [pc, #212]	; (8001eb0 <HAL_GPIO_Init+0x328>)
 8001dda:	69fb      	ldr	r3, [r7, #28]
 8001ddc:	089b      	lsrs	r3, r3, #2
 8001dde:	3302      	adds	r3, #2
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de6:	4b3d      	ldr	r3, [pc, #244]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	43db      	mvns	r3, r3
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4013      	ands	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d003      	beq.n	8001e0a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001e02:	69ba      	ldr	r2, [r7, #24]
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e0a:	4a34      	ldr	r2, [pc, #208]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e10:	4b32      	ldr	r3, [pc, #200]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e34:	4a29      	ldr	r2, [pc, #164]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e36:	69bb      	ldr	r3, [r7, #24]
 8001e38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e3a:	4b28      	ldr	r3, [pc, #160]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5e:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e60:	69bb      	ldr	r3, [r7, #24]
 8001e62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e64:	4b1d      	ldr	r3, [pc, #116]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6a:	693b      	ldr	r3, [r7, #16]
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d003      	beq.n	8001e88 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	4313      	orrs	r3, r2
 8001e86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e88:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_GPIO_Init+0x354>)
 8001e8a:	69bb      	ldr	r3, [r7, #24]
 8001e8c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	3301      	adds	r3, #1
 8001e92:	61fb      	str	r3, [r7, #28]
 8001e94:	69fb      	ldr	r3, [r7, #28]
 8001e96:	2b0f      	cmp	r3, #15
 8001e98:	f67f ae86 	bls.w	8001ba8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	bf00      	nop
 8001ea0:	3724      	adds	r7, #36	; 0x24
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	40023800 	.word	0x40023800
 8001eb0:	40013800 	.word	0x40013800
 8001eb4:	40020000 	.word	0x40020000
 8001eb8:	40020400 	.word	0x40020400
 8001ebc:	40020800 	.word	0x40020800
 8001ec0:	40020c00 	.word	0x40020c00
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	40021400 	.word	0x40021400
 8001ecc:	40021800 	.word	0x40021800
 8001ed0:	40021c00 	.word	0x40021c00
 8001ed4:	40022000 	.word	0x40022000
 8001ed8:	40022400 	.word	0x40022400
 8001edc:	40013c00 	.word	0x40013c00

08001ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	460b      	mov	r3, r1
 8001eea:	807b      	strh	r3, [r7, #2]
 8001eec:	4613      	mov	r3, r2
 8001eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ef0:	787b      	ldrb	r3, [r7, #1]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ef6:	887a      	ldrh	r2, [r7, #2]
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001efc:	e003      	b.n	8001f06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001efe:	887b      	ldrh	r3, [r7, #2]
 8001f00:	041a      	lsls	r2, r3, #16
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	619a      	str	r2, [r3, #24]
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr

08001f12 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001f12:	b480      	push	{r7}
 8001f14:	b085      	sub	sp, #20
 8001f16:	af00      	add	r7, sp, #0
 8001f18:	6078      	str	r0, [r7, #4]
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	695b      	ldr	r3, [r3, #20]
 8001f22:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001f24:	887a      	ldrh	r2, [r7, #2]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	4013      	ands	r3, r2
 8001f2a:	041a      	lsls	r2, r3, #16
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	43d9      	mvns	r1, r3
 8001f30:	887b      	ldrh	r3, [r7, #2]
 8001f32:	400b      	ands	r3, r1
 8001f34:	431a      	orrs	r2, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	619a      	str	r2, [r3, #24]
}
 8001f3a:	bf00      	nop
 8001f3c:	3714      	adds	r7, #20
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f44:	4770      	bx	lr

08001f46 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f46:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f48:	b08f      	sub	sp, #60	; 0x3c
 8001f4a:	af0a      	add	r7, sp, #40	; 0x28
 8001f4c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e116      	b.n	8002186 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d106      	bne.n	8001f78 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f7ff f802 	bl	8000f7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2203      	movs	r2, #3
 8001f7c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2200      	movs	r2, #0
 8001f90:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4618      	mov	r0, r3
 8001f98:	f002 fc90 	bl	80048bc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	603b      	str	r3, [r7, #0]
 8001fa2:	687e      	ldr	r6, [r7, #4]
 8001fa4:	466d      	mov	r5, sp
 8001fa6:	f106 0410 	add.w	r4, r6, #16
 8001faa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fb2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001fb6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001fba:	1d33      	adds	r3, r6, #4
 8001fbc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fbe:	6838      	ldr	r0, [r7, #0]
 8001fc0:	f002 fc24 	bl	800480c <USB_CoreInit>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d005      	beq.n	8001fd6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2202      	movs	r2, #2
 8001fce:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e0d7      	b.n	8002186 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f002 fc7e 	bl	80048de <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	73fb      	strb	r3, [r7, #15]
 8001fe6:	e04a      	b.n	800207e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fe8:	7bfa      	ldrb	r2, [r7, #15]
 8001fea:	6879      	ldr	r1, [r7, #4]
 8001fec:	4613      	mov	r3, r2
 8001fee:	00db      	lsls	r3, r3, #3
 8001ff0:	4413      	add	r3, r2
 8001ff2:	009b      	lsls	r3, r3, #2
 8001ff4:	440b      	add	r3, r1
 8001ff6:	333d      	adds	r3, #61	; 0x3d
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001ffc:	7bfa      	ldrb	r2, [r7, #15]
 8001ffe:	6879      	ldr	r1, [r7, #4]
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	333c      	adds	r3, #60	; 0x3c
 800200c:	7bfa      	ldrb	r2, [r7, #15]
 800200e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002010:	7bfa      	ldrb	r2, [r7, #15]
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	b298      	uxth	r0, r3
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	4413      	add	r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3344      	adds	r3, #68	; 0x44
 8002024:	4602      	mov	r2, r0
 8002026:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	4413      	add	r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3340      	adds	r3, #64	; 0x40
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800203c:	7bfa      	ldrb	r2, [r7, #15]
 800203e:	6879      	ldr	r1, [r7, #4]
 8002040:	4613      	mov	r3, r2
 8002042:	00db      	lsls	r3, r3, #3
 8002044:	4413      	add	r3, r2
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	440b      	add	r3, r1
 800204a:	3348      	adds	r3, #72	; 0x48
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002050:	7bfa      	ldrb	r2, [r7, #15]
 8002052:	6879      	ldr	r1, [r7, #4]
 8002054:	4613      	mov	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	4413      	add	r3, r2
 800205a:	009b      	lsls	r3, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	334c      	adds	r3, #76	; 0x4c
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002064:	7bfa      	ldrb	r2, [r7, #15]
 8002066:	6879      	ldr	r1, [r7, #4]
 8002068:	4613      	mov	r3, r2
 800206a:	00db      	lsls	r3, r3, #3
 800206c:	4413      	add	r3, r2
 800206e:	009b      	lsls	r3, r3, #2
 8002070:	440b      	add	r3, r1
 8002072:	3354      	adds	r3, #84	; 0x54
 8002074:	2200      	movs	r2, #0
 8002076:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002078:	7bfb      	ldrb	r3, [r7, #15]
 800207a:	3301      	adds	r3, #1
 800207c:	73fb      	strb	r3, [r7, #15]
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	429a      	cmp	r2, r3
 8002086:	d3af      	bcc.n	8001fe8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
 800208c:	e044      	b.n	8002118 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800208e:	7bfa      	ldrb	r2, [r7, #15]
 8002090:	6879      	ldr	r1, [r7, #4]
 8002092:	4613      	mov	r3, r2
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	4413      	add	r3, r2
 8002098:	009b      	lsls	r3, r3, #2
 800209a:	440b      	add	r3, r1
 800209c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	4613      	mov	r3, r2
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	4413      	add	r3, r2
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	440b      	add	r3, r1
 80020b2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80020b6:	7bfa      	ldrb	r2, [r7, #15]
 80020b8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020ba:	7bfa      	ldrb	r2, [r7, #15]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	00db      	lsls	r3, r3, #3
 80020c2:	4413      	add	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80020cc:	2200      	movs	r2, #0
 80020ce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020d0:	7bfa      	ldrb	r2, [r7, #15]
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	4613      	mov	r3, r2
 80020d6:	00db      	lsls	r3, r3, #3
 80020d8:	4413      	add	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	440b      	add	r3, r1
 80020de:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80020e2:	2200      	movs	r2, #0
 80020e4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020e6:	7bfa      	ldrb	r2, [r7, #15]
 80020e8:	6879      	ldr	r1, [r7, #4]
 80020ea:	4613      	mov	r3, r2
 80020ec:	00db      	lsls	r3, r3, #3
 80020ee:	4413      	add	r3, r2
 80020f0:	009b      	lsls	r3, r3, #2
 80020f2:	440b      	add	r3, r1
 80020f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80020f8:	2200      	movs	r2, #0
 80020fa:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020fc:	7bfa      	ldrb	r2, [r7, #15]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	00db      	lsls	r3, r3, #3
 8002104:	4413      	add	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800210e:	2200      	movs	r2, #0
 8002110:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002112:	7bfb      	ldrb	r3, [r7, #15]
 8002114:	3301      	adds	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	7bfa      	ldrb	r2, [r7, #15]
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	429a      	cmp	r2, r3
 8002120:	d3b5      	bcc.n	800208e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	603b      	str	r3, [r7, #0]
 8002128:	687e      	ldr	r6, [r7, #4]
 800212a:	466d      	mov	r5, sp
 800212c:	f106 0410 	add.w	r4, r6, #16
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002138:	e894 0003 	ldmia.w	r4, {r0, r1}
 800213c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002140:	1d33      	adds	r3, r6, #4
 8002142:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002144:	6838      	ldr	r0, [r7, #0]
 8002146:	f002 fc17 	bl	8004978 <USB_DevInit>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d005      	beq.n	800215c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2202      	movs	r2, #2
 8002154:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e014      	b.n	8002186 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002170:	2b01      	cmp	r3, #1
 8002172:	d102      	bne.n	800217a <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002174:	6878      	ldr	r0, [r7, #4]
 8002176:	f000 f80b 	bl	8002190 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4618      	mov	r0, r3
 8002180:	f002 fdd5 	bl	8004d2e <USB_DevDisconnect>

  return HAL_OK;
 8002184:	2300      	movs	r3, #0
}
 8002186:	4618      	mov	r0, r3
 8002188:	3714      	adds	r7, #20
 800218a:	46bd      	mov	sp, r7
 800218c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002190 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2201      	movs	r2, #1
 80021a2:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	2200      	movs	r2, #0
 80021aa:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	699b      	ldr	r3, [r3, #24]
 80021b2:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_PCDEx_ActivateLPM+0x44>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	68fa      	ldr	r2, [r7, #12]
 80021c4:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	10000003 	.word	0x10000003

080021d8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80021d8:	b480      	push	{r7}
 80021da:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021dc:	4b05      	ldr	r3, [pc, #20]	; (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a04      	ldr	r2, [pc, #16]	; (80021f4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e6:	6013      	str	r3, [r2, #0]
}
 80021e8:	bf00      	nop
 80021ea:	46bd      	mov	sp, r7
 80021ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f0:	4770      	bx	lr
 80021f2:	bf00      	nop
 80021f4:	40007000 	.word	0x40007000

080021f8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002202:	4b23      	ldr	r3, [pc, #140]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002206:	4a22      	ldr	r2, [pc, #136]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002208:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800220c:	6413      	str	r3, [r2, #64]	; 0x40
 800220e:	4b20      	ldr	r3, [pc, #128]	; (8002290 <HAL_PWREx_EnableOverDrive+0x98>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002216:	603b      	str	r3, [r7, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800221a:	4b1e      	ldr	r3, [pc, #120]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a1d      	ldr	r2, [pc, #116]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002224:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002226:	f7fe ff9d 	bl	8001164 <HAL_GetTick>
 800222a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800222c:	e009      	b.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800222e:	f7fe ff99 	bl	8001164 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800223c:	d901      	bls.n	8002242 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800223e:	2303      	movs	r3, #3
 8002240:	e022      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002242:	4b14      	ldr	r3, [pc, #80]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d1ee      	bne.n	800222e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002250:	4b10      	ldr	r3, [pc, #64]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0f      	ldr	r2, [pc, #60]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800225a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800225c:	f7fe ff82 	bl	8001164 <HAL_GetTick>
 8002260:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002262:	e009      	b.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002264:	f7fe ff7e 	bl	8001164 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002272:	d901      	bls.n	8002278 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002274:	2303      	movs	r3, #3
 8002276:	e007      	b.n	8002288 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002278:	4b06      	ldr	r3, [pc, #24]	; (8002294 <HAL_PWREx_EnableOverDrive+0x9c>)
 800227a:	685b      	ldr	r3, [r3, #4]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002284:	d1ee      	bne.n	8002264 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002286:	2300      	movs	r3, #0
}
 8002288:	4618      	mov	r0, r3
 800228a:	3708      	adds	r7, #8
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}
 8002290:	40023800 	.word	0x40023800
 8002294:	40007000 	.word	0x40007000

08002298 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80022a0:	2300      	movs	r3, #0
 80022a2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d101      	bne.n	80022ae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e29b      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0301 	and.w	r3, r3, #1
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	f000 8087 	beq.w	80023ca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80022bc:	4b96      	ldr	r3, [pc, #600]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	f003 030c 	and.w	r3, r3, #12
 80022c4:	2b04      	cmp	r3, #4
 80022c6:	d00c      	beq.n	80022e2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80022c8:	4b93      	ldr	r3, [pc, #588]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 030c 	and.w	r3, r3, #12
 80022d0:	2b08      	cmp	r3, #8
 80022d2:	d112      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
 80022d4:	4b90      	ldr	r3, [pc, #576]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022e0:	d10b      	bne.n	80022fa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022e2:	4b8d      	ldr	r3, [pc, #564]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d06c      	beq.n	80023c8 <HAL_RCC_OscConfig+0x130>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d168      	bne.n	80023c8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e275      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002302:	d106      	bne.n	8002312 <HAL_RCC_OscConfig+0x7a>
 8002304:	4b84      	ldr	r3, [pc, #528]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a83      	ldr	r2, [pc, #524]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800230a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e02e      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10c      	bne.n	8002334 <HAL_RCC_OscConfig+0x9c>
 800231a:	4b7f      	ldr	r3, [pc, #508]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4a7e      	ldr	r2, [pc, #504]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6013      	str	r3, [r2, #0]
 8002326:	4b7c      	ldr	r3, [pc, #496]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7b      	ldr	r2, [pc, #492]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800232c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002330:	6013      	str	r3, [r2, #0]
 8002332:	e01d      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800233c:	d10c      	bne.n	8002358 <HAL_RCC_OscConfig+0xc0>
 800233e:	4b76      	ldr	r3, [pc, #472]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	4a75      	ldr	r2, [pc, #468]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002344:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	4b73      	ldr	r3, [pc, #460]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a72      	ldr	r2, [pc, #456]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002350:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002354:	6013      	str	r3, [r2, #0]
 8002356:	e00b      	b.n	8002370 <HAL_RCC_OscConfig+0xd8>
 8002358:	4b6f      	ldr	r3, [pc, #444]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a6e      	ldr	r2, [pc, #440]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800235e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002362:	6013      	str	r3, [r2, #0]
 8002364:	4b6c      	ldr	r3, [pc, #432]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a6b      	ldr	r2, [pc, #428]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800236a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800236e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002378:	f7fe fef4 	bl	8001164 <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002380:	f7fe fef0 	bl	8001164 <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b64      	cmp	r3, #100	; 0x64
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e229      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002392:	4b61      	ldr	r3, [pc, #388]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0xe8>
 800239e:	e014      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a0:	f7fe fee0 	bl	8001164 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80023a8:	f7fe fedc 	bl	8001164 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b64      	cmp	r3, #100	; 0x64
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e215      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023ba:	4b57      	ldr	r3, [pc, #348]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d1f0      	bne.n	80023a8 <HAL_RCC_OscConfig+0x110>
 80023c6:	e000      	b.n	80023ca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0302 	and.w	r3, r3, #2
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d069      	beq.n	80024aa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80023d6:	4b50      	ldr	r3, [pc, #320]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	f003 030c 	and.w	r3, r3, #12
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80023e2:	4b4d      	ldr	r3, [pc, #308]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	f003 030c 	and.w	r3, r3, #12
 80023ea:	2b08      	cmp	r3, #8
 80023ec:	d11c      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
 80023ee:	4b4a      	ldr	r3, [pc, #296]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d116      	bne.n	8002428 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023fa:	4b47      	ldr	r3, [pc, #284]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d005      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d001      	beq.n	8002412 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e1e9      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002412:	4b41      	ldr	r3, [pc, #260]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	00db      	lsls	r3, r3, #3
 8002420:	493d      	ldr	r1, [pc, #244]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002422:	4313      	orrs	r3, r2
 8002424:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	e040      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d023      	beq.n	8002478 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002430:	4b39      	ldr	r3, [pc, #228]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a38      	ldr	r2, [pc, #224]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7fe fe92 	bl	8001164 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002444:	f7fe fe8e 	bl	8001164 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e1c7      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002456:	4b30      	ldr	r3, [pc, #192]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d0f0      	beq.n	8002444 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002462:	4b2d      	ldr	r3, [pc, #180]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	691b      	ldr	r3, [r3, #16]
 800246e:	00db      	lsls	r3, r3, #3
 8002470:	4929      	ldr	r1, [pc, #164]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 8002472:	4313      	orrs	r3, r2
 8002474:	600b      	str	r3, [r1, #0]
 8002476:	e018      	b.n	80024aa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002478:	4b27      	ldr	r3, [pc, #156]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a26      	ldr	r2, [pc, #152]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 800247e:	f023 0301 	bic.w	r3, r3, #1
 8002482:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe fe6e 	bl	8001164 <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800248c:	f7fe fe6a 	bl	8001164 <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b02      	cmp	r3, #2
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1a3      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800249e:	4b1e      	ldr	r3, [pc, #120]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0308 	and.w	r3, r3, #8
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d038      	beq.n	8002528 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	695b      	ldr	r3, [r3, #20]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d019      	beq.n	80024f2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024be:	4b16      	ldr	r3, [pc, #88]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024c2:	4a15      	ldr	r2, [pc, #84]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ca:	f7fe fe4b 	bl	8001164 <HAL_GetTick>
 80024ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80024d2:	f7fe fe47 	bl	8001164 <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e180      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024e4:	4b0c      	ldr	r3, [pc, #48]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024e8:	f003 0302 	and.w	r3, r3, #2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d0f0      	beq.n	80024d2 <HAL_RCC_OscConfig+0x23a>
 80024f0:	e01a      	b.n	8002528 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80024f2:	4b09      	ldr	r3, [pc, #36]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024f6:	4a08      	ldr	r2, [pc, #32]	; (8002518 <HAL_RCC_OscConfig+0x280>)
 80024f8:	f023 0301 	bic.w	r3, r3, #1
 80024fc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024fe:	f7fe fe31 	bl	8001164 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002504:	e00a      	b.n	800251c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002506:	f7fe fe2d 	bl	8001164 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d903      	bls.n	800251c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e166      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
 8002518:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800251c:	4b92      	ldr	r3, [pc, #584]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800251e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002520:	f003 0302 	and.w	r3, r3, #2
 8002524:	2b00      	cmp	r3, #0
 8002526:	d1ee      	bne.n	8002506 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f003 0304 	and.w	r3, r3, #4
 8002530:	2b00      	cmp	r3, #0
 8002532:	f000 80a4 	beq.w	800267e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002536:	4b8c      	ldr	r3, [pc, #560]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d10d      	bne.n	800255e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002542:	4b89      	ldr	r3, [pc, #548]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002546:	4a88      	ldr	r2, [pc, #544]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002548:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800254c:	6413      	str	r3, [r2, #64]	; 0x40
 800254e:	4b86      	ldr	r3, [pc, #536]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002552:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	2301      	movs	r3, #1
 800255c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800255e:	4b83      	ldr	r3, [pc, #524]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002566:	2b00      	cmp	r3, #0
 8002568:	d118      	bne.n	800259c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800256a:	4b80      	ldr	r3, [pc, #512]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a7f      	ldr	r2, [pc, #508]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002574:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002576:	f7fe fdf5 	bl	8001164 <HAL_GetTick>
 800257a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800257c:	e008      	b.n	8002590 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800257e:	f7fe fdf1 	bl	8001164 <HAL_GetTick>
 8002582:	4602      	mov	r2, r0
 8002584:	693b      	ldr	r3, [r7, #16]
 8002586:	1ad3      	subs	r3, r2, r3
 8002588:	2b64      	cmp	r3, #100	; 0x64
 800258a:	d901      	bls.n	8002590 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800258c:	2303      	movs	r3, #3
 800258e:	e12a      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002590:	4b76      	ldr	r3, [pc, #472]	; (800276c <HAL_RCC_OscConfig+0x4d4>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002598:	2b00      	cmp	r3, #0
 800259a:	d0f0      	beq.n	800257e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	2b01      	cmp	r3, #1
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x31a>
 80025a4:	4b70      	ldr	r3, [pc, #448]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025a8:	4a6f      	ldr	r2, [pc, #444]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025aa:	f043 0301 	orr.w	r3, r3, #1
 80025ae:	6713      	str	r3, [r2, #112]	; 0x70
 80025b0:	e02d      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	689b      	ldr	r3, [r3, #8]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x33c>
 80025ba:	4b6b      	ldr	r3, [pc, #428]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025be:	4a6a      	ldr	r2, [pc, #424]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c0:	f023 0301 	bic.w	r3, r3, #1
 80025c4:	6713      	str	r3, [r2, #112]	; 0x70
 80025c6:	4b68      	ldr	r3, [pc, #416]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	4a67      	ldr	r2, [pc, #412]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025cc:	f023 0304 	bic.w	r3, r3, #4
 80025d0:	6713      	str	r3, [r2, #112]	; 0x70
 80025d2:	e01c      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2b05      	cmp	r3, #5
 80025da:	d10c      	bne.n	80025f6 <HAL_RCC_OscConfig+0x35e>
 80025dc:	4b62      	ldr	r3, [pc, #392]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025e0:	4a61      	ldr	r2, [pc, #388]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025e2:	f043 0304 	orr.w	r3, r3, #4
 80025e6:	6713      	str	r3, [r2, #112]	; 0x70
 80025e8:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ec:	4a5e      	ldr	r2, [pc, #376]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025ee:	f043 0301 	orr.w	r3, r3, #1
 80025f2:	6713      	str	r3, [r2, #112]	; 0x70
 80025f4:	e00b      	b.n	800260e <HAL_RCC_OscConfig+0x376>
 80025f6:	4b5c      	ldr	r3, [pc, #368]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025fa:	4a5b      	ldr	r2, [pc, #364]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80025fc:	f023 0301 	bic.w	r3, r3, #1
 8002600:	6713      	str	r3, [r2, #112]	; 0x70
 8002602:	4b59      	ldr	r3, [pc, #356]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002604:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002606:	4a58      	ldr	r2, [pc, #352]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002608:	f023 0304 	bic.w	r3, r3, #4
 800260c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d015      	beq.n	8002642 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002616:	f7fe fda5 	bl	8001164 <HAL_GetTick>
 800261a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800261e:	f7fe fda1 	bl	8001164 <HAL_GetTick>
 8002622:	4602      	mov	r2, r0
 8002624:	693b      	ldr	r3, [r7, #16]
 8002626:	1ad3      	subs	r3, r2, r3
 8002628:	f241 3288 	movw	r2, #5000	; 0x1388
 800262c:	4293      	cmp	r3, r2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0d8      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002634:	4b4c      	ldr	r3, [pc, #304]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002636:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002638:	f003 0302 	and.w	r3, r3, #2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d0ee      	beq.n	800261e <HAL_RCC_OscConfig+0x386>
 8002640:	e014      	b.n	800266c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002642:	f7fe fd8f 	bl	8001164 <HAL_GetTick>
 8002646:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002648:	e00a      	b.n	8002660 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800264a:	f7fe fd8b 	bl	8001164 <HAL_GetTick>
 800264e:	4602      	mov	r2, r0
 8002650:	693b      	ldr	r3, [r7, #16]
 8002652:	1ad3      	subs	r3, r2, r3
 8002654:	f241 3288 	movw	r2, #5000	; 0x1388
 8002658:	4293      	cmp	r3, r2
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e0c2      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002660:	4b41      	ldr	r3, [pc, #260]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002662:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002664:	f003 0302 	and.w	r3, r3, #2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1ee      	bne.n	800264a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800266c:	7dfb      	ldrb	r3, [r7, #23]
 800266e:	2b01      	cmp	r3, #1
 8002670:	d105      	bne.n	800267e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002672:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002676:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002678:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	2b00      	cmp	r3, #0
 8002684:	f000 80ae 	beq.w	80027e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002688:	4b37      	ldr	r3, [pc, #220]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
 8002690:	2b08      	cmp	r3, #8
 8002692:	d06d      	beq.n	8002770 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	699b      	ldr	r3, [r3, #24]
 8002698:	2b02      	cmp	r3, #2
 800269a:	d14b      	bne.n	8002734 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a31      	ldr	r2, [pc, #196]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a8:	f7fe fd5c 	bl	8001164 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026ae:	e008      	b.n	80026c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b0:	f7fe fd58 	bl	8001164 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	d901      	bls.n	80026c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80026be:	2303      	movs	r3, #3
 80026c0:	e091      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026c2:	4b29      	ldr	r3, [pc, #164]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d1f0      	bne.n	80026b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	69da      	ldr	r2, [r3, #28]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	431a      	orrs	r2, r3
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026dc:	019b      	lsls	r3, r3, #6
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026e4:	085b      	lsrs	r3, r3, #1
 80026e6:	3b01      	subs	r3, #1
 80026e8:	041b      	lsls	r3, r3, #16
 80026ea:	431a      	orrs	r2, r3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f0:	061b      	lsls	r3, r3, #24
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026f8:	071b      	lsls	r3, r3, #28
 80026fa:	491b      	ldr	r1, [pc, #108]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 80026fc:	4313      	orrs	r3, r2
 80026fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002700:	4b19      	ldr	r3, [pc, #100]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a18      	ldr	r2, [pc, #96]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002706:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fd2a 	bl	8001164 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002714:	f7fe fd26 	bl	8001164 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e05f      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002726:	4b10      	ldr	r3, [pc, #64]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d0f0      	beq.n	8002714 <HAL_RCC_OscConfig+0x47c>
 8002732:	e057      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800273a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800273e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002740:	f7fe fd10 	bl	8001164 <HAL_GetTick>
 8002744:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002746:	e008      	b.n	800275a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002748:	f7fe fd0c 	bl	8001164 <HAL_GetTick>
 800274c:	4602      	mov	r2, r0
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	1ad3      	subs	r3, r2, r3
 8002752:	2b02      	cmp	r3, #2
 8002754:	d901      	bls.n	800275a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002756:	2303      	movs	r3, #3
 8002758:	e045      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800275a:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_RCC_OscConfig+0x4d0>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002762:	2b00      	cmp	r3, #0
 8002764:	d1f0      	bne.n	8002748 <HAL_RCC_OscConfig+0x4b0>
 8002766:	e03d      	b.n	80027e4 <HAL_RCC_OscConfig+0x54c>
 8002768:	40023800 	.word	0x40023800
 800276c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002770:	4b1f      	ldr	r3, [pc, #124]	; (80027f0 <HAL_RCC_OscConfig+0x558>)
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	699b      	ldr	r3, [r3, #24]
 800277a:	2b01      	cmp	r3, #1
 800277c:	d030      	beq.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002788:	429a      	cmp	r2, r3
 800278a:	d129      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002796:	429a      	cmp	r2, r3
 8002798:	d122      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80027a0:	4013      	ands	r3, r2
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80027a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d119      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b6:	085b      	lsrs	r3, r3, #1
 80027b8:	3b01      	subs	r3, #1
 80027ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027bc:	429a      	cmp	r2, r3
 80027be:	d10f      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d107      	bne.n	80027e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027dc:	429a      	cmp	r2, r3
 80027de:	d001      	beq.n	80027e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e000      	b.n	80027e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3718      	adds	r7, #24
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40023800 	.word	0x40023800

080027f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
 80027fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80027fe:	2300      	movs	r3, #0
 8002800:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0d0      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b6a      	ldr	r3, [pc, #424]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 030f 	and.w	r3, r3, #15
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d910      	bls.n	800283c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b67      	ldr	r3, [pc, #412]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 020f 	bic.w	r2, r3, #15
 8002822:	4965      	ldr	r1, [pc, #404]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800282a:	4b63      	ldr	r3, [pc, #396]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	683a      	ldr	r2, [r7, #0]
 8002834:	429a      	cmp	r2, r3
 8002836:	d001      	beq.n	800283c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002838:	2301      	movs	r3, #1
 800283a:	e0b8      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d020      	beq.n	800288a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0304 	and.w	r3, r3, #4
 8002850:	2b00      	cmp	r3, #0
 8002852:	d005      	beq.n	8002860 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002854:	4b59      	ldr	r3, [pc, #356]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	4a58      	ldr	r2, [pc, #352]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800285e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0308 	and.w	r3, r3, #8
 8002868:	2b00      	cmp	r3, #0
 800286a:	d005      	beq.n	8002878 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800286c:	4b53      	ldr	r3, [pc, #332]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	4a52      	ldr	r2, [pc, #328]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002876:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002878:	4b50      	ldr	r3, [pc, #320]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	494d      	ldr	r1, [pc, #308]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002886:	4313      	orrs	r3, r2
 8002888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	2b00      	cmp	r3, #0
 8002894:	d040      	beq.n	8002918 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	2b01      	cmp	r3, #1
 800289c:	d107      	bne.n	80028ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800289e:	4b47      	ldr	r3, [pc, #284]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d115      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e07f      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b41      	ldr	r3, [pc, #260]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e073      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3d      	ldr	r3, [pc, #244]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e06b      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b39      	ldr	r3, [pc, #228]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4936      	ldr	r1, [pc, #216]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028e8:	f7fe fc3c 	bl	8001164 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7fe fc38 	bl	8001164 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e053      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2d      	ldr	r3, [pc, #180]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b27      	ldr	r3, [pc, #156]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 030f 	and.w	r3, r3, #15
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d210      	bcs.n	8002948 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b24      	ldr	r3, [pc, #144]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f023 020f 	bic.w	r2, r3, #15
 800292e:	4922      	ldr	r1, [pc, #136]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	4313      	orrs	r3, r2
 8002934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002936:	4b20      	ldr	r3, [pc, #128]	; (80029b8 <HAL_RCC_ClockConfig+0x1c4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f003 030f 	and.w	r3, r3, #15
 800293e:	683a      	ldr	r2, [r7, #0]
 8002940:	429a      	cmp	r2, r3
 8002942:	d001      	beq.n	8002948 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e032      	b.n	80029ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002954:	4b19      	ldr	r3, [pc, #100]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	4916      	ldr	r1, [pc, #88]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002962:	4313      	orrs	r3, r2
 8002964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d009      	beq.n	8002986 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002972:	4b12      	ldr	r3, [pc, #72]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002974:	689b      	ldr	r3, [r3, #8]
 8002976:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	490e      	ldr	r1, [pc, #56]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 8002982:	4313      	orrs	r3, r2
 8002984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002986:	f000 f821 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800298a:	4602      	mov	r2, r0
 800298c:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_RCC_ClockConfig+0x1c8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	091b      	lsrs	r3, r3, #4
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	490a      	ldr	r1, [pc, #40]	; (80029c0 <HAL_RCC_ClockConfig+0x1cc>)
 8002998:	5ccb      	ldrb	r3, [r1, r3]
 800299a:	fa22 f303 	lsr.w	r3, r2, r3
 800299e:	4a09      	ldr	r2, [pc, #36]	; (80029c4 <HAL_RCC_ClockConfig+0x1d0>)
 80029a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80029a2:	4b09      	ldr	r3, [pc, #36]	; (80029c8 <HAL_RCC_ClockConfig+0x1d4>)
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fb98 	bl	80010dc <HAL_InitTick>

  return HAL_OK;
 80029ac:	2300      	movs	r3, #0
}
 80029ae:	4618      	mov	r0, r3
 80029b0:	3710      	adds	r7, #16
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40023c00 	.word	0x40023c00
 80029bc:	40023800 	.word	0x40023800
 80029c0:	08005774 	.word	0x08005774
 80029c4:	20000000 	.word	0x20000000
 80029c8:	20000004 	.word	0x20000004

080029cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029d0:	b094      	sub	sp, #80	; 0x50
 80029d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80029d4:	2300      	movs	r3, #0
 80029d6:	647b      	str	r3, [r7, #68]	; 0x44
 80029d8:	2300      	movs	r3, #0
 80029da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80029dc:	2300      	movs	r3, #0
 80029de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80029e0:	2300      	movs	r3, #0
 80029e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029e4:	4b79      	ldr	r3, [pc, #484]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f003 030c 	and.w	r3, r3, #12
 80029ec:	2b08      	cmp	r3, #8
 80029ee:	d00d      	beq.n	8002a0c <HAL_RCC_GetSysClockFreq+0x40>
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	f200 80e1 	bhi.w	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d002      	beq.n	8002a00 <HAL_RCC_GetSysClockFreq+0x34>
 80029fa:	2b04      	cmp	r3, #4
 80029fc:	d003      	beq.n	8002a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80029fe:	e0db      	b.n	8002bb8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002a00:	4b73      	ldr	r3, [pc, #460]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002a02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a04:	e0db      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002a06:	4b73      	ldr	r3, [pc, #460]	; (8002bd4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002a08:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002a0a:	e0d8      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a0c:	4b6f      	ldr	r3, [pc, #444]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a0e:	685b      	ldr	r3, [r3, #4]
 8002a10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002a14:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002a16:	4b6d      	ldr	r3, [pc, #436]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d063      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a22:	4b6a      	ldr	r3, [pc, #424]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	099b      	lsrs	r3, r3, #6
 8002a28:	2200      	movs	r2, #0
 8002a2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a2c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a34:	633b      	str	r3, [r7, #48]	; 0x30
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
 8002a3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002a3e:	4622      	mov	r2, r4
 8002a40:	462b      	mov	r3, r5
 8002a42:	f04f 0000 	mov.w	r0, #0
 8002a46:	f04f 0100 	mov.w	r1, #0
 8002a4a:	0159      	lsls	r1, r3, #5
 8002a4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a50:	0150      	lsls	r0, r2, #5
 8002a52:	4602      	mov	r2, r0
 8002a54:	460b      	mov	r3, r1
 8002a56:	4621      	mov	r1, r4
 8002a58:	1a51      	subs	r1, r2, r1
 8002a5a:	6139      	str	r1, [r7, #16]
 8002a5c:	4629      	mov	r1, r5
 8002a5e:	eb63 0301 	sbc.w	r3, r3, r1
 8002a62:	617b      	str	r3, [r7, #20]
 8002a64:	f04f 0200 	mov.w	r2, #0
 8002a68:	f04f 0300 	mov.w	r3, #0
 8002a6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a70:	4659      	mov	r1, fp
 8002a72:	018b      	lsls	r3, r1, #6
 8002a74:	4651      	mov	r1, sl
 8002a76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a7a:	4651      	mov	r1, sl
 8002a7c:	018a      	lsls	r2, r1, #6
 8002a7e:	4651      	mov	r1, sl
 8002a80:	ebb2 0801 	subs.w	r8, r2, r1
 8002a84:	4659      	mov	r1, fp
 8002a86:	eb63 0901 	sbc.w	r9, r3, r1
 8002a8a:	f04f 0200 	mov.w	r2, #0
 8002a8e:	f04f 0300 	mov.w	r3, #0
 8002a92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a9e:	4690      	mov	r8, r2
 8002aa0:	4699      	mov	r9, r3
 8002aa2:	4623      	mov	r3, r4
 8002aa4:	eb18 0303 	adds.w	r3, r8, r3
 8002aa8:	60bb      	str	r3, [r7, #8]
 8002aaa:	462b      	mov	r3, r5
 8002aac:	eb49 0303 	adc.w	r3, r9, r3
 8002ab0:	60fb      	str	r3, [r7, #12]
 8002ab2:	f04f 0200 	mov.w	r2, #0
 8002ab6:	f04f 0300 	mov.w	r3, #0
 8002aba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002abe:	4629      	mov	r1, r5
 8002ac0:	024b      	lsls	r3, r1, #9
 8002ac2:	4621      	mov	r1, r4
 8002ac4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac8:	4621      	mov	r1, r4
 8002aca:	024a      	lsls	r2, r1, #9
 8002acc:	4610      	mov	r0, r2
 8002ace:	4619      	mov	r1, r3
 8002ad0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ad6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002ad8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002adc:	f7fd fc08 	bl	80002f0 <__aeabi_uldivmod>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ae8:	e058      	b.n	8002b9c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002aea:	4b38      	ldr	r3, [pc, #224]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002aec:	685b      	ldr	r3, [r3, #4]
 8002aee:	099b      	lsrs	r3, r3, #6
 8002af0:	2200      	movs	r2, #0
 8002af2:	4618      	mov	r0, r3
 8002af4:	4611      	mov	r1, r2
 8002af6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002afa:	623b      	str	r3, [r7, #32]
 8002afc:	2300      	movs	r3, #0
 8002afe:	627b      	str	r3, [r7, #36]	; 0x24
 8002b00:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002b04:	4642      	mov	r2, r8
 8002b06:	464b      	mov	r3, r9
 8002b08:	f04f 0000 	mov.w	r0, #0
 8002b0c:	f04f 0100 	mov.w	r1, #0
 8002b10:	0159      	lsls	r1, r3, #5
 8002b12:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b16:	0150      	lsls	r0, r2, #5
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4641      	mov	r1, r8
 8002b1e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b22:	4649      	mov	r1, r9
 8002b24:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b28:	f04f 0200 	mov.w	r2, #0
 8002b2c:	f04f 0300 	mov.w	r3, #0
 8002b30:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b34:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b38:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b3c:	ebb2 040a 	subs.w	r4, r2, sl
 8002b40:	eb63 050b 	sbc.w	r5, r3, fp
 8002b44:	f04f 0200 	mov.w	r2, #0
 8002b48:	f04f 0300 	mov.w	r3, #0
 8002b4c:	00eb      	lsls	r3, r5, #3
 8002b4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b52:	00e2      	lsls	r2, r4, #3
 8002b54:	4614      	mov	r4, r2
 8002b56:	461d      	mov	r5, r3
 8002b58:	4643      	mov	r3, r8
 8002b5a:	18e3      	adds	r3, r4, r3
 8002b5c:	603b      	str	r3, [r7, #0]
 8002b5e:	464b      	mov	r3, r9
 8002b60:	eb45 0303 	adc.w	r3, r5, r3
 8002b64:	607b      	str	r3, [r7, #4]
 8002b66:	f04f 0200 	mov.w	r2, #0
 8002b6a:	f04f 0300 	mov.w	r3, #0
 8002b6e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b72:	4629      	mov	r1, r5
 8002b74:	028b      	lsls	r3, r1, #10
 8002b76:	4621      	mov	r1, r4
 8002b78:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b7c:	4621      	mov	r1, r4
 8002b7e:	028a      	lsls	r2, r1, #10
 8002b80:	4610      	mov	r0, r2
 8002b82:	4619      	mov	r1, r3
 8002b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002b86:	2200      	movs	r2, #0
 8002b88:	61bb      	str	r3, [r7, #24]
 8002b8a:	61fa      	str	r2, [r7, #28]
 8002b8c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b90:	f7fd fbae 	bl	80002f0 <__aeabi_uldivmod>
 8002b94:	4602      	mov	r2, r0
 8002b96:	460b      	mov	r3, r1
 8002b98:	4613      	mov	r3, r2
 8002b9a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002b9c:	4b0b      	ldr	r3, [pc, #44]	; (8002bcc <HAL_RCC_GetSysClockFreq+0x200>)
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	0c1b      	lsrs	r3, r3, #16
 8002ba2:	f003 0303 	and.w	r3, r3, #3
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002bae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bb6:	e002      	b.n	8002bbe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb8:	4b05      	ldr	r3, [pc, #20]	; (8002bd0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002bbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bbe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	3750      	adds	r7, #80	; 0x50
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bca:	bf00      	nop
 8002bcc:	40023800 	.word	0x40023800
 8002bd0:	00f42400 	.word	0x00f42400
 8002bd4:	007a1200 	.word	0x007a1200

08002bd8 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002bdc:	4b03      	ldr	r3, [pc, #12]	; (8002bec <HAL_RCC_GetHCLKFreq+0x14>)
 8002bde:	681b      	ldr	r3, [r3, #0]
}
 8002be0:	4618      	mov	r0, r3
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20000000 	.word	0x20000000

08002bf0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002bf4:	f7ff fff0 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002bf8:	4602      	mov	r2, r0
 8002bfa:	4b05      	ldr	r3, [pc, #20]	; (8002c10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	0a9b      	lsrs	r3, r3, #10
 8002c00:	f003 0307 	and.w	r3, r3, #7
 8002c04:	4903      	ldr	r1, [pc, #12]	; (8002c14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c06:	5ccb      	ldrb	r3, [r1, r3]
 8002c08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	bd80      	pop	{r7, pc}
 8002c10:	40023800 	.word	0x40023800
 8002c14:	08005784 	.word	0x08005784

08002c18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002c1c:	f7ff ffdc 	bl	8002bd8 <HAL_RCC_GetHCLKFreq>
 8002c20:	4602      	mov	r2, r0
 8002c22:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	0b5b      	lsrs	r3, r3, #13
 8002c28:	f003 0307 	and.w	r3, r3, #7
 8002c2c:	4903      	ldr	r1, [pc, #12]	; (8002c3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002c2e:	5ccb      	ldrb	r3, [r1, r3]
 8002c30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	40023800 	.word	0x40023800
 8002c3c:	08005784 	.word	0x08005784

08002c40 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b088      	sub	sp, #32
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002c54:	2300      	movs	r3, #0
 8002c56:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0301 	and.w	r3, r3, #1
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d012      	beq.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c68:	4b69      	ldr	r3, [pc, #420]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002c72:	6093      	str	r3, [r2, #8]
 8002c74:	4b66      	ldr	r3, [pc, #408]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c76:	689a      	ldr	r2, [r3, #8]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7c:	4964      	ldr	r1, [pc, #400]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d101      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d017      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002c9a:	4b5d      	ldr	r3, [pc, #372]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ca8:	4959      	ldr	r1, [pc, #356]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002caa:	4313      	orrs	r3, r2
 8002cac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cb4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cb8:	d101      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d101      	bne.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d017      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002cd6:	4b4e      	ldr	r3, [pc, #312]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002cdc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce4:	494a      	ldr	r1, [pc, #296]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cf4:	d101      	bne.n	8002cfa <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d101      	bne.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002d02:	2301      	movs	r3, #1
 8002d04:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0320 	and.w	r3, r3, #32
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	f000 808b 	beq.w	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d24:	4b3a      	ldr	r3, [pc, #232]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d28:	4a39      	ldr	r2, [pc, #228]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d2a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8002d30:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	60bb      	str	r3, [r7, #8]
 8002d3a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a34      	ldr	r2, [pc, #208]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002d48:	f7fe fa0c 	bl	8001164 <HAL_GetTick>
 8002d4c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d50:	f7fe fa08 	bl	8001164 <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b64      	cmp	r3, #100	; 0x64
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e38f      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002d62:	4b2c      	ldr	r3, [pc, #176]	; (8002e14 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d0f0      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d6e:	4b28      	ldr	r3, [pc, #160]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d76:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d035      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d86:	693a      	ldr	r2, [r7, #16]
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d02e      	beq.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d8c:	4b20      	ldr	r3, [pc, #128]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d94:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d9a:	4a1d      	ldr	r2, [pc, #116]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002da0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002da2:	4b1b      	ldr	r3, [pc, #108]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da6:	4a1a      	ldr	r2, [pc, #104]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dac:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002dae:	4a18      	ldr	r2, [pc, #96]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db0:	693b      	ldr	r3, [r7, #16]
 8002db2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002db4:	4b16      	ldr	r3, [pc, #88]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002db6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db8:	f003 0301 	and.w	r3, r3, #1
 8002dbc:	2b01      	cmp	r3, #1
 8002dbe:	d114      	bne.n	8002dea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc0:	f7fe f9d0 	bl	8001164 <HAL_GetTick>
 8002dc4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dc6:	e00a      	b.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dc8:	f7fe f9cc 	bl	8001164 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	697b      	ldr	r3, [r7, #20]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e351      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002de0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d0ee      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002df6:	d111      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002df8:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002e04:	4b04      	ldr	r3, [pc, #16]	; (8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e06:	400b      	ands	r3, r1
 8002e08:	4901      	ldr	r1, [pc, #4]	; (8002e10 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	608b      	str	r3, [r1, #8]
 8002e0e:	e00b      	b.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	40007000 	.word	0x40007000
 8002e18:	0ffffcff 	.word	0x0ffffcff
 8002e1c:	4bac      	ldr	r3, [pc, #688]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	4aab      	ldr	r2, [pc, #684]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e26:	6093      	str	r3, [r2, #8]
 8002e28:	4ba9      	ldr	r3, [pc, #676]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e2a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e34:	49a6      	ldr	r1, [pc, #664]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0310 	and.w	r3, r3, #16
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d010      	beq.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e46:	4ba2      	ldr	r3, [pc, #648]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e4c:	4aa0      	ldr	r2, [pc, #640]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002e56:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e58:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e60:	499b      	ldr	r1, [pc, #620]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e62:	4313      	orrs	r3, r2
 8002e64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d00a      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e74:	4b96      	ldr	r3, [pc, #600]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e7a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002e82:	4993      	ldr	r1, [pc, #588]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e84:	4313      	orrs	r3, r2
 8002e86:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00a      	beq.n	8002eac <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e96:	4b8e      	ldr	r3, [pc, #568]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002ea4:	498a      	ldr	r1, [pc, #552]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00a      	beq.n	8002ece <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002eb8:	4b85      	ldr	r3, [pc, #532]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ebe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ec6:	4982      	ldr	r1, [pc, #520]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	4313      	orrs	r3, r2
 8002eca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00a      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002eda:	4b7d      	ldr	r3, [pc, #500]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002edc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ee8:	4979      	ldr	r1, [pc, #484]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	4313      	orrs	r3, r2
 8002eec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d00a      	beq.n	8002f12 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002efc:	4b74      	ldr	r3, [pc, #464]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f02:	f023 0203 	bic.w	r2, r3, #3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	4971      	ldr	r1, [pc, #452]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0c:	4313      	orrs	r3, r2
 8002f0e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d00a      	beq.n	8002f34 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002f1e:	4b6c      	ldr	r3, [pc, #432]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f24:	f023 020c 	bic.w	r2, r3, #12
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f2c:	4968      	ldr	r1, [pc, #416]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00a      	beq.n	8002f56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002f40:	4b63      	ldr	r3, [pc, #396]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f46:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4e:	4960      	ldr	r1, [pc, #384]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00a      	beq.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002f62:	4b5b      	ldr	r3, [pc, #364]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f68:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f70:	4957      	ldr	r1, [pc, #348]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f72:	4313      	orrs	r3, r2
 8002f74:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d00a      	beq.n	8002f9a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002f84:	4b52      	ldr	r3, [pc, #328]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f8a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f92:	494f      	ldr	r1, [pc, #316]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f94:	4313      	orrs	r3, r2
 8002f96:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00a      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002fa6:	4b4a      	ldr	r3, [pc, #296]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fac:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fb4:	4946      	ldr	r1, [pc, #280]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d00a      	beq.n	8002fde <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002fc8:	4b41      	ldr	r3, [pc, #260]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fce:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd6:	493e      	ldr	r1, [pc, #248]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00a      	beq.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002fea:	4b39      	ldr	r3, [pc, #228]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ff0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ff8:	4935      	ldr	r1, [pc, #212]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00a      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800300e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003012:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800301a:	492d      	ldr	r1, [pc, #180]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800301c:	4313      	orrs	r3, r2
 800301e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d011      	beq.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800302e:	4b28      	ldr	r3, [pc, #160]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003034:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800303c:	4924      	ldr	r1, [pc, #144]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003048:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800304c:	d101      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800304e:	2301      	movs	r3, #1
 8003050:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0308 	and.w	r3, r3, #8
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800305e:	2301      	movs	r3, #1
 8003060:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d00a      	beq.n	8003084 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800306e:	4b18      	ldr	r3, [pc, #96]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003074:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800307c:	4914      	ldr	r1, [pc, #80]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307e:	4313      	orrs	r3, r2
 8003080:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00b      	beq.n	80030a8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003096:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030a0:	490b      	ldr	r1, [pc, #44]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030a2:	4313      	orrs	r3, r2
 80030a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d00f      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80030b4:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030ba:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030c4:	4902      	ldr	r1, [pc, #8]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80030cc:	e002      	b.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80030ce:	bf00      	nop
 80030d0:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00b      	beq.n	80030f8 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80030e0:	4b8a      	ldr	r3, [pc, #552]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80030e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030f0:	4986      	ldr	r1, [pc, #536]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030f2:	4313      	orrs	r3, r2
 80030f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003104:	4b81      	ldr	r3, [pc, #516]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003106:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800310a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003114:	497d      	ldr	r1, [pc, #500]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	2b01      	cmp	r3, #1
 8003120:	d006      	beq.n	8003130 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80d6 	beq.w	80032dc <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003130:	4b76      	ldr	r3, [pc, #472]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a75      	ldr	r2, [pc, #468]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003136:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800313a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800313c:	f7fe f812 	bl	8001164 <HAL_GetTick>
 8003140:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003144:	f7fe f80e 	bl	8001164 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	697b      	ldr	r3, [r7, #20]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b64      	cmp	r3, #100	; 0x64
 8003150:	d901      	bls.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e195      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003156:	4b6d      	ldr	r3, [pc, #436]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d021      	beq.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003172:	2b00      	cmp	r3, #0
 8003174:	d11d      	bne.n	80031b2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003176:	4b65      	ldr	r3, [pc, #404]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003178:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003184:	4b61      	ldr	r3, [pc, #388]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003186:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800318a:	0e1b      	lsrs	r3, r3, #24
 800318c:	f003 030f 	and.w	r3, r3, #15
 8003190:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	019a      	lsls	r2, r3, #6
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	041b      	lsls	r3, r3, #16
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	061b      	lsls	r3, r3, #24
 80031a2:	431a      	orrs	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	071b      	lsls	r3, r3, #28
 80031aa:	4958      	ldr	r1, [pc, #352]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ac:	4313      	orrs	r3, r2
 80031ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d004      	beq.n	80031c8 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d00a      	beq.n	80031de <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d02e      	beq.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031dc:	d129      	bne.n	8003232 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80031de:	4b4b      	ldr	r3, [pc, #300]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031e4:	0c1b      	lsrs	r3, r3, #16
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80031ec:	4b47      	ldr	r3, [pc, #284]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80031f2:	0f1b      	lsrs	r3, r3, #28
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	019a      	lsls	r2, r3, #6
 8003200:	693b      	ldr	r3, [r7, #16]
 8003202:	041b      	lsls	r3, r3, #16
 8003204:	431a      	orrs	r2, r3
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	061b      	lsls	r3, r3, #24
 800320c:	431a      	orrs	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	071b      	lsls	r3, r3, #28
 8003212:	493e      	ldr	r1, [pc, #248]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003214:	4313      	orrs	r3, r2
 8003216:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800321c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003220:	f023 021f 	bic.w	r2, r3, #31
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003228:	3b01      	subs	r3, #1
 800322a:	4938      	ldr	r1, [pc, #224]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800322c:	4313      	orrs	r3, r2
 800322e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d01d      	beq.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003240:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003244:	0e1b      	lsrs	r3, r3, #24
 8003246:	f003 030f 	and.w	r3, r3, #15
 800324a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800324c:	4b2f      	ldr	r3, [pc, #188]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800324e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003252:	0f1b      	lsrs	r3, r3, #28
 8003254:	f003 0307 	and.w	r3, r3, #7
 8003258:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	019a      	lsls	r2, r3, #6
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	691b      	ldr	r3, [r3, #16]
 8003264:	041b      	lsls	r3, r3, #16
 8003266:	431a      	orrs	r2, r3
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	061b      	lsls	r3, r3, #24
 800326c:	431a      	orrs	r2, r3
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	071b      	lsls	r3, r3, #28
 8003272:	4926      	ldr	r1, [pc, #152]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003274:	4313      	orrs	r3, r2
 8003276:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d011      	beq.n	80032aa <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	019a      	lsls	r2, r3, #6
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	041b      	lsls	r3, r3, #16
 8003292:	431a      	orrs	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	061b      	lsls	r3, r3, #24
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	491a      	ldr	r1, [pc, #104]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80032aa:	4b18      	ldr	r3, [pc, #96]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a17      	ldr	r2, [pc, #92]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b6:	f7fd ff55 	bl	8001164 <HAL_GetTick>
 80032ba:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032bc:	e008      	b.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032be:	f7fd ff51 	bl	8001164 <HAL_GetTick>
 80032c2:	4602      	mov	r2, r0
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	1ad3      	subs	r3, r2, r3
 80032c8:	2b64      	cmp	r3, #100	; 0x64
 80032ca:	d901      	bls.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032cc:	2303      	movs	r3, #3
 80032ce:	e0d8      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80032d0:	4b0e      	ldr	r3, [pc, #56]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d0f0      	beq.n	80032be <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80032dc:	69bb      	ldr	r3, [r7, #24]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	f040 80ce 	bne.w	8003480 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80032e4:	4b09      	ldr	r3, [pc, #36]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	4a08      	ldr	r2, [pc, #32]	; (800330c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032f0:	f7fd ff38 	bl	8001164 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80032f6:	e00b      	b.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032f8:	f7fd ff34 	bl	8001164 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	2b64      	cmp	r3, #100	; 0x64
 8003304:	d904      	bls.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003306:	2303      	movs	r3, #3
 8003308:	e0bb      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003310:	4b5e      	ldr	r3, [pc, #376]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003318:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331c:	d0ec      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800332e:	2b00      	cmp	r3, #0
 8003330:	d009      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800333a:	2b00      	cmp	r3, #0
 800333c:	d02e      	beq.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003342:	2b00      	cmp	r3, #0
 8003344:	d12a      	bne.n	800339c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003346:	4b51      	ldr	r3, [pc, #324]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800334c:	0c1b      	lsrs	r3, r3, #16
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003354:	4b4d      	ldr	r3, [pc, #308]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800335a:	0f1b      	lsrs	r3, r3, #28
 800335c:	f003 0307 	and.w	r3, r3, #7
 8003360:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	019a      	lsls	r2, r3, #6
 8003368:	693b      	ldr	r3, [r7, #16]
 800336a:	041b      	lsls	r3, r3, #16
 800336c:	431a      	orrs	r2, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	061b      	lsls	r3, r3, #24
 8003374:	431a      	orrs	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	071b      	lsls	r3, r3, #28
 800337a:	4944      	ldr	r1, [pc, #272]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003388:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	3b01      	subs	r3, #1
 8003392:	021b      	lsls	r3, r3, #8
 8003394:	493d      	ldr	r1, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d022      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80033b0:	d11d      	bne.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033b2:	4b36      	ldr	r3, [pc, #216]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033b8:	0e1b      	lsrs	r3, r3, #24
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80033c0:	4b32      	ldr	r3, [pc, #200]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033c6:	0f1b      	lsrs	r3, r3, #28
 80033c8:	f003 0307 	and.w	r3, r3, #7
 80033cc:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	695b      	ldr	r3, [r3, #20]
 80033d2:	019a      	lsls	r2, r3, #6
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	041b      	lsls	r3, r3, #16
 80033da:	431a      	orrs	r2, r3
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	061b      	lsls	r3, r3, #24
 80033e0:	431a      	orrs	r2, r3
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	071b      	lsls	r3, r3, #28
 80033e6:	4929      	ldr	r1, [pc, #164]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033e8:	4313      	orrs	r3, r2
 80033ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f003 0308 	and.w	r3, r3, #8
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d028      	beq.n	800344c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80033fa:	4b24      	ldr	r3, [pc, #144]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80033fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003400:	0e1b      	lsrs	r3, r3, #24
 8003402:	f003 030f 	and.w	r3, r3, #15
 8003406:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003408:	4b20      	ldr	r3, [pc, #128]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800340a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800340e:	0c1b      	lsrs	r3, r3, #16
 8003410:	f003 0303 	and.w	r3, r3, #3
 8003414:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	695b      	ldr	r3, [r3, #20]
 800341a:	019a      	lsls	r2, r3, #6
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	041b      	lsls	r3, r3, #16
 8003420:	431a      	orrs	r2, r3
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	061b      	lsls	r3, r3, #24
 8003426:	431a      	orrs	r2, r3
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	69db      	ldr	r3, [r3, #28]
 800342c:	071b      	lsls	r3, r3, #28
 800342e:	4917      	ldr	r1, [pc, #92]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003430:	4313      	orrs	r3, r2
 8003432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003436:	4b15      	ldr	r3, [pc, #84]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003438:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800343c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003444:	4911      	ldr	r1, [pc, #68]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003446:	4313      	orrs	r3, r2
 8003448:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800344c:	4b0f      	ldr	r3, [pc, #60]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0e      	ldr	r2, [pc, #56]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003452:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003456:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003458:	f7fd fe84 	bl	8001164 <HAL_GetTick>
 800345c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800345e:	e008      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003460:	f7fd fe80 	bl	8001164 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	697b      	ldr	r3, [r7, #20]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	2b64      	cmp	r3, #100	; 0x64
 800346c:	d901      	bls.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346e:	2303      	movs	r3, #3
 8003470:	e007      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003472:	4b06      	ldr	r3, [pc, #24]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800347a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800347e:	d1ef      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40023800 	.word	0x40023800

08003490 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b00      	cmp	r3, #0
 800349c:	d101      	bne.n	80034a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800349e:	2301      	movs	r3, #1
 80034a0:	e049      	b.n	8003536 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034a8:	b2db      	uxtb	r3, r3
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d106      	bne.n	80034bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	f7fd fc62 	bl	8000d80 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	3304      	adds	r3, #4
 80034cc:	4619      	mov	r1, r3
 80034ce:	4610      	mov	r0, r2
 80034d0:	f000 faca 	bl	8003a68 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2201      	movs	r2, #1
 80034d8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3708      	adds	r7, #8
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
	...

08003540 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800354e:	b2db      	uxtb	r3, r3
 8003550:	2b01      	cmp	r3, #1
 8003552:	d001      	beq.n	8003558 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e054      	b.n	8003602 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2202      	movs	r2, #2
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68da      	ldr	r2, [r3, #12]
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f042 0201 	orr.w	r2, r2, #1
 800356e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <HAL_TIM_Base_Start_IT+0xd0>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d022      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003582:	d01d      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4a22      	ldr	r2, [pc, #136]	; (8003614 <HAL_TIM_Base_Start_IT+0xd4>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d018      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <HAL_TIM_Base_Start_IT+0xd8>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a1f      	ldr	r2, [pc, #124]	; (800361c <HAL_TIM_Base_Start_IT+0xdc>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00e      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a1e      	ldr	r2, [pc, #120]	; (8003620 <HAL_TIM_Base_Start_IT+0xe0>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d009      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	4a1c      	ldr	r2, [pc, #112]	; (8003624 <HAL_TIM_Base_Start_IT+0xe4>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d004      	beq.n	80035c0 <HAL_TIM_Base_Start_IT+0x80>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	4a1b      	ldr	r2, [pc, #108]	; (8003628 <HAL_TIM_Base_Start_IT+0xe8>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d115      	bne.n	80035ec <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	689a      	ldr	r2, [r3, #8]
 80035c6:	4b19      	ldr	r3, [pc, #100]	; (800362c <HAL_TIM_Base_Start_IT+0xec>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2b06      	cmp	r3, #6
 80035d0:	d015      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035d8:	d011      	beq.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	681a      	ldr	r2, [r3, #0]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0201 	orr.w	r2, r2, #1
 80035e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035ea:	e008      	b.n	80035fe <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
 80035fc:	e000      	b.n	8003600 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80035fe:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40010000 	.word	0x40010000
 8003614:	40000400 	.word	0x40000400
 8003618:	40000800 	.word	0x40000800
 800361c:	40000c00 	.word	0x40000c00
 8003620:	40010400 	.word	0x40010400
 8003624:	40014000 	.word	0x40014000
 8003628:	40001800 	.word	0x40001800
 800362c:	00010007 	.word	0x00010007

08003630 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f003 0302 	and.w	r3, r3, #2
 8003642:	2b02      	cmp	r3, #2
 8003644:	d122      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b02      	cmp	r3, #2
 8003652:	d11b      	bne.n	800368c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f06f 0202 	mvn.w	r2, #2
 800365c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	f003 0303 	and.w	r3, r3, #3
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f000 f9da 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003678:	e005      	b.n	8003686 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	f000 f9cc 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003680:	6878      	ldr	r0, [r7, #4]
 8003682:	f000 f9dd 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	691b      	ldr	r3, [r3, #16]
 8003692:	f003 0304 	and.w	r3, r3, #4
 8003696:	2b04      	cmp	r3, #4
 8003698:	d122      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f003 0304 	and.w	r3, r3, #4
 80036a4:	2b04      	cmp	r3, #4
 80036a6:	d11b      	bne.n	80036e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f06f 0204 	mvn.w	r2, #4
 80036b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2202      	movs	r2, #2
 80036b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699b      	ldr	r3, [r3, #24]
 80036be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 f9b0 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 80036cc:	e005      	b.n	80036da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80036ce:	6878      	ldr	r0, [r7, #4]
 80036d0:	f000 f9a2 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036d4:	6878      	ldr	r0, [r7, #4]
 80036d6:	f000 f9b3 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	691b      	ldr	r3, [r3, #16]
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b08      	cmp	r3, #8
 80036ec:	d122      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b08      	cmp	r3, #8
 80036fa:	d11b      	bne.n	8003734 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f06f 0208 	mvn.w	r2, #8
 8003704:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2204      	movs	r2, #4
 800370a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	f003 0303 	and.w	r3, r3, #3
 8003716:	2b00      	cmp	r3, #0
 8003718:	d003      	beq.n	8003722 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f000 f986 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003720:	e005      	b.n	800372e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003722:	6878      	ldr	r0, [r7, #4]
 8003724:	f000 f978 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003728:	6878      	ldr	r0, [r7, #4]
 800372a:	f000 f989 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2200      	movs	r2, #0
 8003732:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	691b      	ldr	r3, [r3, #16]
 800373a:	f003 0310 	and.w	r3, r3, #16
 800373e:	2b10      	cmp	r3, #16
 8003740:	d122      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d11b      	bne.n	8003788 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f06f 0210 	mvn.w	r2, #16
 8003758:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	2208      	movs	r2, #8
 800375e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	69db      	ldr	r3, [r3, #28]
 8003766:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800376a:	2b00      	cmp	r3, #0
 800376c:	d003      	beq.n	8003776 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 f95c 	bl	8003a2c <HAL_TIM_IC_CaptureCallback>
 8003774:	e005      	b.n	8003782 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f000 f94e 	bl	8003a18 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800377c:	6878      	ldr	r0, [r7, #4]
 800377e:	f000 f95f 	bl	8003a40 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2200      	movs	r2, #0
 8003786:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	f003 0301 	and.w	r3, r3, #1
 8003792:	2b01      	cmp	r3, #1
 8003794:	d10e      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d107      	bne.n	80037b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f06f 0201 	mvn.w	r2, #1
 80037ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f928 	bl	8003a04 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	691b      	ldr	r3, [r3, #16]
 80037ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037be:	2b80      	cmp	r3, #128	; 0x80
 80037c0:	d10e      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037cc:	2b80      	cmp	r3, #128	; 0x80
 80037ce:	d107      	bne.n	80037e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80037d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb16 	bl	8003e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	691b      	ldr	r3, [r3, #16]
 80037e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037ee:	d10e      	bne.n	800380e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037fa:	2b80      	cmp	r3, #128	; 0x80
 80037fc:	d107      	bne.n	800380e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003806:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fb09 	bl	8003e20 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	691b      	ldr	r3, [r3, #16]
 8003814:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003818:	2b40      	cmp	r3, #64	; 0x40
 800381a:	d10e      	bne.n	800383a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d107      	bne.n	800383a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003832:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 f90d 	bl	8003a54 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b20      	cmp	r3, #32
 8003846:	d10e      	bne.n	8003866 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68db      	ldr	r3, [r3, #12]
 800384e:	f003 0320 	and.w	r3, r3, #32
 8003852:	2b20      	cmp	r3, #32
 8003854:	d107      	bne.n	8003866 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f06f 0220 	mvn.w	r2, #32
 800385e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003860:	6878      	ldr	r0, [r7, #4]
 8003862:	f000 fac9 	bl	8003df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003866:	bf00      	nop
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
	...

08003870 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b084      	sub	sp, #16
 8003874:	af00      	add	r7, sp, #0
 8003876:	6078      	str	r0, [r7, #4]
 8003878:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_TIM_ConfigClockSource+0x1c>
 8003888:	2302      	movs	r3, #2
 800388a:	e0b4      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x186>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038a4:	68ba      	ldr	r2, [r7, #8]
 80038a6:	4b56      	ldr	r3, [pc, #344]	; (8003a00 <HAL_TIM_ConfigClockSource+0x190>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80038b2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038c4:	d03e      	beq.n	8003944 <HAL_TIM_ConfigClockSource+0xd4>
 80038c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038ca:	f200 8087 	bhi.w	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038d2:	f000 8086 	beq.w	80039e2 <HAL_TIM_ConfigClockSource+0x172>
 80038d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038da:	d87f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038dc:	2b70      	cmp	r3, #112	; 0x70
 80038de:	d01a      	beq.n	8003916 <HAL_TIM_ConfigClockSource+0xa6>
 80038e0:	2b70      	cmp	r3, #112	; 0x70
 80038e2:	d87b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038e4:	2b60      	cmp	r3, #96	; 0x60
 80038e6:	d050      	beq.n	800398a <HAL_TIM_ConfigClockSource+0x11a>
 80038e8:	2b60      	cmp	r3, #96	; 0x60
 80038ea:	d877      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038ec:	2b50      	cmp	r3, #80	; 0x50
 80038ee:	d03c      	beq.n	800396a <HAL_TIM_ConfigClockSource+0xfa>
 80038f0:	2b50      	cmp	r3, #80	; 0x50
 80038f2:	d873      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038f4:	2b40      	cmp	r3, #64	; 0x40
 80038f6:	d058      	beq.n	80039aa <HAL_TIM_ConfigClockSource+0x13a>
 80038f8:	2b40      	cmp	r3, #64	; 0x40
 80038fa:	d86f      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 80038fc:	2b30      	cmp	r3, #48	; 0x30
 80038fe:	d064      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003900:	2b30      	cmp	r3, #48	; 0x30
 8003902:	d86b      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 8003904:	2b20      	cmp	r3, #32
 8003906:	d060      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003908:	2b20      	cmp	r3, #32
 800390a:	d867      	bhi.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
 800390c:	2b00      	cmp	r3, #0
 800390e:	d05c      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003910:	2b10      	cmp	r3, #16
 8003912:	d05a      	beq.n	80039ca <HAL_TIM_ConfigClockSource+0x15a>
 8003914:	e062      	b.n	80039dc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003926:	f000 f9b9 	bl	8003c9c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003938:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	609a      	str	r2, [r3, #8]
      break;
 8003942:	e04f      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003954:	f000 f9a2 	bl	8003c9c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689a      	ldr	r2, [r3, #8]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003966:	609a      	str	r2, [r3, #8]
      break;
 8003968:	e03c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003976:	461a      	mov	r2, r3
 8003978:	f000 f916 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2150      	movs	r1, #80	; 0x50
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f96f 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 8003988:	e02c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003996:	461a      	mov	r2, r3
 8003998:	f000 f935 	bl	8003c06 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	2160      	movs	r1, #96	; 0x60
 80039a2:	4618      	mov	r0, r3
 80039a4:	f000 f95f 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039a8:	e01c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039b6:	461a      	mov	r2, r3
 80039b8:	f000 f8f6 	bl	8003ba8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	2140      	movs	r1, #64	; 0x40
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 f94f 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039c8:	e00c      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4619      	mov	r1, r3
 80039d4:	4610      	mov	r0, r2
 80039d6:	f000 f946 	bl	8003c66 <TIM_ITRx_SetConfig>
      break;
 80039da:	e003      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	73fb      	strb	r3, [r7, #15]
      break;
 80039e0:	e000      	b.n	80039e4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039e2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80039f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	fffeff88 	.word	0xfffeff88

08003a04 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b083      	sub	sp, #12
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a0c:	bf00      	nop
 8003a0e:	370c      	adds	r7, #12
 8003a10:	46bd      	mov	sp, r7
 8003a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a16:	4770      	bx	lr

08003a18 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b083      	sub	sp, #12
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a20:	bf00      	nop
 8003a22:	370c      	adds	r7, #12
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b083      	sub	sp, #12
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003a34:	bf00      	nop
 8003a36:	370c      	adds	r7, #12
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3e:	4770      	bx	lr

08003a40 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a48:	bf00      	nop
 8003a4a:	370c      	adds	r7, #12
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a52:	4770      	bx	lr

08003a54 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a54:	b480      	push	{r7}
 8003a56:	b083      	sub	sp, #12
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a5c:	bf00      	nop
 8003a5e:	370c      	adds	r7, #12
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a40      	ldr	r2, [pc, #256]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d013      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a86:	d00f      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a3d      	ldr	r2, [pc, #244]	; (8003b80 <TIM_Base_SetConfig+0x118>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d00b      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4a3c      	ldr	r2, [pc, #240]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d007      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a3b      	ldr	r2, [pc, #236]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d003      	beq.n	8003aa8 <TIM_Base_SetConfig+0x40>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	4a3a      	ldr	r2, [pc, #232]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d108      	bne.n	8003aba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003aae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2f      	ldr	r2, [pc, #188]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d02b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac8:	d027      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2c      	ldr	r2, [pc, #176]	; (8003b80 <TIM_Base_SetConfig+0x118>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d023      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a2b      	ldr	r2, [pc, #172]	; (8003b84 <TIM_Base_SetConfig+0x11c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d01f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	4a2a      	ldr	r2, [pc, #168]	; (8003b88 <TIM_Base_SetConfig+0x120>)
 8003ade:	4293      	cmp	r3, r2
 8003ae0:	d01b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a29      	ldr	r2, [pc, #164]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d017      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	4a28      	ldr	r2, [pc, #160]	; (8003b90 <TIM_Base_SetConfig+0x128>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d013      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a27      	ldr	r2, [pc, #156]	; (8003b94 <TIM_Base_SetConfig+0x12c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d00f      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a26      	ldr	r2, [pc, #152]	; (8003b98 <TIM_Base_SetConfig+0x130>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00b      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a25      	ldr	r2, [pc, #148]	; (8003b9c <TIM_Base_SetConfig+0x134>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a24      	ldr	r2, [pc, #144]	; (8003ba0 <TIM_Base_SetConfig+0x138>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d003      	beq.n	8003b1a <TIM_Base_SetConfig+0xb2>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a23      	ldr	r2, [pc, #140]	; (8003ba4 <TIM_Base_SetConfig+0x13c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d108      	bne.n	8003b2c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b20:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	695b      	ldr	r3, [r3, #20]
 8003b36:	4313      	orrs	r3, r2
 8003b38:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	689a      	ldr	r2, [r3, #8]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	681a      	ldr	r2, [r3, #0]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <TIM_Base_SetConfig+0x114>)
 8003b54:	4293      	cmp	r3, r2
 8003b56:	d003      	beq.n	8003b60 <TIM_Base_SetConfig+0xf8>
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	4a0c      	ldr	r2, [pc, #48]	; (8003b8c <TIM_Base_SetConfig+0x124>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d103      	bne.n	8003b68 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b60:	683b      	ldr	r3, [r7, #0]
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	615a      	str	r2, [r3, #20]
}
 8003b6e:	bf00      	nop
 8003b70:	3714      	adds	r7, #20
 8003b72:	46bd      	mov	sp, r7
 8003b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b78:	4770      	bx	lr
 8003b7a:	bf00      	nop
 8003b7c:	40010000 	.word	0x40010000
 8003b80:	40000400 	.word	0x40000400
 8003b84:	40000800 	.word	0x40000800
 8003b88:	40000c00 	.word	0x40000c00
 8003b8c:	40010400 	.word	0x40010400
 8003b90:	40014000 	.word	0x40014000
 8003b94:	40014400 	.word	0x40014400
 8003b98:	40014800 	.word	0x40014800
 8003b9c:	40001800 	.word	0x40001800
 8003ba0:	40001c00 	.word	0x40001c00
 8003ba4:	40002000 	.word	0x40002000

08003ba8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b087      	sub	sp, #28
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	6a1b      	ldr	r3, [r3, #32]
 8003bb8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	f023 0201 	bic.w	r2, r3, #1
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	699b      	ldr	r3, [r3, #24]
 8003bca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bd2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	011b      	lsls	r3, r3, #4
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f023 030a 	bic.w	r3, r3, #10
 8003be4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003be6:	697a      	ldr	r2, [r7, #20]
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	697a      	ldr	r2, [r7, #20]
 8003bf8:	621a      	str	r2, [r3, #32]
}
 8003bfa:	bf00      	nop
 8003bfc:	371c      	adds	r7, #28
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c04:	4770      	bx	lr

08003c06 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c06:	b480      	push	{r7}
 8003c08:	b087      	sub	sp, #28
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6a1b      	ldr	r3, [r3, #32]
 8003c16:	f023 0210 	bic.w	r2, r3, #16
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	699b      	ldr	r3, [r3, #24]
 8003c22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6a1b      	ldr	r3, [r3, #32]
 8003c28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c30:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	031b      	lsls	r3, r3, #12
 8003c36:	697a      	ldr	r2, [r7, #20]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c42:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	697a      	ldr	r2, [r7, #20]
 8003c52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	693a      	ldr	r2, [r7, #16]
 8003c58:	621a      	str	r2, [r3, #32]
}
 8003c5a:	bf00      	nop
 8003c5c:	371c      	adds	r7, #28
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c66:	b480      	push	{r7}
 8003c68:	b085      	sub	sp, #20
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c7c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	f043 0307 	orr.w	r3, r3, #7
 8003c88:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68fa      	ldr	r2, [r7, #12]
 8003c8e:	609a      	str	r2, [r3, #8]
}
 8003c90:	bf00      	nop
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b087      	sub	sp, #28
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
 8003ca8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003cb6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	021a      	lsls	r2, r3, #8
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	431a      	orrs	r2, r3
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	4313      	orrs	r3, r2
 8003cc4:	697a      	ldr	r2, [r7, #20]
 8003cc6:	4313      	orrs	r3, r2
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	697a      	ldr	r2, [r7, #20]
 8003cce:	609a      	str	r2, [r3, #8]
}
 8003cd0:	bf00      	nop
 8003cd2:	371c      	adds	r7, #28
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cda:	4770      	bx	lr

08003cdc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b085      	sub	sp, #20
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e06d      	b.n	8003dd0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2202      	movs	r2, #2
 8003d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	685b      	ldr	r3, [r3, #4]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	4a30      	ldr	r2, [pc, #192]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a2f      	ldr	r2, [pc, #188]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d108      	bne.n	8003d3a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d2e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	68fa      	ldr	r2, [r7, #12]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d40:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68fa      	ldr	r2, [r7, #12]
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68fa      	ldr	r2, [r7, #12]
 8003d52:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a20      	ldr	r2, [pc, #128]	; (8003ddc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d022      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d66:	d01d      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003d6e:	4293      	cmp	r3, r2
 8003d70:	d018      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1c      	ldr	r2, [pc, #112]	; (8003de8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d013      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4a1a      	ldr	r2, [pc, #104]	; (8003dec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d00e      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a15      	ldr	r2, [pc, #84]	; (8003de0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d009      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003d96:	4293      	cmp	r3, r2
 8003d98:	d004      	beq.n	8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a15      	ldr	r2, [pc, #84]	; (8003df4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d10c      	bne.n	8003dbe <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003daa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	68ba      	ldr	r2, [r7, #8]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68ba      	ldr	r2, [r7, #8]
 8003dbc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dce:	2300      	movs	r3, #0
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3714      	adds	r7, #20
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40010000 	.word	0x40010000
 8003de0:	40010400 	.word	0x40010400
 8003de4:	40000400 	.word	0x40000400
 8003de8:	40000800 	.word	0x40000800
 8003dec:	40000c00 	.word	0x40000c00
 8003df0:	40014000 	.word	0x40014000
 8003df4:	40001800 	.word	0x40001800

08003df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b083      	sub	sp, #12
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003e14:	bf00      	nop
 8003e16:	370c      	adds	r7, #12
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1e:	4770      	bx	lr

08003e20 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003e20:	b480      	push	{r7}
 8003e22:	b083      	sub	sp, #12
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003e28:	bf00      	nop
 8003e2a:	370c      	adds	r7, #12
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e32:	4770      	bx	lr

08003e34 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e040      	b.n	8003ec8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd f802 	bl	8000e60 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0201 	bic.w	r2, r2, #1
 8003e70:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f8b0 	bl	8003fd8 <UART_SetConfig>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b01      	cmp	r3, #1
 8003e7c:	d101      	bne.n	8003e82 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e022      	b.n	8003ec8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 fb08 	bl	80044a0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	685a      	ldr	r2, [r3, #4]
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e9e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	689a      	ldr	r2, [r3, #8]
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003eae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	681a      	ldr	r2, [r3, #0]
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f042 0201 	orr.w	r2, r2, #1
 8003ebe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003ec0:	6878      	ldr	r0, [r7, #4]
 8003ec2:	f000 fb8f 	bl	80045e4 <UART_CheckIdleState>
 8003ec6:	4603      	mov	r3, r0
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b08a      	sub	sp, #40	; 0x28
 8003ed4:	af02      	add	r7, sp, #8
 8003ed6:	60f8      	str	r0, [r7, #12]
 8003ed8:	60b9      	str	r1, [r7, #8]
 8003eda:	603b      	str	r3, [r7, #0]
 8003edc:	4613      	mov	r3, r2
 8003ede:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ee4:	2b20      	cmp	r3, #32
 8003ee6:	d171      	bne.n	8003fcc <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d002      	beq.n	8003ef4 <HAL_UART_Transmit+0x24>
 8003eee:	88fb      	ldrh	r3, [r7, #6]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d101      	bne.n	8003ef8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003ef4:	2301      	movs	r3, #1
 8003ef6:	e06a      	b.n	8003fce <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2221      	movs	r2, #33	; 0x21
 8003f04:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f06:	f7fd f92d 	bl	8001164 <HAL_GetTick>
 8003f0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	88fa      	ldrh	r2, [r7, #6]
 8003f10:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	88fa      	ldrh	r2, [r7, #6]
 8003f18:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f24:	d108      	bne.n	8003f38 <HAL_UART_Transmit+0x68>
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d104      	bne.n	8003f38 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	61bb      	str	r3, [r7, #24]
 8003f36:	e003      	b.n	8003f40 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003f40:	e02c      	b.n	8003f9c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	9300      	str	r3, [sp, #0]
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	2180      	movs	r1, #128	; 0x80
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f000 fb96 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d001      	beq.n	8003f5c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e038      	b.n	8003fce <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003f5c:	69fb      	ldr	r3, [r7, #28]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d10b      	bne.n	8003f7a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f62:	69bb      	ldr	r3, [r7, #24]
 8003f64:	881b      	ldrh	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f70:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	3302      	adds	r3, #2
 8003f76:	61bb      	str	r3, [r7, #24]
 8003f78:	e007      	b.n	8003f8a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f7a:	69fb      	ldr	r3, [r7, #28]
 8003f7c:	781a      	ldrb	r2, [r3, #0]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003f84:	69fb      	ldr	r3, [r7, #28]
 8003f86:	3301      	adds	r3, #1
 8003f88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	3b01      	subs	r3, #1
 8003f94:	b29a      	uxth	r2, r3
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1cc      	bne.n	8003f42 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	9300      	str	r3, [sp, #0]
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	2140      	movs	r1, #64	; 0x40
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	f000 fb63 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003fbe:	2303      	movs	r3, #3
 8003fc0:	e005      	b.n	8003fce <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	2220      	movs	r2, #32
 8003fc6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
 8003fca:	e000      	b.n	8003fce <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003fcc:	2302      	movs	r3, #2
  }
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3720      	adds	r7, #32
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
	...

08003fd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b088      	sub	sp, #32
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	431a      	orrs	r2, r3
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	695b      	ldr	r3, [r3, #20]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	4313      	orrs	r3, r2
 8003ffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	4ba6      	ldr	r3, [pc, #664]	; (800429c <UART_SetConfig+0x2c4>)
 8004004:	4013      	ands	r3, r2
 8004006:	687a      	ldr	r2, [r7, #4]
 8004008:	6812      	ldr	r2, [r2, #0]
 800400a:	6979      	ldr	r1, [r7, #20]
 800400c:	430b      	orrs	r3, r1
 800400e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685b      	ldr	r3, [r3, #4]
 8004016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	430a      	orrs	r2, r1
 8004024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	697a      	ldr	r2, [r7, #20]
 8004046:	430a      	orrs	r2, r1
 8004048:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a94      	ldr	r2, [pc, #592]	; (80042a0 <UART_SetConfig+0x2c8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d120      	bne.n	8004096 <UART_SetConfig+0xbe>
 8004054:	4b93      	ldr	r3, [pc, #588]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800405a:	f003 0303 	and.w	r3, r3, #3
 800405e:	2b03      	cmp	r3, #3
 8004060:	d816      	bhi.n	8004090 <UART_SetConfig+0xb8>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x90>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	08004079 	.word	0x08004079
 800406c:	08004085 	.word	0x08004085
 8004070:	0800407f 	.word	0x0800407f
 8004074:	0800408b 	.word	0x0800408b
 8004078:	2301      	movs	r3, #1
 800407a:	77fb      	strb	r3, [r7, #31]
 800407c:	e150      	b.n	8004320 <UART_SetConfig+0x348>
 800407e:	2302      	movs	r3, #2
 8004080:	77fb      	strb	r3, [r7, #31]
 8004082:	e14d      	b.n	8004320 <UART_SetConfig+0x348>
 8004084:	2304      	movs	r3, #4
 8004086:	77fb      	strb	r3, [r7, #31]
 8004088:	e14a      	b.n	8004320 <UART_SetConfig+0x348>
 800408a:	2308      	movs	r3, #8
 800408c:	77fb      	strb	r3, [r7, #31]
 800408e:	e147      	b.n	8004320 <UART_SetConfig+0x348>
 8004090:	2310      	movs	r3, #16
 8004092:	77fb      	strb	r3, [r7, #31]
 8004094:	e144      	b.n	8004320 <UART_SetConfig+0x348>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a83      	ldr	r2, [pc, #524]	; (80042a8 <UART_SetConfig+0x2d0>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d132      	bne.n	8004106 <UART_SetConfig+0x12e>
 80040a0:	4b80      	ldr	r3, [pc, #512]	; (80042a4 <UART_SetConfig+0x2cc>)
 80040a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a6:	f003 030c 	and.w	r3, r3, #12
 80040aa:	2b0c      	cmp	r3, #12
 80040ac:	d828      	bhi.n	8004100 <UART_SetConfig+0x128>
 80040ae:	a201      	add	r2, pc, #4	; (adr r2, 80040b4 <UART_SetConfig+0xdc>)
 80040b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040b4:	080040e9 	.word	0x080040e9
 80040b8:	08004101 	.word	0x08004101
 80040bc:	08004101 	.word	0x08004101
 80040c0:	08004101 	.word	0x08004101
 80040c4:	080040f5 	.word	0x080040f5
 80040c8:	08004101 	.word	0x08004101
 80040cc:	08004101 	.word	0x08004101
 80040d0:	08004101 	.word	0x08004101
 80040d4:	080040ef 	.word	0x080040ef
 80040d8:	08004101 	.word	0x08004101
 80040dc:	08004101 	.word	0x08004101
 80040e0:	08004101 	.word	0x08004101
 80040e4:	080040fb 	.word	0x080040fb
 80040e8:	2300      	movs	r3, #0
 80040ea:	77fb      	strb	r3, [r7, #31]
 80040ec:	e118      	b.n	8004320 <UART_SetConfig+0x348>
 80040ee:	2302      	movs	r3, #2
 80040f0:	77fb      	strb	r3, [r7, #31]
 80040f2:	e115      	b.n	8004320 <UART_SetConfig+0x348>
 80040f4:	2304      	movs	r3, #4
 80040f6:	77fb      	strb	r3, [r7, #31]
 80040f8:	e112      	b.n	8004320 <UART_SetConfig+0x348>
 80040fa:	2308      	movs	r3, #8
 80040fc:	77fb      	strb	r3, [r7, #31]
 80040fe:	e10f      	b.n	8004320 <UART_SetConfig+0x348>
 8004100:	2310      	movs	r3, #16
 8004102:	77fb      	strb	r3, [r7, #31]
 8004104:	e10c      	b.n	8004320 <UART_SetConfig+0x348>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a68      	ldr	r2, [pc, #416]	; (80042ac <UART_SetConfig+0x2d4>)
 800410c:	4293      	cmp	r3, r2
 800410e:	d120      	bne.n	8004152 <UART_SetConfig+0x17a>
 8004110:	4b64      	ldr	r3, [pc, #400]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004116:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800411a:	2b30      	cmp	r3, #48	; 0x30
 800411c:	d013      	beq.n	8004146 <UART_SetConfig+0x16e>
 800411e:	2b30      	cmp	r3, #48	; 0x30
 8004120:	d814      	bhi.n	800414c <UART_SetConfig+0x174>
 8004122:	2b20      	cmp	r3, #32
 8004124:	d009      	beq.n	800413a <UART_SetConfig+0x162>
 8004126:	2b20      	cmp	r3, #32
 8004128:	d810      	bhi.n	800414c <UART_SetConfig+0x174>
 800412a:	2b00      	cmp	r3, #0
 800412c:	d002      	beq.n	8004134 <UART_SetConfig+0x15c>
 800412e:	2b10      	cmp	r3, #16
 8004130:	d006      	beq.n	8004140 <UART_SetConfig+0x168>
 8004132:	e00b      	b.n	800414c <UART_SetConfig+0x174>
 8004134:	2300      	movs	r3, #0
 8004136:	77fb      	strb	r3, [r7, #31]
 8004138:	e0f2      	b.n	8004320 <UART_SetConfig+0x348>
 800413a:	2302      	movs	r3, #2
 800413c:	77fb      	strb	r3, [r7, #31]
 800413e:	e0ef      	b.n	8004320 <UART_SetConfig+0x348>
 8004140:	2304      	movs	r3, #4
 8004142:	77fb      	strb	r3, [r7, #31]
 8004144:	e0ec      	b.n	8004320 <UART_SetConfig+0x348>
 8004146:	2308      	movs	r3, #8
 8004148:	77fb      	strb	r3, [r7, #31]
 800414a:	e0e9      	b.n	8004320 <UART_SetConfig+0x348>
 800414c:	2310      	movs	r3, #16
 800414e:	77fb      	strb	r3, [r7, #31]
 8004150:	e0e6      	b.n	8004320 <UART_SetConfig+0x348>
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4a56      	ldr	r2, [pc, #344]	; (80042b0 <UART_SetConfig+0x2d8>)
 8004158:	4293      	cmp	r3, r2
 800415a:	d120      	bne.n	800419e <UART_SetConfig+0x1c6>
 800415c:	4b51      	ldr	r3, [pc, #324]	; (80042a4 <UART_SetConfig+0x2cc>)
 800415e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004166:	2bc0      	cmp	r3, #192	; 0xc0
 8004168:	d013      	beq.n	8004192 <UART_SetConfig+0x1ba>
 800416a:	2bc0      	cmp	r3, #192	; 0xc0
 800416c:	d814      	bhi.n	8004198 <UART_SetConfig+0x1c0>
 800416e:	2b80      	cmp	r3, #128	; 0x80
 8004170:	d009      	beq.n	8004186 <UART_SetConfig+0x1ae>
 8004172:	2b80      	cmp	r3, #128	; 0x80
 8004174:	d810      	bhi.n	8004198 <UART_SetConfig+0x1c0>
 8004176:	2b00      	cmp	r3, #0
 8004178:	d002      	beq.n	8004180 <UART_SetConfig+0x1a8>
 800417a:	2b40      	cmp	r3, #64	; 0x40
 800417c:	d006      	beq.n	800418c <UART_SetConfig+0x1b4>
 800417e:	e00b      	b.n	8004198 <UART_SetConfig+0x1c0>
 8004180:	2300      	movs	r3, #0
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e0cc      	b.n	8004320 <UART_SetConfig+0x348>
 8004186:	2302      	movs	r3, #2
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e0c9      	b.n	8004320 <UART_SetConfig+0x348>
 800418c:	2304      	movs	r3, #4
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e0c6      	b.n	8004320 <UART_SetConfig+0x348>
 8004192:	2308      	movs	r3, #8
 8004194:	77fb      	strb	r3, [r7, #31]
 8004196:	e0c3      	b.n	8004320 <UART_SetConfig+0x348>
 8004198:	2310      	movs	r3, #16
 800419a:	77fb      	strb	r3, [r7, #31]
 800419c:	e0c0      	b.n	8004320 <UART_SetConfig+0x348>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4a44      	ldr	r2, [pc, #272]	; (80042b4 <UART_SetConfig+0x2dc>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d125      	bne.n	80041f4 <UART_SetConfig+0x21c>
 80041a8:	4b3e      	ldr	r3, [pc, #248]	; (80042a4 <UART_SetConfig+0x2cc>)
 80041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041b6:	d017      	beq.n	80041e8 <UART_SetConfig+0x210>
 80041b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041bc:	d817      	bhi.n	80041ee <UART_SetConfig+0x216>
 80041be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c2:	d00b      	beq.n	80041dc <UART_SetConfig+0x204>
 80041c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041c8:	d811      	bhi.n	80041ee <UART_SetConfig+0x216>
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d003      	beq.n	80041d6 <UART_SetConfig+0x1fe>
 80041ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041d2:	d006      	beq.n	80041e2 <UART_SetConfig+0x20a>
 80041d4:	e00b      	b.n	80041ee <UART_SetConfig+0x216>
 80041d6:	2300      	movs	r3, #0
 80041d8:	77fb      	strb	r3, [r7, #31]
 80041da:	e0a1      	b.n	8004320 <UART_SetConfig+0x348>
 80041dc:	2302      	movs	r3, #2
 80041de:	77fb      	strb	r3, [r7, #31]
 80041e0:	e09e      	b.n	8004320 <UART_SetConfig+0x348>
 80041e2:	2304      	movs	r3, #4
 80041e4:	77fb      	strb	r3, [r7, #31]
 80041e6:	e09b      	b.n	8004320 <UART_SetConfig+0x348>
 80041e8:	2308      	movs	r3, #8
 80041ea:	77fb      	strb	r3, [r7, #31]
 80041ec:	e098      	b.n	8004320 <UART_SetConfig+0x348>
 80041ee:	2310      	movs	r3, #16
 80041f0:	77fb      	strb	r3, [r7, #31]
 80041f2:	e095      	b.n	8004320 <UART_SetConfig+0x348>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	4a2f      	ldr	r2, [pc, #188]	; (80042b8 <UART_SetConfig+0x2e0>)
 80041fa:	4293      	cmp	r3, r2
 80041fc:	d125      	bne.n	800424a <UART_SetConfig+0x272>
 80041fe:	4b29      	ldr	r3, [pc, #164]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800420c:	d017      	beq.n	800423e <UART_SetConfig+0x266>
 800420e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004212:	d817      	bhi.n	8004244 <UART_SetConfig+0x26c>
 8004214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004218:	d00b      	beq.n	8004232 <UART_SetConfig+0x25a>
 800421a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800421e:	d811      	bhi.n	8004244 <UART_SetConfig+0x26c>
 8004220:	2b00      	cmp	r3, #0
 8004222:	d003      	beq.n	800422c <UART_SetConfig+0x254>
 8004224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004228:	d006      	beq.n	8004238 <UART_SetConfig+0x260>
 800422a:	e00b      	b.n	8004244 <UART_SetConfig+0x26c>
 800422c:	2301      	movs	r3, #1
 800422e:	77fb      	strb	r3, [r7, #31]
 8004230:	e076      	b.n	8004320 <UART_SetConfig+0x348>
 8004232:	2302      	movs	r3, #2
 8004234:	77fb      	strb	r3, [r7, #31]
 8004236:	e073      	b.n	8004320 <UART_SetConfig+0x348>
 8004238:	2304      	movs	r3, #4
 800423a:	77fb      	strb	r3, [r7, #31]
 800423c:	e070      	b.n	8004320 <UART_SetConfig+0x348>
 800423e:	2308      	movs	r3, #8
 8004240:	77fb      	strb	r3, [r7, #31]
 8004242:	e06d      	b.n	8004320 <UART_SetConfig+0x348>
 8004244:	2310      	movs	r3, #16
 8004246:	77fb      	strb	r3, [r7, #31]
 8004248:	e06a      	b.n	8004320 <UART_SetConfig+0x348>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <UART_SetConfig+0x2e4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d138      	bne.n	80042c6 <UART_SetConfig+0x2ee>
 8004254:	4b13      	ldr	r3, [pc, #76]	; (80042a4 <UART_SetConfig+0x2cc>)
 8004256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800425a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800425e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004262:	d017      	beq.n	8004294 <UART_SetConfig+0x2bc>
 8004264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004268:	d82a      	bhi.n	80042c0 <UART_SetConfig+0x2e8>
 800426a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426e:	d00b      	beq.n	8004288 <UART_SetConfig+0x2b0>
 8004270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004274:	d824      	bhi.n	80042c0 <UART_SetConfig+0x2e8>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d003      	beq.n	8004282 <UART_SetConfig+0x2aa>
 800427a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800427e:	d006      	beq.n	800428e <UART_SetConfig+0x2b6>
 8004280:	e01e      	b.n	80042c0 <UART_SetConfig+0x2e8>
 8004282:	2300      	movs	r3, #0
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e04b      	b.n	8004320 <UART_SetConfig+0x348>
 8004288:	2302      	movs	r3, #2
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e048      	b.n	8004320 <UART_SetConfig+0x348>
 800428e:	2304      	movs	r3, #4
 8004290:	77fb      	strb	r3, [r7, #31]
 8004292:	e045      	b.n	8004320 <UART_SetConfig+0x348>
 8004294:	2308      	movs	r3, #8
 8004296:	77fb      	strb	r3, [r7, #31]
 8004298:	e042      	b.n	8004320 <UART_SetConfig+0x348>
 800429a:	bf00      	nop
 800429c:	efff69f3 	.word	0xefff69f3
 80042a0:	40011000 	.word	0x40011000
 80042a4:	40023800 	.word	0x40023800
 80042a8:	40004400 	.word	0x40004400
 80042ac:	40004800 	.word	0x40004800
 80042b0:	40004c00 	.word	0x40004c00
 80042b4:	40005000 	.word	0x40005000
 80042b8:	40011400 	.word	0x40011400
 80042bc:	40007800 	.word	0x40007800
 80042c0:	2310      	movs	r3, #16
 80042c2:	77fb      	strb	r3, [r7, #31]
 80042c4:	e02c      	b.n	8004320 <UART_SetConfig+0x348>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4a72      	ldr	r2, [pc, #456]	; (8004494 <UART_SetConfig+0x4bc>)
 80042cc:	4293      	cmp	r3, r2
 80042ce:	d125      	bne.n	800431c <UART_SetConfig+0x344>
 80042d0:	4b71      	ldr	r3, [pc, #452]	; (8004498 <UART_SetConfig+0x4c0>)
 80042d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80042d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80042da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042de:	d017      	beq.n	8004310 <UART_SetConfig+0x338>
 80042e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80042e4:	d817      	bhi.n	8004316 <UART_SetConfig+0x33e>
 80042e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ea:	d00b      	beq.n	8004304 <UART_SetConfig+0x32c>
 80042ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042f0:	d811      	bhi.n	8004316 <UART_SetConfig+0x33e>
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d003      	beq.n	80042fe <UART_SetConfig+0x326>
 80042f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042fa:	d006      	beq.n	800430a <UART_SetConfig+0x332>
 80042fc:	e00b      	b.n	8004316 <UART_SetConfig+0x33e>
 80042fe:	2300      	movs	r3, #0
 8004300:	77fb      	strb	r3, [r7, #31]
 8004302:	e00d      	b.n	8004320 <UART_SetConfig+0x348>
 8004304:	2302      	movs	r3, #2
 8004306:	77fb      	strb	r3, [r7, #31]
 8004308:	e00a      	b.n	8004320 <UART_SetConfig+0x348>
 800430a:	2304      	movs	r3, #4
 800430c:	77fb      	strb	r3, [r7, #31]
 800430e:	e007      	b.n	8004320 <UART_SetConfig+0x348>
 8004310:	2308      	movs	r3, #8
 8004312:	77fb      	strb	r3, [r7, #31]
 8004314:	e004      	b.n	8004320 <UART_SetConfig+0x348>
 8004316:	2310      	movs	r3, #16
 8004318:	77fb      	strb	r3, [r7, #31]
 800431a:	e001      	b.n	8004320 <UART_SetConfig+0x348>
 800431c:	2310      	movs	r3, #16
 800431e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	69db      	ldr	r3, [r3, #28]
 8004324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004328:	d15b      	bne.n	80043e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	2b08      	cmp	r3, #8
 800432e:	d828      	bhi.n	8004382 <UART_SetConfig+0x3aa>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x360>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800435d 	.word	0x0800435d
 800433c:	08004365 	.word	0x08004365
 8004340:	0800436d 	.word	0x0800436d
 8004344:	08004383 	.word	0x08004383
 8004348:	08004373 	.word	0x08004373
 800434c:	08004383 	.word	0x08004383
 8004350:	08004383 	.word	0x08004383
 8004354:	08004383 	.word	0x08004383
 8004358:	0800437b 	.word	0x0800437b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7fe fc48 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8004360:	61b8      	str	r0, [r7, #24]
        break;
 8004362:	e013      	b.n	800438c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004364:	f7fe fc58 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8004368:	61b8      	str	r0, [r7, #24]
        break;
 800436a:	e00f      	b.n	800438c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800436c:	4b4b      	ldr	r3, [pc, #300]	; (800449c <UART_SetConfig+0x4c4>)
 800436e:	61bb      	str	r3, [r7, #24]
        break;
 8004370:	e00c      	b.n	800438c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004372:	f7fe fb2b 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 8004376:	61b8      	str	r0, [r7, #24]
        break;
 8004378:	e008      	b.n	800438c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800437a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800437e:	61bb      	str	r3, [r7, #24]
        break;
 8004380:	e004      	b.n	800438c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	77bb      	strb	r3, [r7, #30]
        break;
 800438a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d074      	beq.n	800447c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	005a      	lsls	r2, r3, #1
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	085b      	lsrs	r3, r3, #1
 800439c:	441a      	add	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80043a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	2b0f      	cmp	r3, #15
 80043ac:	d916      	bls.n	80043dc <UART_SetConfig+0x404>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043b4:	d212      	bcs.n	80043dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	b29b      	uxth	r3, r3
 80043ba:	f023 030f 	bic.w	r3, r3, #15
 80043be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	085b      	lsrs	r3, r3, #1
 80043c4:	b29b      	uxth	r3, r3
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	b29a      	uxth	r2, r3
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	89fa      	ldrh	r2, [r7, #14]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	e04f      	b.n	800447c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80043dc:	2301      	movs	r3, #1
 80043de:	77bb      	strb	r3, [r7, #30]
 80043e0:	e04c      	b.n	800447c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043e2:	7ffb      	ldrb	r3, [r7, #31]
 80043e4:	2b08      	cmp	r3, #8
 80043e6:	d828      	bhi.n	800443a <UART_SetConfig+0x462>
 80043e8:	a201      	add	r2, pc, #4	; (adr r2, 80043f0 <UART_SetConfig+0x418>)
 80043ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043ee:	bf00      	nop
 80043f0:	08004415 	.word	0x08004415
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004425 	.word	0x08004425
 80043fc:	0800443b 	.word	0x0800443b
 8004400:	0800442b 	.word	0x0800442b
 8004404:	0800443b 	.word	0x0800443b
 8004408:	0800443b 	.word	0x0800443b
 800440c:	0800443b 	.word	0x0800443b
 8004410:	08004433 	.word	0x08004433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004414:	f7fe fbec 	bl	8002bf0 <HAL_RCC_GetPCLK1Freq>
 8004418:	61b8      	str	r0, [r7, #24]
        break;
 800441a:	e013      	b.n	8004444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7fe fbfc 	bl	8002c18 <HAL_RCC_GetPCLK2Freq>
 8004420:	61b8      	str	r0, [r7, #24]
        break;
 8004422:	e00f      	b.n	8004444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004424:	4b1d      	ldr	r3, [pc, #116]	; (800449c <UART_SetConfig+0x4c4>)
 8004426:	61bb      	str	r3, [r7, #24]
        break;
 8004428:	e00c      	b.n	8004444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800442a:	f7fe facf 	bl	80029cc <HAL_RCC_GetSysClockFreq>
 800442e:	61b8      	str	r0, [r7, #24]
        break;
 8004430:	e008      	b.n	8004444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004436:	61bb      	str	r3, [r7, #24]
        break;
 8004438:	e004      	b.n	8004444 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	77bb      	strb	r3, [r7, #30]
        break;
 8004442:	bf00      	nop
    }

    if (pclk != 0U)
 8004444:	69bb      	ldr	r3, [r7, #24]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d018      	beq.n	800447c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	085a      	lsrs	r2, r3, #1
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	441a      	add	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	fbb2 f3f3 	udiv	r3, r2, r3
 800445c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b0f      	cmp	r3, #15
 8004462:	d909      	bls.n	8004478 <UART_SetConfig+0x4a0>
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800446a:	d205      	bcs.n	8004478 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	b29a      	uxth	r2, r3
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	60da      	str	r2, [r3, #12]
 8004476:	e001      	b.n	800447c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004488:	7fbb      	ldrb	r3, [r7, #30]
}
 800448a:	4618      	mov	r0, r3
 800448c:	3720      	adds	r7, #32
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40007c00 	.word	0x40007c00
 8004498:	40023800 	.word	0x40023800
 800449c:	00f42400 	.word	0x00f42400

080044a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b083      	sub	sp, #12
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ac:	f003 0301 	and.w	r3, r3, #1
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d00a      	beq.n	80044ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	430a      	orrs	r2, r1
 80044c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d00a      	beq.n	800450e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004512:	f003 0308 	and.w	r3, r3, #8
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00a      	beq.n	8004530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	685b      	ldr	r3, [r3, #4]
 8004520:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	430a      	orrs	r2, r1
 800452e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004534:	f003 0310 	and.w	r3, r3, #16
 8004538:	2b00      	cmp	r3, #0
 800453a:	d00a      	beq.n	8004552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	689b      	ldr	r3, [r3, #8]
 8004542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	430a      	orrs	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	f003 0320 	and.w	r3, r3, #32
 800455a:	2b00      	cmp	r3, #0
 800455c:	d00a      	beq.n	8004574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	430a      	orrs	r2, r1
 8004572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	430a      	orrs	r2, r1
 8004594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800459a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800459e:	d10a      	bne.n	80045b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b086      	sub	sp, #24
 80045e8:	af02      	add	r7, sp, #8
 80045ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045f4:	f7fc fdb6 	bl	8001164 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0308 	and.w	r3, r3, #8
 8004604:	2b08      	cmp	r3, #8
 8004606:	d10e      	bne.n	8004626 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f831 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 800461c:	4603      	mov	r3, r0
 800461e:	2b00      	cmp	r3, #0
 8004620:	d001      	beq.n	8004626 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004622:	2303      	movs	r3, #3
 8004624:	e027      	b.n	8004676 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	f003 0304 	and.w	r3, r3, #4
 8004630:	2b04      	cmp	r3, #4
 8004632:	d10e      	bne.n	8004652 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004634:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004638:	9300      	str	r3, [sp, #0]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	2200      	movs	r2, #0
 800463e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	f000 f81b 	bl	800467e <UART_WaitOnFlagUntilTimeout>
 8004648:	4603      	mov	r3, r0
 800464a:	2b00      	cmp	r3, #0
 800464c:	d001      	beq.n	8004652 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800464e:	2303      	movs	r3, #3
 8004650:	e011      	b.n	8004676 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2220      	movs	r2, #32
 8004656:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2200      	movs	r2, #0
 800466a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004674:	2300      	movs	r3, #0
}
 8004676:	4618      	mov	r0, r3
 8004678:	3710      	adds	r7, #16
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800467e:	b580      	push	{r7, lr}
 8004680:	b09c      	sub	sp, #112	; 0x70
 8004682:	af00      	add	r7, sp, #0
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	603b      	str	r3, [r7, #0]
 800468a:	4613      	mov	r3, r2
 800468c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800468e:	e0a7      	b.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004690:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004692:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004696:	f000 80a3 	beq.w	80047e0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800469a:	f7fc fd63 	bl	8001164 <HAL_GetTick>
 800469e:	4602      	mov	r2, r0
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	1ad3      	subs	r3, r2, r3
 80046a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046a6:	429a      	cmp	r2, r3
 80046a8:	d302      	bcc.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d13f      	bne.n	8004730 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046b8:	e853 3f00 	ldrex	r3, [r3]
 80046bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046c4:	667b      	str	r3, [r7, #100]	; 0x64
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	461a      	mov	r2, r3
 80046cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046d6:	e841 2300 	strex	r3, r2, [r1]
 80046da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d1e6      	bne.n	80046b0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3308      	adds	r3, #8
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046ec:	e853 3f00 	ldrex	r3, [r3]
 80046f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80046f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046f4:	f023 0301 	bic.w	r3, r3, #1
 80046f8:	663b      	str	r3, [r7, #96]	; 0x60
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	3308      	adds	r3, #8
 8004700:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004702:	64ba      	str	r2, [r7, #72]	; 0x48
 8004704:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004706:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004708:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800470a:	e841 2300 	strex	r3, r2, [r1]
 800470e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004710:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004712:	2b00      	cmp	r3, #0
 8004714:	d1e5      	bne.n	80046e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2220      	movs	r2, #32
 8004720:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	2200      	movs	r2, #0
 8004728:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800472c:	2303      	movs	r3, #3
 800472e:	e068      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0304 	and.w	r3, r3, #4
 800473a:	2b00      	cmp	r3, #0
 800473c:	d050      	beq.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	69db      	ldr	r3, [r3, #28]
 8004744:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004748:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800474c:	d148      	bne.n	80047e0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004756:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800475e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004760:	e853 3f00 	ldrex	r3, [r3]
 8004764:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004768:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800476c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	461a      	mov	r2, r3
 8004774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004776:	637b      	str	r3, [r7, #52]	; 0x34
 8004778:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800477a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800477c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800477e:	e841 2300 	strex	r3, r2, [r1]
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1e6      	bne.n	8004758 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	3308      	adds	r3, #8
 8004790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	e853 3f00 	ldrex	r3, [r3]
 8004798:	613b      	str	r3, [r7, #16]
   return(result);
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	f023 0301 	bic.w	r3, r3, #1
 80047a0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	3308      	adds	r3, #8
 80047a8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047aa:	623a      	str	r2, [r7, #32]
 80047ac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ae:	69f9      	ldr	r1, [r7, #28]
 80047b0:	6a3a      	ldr	r2, [r7, #32]
 80047b2:	e841 2300 	strex	r3, r2, [r1]
 80047b6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d1e5      	bne.n	800478a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2220      	movs	r2, #32
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2220      	movs	r2, #32
 80047d0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2200      	movs	r2, #0
 80047d8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047dc:	2303      	movs	r3, #3
 80047de:	e010      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	69da      	ldr	r2, [r3, #28]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	4013      	ands	r3, r2
 80047ea:	68ba      	ldr	r2, [r7, #8]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	bf0c      	ite	eq
 80047f0:	2301      	moveq	r3, #1
 80047f2:	2300      	movne	r3, #0
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	461a      	mov	r2, r3
 80047f8:	79fb      	ldrb	r3, [r7, #7]
 80047fa:	429a      	cmp	r2, r3
 80047fc:	f43f af48 	beq.w	8004690 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3770      	adds	r7, #112	; 0x70
 8004806:	46bd      	mov	sp, r7
 8004808:	bd80      	pop	{r7, pc}
	...

0800480c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800480c:	b084      	sub	sp, #16
 800480e:	b580      	push	{r7, lr}
 8004810:	b084      	sub	sp, #16
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
 8004816:	f107 001c 	add.w	r0, r7, #28
 800481a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2b01      	cmp	r3, #1
 8004822:	d120      	bne.n	8004866 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004828:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	68da      	ldr	r2, [r3, #12]
 8004834:	4b20      	ldr	r3, [pc, #128]	; (80048b8 <USB_CoreInit+0xac>)
 8004836:	4013      	ands	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800484a:	2b01      	cmp	r3, #1
 800484c:	d105      	bne.n	800485a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa96 	bl	8004d8c <USB_CoreReset>
 8004860:	4603      	mov	r3, r0
 8004862:	73fb      	strb	r3, [r7, #15]
 8004864:	e010      	b.n	8004888 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	f000 fa8a 	bl	8004d8c <USB_CoreReset>
 8004878:	4603      	mov	r3, r0
 800487a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004880:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004888:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800488a:	2b01      	cmp	r3, #1
 800488c:	d10b      	bne.n	80048a6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	f043 0206 	orr.w	r2, r3, #6
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	689b      	ldr	r3, [r3, #8]
 800489e:	f043 0220 	orr.w	r2, r3, #32
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3710      	adds	r7, #16
 80048ac:	46bd      	mov	sp, r7
 80048ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048b2:	b004      	add	sp, #16
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	ffbdffbf 	.word	0xffbdffbf

080048bc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048bc:	b480      	push	{r7}
 80048be:	b083      	sub	sp, #12
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	f023 0201 	bic.w	r2, r3, #1
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048d0:	2300      	movs	r3, #0
}
 80048d2:	4618      	mov	r0, r3
 80048d4:	370c      	adds	r7, #12
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr

080048de <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b084      	sub	sp, #16
 80048e2:	af00      	add	r7, sp, #0
 80048e4:	6078      	str	r0, [r7, #4]
 80048e6:	460b      	mov	r3, r1
 80048e8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048ea:	2300      	movs	r3, #0
 80048ec:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80048fa:	78fb      	ldrb	r3, [r7, #3]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d115      	bne.n	800492c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	68db      	ldr	r3, [r3, #12]
 8004904:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800490c:	2001      	movs	r0, #1
 800490e:	f7fc fc35 	bl	800117c <HAL_Delay>
      ms++;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	3301      	adds	r3, #1
 8004916:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f000 fa29 	bl	8004d70 <USB_GetMode>
 800491e:	4603      	mov	r3, r0
 8004920:	2b01      	cmp	r3, #1
 8004922:	d01e      	beq.n	8004962 <USB_SetCurrentMode+0x84>
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2b31      	cmp	r3, #49	; 0x31
 8004928:	d9f0      	bls.n	800490c <USB_SetCurrentMode+0x2e>
 800492a:	e01a      	b.n	8004962 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800492c:	78fb      	ldrb	r3, [r7, #3]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d115      	bne.n	800495e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800493e:	2001      	movs	r0, #1
 8004940:	f7fc fc1c 	bl	800117c <HAL_Delay>
      ms++;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	3301      	adds	r3, #1
 8004948:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fa10 	bl	8004d70 <USB_GetMode>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d005      	beq.n	8004962 <USB_SetCurrentMode+0x84>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	2b31      	cmp	r3, #49	; 0x31
 800495a:	d9f0      	bls.n	800493e <USB_SetCurrentMode+0x60>
 800495c:	e001      	b.n	8004962 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800495e:	2301      	movs	r3, #1
 8004960:	e005      	b.n	800496e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b32      	cmp	r3, #50	; 0x32
 8004966:	d101      	bne.n	800496c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	e000      	b.n	800496e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800496c:	2300      	movs	r3, #0
}
 800496e:	4618      	mov	r0, r3
 8004970:	3710      	adds	r7, #16
 8004972:	46bd      	mov	sp, r7
 8004974:	bd80      	pop	{r7, pc}
	...

08004978 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004978:	b084      	sub	sp, #16
 800497a:	b580      	push	{r7, lr}
 800497c:	b086      	sub	sp, #24
 800497e:	af00      	add	r7, sp, #0
 8004980:	6078      	str	r0, [r7, #4]
 8004982:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004986:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800498a:	2300      	movs	r3, #0
 800498c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004992:	2300      	movs	r3, #0
 8004994:	613b      	str	r3, [r7, #16]
 8004996:	e009      	b.n	80049ac <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	3340      	adds	r3, #64	; 0x40
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	4413      	add	r3, r2
 80049a2:	2200      	movs	r2, #0
 80049a4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049a6:	693b      	ldr	r3, [r7, #16]
 80049a8:	3301      	adds	r3, #1
 80049aa:	613b      	str	r3, [r7, #16]
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	2b0e      	cmp	r3, #14
 80049b0:	d9f2      	bls.n	8004998 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d11c      	bne.n	80049f2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049c6:	f043 0302 	orr.w	r3, r3, #2
 80049ca:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	e005      	b.n	80049fe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a04:	461a      	mov	r2, r3
 8004a06:	2300      	movs	r3, #0
 8004a08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a10:	4619      	mov	r1, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a18:	461a      	mov	r2, r3
 8004a1a:	680b      	ldr	r3, [r1, #0]
 8004a1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d10c      	bne.n	8004a3e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d104      	bne.n	8004a34 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a2a:	2100      	movs	r1, #0
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f000 f965 	bl	8004cfc <USB_SetDevSpeed>
 8004a32:	e008      	b.n	8004a46 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a34:	2101      	movs	r1, #1
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f960 	bl	8004cfc <USB_SetDevSpeed>
 8004a3c:	e003      	b.n	8004a46 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a3e:	2103      	movs	r1, #3
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 f95b 	bl	8004cfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a46:	2110      	movs	r1, #16
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f8f3 	bl	8004c34 <USB_FlushTxFifo>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d001      	beq.n	8004a58 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f91f 	bl	8004c9c <USB_FlushRxFifo>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a6e:	461a      	mov	r2, r3
 8004a70:	2300      	movs	r3, #0
 8004a72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a86:	461a      	mov	r2, r3
 8004a88:	2300      	movs	r3, #0
 8004a8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	e043      	b.n	8004b1a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a92:	693b      	ldr	r3, [r7, #16]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004aa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004aa8:	d118      	bne.n	8004adc <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004aaa:	693b      	ldr	r3, [r7, #16]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10a      	bne.n	8004ac6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	015a      	lsls	r2, r3, #5
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004abc:	461a      	mov	r2, r3
 8004abe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ac2:	6013      	str	r3, [r2, #0]
 8004ac4:	e013      	b.n	8004aee <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ad2:	461a      	mov	r2, r3
 8004ad4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e008      	b.n	8004aee <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	015a      	lsls	r2, r3, #5
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	4413      	add	r3, r2
 8004ae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae8:	461a      	mov	r2, r3
 8004aea:	2300      	movs	r3, #0
 8004aec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	015a      	lsls	r2, r3, #5
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	4413      	add	r3, r2
 8004af6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afa:	461a      	mov	r2, r3
 8004afc:	2300      	movs	r3, #0
 8004afe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	015a      	lsls	r2, r3, #5
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	4413      	add	r3, r2
 8004b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	3301      	adds	r3, #1
 8004b18:	613b      	str	r3, [r7, #16]
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	693a      	ldr	r2, [r7, #16]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d3b7      	bcc.n	8004a92 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b22:	2300      	movs	r3, #0
 8004b24:	613b      	str	r3, [r7, #16]
 8004b26:	e043      	b.n	8004bb0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	015a      	lsls	r2, r3, #5
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4413      	add	r3, r2
 8004b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b3e:	d118      	bne.n	8004b72 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d10a      	bne.n	8004b5c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	015a      	lsls	r2, r3, #5
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4413      	add	r3, r2
 8004b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b52:	461a      	mov	r2, r3
 8004b54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b58:	6013      	str	r3, [r2, #0]
 8004b5a:	e013      	b.n	8004b84 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	015a      	lsls	r2, r3, #5
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	4413      	add	r3, r2
 8004b64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b68:	461a      	mov	r2, r3
 8004b6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b6e:	6013      	str	r3, [r2, #0]
 8004b70:	e008      	b.n	8004b84 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	015a      	lsls	r2, r3, #5
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4413      	add	r3, r2
 8004b7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b7e:	461a      	mov	r2, r3
 8004b80:	2300      	movs	r3, #0
 8004b82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	015a      	lsls	r2, r3, #5
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b90:	461a      	mov	r2, r3
 8004b92:	2300      	movs	r3, #0
 8004b94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	015a      	lsls	r2, r3, #5
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	4413      	add	r3, r2
 8004b9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004ba8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	3301      	adds	r3, #1
 8004bae:	613b      	str	r3, [r7, #16]
 8004bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb2:	693a      	ldr	r2, [r7, #16]
 8004bb4:	429a      	cmp	r2, r3
 8004bb6:	d3b7      	bcc.n	8004b28 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004bd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d105      	bne.n	8004bec <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	699b      	ldr	r3, [r3, #24]
 8004be4:	f043 0210 	orr.w	r2, r3, #16
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	699a      	ldr	r2, [r3, #24]
 8004bf0:	4b0e      	ldr	r3, [pc, #56]	; (8004c2c <USB_DevInit+0x2b4>)
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	687a      	ldr	r2, [r7, #4]
 8004bf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004bf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d005      	beq.n	8004c0a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	f043 0208 	orr.w	r2, r3, #8
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d105      	bne.n	8004c1c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	699a      	ldr	r2, [r3, #24]
 8004c14:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <USB_DevInit+0x2b8>)
 8004c16:	4313      	orrs	r3, r2
 8004c18:	687a      	ldr	r2, [r7, #4]
 8004c1a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c1e:	4618      	mov	r0, r3
 8004c20:	3718      	adds	r7, #24
 8004c22:	46bd      	mov	sp, r7
 8004c24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c28:	b004      	add	sp, #16
 8004c2a:	4770      	bx	lr
 8004c2c:	803c3800 	.word	0x803c3800
 8004c30:	40000004 	.word	0x40000004

08004c34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	3301      	adds	r3, #1
 8004c46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	4a13      	ldr	r2, [pc, #76]	; (8004c98 <USB_FlushTxFifo+0x64>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d901      	bls.n	8004c54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c50:	2303      	movs	r3, #3
 8004c52:	e01b      	b.n	8004c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	daf2      	bge.n	8004c42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c5c:	2300      	movs	r3, #0
 8004c5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	019b      	lsls	r3, r3, #6
 8004c64:	f043 0220 	orr.w	r2, r3, #32
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a08      	ldr	r2, [pc, #32]	; (8004c98 <USB_FlushTxFifo+0x64>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e006      	b.n	8004c8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	f003 0320 	and.w	r3, r3, #32
 8004c86:	2b20      	cmp	r3, #32
 8004c88:	d0f0      	beq.n	8004c6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c8a:	2300      	movs	r3, #0
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3714      	adds	r7, #20
 8004c90:	46bd      	mov	sp, r7
 8004c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c96:	4770      	bx	lr
 8004c98:	00030d40 	.word	0x00030d40

08004c9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b085      	sub	sp, #20
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	3301      	adds	r3, #1
 8004cac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4a11      	ldr	r2, [pc, #68]	; (8004cf8 <USB_FlushRxFifo+0x5c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d901      	bls.n	8004cba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e018      	b.n	8004cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	daf2      	bge.n	8004ca8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	2210      	movs	r2, #16
 8004cca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	4a08      	ldr	r2, [pc, #32]	; (8004cf8 <USB_FlushRxFifo+0x5c>)
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d901      	bls.n	8004cde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	e006      	b.n	8004cec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b10      	cmp	r3, #16
 8004ce8:	d0f0      	beq.n	8004ccc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3714      	adds	r7, #20
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	00030d40 	.word	0x00030d40

08004cfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
 8004d04:	460b      	mov	r3, r1
 8004d06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	78fb      	ldrb	r3, [r7, #3]
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3714      	adds	r7, #20
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b085      	sub	sp, #20
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	68fa      	ldr	r2, [r7, #12]
 8004d44:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d48:	f023 0303 	bic.w	r3, r3, #3
 8004d4c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d5c:	f043 0302 	orr.w	r3, r3, #2
 8004d60:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b083      	sub	sp, #12
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
}
 8004d80:	4618      	mov	r0, r3
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b085      	sub	sp, #20
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	3301      	adds	r3, #1
 8004d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	4a13      	ldr	r2, [pc, #76]	; (8004df0 <USB_CoreReset+0x64>)
 8004da2:	4293      	cmp	r3, r2
 8004da4:	d901      	bls.n	8004daa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004da6:	2303      	movs	r3, #3
 8004da8:	e01b      	b.n	8004de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	daf2      	bge.n	8004d98 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004db2:	2300      	movs	r3, #0
 8004db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	f043 0201 	orr.w	r2, r3, #1
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	3301      	adds	r3, #1
 8004dc6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4a09      	ldr	r2, [pc, #36]	; (8004df0 <USB_CoreReset+0x64>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d901      	bls.n	8004dd4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e006      	b.n	8004de2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	f003 0301 	and.w	r3, r3, #1
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d0f0      	beq.n	8004dc2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3714      	adds	r7, #20
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
 8004dee:	bf00      	nop
 8004df0:	00030d40 	.word	0x00030d40

08004df4 <siprintf>:
 8004df4:	b40e      	push	{r1, r2, r3}
 8004df6:	b500      	push	{lr}
 8004df8:	b09c      	sub	sp, #112	; 0x70
 8004dfa:	ab1d      	add	r3, sp, #116	; 0x74
 8004dfc:	9002      	str	r0, [sp, #8]
 8004dfe:	9006      	str	r0, [sp, #24]
 8004e00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004e04:	4809      	ldr	r0, [pc, #36]	; (8004e2c <siprintf+0x38>)
 8004e06:	9107      	str	r1, [sp, #28]
 8004e08:	9104      	str	r1, [sp, #16]
 8004e0a:	4909      	ldr	r1, [pc, #36]	; (8004e30 <siprintf+0x3c>)
 8004e0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004e10:	9105      	str	r1, [sp, #20]
 8004e12:	6800      	ldr	r0, [r0, #0]
 8004e14:	9301      	str	r3, [sp, #4]
 8004e16:	a902      	add	r1, sp, #8
 8004e18:	f000 f992 	bl	8005140 <_svfiprintf_r>
 8004e1c:	9b02      	ldr	r3, [sp, #8]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
 8004e22:	b01c      	add	sp, #112	; 0x70
 8004e24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004e28:	b003      	add	sp, #12
 8004e2a:	4770      	bx	lr
 8004e2c:	20000058 	.word	0x20000058
 8004e30:	ffff0208 	.word	0xffff0208

08004e34 <memset>:
 8004e34:	4402      	add	r2, r0
 8004e36:	4603      	mov	r3, r0
 8004e38:	4293      	cmp	r3, r2
 8004e3a:	d100      	bne.n	8004e3e <memset+0xa>
 8004e3c:	4770      	bx	lr
 8004e3e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e42:	e7f9      	b.n	8004e38 <memset+0x4>

08004e44 <__errno>:
 8004e44:	4b01      	ldr	r3, [pc, #4]	; (8004e4c <__errno+0x8>)
 8004e46:	6818      	ldr	r0, [r3, #0]
 8004e48:	4770      	bx	lr
 8004e4a:	bf00      	nop
 8004e4c:	20000058 	.word	0x20000058

08004e50 <__libc_init_array>:
 8004e50:	b570      	push	{r4, r5, r6, lr}
 8004e52:	4d0d      	ldr	r5, [pc, #52]	; (8004e88 <__libc_init_array+0x38>)
 8004e54:	4c0d      	ldr	r4, [pc, #52]	; (8004e8c <__libc_init_array+0x3c>)
 8004e56:	1b64      	subs	r4, r4, r5
 8004e58:	10a4      	asrs	r4, r4, #2
 8004e5a:	2600      	movs	r6, #0
 8004e5c:	42a6      	cmp	r6, r4
 8004e5e:	d109      	bne.n	8004e74 <__libc_init_array+0x24>
 8004e60:	4d0b      	ldr	r5, [pc, #44]	; (8004e90 <__libc_init_array+0x40>)
 8004e62:	4c0c      	ldr	r4, [pc, #48]	; (8004e94 <__libc_init_array+0x44>)
 8004e64:	f000 fc6a 	bl	800573c <_init>
 8004e68:	1b64      	subs	r4, r4, r5
 8004e6a:	10a4      	asrs	r4, r4, #2
 8004e6c:	2600      	movs	r6, #0
 8004e6e:	42a6      	cmp	r6, r4
 8004e70:	d105      	bne.n	8004e7e <__libc_init_array+0x2e>
 8004e72:	bd70      	pop	{r4, r5, r6, pc}
 8004e74:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e78:	4798      	blx	r3
 8004e7a:	3601      	adds	r6, #1
 8004e7c:	e7ee      	b.n	8004e5c <__libc_init_array+0xc>
 8004e7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e82:	4798      	blx	r3
 8004e84:	3601      	adds	r6, #1
 8004e86:	e7f2      	b.n	8004e6e <__libc_init_array+0x1e>
 8004e88:	080057c8 	.word	0x080057c8
 8004e8c:	080057c8 	.word	0x080057c8
 8004e90:	080057c8 	.word	0x080057c8
 8004e94:	080057cc 	.word	0x080057cc

08004e98 <__retarget_lock_acquire_recursive>:
 8004e98:	4770      	bx	lr

08004e9a <__retarget_lock_release_recursive>:
 8004e9a:	4770      	bx	lr

08004e9c <_free_r>:
 8004e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004e9e:	2900      	cmp	r1, #0
 8004ea0:	d044      	beq.n	8004f2c <_free_r+0x90>
 8004ea2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004ea6:	9001      	str	r0, [sp, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	f1a1 0404 	sub.w	r4, r1, #4
 8004eae:	bfb8      	it	lt
 8004eb0:	18e4      	addlt	r4, r4, r3
 8004eb2:	f000 f8df 	bl	8005074 <__malloc_lock>
 8004eb6:	4a1e      	ldr	r2, [pc, #120]	; (8004f30 <_free_r+0x94>)
 8004eb8:	9801      	ldr	r0, [sp, #4]
 8004eba:	6813      	ldr	r3, [r2, #0]
 8004ebc:	b933      	cbnz	r3, 8004ecc <_free_r+0x30>
 8004ebe:	6063      	str	r3, [r4, #4]
 8004ec0:	6014      	str	r4, [r2, #0]
 8004ec2:	b003      	add	sp, #12
 8004ec4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004ec8:	f000 b8da 	b.w	8005080 <__malloc_unlock>
 8004ecc:	42a3      	cmp	r3, r4
 8004ece:	d908      	bls.n	8004ee2 <_free_r+0x46>
 8004ed0:	6825      	ldr	r5, [r4, #0]
 8004ed2:	1961      	adds	r1, r4, r5
 8004ed4:	428b      	cmp	r3, r1
 8004ed6:	bf01      	itttt	eq
 8004ed8:	6819      	ldreq	r1, [r3, #0]
 8004eda:	685b      	ldreq	r3, [r3, #4]
 8004edc:	1949      	addeq	r1, r1, r5
 8004ede:	6021      	streq	r1, [r4, #0]
 8004ee0:	e7ed      	b.n	8004ebe <_free_r+0x22>
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	b10b      	cbz	r3, 8004eec <_free_r+0x50>
 8004ee8:	42a3      	cmp	r3, r4
 8004eea:	d9fa      	bls.n	8004ee2 <_free_r+0x46>
 8004eec:	6811      	ldr	r1, [r2, #0]
 8004eee:	1855      	adds	r5, r2, r1
 8004ef0:	42a5      	cmp	r5, r4
 8004ef2:	d10b      	bne.n	8004f0c <_free_r+0x70>
 8004ef4:	6824      	ldr	r4, [r4, #0]
 8004ef6:	4421      	add	r1, r4
 8004ef8:	1854      	adds	r4, r2, r1
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	6011      	str	r1, [r2, #0]
 8004efe:	d1e0      	bne.n	8004ec2 <_free_r+0x26>
 8004f00:	681c      	ldr	r4, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	6053      	str	r3, [r2, #4]
 8004f06:	440c      	add	r4, r1
 8004f08:	6014      	str	r4, [r2, #0]
 8004f0a:	e7da      	b.n	8004ec2 <_free_r+0x26>
 8004f0c:	d902      	bls.n	8004f14 <_free_r+0x78>
 8004f0e:	230c      	movs	r3, #12
 8004f10:	6003      	str	r3, [r0, #0]
 8004f12:	e7d6      	b.n	8004ec2 <_free_r+0x26>
 8004f14:	6825      	ldr	r5, [r4, #0]
 8004f16:	1961      	adds	r1, r4, r5
 8004f18:	428b      	cmp	r3, r1
 8004f1a:	bf04      	itt	eq
 8004f1c:	6819      	ldreq	r1, [r3, #0]
 8004f1e:	685b      	ldreq	r3, [r3, #4]
 8004f20:	6063      	str	r3, [r4, #4]
 8004f22:	bf04      	itt	eq
 8004f24:	1949      	addeq	r1, r1, r5
 8004f26:	6021      	streq	r1, [r4, #0]
 8004f28:	6054      	str	r4, [r2, #4]
 8004f2a:	e7ca      	b.n	8004ec2 <_free_r+0x26>
 8004f2c:	b003      	add	sp, #12
 8004f2e:	bd30      	pop	{r4, r5, pc}
 8004f30:	20000834 	.word	0x20000834

08004f34 <sbrk_aligned>:
 8004f34:	b570      	push	{r4, r5, r6, lr}
 8004f36:	4e0e      	ldr	r6, [pc, #56]	; (8004f70 <sbrk_aligned+0x3c>)
 8004f38:	460c      	mov	r4, r1
 8004f3a:	6831      	ldr	r1, [r6, #0]
 8004f3c:	4605      	mov	r5, r0
 8004f3e:	b911      	cbnz	r1, 8004f46 <sbrk_aligned+0x12>
 8004f40:	f000 fba6 	bl	8005690 <_sbrk_r>
 8004f44:	6030      	str	r0, [r6, #0]
 8004f46:	4621      	mov	r1, r4
 8004f48:	4628      	mov	r0, r5
 8004f4a:	f000 fba1 	bl	8005690 <_sbrk_r>
 8004f4e:	1c43      	adds	r3, r0, #1
 8004f50:	d00a      	beq.n	8004f68 <sbrk_aligned+0x34>
 8004f52:	1cc4      	adds	r4, r0, #3
 8004f54:	f024 0403 	bic.w	r4, r4, #3
 8004f58:	42a0      	cmp	r0, r4
 8004f5a:	d007      	beq.n	8004f6c <sbrk_aligned+0x38>
 8004f5c:	1a21      	subs	r1, r4, r0
 8004f5e:	4628      	mov	r0, r5
 8004f60:	f000 fb96 	bl	8005690 <_sbrk_r>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d101      	bne.n	8004f6c <sbrk_aligned+0x38>
 8004f68:	f04f 34ff 	mov.w	r4, #4294967295
 8004f6c:	4620      	mov	r0, r4
 8004f6e:	bd70      	pop	{r4, r5, r6, pc}
 8004f70:	20000838 	.word	0x20000838

08004f74 <_malloc_r>:
 8004f74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f78:	1ccd      	adds	r5, r1, #3
 8004f7a:	f025 0503 	bic.w	r5, r5, #3
 8004f7e:	3508      	adds	r5, #8
 8004f80:	2d0c      	cmp	r5, #12
 8004f82:	bf38      	it	cc
 8004f84:	250c      	movcc	r5, #12
 8004f86:	2d00      	cmp	r5, #0
 8004f88:	4607      	mov	r7, r0
 8004f8a:	db01      	blt.n	8004f90 <_malloc_r+0x1c>
 8004f8c:	42a9      	cmp	r1, r5
 8004f8e:	d905      	bls.n	8004f9c <_malloc_r+0x28>
 8004f90:	230c      	movs	r3, #12
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	2600      	movs	r6, #0
 8004f96:	4630      	mov	r0, r6
 8004f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005070 <_malloc_r+0xfc>
 8004fa0:	f000 f868 	bl	8005074 <__malloc_lock>
 8004fa4:	f8d8 3000 	ldr.w	r3, [r8]
 8004fa8:	461c      	mov	r4, r3
 8004faa:	bb5c      	cbnz	r4, 8005004 <_malloc_r+0x90>
 8004fac:	4629      	mov	r1, r5
 8004fae:	4638      	mov	r0, r7
 8004fb0:	f7ff ffc0 	bl	8004f34 <sbrk_aligned>
 8004fb4:	1c43      	adds	r3, r0, #1
 8004fb6:	4604      	mov	r4, r0
 8004fb8:	d155      	bne.n	8005066 <_malloc_r+0xf2>
 8004fba:	f8d8 4000 	ldr.w	r4, [r8]
 8004fbe:	4626      	mov	r6, r4
 8004fc0:	2e00      	cmp	r6, #0
 8004fc2:	d145      	bne.n	8005050 <_malloc_r+0xdc>
 8004fc4:	2c00      	cmp	r4, #0
 8004fc6:	d048      	beq.n	800505a <_malloc_r+0xe6>
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	4631      	mov	r1, r6
 8004fcc:	4638      	mov	r0, r7
 8004fce:	eb04 0903 	add.w	r9, r4, r3
 8004fd2:	f000 fb5d 	bl	8005690 <_sbrk_r>
 8004fd6:	4581      	cmp	r9, r0
 8004fd8:	d13f      	bne.n	800505a <_malloc_r+0xe6>
 8004fda:	6821      	ldr	r1, [r4, #0]
 8004fdc:	1a6d      	subs	r5, r5, r1
 8004fde:	4629      	mov	r1, r5
 8004fe0:	4638      	mov	r0, r7
 8004fe2:	f7ff ffa7 	bl	8004f34 <sbrk_aligned>
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d037      	beq.n	800505a <_malloc_r+0xe6>
 8004fea:	6823      	ldr	r3, [r4, #0]
 8004fec:	442b      	add	r3, r5
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	f8d8 3000 	ldr.w	r3, [r8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d038      	beq.n	800506a <_malloc_r+0xf6>
 8004ff8:	685a      	ldr	r2, [r3, #4]
 8004ffa:	42a2      	cmp	r2, r4
 8004ffc:	d12b      	bne.n	8005056 <_malloc_r+0xe2>
 8004ffe:	2200      	movs	r2, #0
 8005000:	605a      	str	r2, [r3, #4]
 8005002:	e00f      	b.n	8005024 <_malloc_r+0xb0>
 8005004:	6822      	ldr	r2, [r4, #0]
 8005006:	1b52      	subs	r2, r2, r5
 8005008:	d41f      	bmi.n	800504a <_malloc_r+0xd6>
 800500a:	2a0b      	cmp	r2, #11
 800500c:	d917      	bls.n	800503e <_malloc_r+0xca>
 800500e:	1961      	adds	r1, r4, r5
 8005010:	42a3      	cmp	r3, r4
 8005012:	6025      	str	r5, [r4, #0]
 8005014:	bf18      	it	ne
 8005016:	6059      	strne	r1, [r3, #4]
 8005018:	6863      	ldr	r3, [r4, #4]
 800501a:	bf08      	it	eq
 800501c:	f8c8 1000 	streq.w	r1, [r8]
 8005020:	5162      	str	r2, [r4, r5]
 8005022:	604b      	str	r3, [r1, #4]
 8005024:	4638      	mov	r0, r7
 8005026:	f104 060b 	add.w	r6, r4, #11
 800502a:	f000 f829 	bl	8005080 <__malloc_unlock>
 800502e:	f026 0607 	bic.w	r6, r6, #7
 8005032:	1d23      	adds	r3, r4, #4
 8005034:	1af2      	subs	r2, r6, r3
 8005036:	d0ae      	beq.n	8004f96 <_malloc_r+0x22>
 8005038:	1b9b      	subs	r3, r3, r6
 800503a:	50a3      	str	r3, [r4, r2]
 800503c:	e7ab      	b.n	8004f96 <_malloc_r+0x22>
 800503e:	42a3      	cmp	r3, r4
 8005040:	6862      	ldr	r2, [r4, #4]
 8005042:	d1dd      	bne.n	8005000 <_malloc_r+0x8c>
 8005044:	f8c8 2000 	str.w	r2, [r8]
 8005048:	e7ec      	b.n	8005024 <_malloc_r+0xb0>
 800504a:	4623      	mov	r3, r4
 800504c:	6864      	ldr	r4, [r4, #4]
 800504e:	e7ac      	b.n	8004faa <_malloc_r+0x36>
 8005050:	4634      	mov	r4, r6
 8005052:	6876      	ldr	r6, [r6, #4]
 8005054:	e7b4      	b.n	8004fc0 <_malloc_r+0x4c>
 8005056:	4613      	mov	r3, r2
 8005058:	e7cc      	b.n	8004ff4 <_malloc_r+0x80>
 800505a:	230c      	movs	r3, #12
 800505c:	603b      	str	r3, [r7, #0]
 800505e:	4638      	mov	r0, r7
 8005060:	f000 f80e 	bl	8005080 <__malloc_unlock>
 8005064:	e797      	b.n	8004f96 <_malloc_r+0x22>
 8005066:	6025      	str	r5, [r4, #0]
 8005068:	e7dc      	b.n	8005024 <_malloc_r+0xb0>
 800506a:	605b      	str	r3, [r3, #4]
 800506c:	deff      	udf	#255	; 0xff
 800506e:	bf00      	nop
 8005070:	20000834 	.word	0x20000834

08005074 <__malloc_lock>:
 8005074:	4801      	ldr	r0, [pc, #4]	; (800507c <__malloc_lock+0x8>)
 8005076:	f7ff bf0f 	b.w	8004e98 <__retarget_lock_acquire_recursive>
 800507a:	bf00      	nop
 800507c:	20000830 	.word	0x20000830

08005080 <__malloc_unlock>:
 8005080:	4801      	ldr	r0, [pc, #4]	; (8005088 <__malloc_unlock+0x8>)
 8005082:	f7ff bf0a 	b.w	8004e9a <__retarget_lock_release_recursive>
 8005086:	bf00      	nop
 8005088:	20000830 	.word	0x20000830

0800508c <__ssputs_r>:
 800508c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005090:	688e      	ldr	r6, [r1, #8]
 8005092:	461f      	mov	r7, r3
 8005094:	42be      	cmp	r6, r7
 8005096:	680b      	ldr	r3, [r1, #0]
 8005098:	4682      	mov	sl, r0
 800509a:	460c      	mov	r4, r1
 800509c:	4690      	mov	r8, r2
 800509e:	d82c      	bhi.n	80050fa <__ssputs_r+0x6e>
 80050a0:	898a      	ldrh	r2, [r1, #12]
 80050a2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80050a6:	d026      	beq.n	80050f6 <__ssputs_r+0x6a>
 80050a8:	6965      	ldr	r5, [r4, #20]
 80050aa:	6909      	ldr	r1, [r1, #16]
 80050ac:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80050b0:	eba3 0901 	sub.w	r9, r3, r1
 80050b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80050b8:	1c7b      	adds	r3, r7, #1
 80050ba:	444b      	add	r3, r9
 80050bc:	106d      	asrs	r5, r5, #1
 80050be:	429d      	cmp	r5, r3
 80050c0:	bf38      	it	cc
 80050c2:	461d      	movcc	r5, r3
 80050c4:	0553      	lsls	r3, r2, #21
 80050c6:	d527      	bpl.n	8005118 <__ssputs_r+0x8c>
 80050c8:	4629      	mov	r1, r5
 80050ca:	f7ff ff53 	bl	8004f74 <_malloc_r>
 80050ce:	4606      	mov	r6, r0
 80050d0:	b360      	cbz	r0, 800512c <__ssputs_r+0xa0>
 80050d2:	6921      	ldr	r1, [r4, #16]
 80050d4:	464a      	mov	r2, r9
 80050d6:	f000 faeb 	bl	80056b0 <memcpy>
 80050da:	89a3      	ldrh	r3, [r4, #12]
 80050dc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80050e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050e4:	81a3      	strh	r3, [r4, #12]
 80050e6:	6126      	str	r6, [r4, #16]
 80050e8:	6165      	str	r5, [r4, #20]
 80050ea:	444e      	add	r6, r9
 80050ec:	eba5 0509 	sub.w	r5, r5, r9
 80050f0:	6026      	str	r6, [r4, #0]
 80050f2:	60a5      	str	r5, [r4, #8]
 80050f4:	463e      	mov	r6, r7
 80050f6:	42be      	cmp	r6, r7
 80050f8:	d900      	bls.n	80050fc <__ssputs_r+0x70>
 80050fa:	463e      	mov	r6, r7
 80050fc:	6820      	ldr	r0, [r4, #0]
 80050fe:	4632      	mov	r2, r6
 8005100:	4641      	mov	r1, r8
 8005102:	f000 faab 	bl	800565c <memmove>
 8005106:	68a3      	ldr	r3, [r4, #8]
 8005108:	1b9b      	subs	r3, r3, r6
 800510a:	60a3      	str	r3, [r4, #8]
 800510c:	6823      	ldr	r3, [r4, #0]
 800510e:	4433      	add	r3, r6
 8005110:	6023      	str	r3, [r4, #0]
 8005112:	2000      	movs	r0, #0
 8005114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005118:	462a      	mov	r2, r5
 800511a:	f000 fad7 	bl	80056cc <_realloc_r>
 800511e:	4606      	mov	r6, r0
 8005120:	2800      	cmp	r0, #0
 8005122:	d1e0      	bne.n	80050e6 <__ssputs_r+0x5a>
 8005124:	6921      	ldr	r1, [r4, #16]
 8005126:	4650      	mov	r0, sl
 8005128:	f7ff feb8 	bl	8004e9c <_free_r>
 800512c:	230c      	movs	r3, #12
 800512e:	f8ca 3000 	str.w	r3, [sl]
 8005132:	89a3      	ldrh	r3, [r4, #12]
 8005134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005138:	81a3      	strh	r3, [r4, #12]
 800513a:	f04f 30ff 	mov.w	r0, #4294967295
 800513e:	e7e9      	b.n	8005114 <__ssputs_r+0x88>

08005140 <_svfiprintf_r>:
 8005140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005144:	4698      	mov	r8, r3
 8005146:	898b      	ldrh	r3, [r1, #12]
 8005148:	061b      	lsls	r3, r3, #24
 800514a:	b09d      	sub	sp, #116	; 0x74
 800514c:	4607      	mov	r7, r0
 800514e:	460d      	mov	r5, r1
 8005150:	4614      	mov	r4, r2
 8005152:	d50e      	bpl.n	8005172 <_svfiprintf_r+0x32>
 8005154:	690b      	ldr	r3, [r1, #16]
 8005156:	b963      	cbnz	r3, 8005172 <_svfiprintf_r+0x32>
 8005158:	2140      	movs	r1, #64	; 0x40
 800515a:	f7ff ff0b 	bl	8004f74 <_malloc_r>
 800515e:	6028      	str	r0, [r5, #0]
 8005160:	6128      	str	r0, [r5, #16]
 8005162:	b920      	cbnz	r0, 800516e <_svfiprintf_r+0x2e>
 8005164:	230c      	movs	r3, #12
 8005166:	603b      	str	r3, [r7, #0]
 8005168:	f04f 30ff 	mov.w	r0, #4294967295
 800516c:	e0d0      	b.n	8005310 <_svfiprintf_r+0x1d0>
 800516e:	2340      	movs	r3, #64	; 0x40
 8005170:	616b      	str	r3, [r5, #20]
 8005172:	2300      	movs	r3, #0
 8005174:	9309      	str	r3, [sp, #36]	; 0x24
 8005176:	2320      	movs	r3, #32
 8005178:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800517c:	f8cd 800c 	str.w	r8, [sp, #12]
 8005180:	2330      	movs	r3, #48	; 0x30
 8005182:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005328 <_svfiprintf_r+0x1e8>
 8005186:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800518a:	f04f 0901 	mov.w	r9, #1
 800518e:	4623      	mov	r3, r4
 8005190:	469a      	mov	sl, r3
 8005192:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005196:	b10a      	cbz	r2, 800519c <_svfiprintf_r+0x5c>
 8005198:	2a25      	cmp	r2, #37	; 0x25
 800519a:	d1f9      	bne.n	8005190 <_svfiprintf_r+0x50>
 800519c:	ebba 0b04 	subs.w	fp, sl, r4
 80051a0:	d00b      	beq.n	80051ba <_svfiprintf_r+0x7a>
 80051a2:	465b      	mov	r3, fp
 80051a4:	4622      	mov	r2, r4
 80051a6:	4629      	mov	r1, r5
 80051a8:	4638      	mov	r0, r7
 80051aa:	f7ff ff6f 	bl	800508c <__ssputs_r>
 80051ae:	3001      	adds	r0, #1
 80051b0:	f000 80a9 	beq.w	8005306 <_svfiprintf_r+0x1c6>
 80051b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80051b6:	445a      	add	r2, fp
 80051b8:	9209      	str	r2, [sp, #36]	; 0x24
 80051ba:	f89a 3000 	ldrb.w	r3, [sl]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f000 80a1 	beq.w	8005306 <_svfiprintf_r+0x1c6>
 80051c4:	2300      	movs	r3, #0
 80051c6:	f04f 32ff 	mov.w	r2, #4294967295
 80051ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80051ce:	f10a 0a01 	add.w	sl, sl, #1
 80051d2:	9304      	str	r3, [sp, #16]
 80051d4:	9307      	str	r3, [sp, #28]
 80051d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80051da:	931a      	str	r3, [sp, #104]	; 0x68
 80051dc:	4654      	mov	r4, sl
 80051de:	2205      	movs	r2, #5
 80051e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80051e4:	4850      	ldr	r0, [pc, #320]	; (8005328 <_svfiprintf_r+0x1e8>)
 80051e6:	f7fb f833 	bl	8000250 <memchr>
 80051ea:	9a04      	ldr	r2, [sp, #16]
 80051ec:	b9d8      	cbnz	r0, 8005226 <_svfiprintf_r+0xe6>
 80051ee:	06d0      	lsls	r0, r2, #27
 80051f0:	bf44      	itt	mi
 80051f2:	2320      	movmi	r3, #32
 80051f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80051f8:	0711      	lsls	r1, r2, #28
 80051fa:	bf44      	itt	mi
 80051fc:	232b      	movmi	r3, #43	; 0x2b
 80051fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005202:	f89a 3000 	ldrb.w	r3, [sl]
 8005206:	2b2a      	cmp	r3, #42	; 0x2a
 8005208:	d015      	beq.n	8005236 <_svfiprintf_r+0xf6>
 800520a:	9a07      	ldr	r2, [sp, #28]
 800520c:	4654      	mov	r4, sl
 800520e:	2000      	movs	r0, #0
 8005210:	f04f 0c0a 	mov.w	ip, #10
 8005214:	4621      	mov	r1, r4
 8005216:	f811 3b01 	ldrb.w	r3, [r1], #1
 800521a:	3b30      	subs	r3, #48	; 0x30
 800521c:	2b09      	cmp	r3, #9
 800521e:	d94d      	bls.n	80052bc <_svfiprintf_r+0x17c>
 8005220:	b1b0      	cbz	r0, 8005250 <_svfiprintf_r+0x110>
 8005222:	9207      	str	r2, [sp, #28]
 8005224:	e014      	b.n	8005250 <_svfiprintf_r+0x110>
 8005226:	eba0 0308 	sub.w	r3, r0, r8
 800522a:	fa09 f303 	lsl.w	r3, r9, r3
 800522e:	4313      	orrs	r3, r2
 8005230:	9304      	str	r3, [sp, #16]
 8005232:	46a2      	mov	sl, r4
 8005234:	e7d2      	b.n	80051dc <_svfiprintf_r+0x9c>
 8005236:	9b03      	ldr	r3, [sp, #12]
 8005238:	1d19      	adds	r1, r3, #4
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	9103      	str	r1, [sp, #12]
 800523e:	2b00      	cmp	r3, #0
 8005240:	bfbb      	ittet	lt
 8005242:	425b      	neglt	r3, r3
 8005244:	f042 0202 	orrlt.w	r2, r2, #2
 8005248:	9307      	strge	r3, [sp, #28]
 800524a:	9307      	strlt	r3, [sp, #28]
 800524c:	bfb8      	it	lt
 800524e:	9204      	strlt	r2, [sp, #16]
 8005250:	7823      	ldrb	r3, [r4, #0]
 8005252:	2b2e      	cmp	r3, #46	; 0x2e
 8005254:	d10c      	bne.n	8005270 <_svfiprintf_r+0x130>
 8005256:	7863      	ldrb	r3, [r4, #1]
 8005258:	2b2a      	cmp	r3, #42	; 0x2a
 800525a:	d134      	bne.n	80052c6 <_svfiprintf_r+0x186>
 800525c:	9b03      	ldr	r3, [sp, #12]
 800525e:	1d1a      	adds	r2, r3, #4
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	9203      	str	r2, [sp, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	bfb8      	it	lt
 8005268:	f04f 33ff 	movlt.w	r3, #4294967295
 800526c:	3402      	adds	r4, #2
 800526e:	9305      	str	r3, [sp, #20]
 8005270:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8005338 <_svfiprintf_r+0x1f8>
 8005274:	7821      	ldrb	r1, [r4, #0]
 8005276:	2203      	movs	r2, #3
 8005278:	4650      	mov	r0, sl
 800527a:	f7fa ffe9 	bl	8000250 <memchr>
 800527e:	b138      	cbz	r0, 8005290 <_svfiprintf_r+0x150>
 8005280:	9b04      	ldr	r3, [sp, #16]
 8005282:	eba0 000a 	sub.w	r0, r0, sl
 8005286:	2240      	movs	r2, #64	; 0x40
 8005288:	4082      	lsls	r2, r0
 800528a:	4313      	orrs	r3, r2
 800528c:	3401      	adds	r4, #1
 800528e:	9304      	str	r3, [sp, #16]
 8005290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005294:	4825      	ldr	r0, [pc, #148]	; (800532c <_svfiprintf_r+0x1ec>)
 8005296:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800529a:	2206      	movs	r2, #6
 800529c:	f7fa ffd8 	bl	8000250 <memchr>
 80052a0:	2800      	cmp	r0, #0
 80052a2:	d038      	beq.n	8005316 <_svfiprintf_r+0x1d6>
 80052a4:	4b22      	ldr	r3, [pc, #136]	; (8005330 <_svfiprintf_r+0x1f0>)
 80052a6:	bb1b      	cbnz	r3, 80052f0 <_svfiprintf_r+0x1b0>
 80052a8:	9b03      	ldr	r3, [sp, #12]
 80052aa:	3307      	adds	r3, #7
 80052ac:	f023 0307 	bic.w	r3, r3, #7
 80052b0:	3308      	adds	r3, #8
 80052b2:	9303      	str	r3, [sp, #12]
 80052b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052b6:	4433      	add	r3, r6
 80052b8:	9309      	str	r3, [sp, #36]	; 0x24
 80052ba:	e768      	b.n	800518e <_svfiprintf_r+0x4e>
 80052bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80052c0:	460c      	mov	r4, r1
 80052c2:	2001      	movs	r0, #1
 80052c4:	e7a6      	b.n	8005214 <_svfiprintf_r+0xd4>
 80052c6:	2300      	movs	r3, #0
 80052c8:	3401      	adds	r4, #1
 80052ca:	9305      	str	r3, [sp, #20]
 80052cc:	4619      	mov	r1, r3
 80052ce:	f04f 0c0a 	mov.w	ip, #10
 80052d2:	4620      	mov	r0, r4
 80052d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80052d8:	3a30      	subs	r2, #48	; 0x30
 80052da:	2a09      	cmp	r2, #9
 80052dc:	d903      	bls.n	80052e6 <_svfiprintf_r+0x1a6>
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d0c6      	beq.n	8005270 <_svfiprintf_r+0x130>
 80052e2:	9105      	str	r1, [sp, #20]
 80052e4:	e7c4      	b.n	8005270 <_svfiprintf_r+0x130>
 80052e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80052ea:	4604      	mov	r4, r0
 80052ec:	2301      	movs	r3, #1
 80052ee:	e7f0      	b.n	80052d2 <_svfiprintf_r+0x192>
 80052f0:	ab03      	add	r3, sp, #12
 80052f2:	9300      	str	r3, [sp, #0]
 80052f4:	462a      	mov	r2, r5
 80052f6:	4b0f      	ldr	r3, [pc, #60]	; (8005334 <_svfiprintf_r+0x1f4>)
 80052f8:	a904      	add	r1, sp, #16
 80052fa:	4638      	mov	r0, r7
 80052fc:	f3af 8000 	nop.w
 8005300:	1c42      	adds	r2, r0, #1
 8005302:	4606      	mov	r6, r0
 8005304:	d1d6      	bne.n	80052b4 <_svfiprintf_r+0x174>
 8005306:	89ab      	ldrh	r3, [r5, #12]
 8005308:	065b      	lsls	r3, r3, #25
 800530a:	f53f af2d 	bmi.w	8005168 <_svfiprintf_r+0x28>
 800530e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005310:	b01d      	add	sp, #116	; 0x74
 8005312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005316:	ab03      	add	r3, sp, #12
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	462a      	mov	r2, r5
 800531c:	4b05      	ldr	r3, [pc, #20]	; (8005334 <_svfiprintf_r+0x1f4>)
 800531e:	a904      	add	r1, sp, #16
 8005320:	4638      	mov	r0, r7
 8005322:	f000 f879 	bl	8005418 <_printf_i>
 8005326:	e7eb      	b.n	8005300 <_svfiprintf_r+0x1c0>
 8005328:	0800578c 	.word	0x0800578c
 800532c:	08005796 	.word	0x08005796
 8005330:	00000000 	.word	0x00000000
 8005334:	0800508d 	.word	0x0800508d
 8005338:	08005792 	.word	0x08005792

0800533c <_printf_common>:
 800533c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005340:	4616      	mov	r6, r2
 8005342:	4699      	mov	r9, r3
 8005344:	688a      	ldr	r2, [r1, #8]
 8005346:	690b      	ldr	r3, [r1, #16]
 8005348:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800534c:	4293      	cmp	r3, r2
 800534e:	bfb8      	it	lt
 8005350:	4613      	movlt	r3, r2
 8005352:	6033      	str	r3, [r6, #0]
 8005354:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005358:	4607      	mov	r7, r0
 800535a:	460c      	mov	r4, r1
 800535c:	b10a      	cbz	r2, 8005362 <_printf_common+0x26>
 800535e:	3301      	adds	r3, #1
 8005360:	6033      	str	r3, [r6, #0]
 8005362:	6823      	ldr	r3, [r4, #0]
 8005364:	0699      	lsls	r1, r3, #26
 8005366:	bf42      	ittt	mi
 8005368:	6833      	ldrmi	r3, [r6, #0]
 800536a:	3302      	addmi	r3, #2
 800536c:	6033      	strmi	r3, [r6, #0]
 800536e:	6825      	ldr	r5, [r4, #0]
 8005370:	f015 0506 	ands.w	r5, r5, #6
 8005374:	d106      	bne.n	8005384 <_printf_common+0x48>
 8005376:	f104 0a19 	add.w	sl, r4, #25
 800537a:	68e3      	ldr	r3, [r4, #12]
 800537c:	6832      	ldr	r2, [r6, #0]
 800537e:	1a9b      	subs	r3, r3, r2
 8005380:	42ab      	cmp	r3, r5
 8005382:	dc26      	bgt.n	80053d2 <_printf_common+0x96>
 8005384:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005388:	1e13      	subs	r3, r2, #0
 800538a:	6822      	ldr	r2, [r4, #0]
 800538c:	bf18      	it	ne
 800538e:	2301      	movne	r3, #1
 8005390:	0692      	lsls	r2, r2, #26
 8005392:	d42b      	bmi.n	80053ec <_printf_common+0xb0>
 8005394:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005398:	4649      	mov	r1, r9
 800539a:	4638      	mov	r0, r7
 800539c:	47c0      	blx	r8
 800539e:	3001      	adds	r0, #1
 80053a0:	d01e      	beq.n	80053e0 <_printf_common+0xa4>
 80053a2:	6823      	ldr	r3, [r4, #0]
 80053a4:	6922      	ldr	r2, [r4, #16]
 80053a6:	f003 0306 	and.w	r3, r3, #6
 80053aa:	2b04      	cmp	r3, #4
 80053ac:	bf02      	ittt	eq
 80053ae:	68e5      	ldreq	r5, [r4, #12]
 80053b0:	6833      	ldreq	r3, [r6, #0]
 80053b2:	1aed      	subeq	r5, r5, r3
 80053b4:	68a3      	ldr	r3, [r4, #8]
 80053b6:	bf0c      	ite	eq
 80053b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80053bc:	2500      	movne	r5, #0
 80053be:	4293      	cmp	r3, r2
 80053c0:	bfc4      	itt	gt
 80053c2:	1a9b      	subgt	r3, r3, r2
 80053c4:	18ed      	addgt	r5, r5, r3
 80053c6:	2600      	movs	r6, #0
 80053c8:	341a      	adds	r4, #26
 80053ca:	42b5      	cmp	r5, r6
 80053cc:	d11a      	bne.n	8005404 <_printf_common+0xc8>
 80053ce:	2000      	movs	r0, #0
 80053d0:	e008      	b.n	80053e4 <_printf_common+0xa8>
 80053d2:	2301      	movs	r3, #1
 80053d4:	4652      	mov	r2, sl
 80053d6:	4649      	mov	r1, r9
 80053d8:	4638      	mov	r0, r7
 80053da:	47c0      	blx	r8
 80053dc:	3001      	adds	r0, #1
 80053de:	d103      	bne.n	80053e8 <_printf_common+0xac>
 80053e0:	f04f 30ff 	mov.w	r0, #4294967295
 80053e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053e8:	3501      	adds	r5, #1
 80053ea:	e7c6      	b.n	800537a <_printf_common+0x3e>
 80053ec:	18e1      	adds	r1, r4, r3
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	2030      	movs	r0, #48	; 0x30
 80053f2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053f6:	4422      	add	r2, r4
 80053f8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053fc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005400:	3302      	adds	r3, #2
 8005402:	e7c7      	b.n	8005394 <_printf_common+0x58>
 8005404:	2301      	movs	r3, #1
 8005406:	4622      	mov	r2, r4
 8005408:	4649      	mov	r1, r9
 800540a:	4638      	mov	r0, r7
 800540c:	47c0      	blx	r8
 800540e:	3001      	adds	r0, #1
 8005410:	d0e6      	beq.n	80053e0 <_printf_common+0xa4>
 8005412:	3601      	adds	r6, #1
 8005414:	e7d9      	b.n	80053ca <_printf_common+0x8e>
	...

08005418 <_printf_i>:
 8005418:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800541c:	7e0f      	ldrb	r7, [r1, #24]
 800541e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005420:	2f78      	cmp	r7, #120	; 0x78
 8005422:	4691      	mov	r9, r2
 8005424:	4680      	mov	r8, r0
 8005426:	460c      	mov	r4, r1
 8005428:	469a      	mov	sl, r3
 800542a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800542e:	d807      	bhi.n	8005440 <_printf_i+0x28>
 8005430:	2f62      	cmp	r7, #98	; 0x62
 8005432:	d80a      	bhi.n	800544a <_printf_i+0x32>
 8005434:	2f00      	cmp	r7, #0
 8005436:	f000 80d4 	beq.w	80055e2 <_printf_i+0x1ca>
 800543a:	2f58      	cmp	r7, #88	; 0x58
 800543c:	f000 80c0 	beq.w	80055c0 <_printf_i+0x1a8>
 8005440:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005444:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005448:	e03a      	b.n	80054c0 <_printf_i+0xa8>
 800544a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800544e:	2b15      	cmp	r3, #21
 8005450:	d8f6      	bhi.n	8005440 <_printf_i+0x28>
 8005452:	a101      	add	r1, pc, #4	; (adr r1, 8005458 <_printf_i+0x40>)
 8005454:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005458:	080054b1 	.word	0x080054b1
 800545c:	080054c5 	.word	0x080054c5
 8005460:	08005441 	.word	0x08005441
 8005464:	08005441 	.word	0x08005441
 8005468:	08005441 	.word	0x08005441
 800546c:	08005441 	.word	0x08005441
 8005470:	080054c5 	.word	0x080054c5
 8005474:	08005441 	.word	0x08005441
 8005478:	08005441 	.word	0x08005441
 800547c:	08005441 	.word	0x08005441
 8005480:	08005441 	.word	0x08005441
 8005484:	080055c9 	.word	0x080055c9
 8005488:	080054f1 	.word	0x080054f1
 800548c:	08005583 	.word	0x08005583
 8005490:	08005441 	.word	0x08005441
 8005494:	08005441 	.word	0x08005441
 8005498:	080055eb 	.word	0x080055eb
 800549c:	08005441 	.word	0x08005441
 80054a0:	080054f1 	.word	0x080054f1
 80054a4:	08005441 	.word	0x08005441
 80054a8:	08005441 	.word	0x08005441
 80054ac:	0800558b 	.word	0x0800558b
 80054b0:	682b      	ldr	r3, [r5, #0]
 80054b2:	1d1a      	adds	r2, r3, #4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	602a      	str	r2, [r5, #0]
 80054b8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80054bc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80054c0:	2301      	movs	r3, #1
 80054c2:	e09f      	b.n	8005604 <_printf_i+0x1ec>
 80054c4:	6820      	ldr	r0, [r4, #0]
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	0607      	lsls	r7, r0, #24
 80054ca:	f103 0104 	add.w	r1, r3, #4
 80054ce:	6029      	str	r1, [r5, #0]
 80054d0:	d501      	bpl.n	80054d6 <_printf_i+0xbe>
 80054d2:	681e      	ldr	r6, [r3, #0]
 80054d4:	e003      	b.n	80054de <_printf_i+0xc6>
 80054d6:	0646      	lsls	r6, r0, #25
 80054d8:	d5fb      	bpl.n	80054d2 <_printf_i+0xba>
 80054da:	f9b3 6000 	ldrsh.w	r6, [r3]
 80054de:	2e00      	cmp	r6, #0
 80054e0:	da03      	bge.n	80054ea <_printf_i+0xd2>
 80054e2:	232d      	movs	r3, #45	; 0x2d
 80054e4:	4276      	negs	r6, r6
 80054e6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054ea:	485a      	ldr	r0, [pc, #360]	; (8005654 <_printf_i+0x23c>)
 80054ec:	230a      	movs	r3, #10
 80054ee:	e012      	b.n	8005516 <_printf_i+0xfe>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	6820      	ldr	r0, [r4, #0]
 80054f4:	1d19      	adds	r1, r3, #4
 80054f6:	6029      	str	r1, [r5, #0]
 80054f8:	0605      	lsls	r5, r0, #24
 80054fa:	d501      	bpl.n	8005500 <_printf_i+0xe8>
 80054fc:	681e      	ldr	r6, [r3, #0]
 80054fe:	e002      	b.n	8005506 <_printf_i+0xee>
 8005500:	0641      	lsls	r1, r0, #25
 8005502:	d5fb      	bpl.n	80054fc <_printf_i+0xe4>
 8005504:	881e      	ldrh	r6, [r3, #0]
 8005506:	4853      	ldr	r0, [pc, #332]	; (8005654 <_printf_i+0x23c>)
 8005508:	2f6f      	cmp	r7, #111	; 0x6f
 800550a:	bf0c      	ite	eq
 800550c:	2308      	moveq	r3, #8
 800550e:	230a      	movne	r3, #10
 8005510:	2100      	movs	r1, #0
 8005512:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005516:	6865      	ldr	r5, [r4, #4]
 8005518:	60a5      	str	r5, [r4, #8]
 800551a:	2d00      	cmp	r5, #0
 800551c:	bfa2      	ittt	ge
 800551e:	6821      	ldrge	r1, [r4, #0]
 8005520:	f021 0104 	bicge.w	r1, r1, #4
 8005524:	6021      	strge	r1, [r4, #0]
 8005526:	b90e      	cbnz	r6, 800552c <_printf_i+0x114>
 8005528:	2d00      	cmp	r5, #0
 800552a:	d04b      	beq.n	80055c4 <_printf_i+0x1ac>
 800552c:	4615      	mov	r5, r2
 800552e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005532:	fb03 6711 	mls	r7, r3, r1, r6
 8005536:	5dc7      	ldrb	r7, [r0, r7]
 8005538:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800553c:	4637      	mov	r7, r6
 800553e:	42bb      	cmp	r3, r7
 8005540:	460e      	mov	r6, r1
 8005542:	d9f4      	bls.n	800552e <_printf_i+0x116>
 8005544:	2b08      	cmp	r3, #8
 8005546:	d10b      	bne.n	8005560 <_printf_i+0x148>
 8005548:	6823      	ldr	r3, [r4, #0]
 800554a:	07de      	lsls	r6, r3, #31
 800554c:	d508      	bpl.n	8005560 <_printf_i+0x148>
 800554e:	6923      	ldr	r3, [r4, #16]
 8005550:	6861      	ldr	r1, [r4, #4]
 8005552:	4299      	cmp	r1, r3
 8005554:	bfde      	ittt	le
 8005556:	2330      	movle	r3, #48	; 0x30
 8005558:	f805 3c01 	strble.w	r3, [r5, #-1]
 800555c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005560:	1b52      	subs	r2, r2, r5
 8005562:	6122      	str	r2, [r4, #16]
 8005564:	f8cd a000 	str.w	sl, [sp]
 8005568:	464b      	mov	r3, r9
 800556a:	aa03      	add	r2, sp, #12
 800556c:	4621      	mov	r1, r4
 800556e:	4640      	mov	r0, r8
 8005570:	f7ff fee4 	bl	800533c <_printf_common>
 8005574:	3001      	adds	r0, #1
 8005576:	d14a      	bne.n	800560e <_printf_i+0x1f6>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	b004      	add	sp, #16
 800557e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	f043 0320 	orr.w	r3, r3, #32
 8005588:	6023      	str	r3, [r4, #0]
 800558a:	4833      	ldr	r0, [pc, #204]	; (8005658 <_printf_i+0x240>)
 800558c:	2778      	movs	r7, #120	; 0x78
 800558e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005592:	6823      	ldr	r3, [r4, #0]
 8005594:	6829      	ldr	r1, [r5, #0]
 8005596:	061f      	lsls	r7, r3, #24
 8005598:	f851 6b04 	ldr.w	r6, [r1], #4
 800559c:	d402      	bmi.n	80055a4 <_printf_i+0x18c>
 800559e:	065f      	lsls	r7, r3, #25
 80055a0:	bf48      	it	mi
 80055a2:	b2b6      	uxthmi	r6, r6
 80055a4:	07df      	lsls	r7, r3, #31
 80055a6:	bf48      	it	mi
 80055a8:	f043 0320 	orrmi.w	r3, r3, #32
 80055ac:	6029      	str	r1, [r5, #0]
 80055ae:	bf48      	it	mi
 80055b0:	6023      	strmi	r3, [r4, #0]
 80055b2:	b91e      	cbnz	r6, 80055bc <_printf_i+0x1a4>
 80055b4:	6823      	ldr	r3, [r4, #0]
 80055b6:	f023 0320 	bic.w	r3, r3, #32
 80055ba:	6023      	str	r3, [r4, #0]
 80055bc:	2310      	movs	r3, #16
 80055be:	e7a7      	b.n	8005510 <_printf_i+0xf8>
 80055c0:	4824      	ldr	r0, [pc, #144]	; (8005654 <_printf_i+0x23c>)
 80055c2:	e7e4      	b.n	800558e <_printf_i+0x176>
 80055c4:	4615      	mov	r5, r2
 80055c6:	e7bd      	b.n	8005544 <_printf_i+0x12c>
 80055c8:	682b      	ldr	r3, [r5, #0]
 80055ca:	6826      	ldr	r6, [r4, #0]
 80055cc:	6961      	ldr	r1, [r4, #20]
 80055ce:	1d18      	adds	r0, r3, #4
 80055d0:	6028      	str	r0, [r5, #0]
 80055d2:	0635      	lsls	r5, r6, #24
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	d501      	bpl.n	80055dc <_printf_i+0x1c4>
 80055d8:	6019      	str	r1, [r3, #0]
 80055da:	e002      	b.n	80055e2 <_printf_i+0x1ca>
 80055dc:	0670      	lsls	r0, r6, #25
 80055de:	d5fb      	bpl.n	80055d8 <_printf_i+0x1c0>
 80055e0:	8019      	strh	r1, [r3, #0]
 80055e2:	2300      	movs	r3, #0
 80055e4:	6123      	str	r3, [r4, #16]
 80055e6:	4615      	mov	r5, r2
 80055e8:	e7bc      	b.n	8005564 <_printf_i+0x14c>
 80055ea:	682b      	ldr	r3, [r5, #0]
 80055ec:	1d1a      	adds	r2, r3, #4
 80055ee:	602a      	str	r2, [r5, #0]
 80055f0:	681d      	ldr	r5, [r3, #0]
 80055f2:	6862      	ldr	r2, [r4, #4]
 80055f4:	2100      	movs	r1, #0
 80055f6:	4628      	mov	r0, r5
 80055f8:	f7fa fe2a 	bl	8000250 <memchr>
 80055fc:	b108      	cbz	r0, 8005602 <_printf_i+0x1ea>
 80055fe:	1b40      	subs	r0, r0, r5
 8005600:	6060      	str	r0, [r4, #4]
 8005602:	6863      	ldr	r3, [r4, #4]
 8005604:	6123      	str	r3, [r4, #16]
 8005606:	2300      	movs	r3, #0
 8005608:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800560c:	e7aa      	b.n	8005564 <_printf_i+0x14c>
 800560e:	6923      	ldr	r3, [r4, #16]
 8005610:	462a      	mov	r2, r5
 8005612:	4649      	mov	r1, r9
 8005614:	4640      	mov	r0, r8
 8005616:	47d0      	blx	sl
 8005618:	3001      	adds	r0, #1
 800561a:	d0ad      	beq.n	8005578 <_printf_i+0x160>
 800561c:	6823      	ldr	r3, [r4, #0]
 800561e:	079b      	lsls	r3, r3, #30
 8005620:	d413      	bmi.n	800564a <_printf_i+0x232>
 8005622:	68e0      	ldr	r0, [r4, #12]
 8005624:	9b03      	ldr	r3, [sp, #12]
 8005626:	4298      	cmp	r0, r3
 8005628:	bfb8      	it	lt
 800562a:	4618      	movlt	r0, r3
 800562c:	e7a6      	b.n	800557c <_printf_i+0x164>
 800562e:	2301      	movs	r3, #1
 8005630:	4632      	mov	r2, r6
 8005632:	4649      	mov	r1, r9
 8005634:	4640      	mov	r0, r8
 8005636:	47d0      	blx	sl
 8005638:	3001      	adds	r0, #1
 800563a:	d09d      	beq.n	8005578 <_printf_i+0x160>
 800563c:	3501      	adds	r5, #1
 800563e:	68e3      	ldr	r3, [r4, #12]
 8005640:	9903      	ldr	r1, [sp, #12]
 8005642:	1a5b      	subs	r3, r3, r1
 8005644:	42ab      	cmp	r3, r5
 8005646:	dcf2      	bgt.n	800562e <_printf_i+0x216>
 8005648:	e7eb      	b.n	8005622 <_printf_i+0x20a>
 800564a:	2500      	movs	r5, #0
 800564c:	f104 0619 	add.w	r6, r4, #25
 8005650:	e7f5      	b.n	800563e <_printf_i+0x226>
 8005652:	bf00      	nop
 8005654:	0800579d 	.word	0x0800579d
 8005658:	080057ae 	.word	0x080057ae

0800565c <memmove>:
 800565c:	4288      	cmp	r0, r1
 800565e:	b510      	push	{r4, lr}
 8005660:	eb01 0402 	add.w	r4, r1, r2
 8005664:	d902      	bls.n	800566c <memmove+0x10>
 8005666:	4284      	cmp	r4, r0
 8005668:	4623      	mov	r3, r4
 800566a:	d807      	bhi.n	800567c <memmove+0x20>
 800566c:	1e43      	subs	r3, r0, #1
 800566e:	42a1      	cmp	r1, r4
 8005670:	d008      	beq.n	8005684 <memmove+0x28>
 8005672:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005676:	f803 2f01 	strb.w	r2, [r3, #1]!
 800567a:	e7f8      	b.n	800566e <memmove+0x12>
 800567c:	4402      	add	r2, r0
 800567e:	4601      	mov	r1, r0
 8005680:	428a      	cmp	r2, r1
 8005682:	d100      	bne.n	8005686 <memmove+0x2a>
 8005684:	bd10      	pop	{r4, pc}
 8005686:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800568a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800568e:	e7f7      	b.n	8005680 <memmove+0x24>

08005690 <_sbrk_r>:
 8005690:	b538      	push	{r3, r4, r5, lr}
 8005692:	4d06      	ldr	r5, [pc, #24]	; (80056ac <_sbrk_r+0x1c>)
 8005694:	2300      	movs	r3, #0
 8005696:	4604      	mov	r4, r0
 8005698:	4608      	mov	r0, r1
 800569a:	602b      	str	r3, [r5, #0]
 800569c:	f7fb fa86 	bl	8000bac <_sbrk>
 80056a0:	1c43      	adds	r3, r0, #1
 80056a2:	d102      	bne.n	80056aa <_sbrk_r+0x1a>
 80056a4:	682b      	ldr	r3, [r5, #0]
 80056a6:	b103      	cbz	r3, 80056aa <_sbrk_r+0x1a>
 80056a8:	6023      	str	r3, [r4, #0]
 80056aa:	bd38      	pop	{r3, r4, r5, pc}
 80056ac:	2000082c 	.word	0x2000082c

080056b0 <memcpy>:
 80056b0:	440a      	add	r2, r1
 80056b2:	4291      	cmp	r1, r2
 80056b4:	f100 33ff 	add.w	r3, r0, #4294967295
 80056b8:	d100      	bne.n	80056bc <memcpy+0xc>
 80056ba:	4770      	bx	lr
 80056bc:	b510      	push	{r4, lr}
 80056be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80056c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80056c6:	4291      	cmp	r1, r2
 80056c8:	d1f9      	bne.n	80056be <memcpy+0xe>
 80056ca:	bd10      	pop	{r4, pc}

080056cc <_realloc_r>:
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056d0:	4680      	mov	r8, r0
 80056d2:	4614      	mov	r4, r2
 80056d4:	460e      	mov	r6, r1
 80056d6:	b921      	cbnz	r1, 80056e2 <_realloc_r+0x16>
 80056d8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80056dc:	4611      	mov	r1, r2
 80056de:	f7ff bc49 	b.w	8004f74 <_malloc_r>
 80056e2:	b92a      	cbnz	r2, 80056f0 <_realloc_r+0x24>
 80056e4:	f7ff fbda 	bl	8004e9c <_free_r>
 80056e8:	4625      	mov	r5, r4
 80056ea:	4628      	mov	r0, r5
 80056ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056f0:	f000 f81b 	bl	800572a <_malloc_usable_size_r>
 80056f4:	4284      	cmp	r4, r0
 80056f6:	4607      	mov	r7, r0
 80056f8:	d802      	bhi.n	8005700 <_realloc_r+0x34>
 80056fa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80056fe:	d812      	bhi.n	8005726 <_realloc_r+0x5a>
 8005700:	4621      	mov	r1, r4
 8005702:	4640      	mov	r0, r8
 8005704:	f7ff fc36 	bl	8004f74 <_malloc_r>
 8005708:	4605      	mov	r5, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d0ed      	beq.n	80056ea <_realloc_r+0x1e>
 800570e:	42bc      	cmp	r4, r7
 8005710:	4622      	mov	r2, r4
 8005712:	4631      	mov	r1, r6
 8005714:	bf28      	it	cs
 8005716:	463a      	movcs	r2, r7
 8005718:	f7ff ffca 	bl	80056b0 <memcpy>
 800571c:	4631      	mov	r1, r6
 800571e:	4640      	mov	r0, r8
 8005720:	f7ff fbbc 	bl	8004e9c <_free_r>
 8005724:	e7e1      	b.n	80056ea <_realloc_r+0x1e>
 8005726:	4635      	mov	r5, r6
 8005728:	e7df      	b.n	80056ea <_realloc_r+0x1e>

0800572a <_malloc_usable_size_r>:
 800572a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800572e:	1f18      	subs	r0, r3, #4
 8005730:	2b00      	cmp	r3, #0
 8005732:	bfbc      	itt	lt
 8005734:	580b      	ldrlt	r3, [r1, r0]
 8005736:	18c0      	addlt	r0, r0, r3
 8005738:	4770      	bx	lr
	...

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
