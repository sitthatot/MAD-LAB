
LAB7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c80  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08004e80  08004e80  00014e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f2c  08004f2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f2c  08004f2c  00014f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f34  08004f34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f34  08004f34  00014f34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08004f3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000350  2000005c  08004f98  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003ac  08004f98  000203ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ef97  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002084  00000000  00000000  0002f064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d20  00000000  00000000  000310e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a3c  00000000  00000000  00031e08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000281cc  00000000  00000000  00032844  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011778  00000000  00000000  0005aa10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000fb325  00000000  00000000  0006c188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b3c  00000000  00000000  001674b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0016afec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004e68 	.word	0x08004e68

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004e68 	.word	0x08004e68

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 80005ec:	b480      	push	{r7}
 80005ee:	b085      	sub	sp, #20
 80005f0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b1b      	ldr	r3, [pc, #108]	; (8000660 <MX_GPIO_Init+0x74>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a1a      	ldr	r2, [pc, #104]	; (8000660 <MX_GPIO_Init+0x74>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b18      	ldr	r3, [pc, #96]	; (8000660 <MX_GPIO_Init+0x74>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800060a:	4b15      	ldr	r3, [pc, #84]	; (8000660 <MX_GPIO_Init+0x74>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a14      	ldr	r2, [pc, #80]	; (8000660 <MX_GPIO_Init+0x74>)
 8000610:	f043 0308 	orr.w	r3, r3, #8
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b12      	ldr	r3, [pc, #72]	; (8000660 <MX_GPIO_Init+0x74>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0308 	and.w	r3, r3, #8
 800061e:	60bb      	str	r3, [r7, #8]
 8000620:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b0f      	ldr	r3, [pc, #60]	; (8000660 <MX_GPIO_Init+0x74>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a0e      	ldr	r2, [pc, #56]	; (8000660 <MX_GPIO_Init+0x74>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_GPIO_Init+0x74>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	607b      	str	r3, [r7, #4]
 8000638:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_GPIO_Init+0x74>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a08      	ldr	r2, [pc, #32]	; (8000660 <MX_GPIO_Init+0x74>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b06      	ldr	r3, [pc, #24]	; (8000660 <MX_GPIO_Init+0x74>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	603b      	str	r3, [r7, #0]
 8000650:	683b      	ldr	r3, [r7, #0]

}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	40023800 	.word	0x40023800
 8000664:	00000000 	.word	0x00000000

08000668 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800066e:	f000 fdac 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000672:	f000 f9b5 	bl	80009e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000676:	f7ff ffb9 	bl	80005ec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800067a:	f000 fced 	bl	8001058 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 800067e:	f000 fb31 	bl	8000ce4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000682:	f000 fba7 	bl	8000dd4 <MX_TIM4_Init>
  MX_TIM2_Init();
 8000686:	f000 fab5 	bl	8000bf4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2,TIM_CHANNEL_4); //Blue
 800068a:	210c      	movs	r1, #12
 800068c:	48aa      	ldr	r0, [pc, #680]	; (8000938 <main+0x2d0>)
 800068e:	f002 fa73 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3); //Red
 8000692:	2108      	movs	r1, #8
 8000694:	48a9      	ldr	r0, [pc, #676]	; (800093c <main+0x2d4>)
 8000696:	f002 fa6f 	bl	8002b78 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3); //Green
 800069a:	2108      	movs	r1, #8
 800069c:	48a8      	ldr	r0, [pc, #672]	; (8000940 <main+0x2d8>)
 800069e:	f002 fa6b 	bl	8002b78 <HAL_TIM_PWM_Start>
  htim2.Instance -> CCR3 = (10000-1) * dutyCycleB;//Blue PWM
 80006a2:	4ba8      	ldr	r3, [pc, #672]	; (8000944 <main+0x2dc>)
 80006a4:	edd3 7a00 	vldr	s15, [r3]
 80006a8:	ed9f 7aa7 	vldr	s14, [pc, #668]	; 8000948 <main+0x2e0>
 80006ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006b0:	4ba1      	ldr	r3, [pc, #644]	; (8000938 <main+0x2d0>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006b8:	ee17 2a90 	vmov	r2, s15
 80006bc:	63da      	str	r2, [r3, #60]	; 0x3c
  htim3.Instance -> CCR3 = (10000-1) * dutyCycleR;//Red PWM
 80006be:	4ba3      	ldr	r3, [pc, #652]	; (800094c <main+0x2e4>)
 80006c0:	edd3 7a00 	vldr	s15, [r3]
 80006c4:	ed9f 7aa0 	vldr	s14, [pc, #640]	; 8000948 <main+0x2e0>
 80006c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006cc:	4b9b      	ldr	r3, [pc, #620]	; (800093c <main+0x2d4>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006d4:	ee17 2a90 	vmov	r2, s15
 80006d8:	63da      	str	r2, [r3, #60]	; 0x3c
  htim4.Instance -> CCR3 = (10000-1) * dutyCycleG;//Green PWM
 80006da:	4b9d      	ldr	r3, [pc, #628]	; (8000950 <main+0x2e8>)
 80006dc:	edd3 7a00 	vldr	s15, [r3]
 80006e0:	ed9f 7a99 	vldr	s14, [pc, #612]	; 8000948 <main+0x2e0>
 80006e4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006e8:	4b95      	ldr	r3, [pc, #596]	; (8000940 <main+0x2d8>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006f0:	ee17 2a90 	vmov	r2, s15
 80006f4:	63da      	str	r2, [r3, #60]	; 0x3c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  char buffer;
	  print("input => ");
 80006f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006fa:	2209      	movs	r2, #9
 80006fc:	4995      	ldr	r1, [pc, #596]	; (8000954 <main+0x2ec>)
 80006fe:	4896      	ldr	r0, [pc, #600]	; (8000958 <main+0x2f0>)
 8000700:	f003 f9ac 	bl	8003a5c <HAL_UART_Transmit>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)==RESET){}//check buffer empty?
 8000704:	bf00      	nop
 8000706:	4b94      	ldr	r3, [pc, #592]	; (8000958 <main+0x2f0>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	69db      	ldr	r3, [r3, #28]
 800070c:	f003 0320 	and.w	r3, r3, #32
 8000710:	2b20      	cmp	r3, #32
 8000712:	d1f8      	bne.n	8000706 <main+0x9e>
	  HAL_UART_Receive(&huart3, (uint8_t*)&buffer, 1,1000);
 8000714:	1df9      	adds	r1, r7, #7
 8000716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800071a:	2201      	movs	r2, #1
 800071c:	488e      	ldr	r0, [pc, #568]	; (8000958 <main+0x2f0>)
 800071e:	f003 fa20 	bl	8003b62 <HAL_UART_Receive>
	  print(&buffer);
 8000722:	1dfb      	adds	r3, r7, #7
 8000724:	4618      	mov	r0, r3
 8000726:	f7ff fd8b 	bl	8000240 <strlen>
 800072a:	4603      	mov	r3, r0
 800072c:	b29a      	uxth	r2, r3
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	4888      	ldr	r0, [pc, #544]	; (8000958 <main+0x2f0>)
 8000736:	f003 f991 	bl	8003a5c <HAL_UART_Transmit>
	  print("\r\n");
 800073a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800073e:	2202      	movs	r2, #2
 8000740:	4986      	ldr	r1, [pc, #536]	; (800095c <main+0x2f4>)
 8000742:	4885      	ldr	r0, [pc, #532]	; (8000958 <main+0x2f0>)
 8000744:	f003 f98a 	bl	8003a5c <HAL_UART_Transmit>




	  if(buffer == 'B' || buffer == 'b')
 8000748:	79fb      	ldrb	r3, [r7, #7]
 800074a:	2b42      	cmp	r3, #66	; 0x42
 800074c:	d002      	beq.n	8000754 <main+0xec>
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b62      	cmp	r3, #98	; 0x62
 8000752:	d159      	bne.n	8000808 <main+0x1a0>
	  {

		  if(countB < 5)
 8000754:	4b82      	ldr	r3, [pc, #520]	; (8000960 <main+0x2f8>)
 8000756:	781b      	ldrb	r3, [r3, #0]
 8000758:	2b04      	cmp	r3, #4
 800075a:	d83f      	bhi.n	80007dc <main+0x174>
		  {
			  print("This is BBBBBBBBBBB");
 800075c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000760:	2213      	movs	r2, #19
 8000762:	4980      	ldr	r1, [pc, #512]	; (8000964 <main+0x2fc>)
 8000764:	487c      	ldr	r0, [pc, #496]	; (8000958 <main+0x2f0>)
 8000766:	f003 f979 	bl	8003a5c <HAL_UART_Transmit>
			  dutyCycleB += 0.20;//Blue PWM
 800076a:	4b76      	ldr	r3, [pc, #472]	; (8000944 <main+0x2dc>)
 800076c:	edd3 7a00 	vldr	s15, [r3]
 8000770:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000774:	ed9f 6b6e 	vldr	d6, [pc, #440]	; 8000930 <main+0x2c8>
 8000778:	ee37 7b06 	vadd.f64	d7, d7, d6
 800077c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000780:	4b70      	ldr	r3, [pc, #448]	; (8000944 <main+0x2dc>)
 8000782:	edc3 7a00 	vstr	s15, [r3]
			  sprintf(toString, ".%03d", dutyCycleB);
 8000786:	4b6f      	ldr	r3, [pc, #444]	; (8000944 <main+0x2dc>)
 8000788:	edd3 7a00 	vldr	s15, [r3]
 800078c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000790:	ec53 2b17 	vmov	r2, r3, d7
 8000794:	4974      	ldr	r1, [pc, #464]	; (8000968 <main+0x300>)
 8000796:	4875      	ldr	r0, [pc, #468]	; (800096c <main+0x304>)
 8000798:	f003 fec2 	bl	8004520 <siprintf>

			  print(toString);
 800079c:	4873      	ldr	r0, [pc, #460]	; (800096c <main+0x304>)
 800079e:	f7ff fd4f 	bl	8000240 <strlen>
 80007a2:	4603      	mov	r3, r0
 80007a4:	b29a      	uxth	r2, r3
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	4970      	ldr	r1, [pc, #448]	; (800096c <main+0x304>)
 80007ac:	486a      	ldr	r0, [pc, #424]	; (8000958 <main+0x2f0>)
 80007ae:	f003 f955 	bl	8003a5c <HAL_UART_Transmit>
			  htim2.Instance -> CCR3 = (10000-1) * dutyCycleB;//Blue PWM
 80007b2:	4b64      	ldr	r3, [pc, #400]	; (8000944 <main+0x2dc>)
 80007b4:	edd3 7a00 	vldr	s15, [r3]
 80007b8:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8000948 <main+0x2e0>
 80007bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007c0:	4b5d      	ldr	r3, [pc, #372]	; (8000938 <main+0x2d0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c8:	ee17 2a90 	vmov	r2, s15
 80007cc:	63da      	str	r2, [r3, #60]	; 0x3c
			  countB++;
 80007ce:	4b64      	ldr	r3, [pc, #400]	; (8000960 <main+0x2f8>)
 80007d0:	781b      	ldrb	r3, [r3, #0]
 80007d2:	3301      	adds	r3, #1
 80007d4:	b2da      	uxtb	r2, r3
 80007d6:	4b62      	ldr	r3, [pc, #392]	; (8000960 <main+0x2f8>)
 80007d8:	701a      	strb	r2, [r3, #0]
		  if(countB < 5)
 80007da:	e0e8      	b.n	80009ae <main+0x346>
		  }
		  else
		  {
			  countB = 0;
 80007dc:	4b60      	ldr	r3, [pc, #384]	; (8000960 <main+0x2f8>)
 80007de:	2200      	movs	r2, #0
 80007e0:	701a      	strb	r2, [r3, #0]
			  dutyCycleB = 0.0;
 80007e2:	4b58      	ldr	r3, [pc, #352]	; (8000944 <main+0x2dc>)
 80007e4:	f04f 0200 	mov.w	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
			  htim2.Instance -> CCR3 = (10000-1) * dutyCycleB;//Blue PWM
 80007ea:	4b56      	ldr	r3, [pc, #344]	; (8000944 <main+0x2dc>)
 80007ec:	edd3 7a00 	vldr	s15, [r3]
 80007f0:	ed9f 7a55 	vldr	s14, [pc, #340]	; 8000948 <main+0x2e0>
 80007f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007f8:	4b4f      	ldr	r3, [pc, #316]	; (8000938 <main+0x2d0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000800:	ee17 2a90 	vmov	r2, s15
 8000804:	63da      	str	r2, [r3, #60]	; 0x3c
		  if(countB < 5)
 8000806:	e0d2      	b.n	80009ae <main+0x346>
		  }
	  }
	  else if(buffer == 'R' || buffer == 'r')
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2b52      	cmp	r3, #82	; 0x52
 800080c:	d002      	beq.n	8000814 <main+0x1ac>
 800080e:	79fb      	ldrb	r3, [r7, #7]
 8000810:	2b72      	cmp	r3, #114	; 0x72
 8000812:	d159      	bne.n	80008c8 <main+0x260>
	  {

		  if(countR < 5)
 8000814:	4b56      	ldr	r3, [pc, #344]	; (8000970 <main+0x308>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	2b04      	cmp	r3, #4
 800081a:	d83f      	bhi.n	800089c <main+0x234>
		  		  {
			  print("This is RRRRRRRRRRRRR");
 800081c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000820:	2215      	movs	r2, #21
 8000822:	4954      	ldr	r1, [pc, #336]	; (8000974 <main+0x30c>)
 8000824:	484c      	ldr	r0, [pc, #304]	; (8000958 <main+0x2f0>)
 8000826:	f003 f919 	bl	8003a5c <HAL_UART_Transmit>
		  			  dutyCycleR += 0.20;//Red PWM
 800082a:	4b48      	ldr	r3, [pc, #288]	; (800094c <main+0x2e4>)
 800082c:	edd3 7a00 	vldr	s15, [r3]
 8000830:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000834:	ed9f 6b3e 	vldr	d6, [pc, #248]	; 8000930 <main+0x2c8>
 8000838:	ee37 7b06 	vadd.f64	d7, d7, d6
 800083c:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000840:	4b42      	ldr	r3, [pc, #264]	; (800094c <main+0x2e4>)
 8000842:	edc3 7a00 	vstr	s15, [r3]
		  			sprintf(toString, ".%03F", dutyCycleR);
 8000846:	4b41      	ldr	r3, [pc, #260]	; (800094c <main+0x2e4>)
 8000848:	edd3 7a00 	vldr	s15, [r3]
 800084c:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000850:	ec53 2b17 	vmov	r2, r3, d7
 8000854:	4948      	ldr	r1, [pc, #288]	; (8000978 <main+0x310>)
 8000856:	4845      	ldr	r0, [pc, #276]	; (800096c <main+0x304>)
 8000858:	f003 fe62 	bl	8004520 <siprintf>
		  			print(toString);
 800085c:	4843      	ldr	r0, [pc, #268]	; (800096c <main+0x304>)
 800085e:	f7ff fcef 	bl	8000240 <strlen>
 8000862:	4603      	mov	r3, r0
 8000864:	b29a      	uxth	r2, r3
 8000866:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800086a:	4940      	ldr	r1, [pc, #256]	; (800096c <main+0x304>)
 800086c:	483a      	ldr	r0, [pc, #232]	; (8000958 <main+0x2f0>)
 800086e:	f003 f8f5 	bl	8003a5c <HAL_UART_Transmit>
		  			htim3.Instance -> CCR3 = (10000-1) * dutyCycleR;//Red PWM
 8000872:	4b36      	ldr	r3, [pc, #216]	; (800094c <main+0x2e4>)
 8000874:	edd3 7a00 	vldr	s15, [r3]
 8000878:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8000948 <main+0x2e0>
 800087c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000880:	4b2e      	ldr	r3, [pc, #184]	; (800093c <main+0x2d4>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000888:	ee17 2a90 	vmov	r2, s15
 800088c:	63da      	str	r2, [r3, #60]	; 0x3c
		  			countR++;
 800088e:	4b38      	ldr	r3, [pc, #224]	; (8000970 <main+0x308>)
 8000890:	781b      	ldrb	r3, [r3, #0]
 8000892:	3301      	adds	r3, #1
 8000894:	b2da      	uxtb	r2, r3
 8000896:	4b36      	ldr	r3, [pc, #216]	; (8000970 <main+0x308>)
 8000898:	701a      	strb	r2, [r3, #0]
		  if(countR < 5)
 800089a:	e088      	b.n	80009ae <main+0x346>
		  		  }
		  		  else
		  		  {
		  			  countR = 0;
 800089c:	4b34      	ldr	r3, [pc, #208]	; (8000970 <main+0x308>)
 800089e:	2200      	movs	r2, #0
 80008a0:	701a      	strb	r2, [r3, #0]
		  			dutyCycleR = 0.0;
 80008a2:	4b2a      	ldr	r3, [pc, #168]	; (800094c <main+0x2e4>)
 80008a4:	f04f 0200 	mov.w	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
		  			htim3.Instance -> CCR3 = (10000-1) * dutyCycleR;//Red PWM
 80008aa:	4b28      	ldr	r3, [pc, #160]	; (800094c <main+0x2e4>)
 80008ac:	edd3 7a00 	vldr	s15, [r3]
 80008b0:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8000948 <main+0x2e0>
 80008b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80008b8:	4b20      	ldr	r3, [pc, #128]	; (800093c <main+0x2d4>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80008c0:	ee17 2a90 	vmov	r2, s15
 80008c4:	63da      	str	r2, [r3, #60]	; 0x3c
		  if(countR < 5)
 80008c6:	e072      	b.n	80009ae <main+0x346>
		  		  }

	  }
	  else if(buffer == 'G' || buffer == 'g')
 80008c8:	79fb      	ldrb	r3, [r7, #7]
 80008ca:	2b47      	cmp	r3, #71	; 0x47
 80008cc:	d002      	beq.n	80008d4 <main+0x26c>
 80008ce:	79fb      	ldrb	r3, [r7, #7]
 80008d0:	2b67      	cmp	r3, #103	; 0x67
 80008d2:	d16c      	bne.n	80009ae <main+0x346>
	  {
	 	 if(countG < 5)
 80008d4:	4b29      	ldr	r3, [pc, #164]	; (800097c <main+0x314>)
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	2b04      	cmp	r3, #4
 80008da:	d853      	bhi.n	8000984 <main+0x31c>
	 	 		  {
	 		print("This is GGGGGGGGGG");
 80008dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008e0:	2212      	movs	r2, #18
 80008e2:	4927      	ldr	r1, [pc, #156]	; (8000980 <main+0x318>)
 80008e4:	481c      	ldr	r0, [pc, #112]	; (8000958 <main+0x2f0>)
 80008e6:	f003 f8b9 	bl	8003a5c <HAL_UART_Transmit>
	 	 			  dutyCycleG += 0.20;//Green PWM
 80008ea:	4b19      	ldr	r3, [pc, #100]	; (8000950 <main+0x2e8>)
 80008ec:	edd3 7a00 	vldr	s15, [r3]
 80008f0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008f4:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8000930 <main+0x2c8>
 80008f8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80008fc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000900:	4b13      	ldr	r3, [pc, #76]	; (8000950 <main+0x2e8>)
 8000902:	edc3 7a00 	vstr	s15, [r3]
	 	 			htim4.Instance -> CCR3 = (10000-1) * dutyCycleG;//Green PWM
 8000906:	4b12      	ldr	r3, [pc, #72]	; (8000950 <main+0x2e8>)
 8000908:	edd3 7a00 	vldr	s15, [r3]
 800090c:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8000948 <main+0x2e0>
 8000910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <main+0x2d8>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800091c:	ee17 2a90 	vmov	r2, s15
 8000920:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 			countG++;
 8000922:	4b16      	ldr	r3, [pc, #88]	; (800097c <main+0x314>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	3301      	adds	r3, #1
 8000928:	b2da      	uxtb	r2, r3
 800092a:	4b14      	ldr	r3, [pc, #80]	; (800097c <main+0x314>)
 800092c:	701a      	strb	r2, [r3, #0]
 800092e:	e03e      	b.n	80009ae <main+0x346>
 8000930:	9999999a 	.word	0x9999999a
 8000934:	3fc99999 	.word	0x3fc99999
 8000938:	200000f4 	.word	0x200000f4
 800093c:	20000140 	.word	0x20000140
 8000940:	2000018c 	.word	0x2000018c
 8000944:	20000084 	.word	0x20000084
 8000948:	461c3c00 	.word	0x461c3c00
 800094c:	2000007c 	.word	0x2000007c
 8000950:	20000080 	.word	0x20000080
 8000954:	08004e80 	.word	0x08004e80
 8000958:	200001d8 	.word	0x200001d8
 800095c:	08004e8c 	.word	0x08004e8c
 8000960:	2000008a 	.word	0x2000008a
 8000964:	08004e90 	.word	0x08004e90
 8000968:	08004ea4 	.word	0x08004ea4
 800096c:	2000008c 	.word	0x2000008c
 8000970:	20000088 	.word	0x20000088
 8000974:	08004eac 	.word	0x08004eac
 8000978:	08004ec4 	.word	0x08004ec4
 800097c:	20000089 	.word	0x20000089
 8000980:	08004ecc 	.word	0x08004ecc

	 	 		  }
	 	 		  else
	 	 		  {
	 	 			  countG = 0;
 8000984:	4b10      	ldr	r3, [pc, #64]	; (80009c8 <main+0x360>)
 8000986:	2200      	movs	r2, #0
 8000988:	701a      	strb	r2, [r3, #0]
	 	 			dutyCycleG = 0.0;
 800098a:	4b10      	ldr	r3, [pc, #64]	; (80009cc <main+0x364>)
 800098c:	f04f 0200 	mov.w	r2, #0
 8000990:	601a      	str	r2, [r3, #0]
	 	 			htim4.Instance -> CCR3 = (10000-1) * dutyCycleG;//Green PWM
 8000992:	4b0e      	ldr	r3, [pc, #56]	; (80009cc <main+0x364>)
 8000994:	edd3 7a00 	vldr	s15, [r3]
 8000998:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 80009d0 <main+0x368>
 800099c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <main+0x36c>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80009a8:	ee17 2a90 	vmov	r2, s15
 80009ac:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 		  }
	  }

	  HAL_Delay(100);
 80009ae:	2064      	movs	r0, #100	; 0x64
 80009b0:	f000 fc68 	bl	8001284 <HAL_Delay>

	  pwm=(GPIOB->IDR & GPIO_PIN_15)>>10;
 80009b4:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <main+0x370>)
 80009b6:	691b      	ldr	r3, [r3, #16]
 80009b8:	0a9b      	lsrs	r3, r3, #10
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	f003 0320 	and.w	r3, r3, #32
 80009c0:	b2da      	uxtb	r2, r3
 80009c2:	4b06      	ldr	r3, [pc, #24]	; (80009dc <main+0x374>)
 80009c4:	701a      	strb	r2, [r3, #0]
  {
 80009c6:	e696      	b.n	80006f6 <main+0x8e>
 80009c8:	20000089 	.word	0x20000089
 80009cc:	20000080 	.word	0x20000080
 80009d0:	461c3c00 	.word	0x461c3c00
 80009d4:	2000018c 	.word	0x2000018c
 80009d8:	40020400 	.word	0x40020400
 80009dc:	20000078 	.word	0x20000078

080009e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b094      	sub	sp, #80	; 0x50
 80009e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009e6:	f107 031c 	add.w	r3, r7, #28
 80009ea:	2234      	movs	r2, #52	; 0x34
 80009ec:	2100      	movs	r1, #0
 80009ee:	4618      	mov	r0, r3
 80009f0:	f003 fdb6 	bl	8004560 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009f4:	f107 0308 	add.w	r3, r7, #8
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a04:	4b2b      	ldr	r3, [pc, #172]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a08:	4a2a      	ldr	r2, [pc, #168]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a0e:	6413      	str	r3, [r2, #64]	; 0x40
 8000a10:	4b28      	ldr	r3, [pc, #160]	; (8000ab4 <SystemClock_Config+0xd4>)
 8000a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	607b      	str	r3, [r7, #4]
 8000a1a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a1c:	4b26      	ldr	r3, [pc, #152]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	4a25      	ldr	r2, [pc, #148]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a22:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000a26:	6013      	str	r3, [r2, #0]
 8000a28:	4b23      	ldr	r3, [pc, #140]	; (8000ab8 <SystemClock_Config+0xd8>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000a30:	603b      	str	r3, [r7, #0]
 8000a32:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a3c:	2310      	movs	r3, #16
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a40:	2302      	movs	r3, #2
 8000a42:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a44:	2300      	movs	r3, #0
 8000a46:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a48:	2308      	movs	r3, #8
 8000a4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000a4c:	23d8      	movs	r3, #216	; 0xd8
 8000a4e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a50:	2302      	movs	r3, #2
 8000a52:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a54:	2302      	movs	r3, #2
 8000a56:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5c:	f107 031c 	add.w	r3, r7, #28
 8000a60:	4618      	mov	r0, r3
 8000a62:	f000 ff15 	bl	8001890 <HAL_RCC_OscConfig>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000a6c:	f000 f826 	bl	8000abc <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000a70:	f000 febe 	bl	80017f0 <HAL_PWREx_EnableOverDrive>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000a7a:	f000 f81f 	bl	8000abc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	230f      	movs	r3, #15
 8000a80:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	2302      	movs	r3, #2
 8000a84:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a86:	2300      	movs	r3, #0
 8000a88:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a8a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a8e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a94:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a96:	f107 0308 	add.w	r3, r7, #8
 8000a9a:	2107      	movs	r1, #7
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f001 f9a5 	bl	8001dec <HAL_RCC_ClockConfig>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000aa8:	f000 f808 	bl	8000abc <Error_Handler>
  }
}
 8000aac:	bf00      	nop
 8000aae:	3750      	adds	r7, #80	; 0x50
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	40007000 	.word	0x40007000

08000abc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ac0:	b672      	cpsid	i
}
 8000ac2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ac4:	e7fe      	b.n	8000ac4 <Error_Handler+0x8>
	...

08000ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ace:	4b0f      	ldr	r3, [pc, #60]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0e      	ldr	r2, [pc, #56]	; (8000b0c <HAL_MspInit+0x44>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b0c      	ldr	r3, [pc, #48]	; (8000b0c <HAL_MspInit+0x44>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <HAL_MspInit+0x44>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aea:	4a08      	ldr	r2, [pc, #32]	; (8000b0c <HAL_MspInit+0x44>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	; 0x44
 8000af2:	4b06      	ldr	r3, [pc, #24]	; (8000b0c <HAL_MspInit+0x44>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	370c      	adds	r7, #12
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr
 8000b0a:	bf00      	nop
 8000b0c:	40023800 	.word	0x40023800

08000b10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b14:	e7fe      	b.n	8000b14 <NMI_Handler+0x4>

08000b16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b16:	b480      	push	{r7}
 8000b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b1a:	e7fe      	b.n	8000b1a <HardFault_Handler+0x4>

08000b1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b20:	e7fe      	b.n	8000b20 <MemManage_Handler+0x4>

08000b22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b22:	b480      	push	{r7}
 8000b24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b26:	e7fe      	b.n	8000b26 <BusFault_Handler+0x4>

08000b28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <UsageFault_Handler+0x4>

08000b2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b2e:	b480      	push	{r7}
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr

08000b3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b40:	bf00      	nop
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr

08000b4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b4a:	b480      	push	{r7}
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b5c:	f000 fb72 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f003 fcec 	bl	8004570 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20080000 	.word	0x20080000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200000f0 	.word	0x200000f0
 8000bcc:	200003b0 	.word	0x200003b0

08000bd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08e      	sub	sp, #56	; 0x38
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
 8000c12:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000c14:	463b      	mov	r3, r7
 8000c16:	2200      	movs	r2, #0
 8000c18:	601a      	str	r2, [r3, #0]
 8000c1a:	605a      	str	r2, [r3, #4]
 8000c1c:	609a      	str	r2, [r3, #8]
 8000c1e:	60da      	str	r2, [r3, #12]
 8000c20:	611a      	str	r2, [r3, #16]
 8000c22:	615a      	str	r2, [r3, #20]
 8000c24:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c26:	4b2e      	ldr	r3, [pc, #184]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c28:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c2c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8000c2e:	4b2c      	ldr	r3, [pc, #176]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c30:	2209      	movs	r2, #9
 8000c32:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b2a      	ldr	r3, [pc, #168]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8000c3a:	4b29      	ldr	r3, [pc, #164]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c3c:	f242 720f 	movw	r2, #9999	; 0x270f
 8000c40:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c42:	4b27      	ldr	r3, [pc, #156]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c48:	4b25      	ldr	r3, [pc, #148]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c4e:	4824      	ldr	r0, [pc, #144]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c50:	f001 feda 	bl	8002a08 <HAL_TIM_Base_Init>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000c5a:	f7ff ff2f 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c5e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000c68:	4619      	mov	r1, r3
 8000c6a:	481d      	ldr	r0, [pc, #116]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c6c:	f002 f992 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000c76:	f7ff ff21 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000c7a:	4819      	ldr	r0, [pc, #100]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c7c:	f001 ff1b 	bl	8002ab6 <HAL_TIM_PWM_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000c86:	f7ff ff19 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c92:	f107 031c 	add.w	r3, r7, #28
 8000c96:	4619      	mov	r1, r3
 8000c98:	4811      	ldr	r0, [pc, #68]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000c9a:	f002 fe03 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d001      	beq.n	8000ca8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000ca4:	f7ff ff0a 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ca8:	2360      	movs	r3, #96	; 0x60
 8000caa:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000cac:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000cba:	463b      	mov	r3, r7
 8000cbc:	220c      	movs	r2, #12
 8000cbe:	4619      	mov	r1, r3
 8000cc0:	4807      	ldr	r0, [pc, #28]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000cc2:	f002 f853 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000ccc:	f7ff fef6 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000cd0:	4803      	ldr	r0, [pc, #12]	; (8000ce0 <MX_TIM2_Init+0xec>)
 8000cd2:	f000 f93d 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000cd6:	bf00      	nop
 8000cd8:	3738      	adds	r7, #56	; 0x38
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	200000f4 	.word	0x200000f4

08000ce4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b08e      	sub	sp, #56	; 0x38
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cee:	2200      	movs	r2, #0
 8000cf0:	601a      	str	r2, [r3, #0]
 8000cf2:	605a      	str	r2, [r3, #4]
 8000cf4:	609a      	str	r2, [r3, #8]
 8000cf6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cf8:	f107 031c 	add.w	r3, r7, #28
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	601a      	str	r2, [r3, #0]
 8000d00:	605a      	str	r2, [r3, #4]
 8000d02:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d04:	463b      	mov	r3, r7
 8000d06:	2200      	movs	r2, #0
 8000d08:	601a      	str	r2, [r3, #0]
 8000d0a:	605a      	str	r2, [r3, #4]
 8000d0c:	609a      	str	r2, [r3, #8]
 8000d0e:	60da      	str	r2, [r3, #12]
 8000d10:	611a      	str	r2, [r3, #16]
 8000d12:	615a      	str	r2, [r3, #20]
 8000d14:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d16:	4b2d      	ldr	r3, [pc, #180]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d18:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <MX_TIM3_Init+0xec>)
 8000d1a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 10-1;
 8000d1c:	4b2b      	ldr	r3, [pc, #172]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d1e:	2209      	movs	r2, #9
 8000d20:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000-1;
 8000d28:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d2a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000d2e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d32:	2200      	movs	r2, #0
 8000d34:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d36:	4b25      	ldr	r3, [pc, #148]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d3c:	4823      	ldr	r0, [pc, #140]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d3e:	f001 fe63 	bl	8002a08 <HAL_TIM_Base_Init>
 8000d42:	4603      	mov	r3, r0
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d001      	beq.n	8000d4c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d48:	f7ff feb8 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d50:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d56:	4619      	mov	r1, r3
 8000d58:	481c      	ldr	r0, [pc, #112]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d5a:	f002 f91b 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d64:	f7ff feaa 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d68:	4818      	ldr	r0, [pc, #96]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d6a:	f001 fea4 	bl	8002ab6 <HAL_TIM_PWM_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d74:	f7ff fea2 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d80:	f107 031c 	add.w	r3, r7, #28
 8000d84:	4619      	mov	r1, r3
 8000d86:	4811      	ldr	r0, [pc, #68]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000d88:	f002 fd8c 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d001      	beq.n	8000d96 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d92:	f7ff fe93 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d96:	2360      	movs	r3, #96	; 0x60
 8000d98:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000d9a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000d9e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000da0:	2300      	movs	r3, #0
 8000da2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000da4:	2300      	movs	r3, #0
 8000da6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000da8:	463b      	mov	r3, r7
 8000daa:	2208      	movs	r2, #8
 8000dac:	4619      	mov	r1, r3
 8000dae:	4807      	ldr	r0, [pc, #28]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000db0:	f001 ffdc 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8000dba:	f7ff fe7f 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dbe:	4803      	ldr	r0, [pc, #12]	; (8000dcc <MX_TIM3_Init+0xe8>)
 8000dc0:	f000 f8c6 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000dc4:	bf00      	nop
 8000dc6:	3738      	adds	r7, #56	; 0x38
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20000140 	.word	0x20000140
 8000dd0:	40000400 	.word	0x40000400

08000dd4 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08e      	sub	sp, #56	; 0x38
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	f107 031c 	add.w	r3, r7, #28
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
 8000df2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df4:	463b      	mov	r3, r7
 8000df6:	2200      	movs	r2, #0
 8000df8:	601a      	str	r2, [r3, #0]
 8000dfa:	605a      	str	r2, [r3, #4]
 8000dfc:	609a      	str	r2, [r3, #8]
 8000dfe:	60da      	str	r2, [r3, #12]
 8000e00:	611a      	str	r2, [r3, #16]
 8000e02:	615a      	str	r2, [r3, #20]
 8000e04:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e06:	4b2d      	ldr	r3, [pc, #180]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e08:	4a2d      	ldr	r2, [pc, #180]	; (8000ec0 <MX_TIM4_Init+0xec>)
 8000e0a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10-1;
 8000e0c:	4b2b      	ldr	r3, [pc, #172]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e0e:	2209      	movs	r2, #9
 8000e10:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e12:	4b2a      	ldr	r3, [pc, #168]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000-1;
 8000e18:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e1a:	f242 720f 	movw	r2, #9999	; 0x270f
 8000e1e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e20:	4b26      	ldr	r3, [pc, #152]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e26:	4b25      	ldr	r3, [pc, #148]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2c:	4823      	ldr	r0, [pc, #140]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e2e:	f001 fdeb 	bl	8002a08 <HAL_TIM_Base_Init>
 8000e32:	4603      	mov	r3, r0
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d001      	beq.n	8000e3c <MX_TIM4_Init+0x68>
  {
    Error_Handler();
 8000e38:	f7ff fe40 	bl	8000abc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e46:	4619      	mov	r1, r3
 8000e48:	481c      	ldr	r0, [pc, #112]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e4a:	f002 f8a3 	bl	8002f94 <HAL_TIM_ConfigClockSource>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM4_Init+0x84>
  {
    Error_Handler();
 8000e54:	f7ff fe32 	bl	8000abc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e58:	4818      	ldr	r0, [pc, #96]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e5a:	f001 fe2c 	bl	8002ab6 <HAL_TIM_PWM_Init>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_TIM4_Init+0x94>
  {
    Error_Handler();
 8000e64:	f7ff fe2a 	bl	8000abc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e70:	f107 031c 	add.w	r3, r7, #28
 8000e74:	4619      	mov	r1, r3
 8000e76:	4811      	ldr	r0, [pc, #68]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000e78:	f002 fd14 	bl	80038a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d001      	beq.n	8000e86 <MX_TIM4_Init+0xb2>
  {
    Error_Handler();
 8000e82:	f7ff fe1b 	bl	8000abc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e86:	2360      	movs	r3, #96	; 0x60
 8000e88:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000e8a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000e8e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e98:	463b      	mov	r3, r7
 8000e9a:	2208      	movs	r2, #8
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4807      	ldr	r0, [pc, #28]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000ea0:	f001 ff64 	bl	8002d6c <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8000eaa:	f7ff fe07 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000eae:	4803      	ldr	r0, [pc, #12]	; (8000ebc <MX_TIM4_Init+0xe8>)
 8000eb0:	f000 f84e 	bl	8000f50 <HAL_TIM_MspPostInit>

}
 8000eb4:	bf00      	nop
 8000eb6:	3738      	adds	r7, #56	; 0x38
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000018c 	.word	0x2000018c
 8000ec0:	40000800 	.word	0x40000800

08000ec4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b087      	sub	sp, #28
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ed4:	d10c      	bne.n	8000ef0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ed6:	4b1b      	ldr	r3, [pc, #108]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eda:	4a1a      	ldr	r2, [pc, #104]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000edc:	f043 0301 	orr.w	r3, r3, #1
 8000ee0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee2:	4b18      	ldr	r3, [pc, #96]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	617b      	str	r3, [r7, #20]
 8000eec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8000eee:	e022      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM3)
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a14      	ldr	r2, [pc, #80]	; (8000f48 <HAL_TIM_Base_MspInit+0x84>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d10c      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000efa:	4b12      	ldr	r3, [pc, #72]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000f00:	f043 0302 	orr.w	r3, r3, #2
 8000f04:	6413      	str	r3, [r2, #64]	; 0x40
 8000f06:	4b0f      	ldr	r3, [pc, #60]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	f003 0302 	and.w	r3, r3, #2
 8000f0e:	613b      	str	r3, [r7, #16]
 8000f10:	693b      	ldr	r3, [r7, #16]
}
 8000f12:	e010      	b.n	8000f36 <HAL_TIM_Base_MspInit+0x72>
  else if(tim_baseHandle->Instance==TIM4)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0c      	ldr	r2, [pc, #48]	; (8000f4c <HAL_TIM_Base_MspInit+0x88>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d10b      	bne.n	8000f36 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f22:	4a08      	ldr	r2, [pc, #32]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000f24:	f043 0304 	orr.w	r3, r3, #4
 8000f28:	6413      	str	r3, [r2, #64]	; 0x40
 8000f2a:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_TIM_Base_MspInit+0x80>)
 8000f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2e:	f003 0304 	and.w	r3, r3, #4
 8000f32:	60fb      	str	r3, [r7, #12]
 8000f34:	68fb      	ldr	r3, [r7, #12]
}
 8000f36:	bf00      	nop
 8000f38:	371c      	adds	r7, #28
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40023800 	.word	0x40023800
 8000f48:	40000400 	.word	0x40000400
 8000f4c:	40000800 	.word	0x40000800

08000f50 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08a      	sub	sp, #40	; 0x28
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	601a      	str	r2, [r3, #0]
 8000f60:	605a      	str	r2, [r3, #4]
 8000f62:	609a      	str	r2, [r3, #8]
 8000f64:	60da      	str	r2, [r3, #12]
 8000f66:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f70:	d11c      	bne.n	8000fac <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f72:	4b33      	ldr	r3, [pc, #204]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f76:	4a32      	ldr	r2, [pc, #200]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f7e:	4b30      	ldr	r3, [pc, #192]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	613b      	str	r3, [r7, #16]
 8000f88:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f8a:	2308      	movs	r3, #8
 8000f8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f92:	2300      	movs	r3, #0
 8000f94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f96:	2303      	movs	r3, #3
 8000f98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f9a:	2301      	movs	r3, #1
 8000f9c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f9e:	f107 0314 	add.w	r3, r7, #20
 8000fa2:	4619      	mov	r1, r3
 8000fa4:	4827      	ldr	r0, [pc, #156]	; (8001044 <HAL_TIM_MspPostInit+0xf4>)
 8000fa6:	f000 fa77 	bl	8001498 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000faa:	e044      	b.n	8001036 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM3)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	4a25      	ldr	r2, [pc, #148]	; (8001048 <HAL_TIM_MspPostInit+0xf8>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d11d      	bne.n	8000ff2 <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000fb6:	4b22      	ldr	r3, [pc, #136]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a21      	ldr	r2, [pc, #132]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000fbc:	f043 0304 	orr.w	r3, r3, #4
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0304 	and.w	r3, r3, #4
 8000fca:	60fb      	str	r3, [r7, #12]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000fce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fe4:	f107 0314 	add.w	r3, r7, #20
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <HAL_TIM_MspPostInit+0xfc>)
 8000fec:	f000 fa54 	bl	8001498 <HAL_GPIO_Init>
}
 8000ff0:	e021      	b.n	8001036 <HAL_TIM_MspPostInit+0xe6>
  else if(timHandle->Instance==TIM4)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a16      	ldr	r2, [pc, #88]	; (8001050 <HAL_TIM_MspPostInit+0x100>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d11c      	bne.n	8001036 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffc:	4b10      	ldr	r3, [pc, #64]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a0f      	ldr	r2, [pc, #60]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 8001002:	f043 0302 	orr.w	r3, r3, #2
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b0d      	ldr	r3, [pc, #52]	; (8001040 <HAL_TIM_MspPostInit+0xf0>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001014:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101a:	2302      	movs	r3, #2
 800101c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	2300      	movs	r3, #0
 8001020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001022:	2303      	movs	r3, #3
 8001024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001026:	2302      	movs	r3, #2
 8001028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102a:	f107 0314 	add.w	r3, r7, #20
 800102e:	4619      	mov	r1, r3
 8001030:	4808      	ldr	r0, [pc, #32]	; (8001054 <HAL_TIM_MspPostInit+0x104>)
 8001032:	f000 fa31 	bl	8001498 <HAL_GPIO_Init>
}
 8001036:	bf00      	nop
 8001038:	3728      	adds	r7, #40	; 0x28
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	40023800 	.word	0x40023800
 8001044:	40020000 	.word	0x40020000
 8001048:	40000400 	.word	0x40000400
 800104c:	40020800 	.word	0x40020800
 8001050:	40000800 	.word	0x40000800
 8001054:	40020400 	.word	0x40020400

08001058 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800105c:	4b14      	ldr	r3, [pc, #80]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800105e:	4a15      	ldr	r2, [pc, #84]	; (80010b4 <MX_USART3_UART_Init+0x5c>)
 8001060:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001062:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001064:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001068:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800106a:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800106c:	2200      	movs	r2, #0
 800106e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001070:	4b0f      	ldr	r3, [pc, #60]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001072:	2200      	movs	r2, #0
 8001074:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001076:	4b0e      	ldr	r3, [pc, #56]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001078:	2200      	movs	r2, #0
 800107a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800107c:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800107e:	220c      	movs	r2, #12
 8001080:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001082:	4b0b      	ldr	r3, [pc, #44]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001084:	2200      	movs	r2, #0
 8001086:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001088:	4b09      	ldr	r3, [pc, #36]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800108a:	2200      	movs	r2, #0
 800108c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800108e:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001094:	4b06      	ldr	r3, [pc, #24]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800109a:	4805      	ldr	r0, [pc, #20]	; (80010b0 <MX_USART3_UART_Init+0x58>)
 800109c:	f002 fc90 	bl	80039c0 <HAL_UART_Init>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80010a6:	f7ff fd09 	bl	8000abc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
 80010ae:	bf00      	nop
 80010b0:	200001d8 	.word	0x200001d8
 80010b4:	40004800 	.word	0x40004800

080010b8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b0ae      	sub	sp, #184	; 0xb8
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010c4:	2200      	movs	r2, #0
 80010c6:	601a      	str	r2, [r3, #0]
 80010c8:	605a      	str	r2, [r3, #4]
 80010ca:	609a      	str	r2, [r3, #8]
 80010cc:	60da      	str	r2, [r3, #12]
 80010ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2290      	movs	r2, #144	; 0x90
 80010d6:	2100      	movs	r1, #0
 80010d8:	4618      	mov	r0, r3
 80010da:	f003 fa41 	bl	8004560 <memset>
  if(uartHandle->Instance==USART3)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a22      	ldr	r2, [pc, #136]	; (800116c <HAL_UART_MspInit+0xb4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d13c      	bne.n	8001162 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80010e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80010ec:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80010ee:	2300      	movs	r3, #0
 80010f0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010f2:	f107 0314 	add.w	r3, r7, #20
 80010f6:	4618      	mov	r0, r3
 80010f8:	f001 f85e 	bl	80021b8 <HAL_RCCEx_PeriphCLKConfig>
 80010fc:	4603      	mov	r3, r0
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d001      	beq.n	8001106 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001102:	f7ff fcdb 	bl	8000abc <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001106:	4b1a      	ldr	r3, [pc, #104]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	4a19      	ldr	r2, [pc, #100]	; (8001170 <HAL_UART_MspInit+0xb8>)
 800110c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001110:	6413      	str	r3, [r2, #64]	; 0x40
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001116:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800111a:	613b      	str	r3, [r7, #16]
 800111c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	4a13      	ldr	r2, [pc, #76]	; (8001170 <HAL_UART_MspInit+0xb8>)
 8001124:	f043 0308 	orr.w	r3, r3, #8
 8001128:	6313      	str	r3, [r2, #48]	; 0x30
 800112a:	4b11      	ldr	r3, [pc, #68]	; (8001170 <HAL_UART_MspInit+0xb8>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001136:	f44f 7340 	mov.w	r3, #768	; 0x300
 800113a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114a:	2303      	movs	r3, #3
 800114c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001150:	2307      	movs	r3, #7
 8001152:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001156:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800115a:	4619      	mov	r1, r3
 800115c:	4805      	ldr	r0, [pc, #20]	; (8001174 <HAL_UART_MspInit+0xbc>)
 800115e:	f000 f99b 	bl	8001498 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001162:	bf00      	nop
 8001164:	37b8      	adds	r7, #184	; 0xb8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	40004800 	.word	0x40004800
 8001170:	40023800 	.word	0x40023800
 8001174:	40020c00 	.word	0x40020c00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff fd15 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f003 f9e9 	bl	800457c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff fa5d 	bl	8000668 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011bc:	08004f3c 	.word	0x08004f3c
  ldr r2, =_sbss
 80011c0:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011c4:	200003ac 	.word	0x200003ac

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>

080011ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f92e 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d4:	200f      	movs	r0, #15
 80011d6:	f000 f805 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fc75 	bl	8000ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f93b 	bl	800147e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f911 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	20000260 	.word	0x20000260

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000260 	.word	0x20000260

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff47 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5c 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb0 	bl	80013ec <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001498:	b480      	push	{r7}
 800149a:	b089      	sub	sp, #36	; 0x24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
 80014a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80014a2:	2300      	movs	r3, #0
 80014a4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80014aa:	2300      	movs	r3, #0
 80014ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	e175      	b.n	80017a4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80014b8:	2201      	movs	r2, #1
 80014ba:	69fb      	ldr	r3, [r7, #28]
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	697b      	ldr	r3, [r7, #20]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	f040 8164 	bne.w	800179e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	f003 0303 	and.w	r3, r3, #3
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d005      	beq.n	80014ee <HAL_GPIO_Init+0x56>
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	f003 0303 	and.w	r3, r3, #3
 80014ea:	2b02      	cmp	r3, #2
 80014ec:	d130      	bne.n	8001550 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	005b      	lsls	r3, r3, #1
 80014f8:	2203      	movs	r2, #3
 80014fa:	fa02 f303 	lsl.w	r3, r2, r3
 80014fe:	43db      	mvns	r3, r3
 8001500:	69ba      	ldr	r2, [r7, #24]
 8001502:	4013      	ands	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	68da      	ldr	r2, [r3, #12]
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4313      	orrs	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	685b      	ldr	r3, [r3, #4]
 8001522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	69fb      	ldr	r3, [r7, #28]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	4013      	ands	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	69fb      	ldr	r3, [r7, #28]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	4313      	orrs	r3, r2
 8001548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69ba      	ldr	r2, [r7, #24]
 800154e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b03      	cmp	r3, #3
 800155a:	d017      	beq.n	800158c <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001562:	69fb      	ldr	r3, [r7, #28]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	69ba      	ldr	r2, [r7, #24]
 8001582:	4313      	orrs	r3, r2
 8001584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	69ba      	ldr	r2, [r7, #24]
 800158a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001598:	69fb      	ldr	r3, [r7, #28]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	69ba      	ldr	r2, [r7, #24]
 80015b8:	4013      	ands	r3, r2
 80015ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	69fb      	ldr	r3, [r7, #28]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	69ba      	ldr	r2, [r7, #24]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80015d2:	69fb      	ldr	r3, [r7, #28]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	69b9      	ldr	r1, [r7, #24]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	69ba      	ldr	r2, [r7, #24]
 80015f4:	4013      	ands	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	69ba      	ldr	r2, [r7, #24]
 800160a:	4313      	orrs	r3, r2
 800160c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	69ba      	ldr	r2, [r7, #24]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80be 	beq.w	800179e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b66      	ldr	r3, [pc, #408]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	4a65      	ldr	r2, [pc, #404]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162c:	6453      	str	r3, [r2, #68]	; 0x44
 800162e:	4b63      	ldr	r3, [pc, #396]	; (80017bc <HAL_GPIO_Init+0x324>)
 8001630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800163a:	4a61      	ldr	r2, [pc, #388]	; (80017c0 <HAL_GPIO_Init+0x328>)
 800163c:	69fb      	ldr	r3, [r7, #28]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001648:	69fb      	ldr	r3, [r7, #28]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4013      	ands	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <HAL_GPIO_Init+0x32c>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d037      	beq.n	80016d6 <HAL_GPIO_Init+0x23e>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a57      	ldr	r2, [pc, #348]	; (80017c8 <HAL_GPIO_Init+0x330>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d031      	beq.n	80016d2 <HAL_GPIO_Init+0x23a>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a56      	ldr	r2, [pc, #344]	; (80017cc <HAL_GPIO_Init+0x334>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d02b      	beq.n	80016ce <HAL_GPIO_Init+0x236>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a55      	ldr	r2, [pc, #340]	; (80017d0 <HAL_GPIO_Init+0x338>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d025      	beq.n	80016ca <HAL_GPIO_Init+0x232>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a54      	ldr	r2, [pc, #336]	; (80017d4 <HAL_GPIO_Init+0x33c>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d01f      	beq.n	80016c6 <HAL_GPIO_Init+0x22e>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a53      	ldr	r2, [pc, #332]	; (80017d8 <HAL_GPIO_Init+0x340>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d019      	beq.n	80016c2 <HAL_GPIO_Init+0x22a>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a52      	ldr	r2, [pc, #328]	; (80017dc <HAL_GPIO_Init+0x344>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d013      	beq.n	80016be <HAL_GPIO_Init+0x226>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a51      	ldr	r2, [pc, #324]	; (80017e0 <HAL_GPIO_Init+0x348>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d00d      	beq.n	80016ba <HAL_GPIO_Init+0x222>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a50      	ldr	r2, [pc, #320]	; (80017e4 <HAL_GPIO_Init+0x34c>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d007      	beq.n	80016b6 <HAL_GPIO_Init+0x21e>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	4a4f      	ldr	r2, [pc, #316]	; (80017e8 <HAL_GPIO_Init+0x350>)
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d101      	bne.n	80016b2 <HAL_GPIO_Init+0x21a>
 80016ae:	2309      	movs	r3, #9
 80016b0:	e012      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b2:	230a      	movs	r3, #10
 80016b4:	e010      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016b6:	2308      	movs	r3, #8
 80016b8:	e00e      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ba:	2307      	movs	r3, #7
 80016bc:	e00c      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016be:	2306      	movs	r3, #6
 80016c0:	e00a      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c2:	2305      	movs	r3, #5
 80016c4:	e008      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016c6:	2304      	movs	r3, #4
 80016c8:	e006      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ca:	2303      	movs	r3, #3
 80016cc:	e004      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016ce:	2302      	movs	r3, #2
 80016d0:	e002      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <HAL_GPIO_Init+0x240>
 80016d6:	2300      	movs	r3, #0
 80016d8:	69fa      	ldr	r2, [r7, #28]
 80016da:	f002 0203 	and.w	r2, r2, #3
 80016de:	0092      	lsls	r2, r2, #2
 80016e0:	4093      	lsls	r3, r2
 80016e2:	69ba      	ldr	r2, [r7, #24]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80016e8:	4935      	ldr	r1, [pc, #212]	; (80017c0 <HAL_GPIO_Init+0x328>)
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	089b      	lsrs	r3, r3, #2
 80016ee:	3302      	adds	r3, #2
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016f6:	4b3d      	ldr	r3, [pc, #244]	; (80017ec <HAL_GPIO_Init+0x354>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	43db      	mvns	r3, r3
 8001700:	69ba      	ldr	r2, [r7, #24]
 8001702:	4013      	ands	r3, r2
 8001704:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001712:	69ba      	ldr	r2, [r7, #24]
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800171a:	4a34      	ldr	r2, [pc, #208]	; (80017ec <HAL_GPIO_Init+0x354>)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001720:	4b32      	ldr	r3, [pc, #200]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001722:	68db      	ldr	r3, [r3, #12]
 8001724:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	43db      	mvns	r3, r3
 800172a:	69ba      	ldr	r2, [r7, #24]
 800172c:	4013      	ands	r3, r2
 800172e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001738:	2b00      	cmp	r3, #0
 800173a:	d003      	beq.n	8001744 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800173c:	69ba      	ldr	r2, [r7, #24]
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	4313      	orrs	r3, r2
 8001742:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001744:	4a29      	ldr	r2, [pc, #164]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800174a:	4b28      	ldr	r3, [pc, #160]	; (80017ec <HAL_GPIO_Init+0x354>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800176e:	4a1f      	ldr	r2, [pc, #124]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001774:	4b1d      	ldr	r3, [pc, #116]	; (80017ec <HAL_GPIO_Init+0x354>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001798:	4a14      	ldr	r2, [pc, #80]	; (80017ec <HAL_GPIO_Init+0x354>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3301      	adds	r3, #1
 80017a2:	61fb      	str	r3, [r7, #28]
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0f      	cmp	r3, #15
 80017a8:	f67f ae86 	bls.w	80014b8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80017ac:	bf00      	nop
 80017ae:	bf00      	nop
 80017b0:	3724      	adds	r7, #36	; 0x24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	40023800 	.word	0x40023800
 80017c0:	40013800 	.word	0x40013800
 80017c4:	40020000 	.word	0x40020000
 80017c8:	40020400 	.word	0x40020400
 80017cc:	40020800 	.word	0x40020800
 80017d0:	40020c00 	.word	0x40020c00
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40021400 	.word	0x40021400
 80017dc:	40021800 	.word	0x40021800
 80017e0:	40021c00 	.word	0x40021c00
 80017e4:	40022000 	.word	0x40022000
 80017e8:	40022400 	.word	0x40022400
 80017ec:	40013c00 	.word	0x40013c00

080017f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b082      	sub	sp, #8
 80017f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80017f6:	2300      	movs	r3, #0
 80017f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80017fa:	4b23      	ldr	r3, [pc, #140]	; (8001888 <HAL_PWREx_EnableOverDrive+0x98>)
 80017fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fe:	4a22      	ldr	r2, [pc, #136]	; (8001888 <HAL_PWREx_EnableOverDrive+0x98>)
 8001800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001804:	6413      	str	r3, [r2, #64]	; 0x40
 8001806:	4b20      	ldr	r3, [pc, #128]	; (8001888 <HAL_PWREx_EnableOverDrive+0x98>)
 8001808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800180e:	603b      	str	r3, [r7, #0]
 8001810:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001812:	4b1e      	ldr	r3, [pc, #120]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a1d      	ldr	r2, [pc, #116]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800181c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800181e:	f7ff fd25 	bl	800126c <HAL_GetTick>
 8001822:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001824:	e009      	b.n	800183a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001826:	f7ff fd21 	bl	800126c <HAL_GetTick>
 800182a:	4602      	mov	r2, r0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	1ad3      	subs	r3, r2, r3
 8001830:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001834:	d901      	bls.n	800183a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e022      	b.n	8001880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800183a:	4b14      	ldr	r3, [pc, #80]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 800183c:	685b      	ldr	r3, [r3, #4]
 800183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001846:	d1ee      	bne.n	8001826 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001848:	4b10      	ldr	r3, [pc, #64]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a0f      	ldr	r2, [pc, #60]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 800184e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001852:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001854:	f7ff fd0a 	bl	800126c <HAL_GetTick>
 8001858:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800185a:	e009      	b.n	8001870 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800185c:	f7ff fd06 	bl	800126c <HAL_GetTick>
 8001860:	4602      	mov	r2, r0
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	1ad3      	subs	r3, r2, r3
 8001866:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800186a:	d901      	bls.n	8001870 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800186c:	2303      	movs	r3, #3
 800186e:	e007      	b.n	8001880 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001870:	4b06      	ldr	r3, [pc, #24]	; (800188c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001878:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800187c:	d1ee      	bne.n	800185c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	4618      	mov	r0, r3
 8001882:	3708      	adds	r7, #8
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	40023800 	.word	0x40023800
 800188c:	40007000 	.word	0x40007000

08001890 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
 80018a4:	e29b      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 0301 	and.w	r3, r3, #1
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8087 	beq.w	80019c2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b4:	4b96      	ldr	r3, [pc, #600]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	f003 030c 	and.w	r3, r3, #12
 80018bc:	2b04      	cmp	r3, #4
 80018be:	d00c      	beq.n	80018da <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018c0:	4b93      	ldr	r3, [pc, #588]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f003 030c 	and.w	r3, r3, #12
 80018c8:	2b08      	cmp	r3, #8
 80018ca:	d112      	bne.n	80018f2 <HAL_RCC_OscConfig+0x62>
 80018cc:	4b90      	ldr	r3, [pc, #576]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018d4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80018d8:	d10b      	bne.n	80018f2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018da:	4b8d      	ldr	r3, [pc, #564]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d06c      	beq.n	80019c0 <HAL_RCC_OscConfig+0x130>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d168      	bne.n	80019c0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e275      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018fa:	d106      	bne.n	800190a <HAL_RCC_OscConfig+0x7a>
 80018fc:	4b84      	ldr	r3, [pc, #528]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a83      	ldr	r2, [pc, #524]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001906:	6013      	str	r3, [r2, #0]
 8001908:	e02e      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	685b      	ldr	r3, [r3, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d10c      	bne.n	800192c <HAL_RCC_OscConfig+0x9c>
 8001912:	4b7f      	ldr	r3, [pc, #508]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a7e      	ldr	r2, [pc, #504]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001918:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800191c:	6013      	str	r3, [r2, #0]
 800191e:	4b7c      	ldr	r3, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	4a7b      	ldr	r2, [pc, #492]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001924:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01d      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001934:	d10c      	bne.n	8001950 <HAL_RCC_OscConfig+0xc0>
 8001936:	4b76      	ldr	r3, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a75      	ldr	r2, [pc, #468]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800193c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001940:	6013      	str	r3, [r2, #0]
 8001942:	4b73      	ldr	r3, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a72      	ldr	r2, [pc, #456]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	e00b      	b.n	8001968 <HAL_RCC_OscConfig+0xd8>
 8001950:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001956:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001962:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001966:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d013      	beq.n	8001998 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001970:	f7ff fc7c 	bl	800126c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001978:	f7ff fc78 	bl	800126c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b64      	cmp	r3, #100	; 0x64
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e229      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198a:	4b61      	ldr	r3, [pc, #388]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0xe8>
 8001996:	e014      	b.n	80019c2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001998:	f7ff fc68 	bl	800126c <HAL_GetTick>
 800199c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800199e:	e008      	b.n	80019b2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a0:	f7ff fc64 	bl	800126c <HAL_GetTick>
 80019a4:	4602      	mov	r2, r0
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	1ad3      	subs	r3, r2, r3
 80019aa:	2b64      	cmp	r3, #100	; 0x64
 80019ac:	d901      	bls.n	80019b2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80019ae:	2303      	movs	r3, #3
 80019b0:	e215      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b2:	4b57      	ldr	r3, [pc, #348]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d1f0      	bne.n	80019a0 <HAL_RCC_OscConfig+0x110>
 80019be:	e000      	b.n	80019c2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0302 	and.w	r3, r3, #2
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d069      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019ce:	4b50      	ldr	r3, [pc, #320]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f003 030c 	and.w	r3, r3, #12
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d00b      	beq.n	80019f2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019da:	4b4d      	ldr	r3, [pc, #308]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b08      	cmp	r3, #8
 80019e4:	d11c      	bne.n	8001a20 <HAL_RCC_OscConfig+0x190>
 80019e6:	4b4a      	ldr	r3, [pc, #296]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d116      	bne.n	8001a20 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f2:	4b47      	ldr	r3, [pc, #284]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0302 	and.w	r3, r3, #2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d005      	beq.n	8001a0a <HAL_RCC_OscConfig+0x17a>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	68db      	ldr	r3, [r3, #12]
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d001      	beq.n	8001a0a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001a06:	2301      	movs	r3, #1
 8001a08:	e1e9      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0a:	4b41      	ldr	r3, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	691b      	ldr	r3, [r3, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	493d      	ldr	r1, [pc, #244]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a1e:	e040      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	68db      	ldr	r3, [r3, #12]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d023      	beq.n	8001a70 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a28:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a38      	ldr	r2, [pc, #224]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a2e:	f043 0301 	orr.w	r3, r3, #1
 8001a32:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a34:	f7ff fc1a 	bl	800126c <HAL_GetTick>
 8001a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3a:	e008      	b.n	8001a4e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3c:	f7ff fc16 	bl	800126c <HAL_GetTick>
 8001a40:	4602      	mov	r2, r0
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e1c7      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4e:	4b30      	ldr	r3, [pc, #192]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d0f0      	beq.n	8001a3c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a5a:	4b2d      	ldr	r3, [pc, #180]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	691b      	ldr	r3, [r3, #16]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	4929      	ldr	r1, [pc, #164]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a6a:	4313      	orrs	r3, r2
 8001a6c:	600b      	str	r3, [r1, #0]
 8001a6e:	e018      	b.n	8001aa2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a70:	4b27      	ldr	r3, [pc, #156]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a26      	ldr	r2, [pc, #152]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a76:	f023 0301 	bic.w	r3, r3, #1
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fbf6 	bl	800126c <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fbf2 	bl	800126c <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e1a3      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d038      	beq.n	8001b20 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d019      	beq.n	8001aea <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b16      	ldr	r3, [pc, #88]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001ab8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aba:	4a15      	ldr	r2, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac2:	f7ff fbd3 	bl	800126c <HAL_GetTick>
 8001ac6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001aca:	f7ff fbcf 	bl	800126c <HAL_GetTick>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e180      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001ade:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ae0:	f003 0302 	and.w	r3, r3, #2
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d0f0      	beq.n	8001aca <HAL_RCC_OscConfig+0x23a>
 8001ae8:	e01a      	b.n	8001b20 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001aea:	4b09      	ldr	r3, [pc, #36]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001aec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aee:	4a08      	ldr	r2, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x280>)
 8001af0:	f023 0301 	bic.w	r3, r3, #1
 8001af4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af6:	f7ff fbb9 	bl	800126c <HAL_GetTick>
 8001afa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001afc:	e00a      	b.n	8001b14 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001afe:	f7ff fbb5 	bl	800126c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b02      	cmp	r3, #2
 8001b0a:	d903      	bls.n	8001b14 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001b0c:	2303      	movs	r3, #3
 8001b0e:	e166      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
 8001b10:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b14:	4b92      	ldr	r3, [pc, #584]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001b18:	f003 0302 	and.w	r3, r3, #2
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1ee      	bne.n	8001afe <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0304 	and.w	r3, r3, #4
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 80a4 	beq.w	8001c76 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b8c      	ldr	r3, [pc, #560]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a88      	ldr	r2, [pc, #544]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b86      	ldr	r3, [pc, #536]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b56:	4b83      	ldr	r3, [pc, #524]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001b62:	4b80      	ldr	r3, [pc, #512]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7f      	ldr	r2, [pc, #508]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb7d 	bl	800126c <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff fb79 	bl	800126c <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	; 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e12a      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001b88:	4b76      	ldr	r3, [pc, #472]	; (8001d64 <HAL_RCC_OscConfig+0x4d4>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x31a>
 8001b9c:	4b70      	ldr	r3, [pc, #448]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba0:	4a6f      	ldr	r2, [pc, #444]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x33c>
 8001bb2:	4b6b      	ldr	r3, [pc, #428]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bb6:	4a6a      	ldr	r2, [pc, #424]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6713      	str	r3, [r2, #112]	; 0x70
 8001bbe:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bc2:	4a67      	ldr	r2, [pc, #412]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bca:	e01c      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x35e>
 8001bd4:	4b62      	ldr	r3, [pc, #392]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd8:	4a61      	ldr	r2, [pc, #388]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6713      	str	r3, [r2, #112]	; 0x70
 8001be0:	4b5f      	ldr	r3, [pc, #380]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001be4:	4a5e      	ldr	r2, [pc, #376]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6713      	str	r3, [r2, #112]	; 0x70
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x376>
 8001bee:	4b5c      	ldr	r3, [pc, #368]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bf2:	4a5b      	ldr	r2, [pc, #364]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6713      	str	r3, [r2, #112]	; 0x70
 8001bfa:	4b59      	ldr	r3, [pc, #356]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bfe:	4a58      	ldr	r2, [pc, #352]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb2d 	bl	800126c <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff fb29 	bl	800126c <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0d8      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	4b4c      	ldr	r3, [pc, #304]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ee      	beq.n	8001c16 <HAL_RCC_OscConfig+0x386>
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fb17 	bl	800126c <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fb13 	bl	800126c <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e0c2      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	4b41      	ldr	r3, [pc, #260]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b3d      	ldr	r3, [pc, #244]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c6e:	4a3c      	ldr	r2, [pc, #240]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c74:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	699b      	ldr	r3, [r3, #24]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 80ae 	beq.w	8001ddc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c80:	4b37      	ldr	r3, [pc, #220]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c82:	689b      	ldr	r3, [r3, #8]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d06d      	beq.n	8001d68 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	699b      	ldr	r3, [r3, #24]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d14b      	bne.n	8001d2c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b32      	ldr	r3, [pc, #200]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a31      	ldr	r2, [pc, #196]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca0:	f7ff fae4 	bl	800126c <HAL_GetTick>
 8001ca4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca8:	f7ff fae0 	bl	800126c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e091      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cba:	4b29      	ldr	r3, [pc, #164]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d1f0      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6a1b      	ldr	r3, [r3, #32]
 8001cce:	431a      	orrs	r2, r3
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cd4:	019b      	lsls	r3, r3, #6
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cdc:	085b      	lsrs	r3, r3, #1
 8001cde:	3b01      	subs	r3, #1
 8001ce0:	041b      	lsls	r3, r3, #16
 8001ce2:	431a      	orrs	r2, r3
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce8:	061b      	lsls	r3, r3, #24
 8001cea:	431a      	orrs	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf0:	071b      	lsls	r3, r3, #28
 8001cf2:	491b      	ldr	r1, [pc, #108]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4a18      	ldr	r2, [pc, #96]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001cfe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d04:	f7ff fab2 	bl	800126c <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d0c:	f7ff faae 	bl	800126c <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e05f      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d1e:	4b10      	ldr	r3, [pc, #64]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d0f0      	beq.n	8001d0c <HAL_RCC_OscConfig+0x47c>
 8001d2a:	e057      	b.n	8001ddc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d2c:	4b0c      	ldr	r3, [pc, #48]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a0b      	ldr	r2, [pc, #44]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d36:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d38:	f7ff fa98 	bl	800126c <HAL_GetTick>
 8001d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d3e:	e008      	b.n	8001d52 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d40:	f7ff fa94 	bl	800126c <HAL_GetTick>
 8001d44:	4602      	mov	r2, r0
 8001d46:	693b      	ldr	r3, [r7, #16]
 8001d48:	1ad3      	subs	r3, r2, r3
 8001d4a:	2b02      	cmp	r3, #2
 8001d4c:	d901      	bls.n	8001d52 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001d4e:	2303      	movs	r3, #3
 8001d50:	e045      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d52:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_RCC_OscConfig+0x4d0>)
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1f0      	bne.n	8001d40 <HAL_RCC_OscConfig+0x4b0>
 8001d5e:	e03d      	b.n	8001ddc <HAL_RCC_OscConfig+0x54c>
 8001d60:	40023800 	.word	0x40023800
 8001d64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001d68:	4b1f      	ldr	r3, [pc, #124]	; (8001de8 <HAL_RCC_OscConfig+0x558>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	699b      	ldr	r3, [r3, #24]
 8001d72:	2b01      	cmp	r3, #1
 8001d74:	d030      	beq.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d80:	429a      	cmp	r2, r3
 8001d82:	d129      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d122      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d92:	68fa      	ldr	r2, [r7, #12]
 8001d94:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d98:	4013      	ands	r3, r2
 8001d9a:	687a      	ldr	r2, [r7, #4]
 8001d9c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d9e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d119      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dae:	085b      	lsrs	r3, r3, #1
 8001db0:	3b01      	subs	r3, #1
 8001db2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10f      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dc2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d107      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd4:	429a      	cmp	r2, r3
 8001dd6:	d001      	beq.n	8001ddc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	e000      	b.n	8001dde <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001ddc:	2300      	movs	r3, #0
}
 8001dde:	4618      	mov	r0, r3
 8001de0:	3718      	adds	r7, #24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	40023800 	.word	0x40023800

08001dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b084      	sub	sp, #16
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
 8001df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d101      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0d0      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e04:	4b6a      	ldr	r3, [pc, #424]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 030f 	and.w	r3, r3, #15
 8001e0c:	683a      	ldr	r2, [r7, #0]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d910      	bls.n	8001e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f023 020f 	bic.w	r2, r3, #15
 8001e1a:	4965      	ldr	r1, [pc, #404]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e22:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f003 030f 	and.w	r3, r3, #15
 8001e2a:	683a      	ldr	r2, [r7, #0]
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d001      	beq.n	8001e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e0b8      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 0302 	and.w	r3, r3, #2
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d020      	beq.n	8001e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0304 	and.w	r3, r3, #4
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d005      	beq.n	8001e58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e4c:	4b59      	ldr	r3, [pc, #356]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	4a58      	ldr	r2, [pc, #352]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0308 	and.w	r3, r3, #8
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e64:	4b53      	ldr	r3, [pc, #332]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a52      	ldr	r2, [pc, #328]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e70:	4b50      	ldr	r3, [pc, #320]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	494d      	ldr	r1, [pc, #308]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e7e:	4313      	orrs	r3, r2
 8001e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d040      	beq.n	8001f10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d107      	bne.n	8001ea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d115      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e07f      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e073      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ebe:	4b3d      	ldr	r3, [pc, #244]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0302 	and.w	r3, r3, #2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d101      	bne.n	8001ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	e06b      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ece:	4b39      	ldr	r3, [pc, #228]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001ed0:	689b      	ldr	r3, [r3, #8]
 8001ed2:	f023 0203 	bic.w	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	4936      	ldr	r1, [pc, #216]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001edc:	4313      	orrs	r3, r2
 8001ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ee0:	f7ff f9c4 	bl	800126c <HAL_GetTick>
 8001ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ee6:	e00a      	b.n	8001efe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ee8:	f7ff f9c0 	bl	800126c <HAL_GetTick>
 8001eec:	4602      	mov	r2, r0
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d901      	bls.n	8001efe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001efa:	2303      	movs	r3, #3
 8001efc:	e053      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001efe:	4b2d      	ldr	r3, [pc, #180]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 020c 	and.w	r2, r3, #12
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	009b      	lsls	r3, r3, #2
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d1eb      	bne.n	8001ee8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f10:	4b27      	ldr	r3, [pc, #156]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f003 030f 	and.w	r3, r3, #15
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d210      	bcs.n	8001f40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f1e:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f023 020f 	bic.w	r2, r3, #15
 8001f26:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	429a      	cmp	r2, r3
 8001f3a:	d001      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e032      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d008      	beq.n	8001f5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	4916      	ldr	r1, [pc, #88]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f003 0308 	and.w	r3, r3, #8
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d009      	beq.n	8001f7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f6a:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	490e      	ldr	r1, [pc, #56]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f7e:	f000 f821 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f82:	4602      	mov	r2, r0
 8001f84:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	091b      	lsrs	r3, r3, #4
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	490a      	ldr	r1, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8001f90:	5ccb      	ldrb	r3, [r1, r3]
 8001f92:	fa22 f303 	lsr.w	r3, r2, r3
 8001f96:	4a09      	ldr	r2, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1d0>)
 8001f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f9a:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <HAL_RCC_ClockConfig+0x1d4>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f7ff f920 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 8001fa4:	2300      	movs	r3, #0
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3710      	adds	r7, #16
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	40023c00 	.word	0x40023c00
 8001fb4:	40023800 	.word	0x40023800
 8001fb8:	08004ee0 	.word	0x08004ee0
 8001fbc:	20000000 	.word	0x20000000
 8001fc0:	20000004 	.word	0x20000004

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fc8:	b090      	sub	sp, #64	; 0x40
 8001fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	637b      	str	r3, [r7, #52]	; 0x34
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	f003 030c 	and.w	r3, r3, #12
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d00d      	beq.n	8002004 <HAL_RCC_GetSysClockFreq+0x40>
 8001fe8:	2b08      	cmp	r3, #8
 8001fea:	f200 80a1 	bhi.w	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d002      	beq.n	8001ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	d003      	beq.n	8001ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8001ff6:	e09b      	b.n	8002130 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ff8:	4b53      	ldr	r3, [pc, #332]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8001ffa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ffc:	e09b      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ffe:	4b53      	ldr	r3, [pc, #332]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002000:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002002:	e098      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002004:	4b4f      	ldr	r3, [pc, #316]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800200e:	4b4d      	ldr	r3, [pc, #308]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002016:	2b00      	cmp	r3, #0
 8002018:	d028      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800201a:	4b4a      	ldr	r3, [pc, #296]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	2200      	movs	r2, #0
 8002022:	623b      	str	r3, [r7, #32]
 8002024:	627a      	str	r2, [r7, #36]	; 0x24
 8002026:	6a3b      	ldr	r3, [r7, #32]
 8002028:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800202c:	2100      	movs	r1, #0
 800202e:	4b47      	ldr	r3, [pc, #284]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 8002030:	fb03 f201 	mul.w	r2, r3, r1
 8002034:	2300      	movs	r3, #0
 8002036:	fb00 f303 	mul.w	r3, r0, r3
 800203a:	4413      	add	r3, r2
 800203c:	4a43      	ldr	r2, [pc, #268]	; (800214c <HAL_RCC_GetSysClockFreq+0x188>)
 800203e:	fba0 1202 	umull	r1, r2, r0, r2
 8002042:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002044:	460a      	mov	r2, r1
 8002046:	62ba      	str	r2, [r7, #40]	; 0x28
 8002048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800204a:	4413      	add	r3, r2
 800204c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800204e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002050:	2200      	movs	r2, #0
 8002052:	61bb      	str	r3, [r7, #24]
 8002054:	61fa      	str	r2, [r7, #28]
 8002056:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800205a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800205e:	f7fe f947 	bl	80002f0 <__aeabi_uldivmod>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4613      	mov	r3, r2
 8002068:	63fb      	str	r3, [r7, #60]	; 0x3c
 800206a:	e053      	b.n	8002114 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800206c:	4b35      	ldr	r3, [pc, #212]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	099b      	lsrs	r3, r3, #6
 8002072:	2200      	movs	r2, #0
 8002074:	613b      	str	r3, [r7, #16]
 8002076:	617a      	str	r2, [r7, #20]
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800207e:	f04f 0b00 	mov.w	fp, #0
 8002082:	4652      	mov	r2, sl
 8002084:	465b      	mov	r3, fp
 8002086:	f04f 0000 	mov.w	r0, #0
 800208a:	f04f 0100 	mov.w	r1, #0
 800208e:	0159      	lsls	r1, r3, #5
 8002090:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002094:	0150      	lsls	r0, r2, #5
 8002096:	4602      	mov	r2, r0
 8002098:	460b      	mov	r3, r1
 800209a:	ebb2 080a 	subs.w	r8, r2, sl
 800209e:	eb63 090b 	sbc.w	r9, r3, fp
 80020a2:	f04f 0200 	mov.w	r2, #0
 80020a6:	f04f 0300 	mov.w	r3, #0
 80020aa:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80020ae:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80020b2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80020b6:	ebb2 0408 	subs.w	r4, r2, r8
 80020ba:	eb63 0509 	sbc.w	r5, r3, r9
 80020be:	f04f 0200 	mov.w	r2, #0
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	00eb      	lsls	r3, r5, #3
 80020c8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80020cc:	00e2      	lsls	r2, r4, #3
 80020ce:	4614      	mov	r4, r2
 80020d0:	461d      	mov	r5, r3
 80020d2:	eb14 030a 	adds.w	r3, r4, sl
 80020d6:	603b      	str	r3, [r7, #0]
 80020d8:	eb45 030b 	adc.w	r3, r5, fp
 80020dc:	607b      	str	r3, [r7, #4]
 80020de:	f04f 0200 	mov.w	r2, #0
 80020e2:	f04f 0300 	mov.w	r3, #0
 80020e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80020ea:	4629      	mov	r1, r5
 80020ec:	028b      	lsls	r3, r1, #10
 80020ee:	4621      	mov	r1, r4
 80020f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80020f4:	4621      	mov	r1, r4
 80020f6:	028a      	lsls	r2, r1, #10
 80020f8:	4610      	mov	r0, r2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020fe:	2200      	movs	r2, #0
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	60fa      	str	r2, [r7, #12]
 8002104:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002108:	f7fe f8f2 	bl	80002f0 <__aeabi_uldivmod>
 800210c:	4602      	mov	r2, r0
 800210e:	460b      	mov	r3, r1
 8002110:	4613      	mov	r3, r2
 8002112:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_GetSysClockFreq+0x180>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	0c1b      	lsrs	r3, r3, #16
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	3301      	adds	r3, #1
 8002120:	005b      	lsls	r3, r3, #1
 8002122:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002124:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	fbb2 f3f3 	udiv	r3, r2, r3
 800212c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800212e:	e002      	b.n	8002136 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002130:	4b05      	ldr	r3, [pc, #20]	; (8002148 <HAL_RCC_GetSysClockFreq+0x184>)
 8002132:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002134:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002136:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002138:	4618      	mov	r0, r3
 800213a:	3740      	adds	r7, #64	; 0x40
 800213c:	46bd      	mov	sp, r7
 800213e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002142:	bf00      	nop
 8002144:	40023800 	.word	0x40023800
 8002148:	00f42400 	.word	0x00f42400
 800214c:	017d7840 	.word	0x017d7840

08002150 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002150:	b480      	push	{r7}
 8002152:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002154:	4b03      	ldr	r3, [pc, #12]	; (8002164 <HAL_RCC_GetHCLKFreq+0x14>)
 8002156:	681b      	ldr	r3, [r3, #0]
}
 8002158:	4618      	mov	r0, r3
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop
 8002164:	20000000 	.word	0x20000000

08002168 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800216c:	f7ff fff0 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002170:	4602      	mov	r2, r0
 8002172:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002174:	689b      	ldr	r3, [r3, #8]
 8002176:	0a9b      	lsrs	r3, r3, #10
 8002178:	f003 0307 	and.w	r3, r3, #7
 800217c:	4903      	ldr	r1, [pc, #12]	; (800218c <HAL_RCC_GetPCLK1Freq+0x24>)
 800217e:	5ccb      	ldrb	r3, [r1, r3]
 8002180:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002184:	4618      	mov	r0, r3
 8002186:	bd80      	pop	{r7, pc}
 8002188:	40023800 	.word	0x40023800
 800218c:	08004ef0 	.word	0x08004ef0

08002190 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002194:	f7ff ffdc 	bl	8002150 <HAL_RCC_GetHCLKFreq>
 8002198:	4602      	mov	r2, r0
 800219a:	4b05      	ldr	r3, [pc, #20]	; (80021b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	0b5b      	lsrs	r3, r3, #13
 80021a0:	f003 0307 	and.w	r3, r3, #7
 80021a4:	4903      	ldr	r1, [pc, #12]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021a6:	5ccb      	ldrb	r3, [r1, r3]
 80021a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	40023800 	.word	0x40023800
 80021b4:	08004ef0 	.word	0x08004ef0

080021b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80021c0:	2300      	movs	r3, #0
 80021c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80021c8:	2300      	movs	r3, #0
 80021ca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80021cc:	2300      	movs	r3, #0
 80021ce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0301 	and.w	r3, r3, #1
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d012      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80021e0:	4b69      	ldr	r3, [pc, #420]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	4a68      	ldr	r2, [pc, #416]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021e6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80021ea:	6093      	str	r3, [r2, #8]
 80021ec:	4b66      	ldr	r3, [pc, #408]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021ee:	689a      	ldr	r2, [r3, #8]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021f4:	4964      	ldr	r1, [pc, #400]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80021f6:	4313      	orrs	r3, r2
 80021f8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002202:	2301      	movs	r3, #1
 8002204:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d017      	beq.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002212:	4b5d      	ldr	r3, [pc, #372]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002220:	4959      	ldr	r1, [pc, #356]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800222c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002230:	d101      	bne.n	8002236 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002232:	2301      	movs	r3, #1
 8002234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223a:	2b00      	cmp	r3, #0
 800223c:	d101      	bne.n	8002242 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800223e:	2301      	movs	r3, #1
 8002240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224a:	2b00      	cmp	r3, #0
 800224c:	d017      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800224e:	4b4e      	ldr	r3, [pc, #312]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002250:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002254:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	494a      	ldr	r1, [pc, #296]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800225e:	4313      	orrs	r3, r2
 8002260:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800226c:	d101      	bne.n	8002272 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800226e:	2301      	movs	r3, #1
 8002270:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002276:	2b00      	cmp	r3, #0
 8002278:	d101      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800227a:	2301      	movs	r3, #1
 800227c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d001      	beq.n	800228e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800228a:	2301      	movs	r3, #1
 800228c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0320 	and.w	r3, r3, #32
 8002296:	2b00      	cmp	r3, #0
 8002298:	f000 808b 	beq.w	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800229c:	4b3a      	ldr	r3, [pc, #232]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800229e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a0:	4a39      	ldr	r2, [pc, #228]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a6:	6413      	str	r3, [r2, #64]	; 0x40
 80022a8:	4b37      	ldr	r3, [pc, #220]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b0:	60bb      	str	r3, [r7, #8]
 80022b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80022b4:	4b35      	ldr	r3, [pc, #212]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a34      	ldr	r2, [pc, #208]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80022c0:	f7fe ffd4 	bl	800126c <HAL_GetTick>
 80022c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022c8:	f7fe ffd0 	bl	800126c <HAL_GetTick>
 80022cc:	4602      	mov	r2, r0
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b64      	cmp	r3, #100	; 0x64
 80022d4:	d901      	bls.n	80022da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e38f      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80022da:	4b2c      	ldr	r3, [pc, #176]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d0f0      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022e6:	4b28      	ldr	r3, [pc, #160]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80022e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d035      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	429a      	cmp	r2, r3
 8002302:	d02e      	beq.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002304:	4b20      	ldr	r3, [pc, #128]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800230c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800230e:	4b1e      	ldr	r3, [pc, #120]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002312:	4a1d      	ldr	r2, [pc, #116]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002314:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002318:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800231a:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800231c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800231e:	4a1a      	ldr	r2, [pc, #104]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002324:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002326:	4a18      	ldr	r2, [pc, #96]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002328:	693b      	ldr	r3, [r7, #16]
 800232a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800232c:	4b16      	ldr	r3, [pc, #88]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800232e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002330:	f003 0301 	and.w	r3, r3, #1
 8002334:	2b01      	cmp	r3, #1
 8002336:	d114      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002338:	f7fe ff98 	bl	800126c <HAL_GetTick>
 800233c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800233e:	e00a      	b.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002340:	f7fe ff94 	bl	800126c <HAL_GetTick>
 8002344:	4602      	mov	r2, r0
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	f241 3288 	movw	r2, #5000	; 0x1388
 800234e:	4293      	cmp	r3, r2
 8002350:	d901      	bls.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	e351      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002356:	4b0c      	ldr	r3, [pc, #48]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800235a:	f003 0302 	and.w	r3, r3, #2
 800235e:	2b00      	cmp	r3, #0
 8002360:	d0ee      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800236e:	d111      	bne.n	8002394 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002370:	4b05      	ldr	r3, [pc, #20]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800237c:	4b04      	ldr	r3, [pc, #16]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800237e:	400b      	ands	r3, r1
 8002380:	4901      	ldr	r1, [pc, #4]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
 8002386:	e00b      	b.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002388:	40023800 	.word	0x40023800
 800238c:	40007000 	.word	0x40007000
 8002390:	0ffffcff 	.word	0x0ffffcff
 8002394:	4bac      	ldr	r3, [pc, #688]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002396:	689b      	ldr	r3, [r3, #8]
 8002398:	4aab      	ldr	r2, [pc, #684]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800239a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800239e:	6093      	str	r3, [r2, #8]
 80023a0:	4ba9      	ldr	r3, [pc, #676]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023ac:	49a6      	ldr	r1, [pc, #664]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ae:	4313      	orrs	r3, r2
 80023b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	f003 0310 	and.w	r3, r3, #16
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d010      	beq.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80023be:	4ba2      	ldr	r3, [pc, #648]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023c4:	4aa0      	ldr	r2, [pc, #640]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023ce:	4b9e      	ldr	r3, [pc, #632]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d8:	499b      	ldr	r1, [pc, #620]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023da:	4313      	orrs	r3, r2
 80023dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d00a      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80023ec:	4b96      	ldr	r3, [pc, #600]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80023fa:	4993      	ldr	r1, [pc, #588]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00a      	beq.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800240e:	4b8e      	ldr	r3, [pc, #568]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002410:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002414:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800241c:	498a      	ldr	r1, [pc, #552]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800241e:	4313      	orrs	r3, r2
 8002420:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00a      	beq.n	8002446 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002430:	4b85      	ldr	r3, [pc, #532]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002436:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800243e:	4982      	ldr	r1, [pc, #520]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002440:	4313      	orrs	r3, r2
 8002442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800244e:	2b00      	cmp	r3, #0
 8002450:	d00a      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002452:	4b7d      	ldr	r3, [pc, #500]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002458:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002460:	4979      	ldr	r1, [pc, #484]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002462:	4313      	orrs	r3, r2
 8002464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002474:	4b74      	ldr	r3, [pc, #464]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	f023 0203 	bic.w	r2, r3, #3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	4971      	ldr	r1, [pc, #452]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002484:	4313      	orrs	r3, r2
 8002486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002492:	2b00      	cmp	r3, #0
 8002494:	d00a      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002496:	4b6c      	ldr	r3, [pc, #432]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800249c:	f023 020c 	bic.w	r2, r3, #12
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024a4:	4968      	ldr	r1, [pc, #416]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00a      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b8:	4b63      	ldr	r3, [pc, #396]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80024c6:	4960      	ldr	r1, [pc, #384]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d00a      	beq.n	80024f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80024da:	4b5b      	ldr	r3, [pc, #364]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024e8:	4957      	ldr	r1, [pc, #348]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024ea:	4313      	orrs	r3, r2
 80024ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d00a      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80024fc:	4b52      	ldr	r3, [pc, #328]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250a:	494f      	ldr	r1, [pc, #316]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00a      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002524:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800252c:	4946      	ldr	r1, [pc, #280]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800252e:	4313      	orrs	r3, r2
 8002530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800253c:	2b00      	cmp	r3, #0
 800253e:	d00a      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002540:	4b41      	ldr	r3, [pc, #260]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002546:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800254e:	493e      	ldr	r1, [pc, #248]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002550:	4313      	orrs	r3, r2
 8002552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d00a      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002562:	4b39      	ldr	r3, [pc, #228]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002570:	4935      	ldr	r1, [pc, #212]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002572:	4313      	orrs	r3, r2
 8002574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002580:	2b00      	cmp	r3, #0
 8002582:	d00a      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002592:	492d      	ldr	r1, [pc, #180]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002594:	4313      	orrs	r3, r2
 8002596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d011      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80025a6:	4b28      	ldr	r3, [pc, #160]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025b4:	4924      	ldr	r1, [pc, #144]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80025c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c4:	d101      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80025c6:	2301      	movs	r3, #1
 80025c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0308 	and.w	r3, r3, #8
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d001      	beq.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80025d6:	2301      	movs	r3, #1
 80025d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e6:	4b18      	ldr	r3, [pc, #96]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025f4:	4914      	ldr	r1, [pc, #80]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80025f6:	4313      	orrs	r3, r2
 80025f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d00b      	beq.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002608:	4b0f      	ldr	r3, [pc, #60]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800260a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002618:	490b      	ldr	r1, [pc, #44]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800261a:	4313      	orrs	r3, r2
 800261c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00f      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800262e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002632:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800263c:	4902      	ldr	r1, [pc, #8]	; (8002648 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800263e:	4313      	orrs	r3, r2
 8002640:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002644:	e002      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002646:	bf00      	nop
 8002648:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d00b      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002658:	4b8a      	ldr	r3, [pc, #552]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800265a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002668:	4986      	ldr	r1, [pc, #536]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800266a:	4313      	orrs	r3, r2
 800266c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d00b      	beq.n	8002694 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800267c:	4b81      	ldr	r3, [pc, #516]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800267e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002682:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800268c:	497d      	ldr	r1, [pc, #500]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800268e:	4313      	orrs	r3, r2
 8002690:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d006      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	f000 80d6 	beq.w	8002854 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80026a8:	4b76      	ldr	r3, [pc, #472]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	4a75      	ldr	r2, [pc, #468]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80026b2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80026b4:	f7fe fdda 	bl	800126c <HAL_GetTick>
 80026b8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ba:	e008      	b.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80026bc:	f7fe fdd6 	bl	800126c <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	697b      	ldr	r3, [r7, #20]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	; 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e195      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80026ce:	4b6d      	ldr	r3, [pc, #436]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1f0      	bne.n	80026bc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d021      	beq.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d11d      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80026ee:	4b65      	ldr	r3, [pc, #404]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026f0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026f4:	0c1b      	lsrs	r3, r3, #16
 80026f6:	f003 0303 	and.w	r3, r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80026fc:	4b61      	ldr	r3, [pc, #388]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80026fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002702:	0e1b      	lsrs	r3, r3, #24
 8002704:	f003 030f 	and.w	r3, r3, #15
 8002708:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	019a      	lsls	r2, r3, #6
 8002710:	693b      	ldr	r3, [r7, #16]
 8002712:	041b      	lsls	r3, r3, #16
 8002714:	431a      	orrs	r2, r3
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	061b      	lsls	r3, r3, #24
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	071b      	lsls	r3, r3, #28
 8002722:	4958      	ldr	r1, [pc, #352]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002724:	4313      	orrs	r3, r2
 8002726:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002732:	2b00      	cmp	r3, #0
 8002734:	d004      	beq.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800273a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800273e:	d00a      	beq.n	8002756 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002748:	2b00      	cmp	r3, #0
 800274a:	d02e      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002750:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002754:	d129      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002756:	4b4b      	ldr	r3, [pc, #300]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002758:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800275c:	0c1b      	lsrs	r3, r3, #16
 800275e:	f003 0303 	and.w	r3, r3, #3
 8002762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002764:	4b47      	ldr	r3, [pc, #284]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	0f1b      	lsrs	r3, r3, #28
 800276c:	f003 0307 	and.w	r3, r3, #7
 8002770:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	019a      	lsls	r2, r3, #6
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	041b      	lsls	r3, r3, #16
 800277c:	431a      	orrs	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	68db      	ldr	r3, [r3, #12]
 8002782:	061b      	lsls	r3, r3, #24
 8002784:	431a      	orrs	r2, r3
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	071b      	lsls	r3, r3, #28
 800278a:	493e      	ldr	r1, [pc, #248]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800278c:	4313      	orrs	r3, r2
 800278e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002792:	4b3c      	ldr	r3, [pc, #240]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002794:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002798:	f023 021f 	bic.w	r2, r3, #31
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027a0:	3b01      	subs	r3, #1
 80027a2:	4938      	ldr	r1, [pc, #224]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01d      	beq.n	80027f2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027b6:	4b33      	ldr	r3, [pc, #204]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027bc:	0e1b      	lsrs	r3, r3, #24
 80027be:	f003 030f 	and.w	r3, r3, #15
 80027c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80027c4:	4b2f      	ldr	r3, [pc, #188]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027ca:	0f1b      	lsrs	r3, r3, #28
 80027cc:	f003 0307 	and.w	r3, r3, #7
 80027d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	685b      	ldr	r3, [r3, #4]
 80027d6:	019a      	lsls	r2, r3, #6
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	041b      	lsls	r3, r3, #16
 80027de:	431a      	orrs	r2, r3
 80027e0:	693b      	ldr	r3, [r7, #16]
 80027e2:	061b      	lsls	r3, r3, #24
 80027e4:	431a      	orrs	r2, r3
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	071b      	lsls	r3, r3, #28
 80027ea:	4926      	ldr	r1, [pc, #152]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80027ec:	4313      	orrs	r3, r2
 80027ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d011      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	685b      	ldr	r3, [r3, #4]
 8002802:	019a      	lsls	r2, r3, #6
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	041b      	lsls	r3, r3, #16
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	68db      	ldr	r3, [r3, #12]
 8002810:	061b      	lsls	r3, r3, #24
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	071b      	lsls	r3, r3, #28
 800281a:	491a      	ldr	r1, [pc, #104]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002822:	4b18      	ldr	r3, [pc, #96]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a17      	ldr	r2, [pc, #92]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002828:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800282c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800282e:	f7fe fd1d 	bl	800126c <HAL_GetTick>
 8002832:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002834:	e008      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002836:	f7fe fd19 	bl	800126c <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b64      	cmp	r3, #100	; 0x64
 8002842:	d901      	bls.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d8      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002848:	4b0e      	ldr	r3, [pc, #56]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002854:	69bb      	ldr	r3, [r7, #24]
 8002856:	2b01      	cmp	r3, #1
 8002858:	f040 80ce 	bne.w	80029f8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800285c:	4b09      	ldr	r3, [pc, #36]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a08      	ldr	r2, [pc, #32]	; (8002884 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002862:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002866:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002868:	f7fe fd00 	bl	800126c <HAL_GetTick>
 800286c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800286e:	e00b      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002870:	f7fe fcfc 	bl	800126c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	697b      	ldr	r3, [r7, #20]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	2b64      	cmp	r3, #100	; 0x64
 800287c:	d904      	bls.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800287e:	2303      	movs	r3, #3
 8002880:	e0bb      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002882:	bf00      	nop
 8002884:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002888:	4b5e      	ldr	r3, [pc, #376]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002890:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002894:	d0ec      	beq.n	8002870 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d003      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d009      	beq.n	80028be <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d02e      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d12a      	bne.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80028be:	4b51      	ldr	r3, [pc, #324]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028c4:	0c1b      	lsrs	r3, r3, #16
 80028c6:	f003 0303 	and.w	r3, r3, #3
 80028ca:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80028cc:	4b4d      	ldr	r3, [pc, #308]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d2:	0f1b      	lsrs	r3, r3, #28
 80028d4:	f003 0307 	and.w	r3, r3, #7
 80028d8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	695b      	ldr	r3, [r3, #20]
 80028de:	019a      	lsls	r2, r3, #6
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	041b      	lsls	r3, r3, #16
 80028e4:	431a      	orrs	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	061b      	lsls	r3, r3, #24
 80028ec:	431a      	orrs	r2, r3
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	071b      	lsls	r3, r3, #28
 80028f2:	4944      	ldr	r1, [pc, #272]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80028fa:	4b42      	ldr	r3, [pc, #264]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80028fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002900:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002908:	3b01      	subs	r3, #1
 800290a:	021b      	lsls	r3, r3, #8
 800290c:	493d      	ldr	r1, [pc, #244]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800290e:	4313      	orrs	r3, r2
 8002910:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d022      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002924:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002928:	d11d      	bne.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800292a:	4b36      	ldr	r3, [pc, #216]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800292c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002930:	0e1b      	lsrs	r3, r3, #24
 8002932:	f003 030f 	and.w	r3, r3, #15
 8002936:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800293a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800293e:	0f1b      	lsrs	r3, r3, #28
 8002940:	f003 0307 	and.w	r3, r3, #7
 8002944:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	695b      	ldr	r3, [r3, #20]
 800294a:	019a      	lsls	r2, r3, #6
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	041b      	lsls	r3, r3, #16
 8002952:	431a      	orrs	r2, r3
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	061b      	lsls	r3, r3, #24
 8002958:	431a      	orrs	r2, r3
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	4929      	ldr	r1, [pc, #164]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002960:	4313      	orrs	r3, r2
 8002962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0308 	and.w	r3, r3, #8
 800296e:	2b00      	cmp	r3, #0
 8002970:	d028      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002972:	4b24      	ldr	r3, [pc, #144]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002978:	0e1b      	lsrs	r3, r3, #24
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002980:	4b20      	ldr	r3, [pc, #128]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002982:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002986:	0c1b      	lsrs	r3, r3, #16
 8002988:	f003 0303 	and.w	r3, r3, #3
 800298c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	695b      	ldr	r3, [r3, #20]
 8002992:	019a      	lsls	r2, r3, #6
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	041b      	lsls	r3, r3, #16
 8002998:	431a      	orrs	r2, r3
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	061b      	lsls	r3, r3, #24
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	69db      	ldr	r3, [r3, #28]
 80029a4:	071b      	lsls	r3, r3, #28
 80029a6:	4917      	ldr	r1, [pc, #92]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029a8:	4313      	orrs	r3, r2
 80029aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80029ae:	4b15      	ldr	r3, [pc, #84]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80029b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029bc:	4911      	ldr	r1, [pc, #68]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029be:	4313      	orrs	r3, r2
 80029c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80029c4:	4b0f      	ldr	r3, [pc, #60]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029d0:	f7fe fc4c 	bl	800126c <HAL_GetTick>
 80029d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80029d8:	f7fe fc48 	bl	800126c <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b64      	cmp	r3, #100	; 0x64
 80029e4:	d901      	bls.n	80029ea <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e007      	b.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80029ea:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80029f6:	d1ef      	bne.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3720      	adds	r7, #32
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40023800 	.word	0x40023800

08002a08 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b082      	sub	sp, #8
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d101      	bne.n	8002a1a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e049      	b.n	8002aae <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d106      	bne.n	8002a34 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7fe fa48 	bl	8000ec4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	2202      	movs	r2, #2
 8002a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681a      	ldr	r2, [r3, #0]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	3304      	adds	r3, #4
 8002a44:	4619      	mov	r1, r3
 8002a46:	4610      	mov	r0, r2
 8002a48:	f000 fb6e 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2201      	movs	r2, #1
 8002a58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2201      	movs	r2, #1
 8002a68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2201      	movs	r2, #1
 8002a70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	2201      	movs	r2, #1
 8002a78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	2201      	movs	r2, #1
 8002a80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2201      	movs	r2, #1
 8002a88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2201      	movs	r2, #1
 8002a90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	2201      	movs	r2, #1
 8002a98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2201      	movs	r2, #1
 8002aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3708      	adds	r7, #8
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}

08002ab6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ac4:	2301      	movs	r3, #1
 8002ac6:	e049      	b.n	8002b5c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d106      	bne.n	8002ae2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 f841 	bl	8002b64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2202      	movs	r2, #2
 8002ae6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681a      	ldr	r2, [r3, #0]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	3304      	adds	r3, #4
 8002af2:	4619      	mov	r1, r3
 8002af4:	4610      	mov	r0, r2
 8002af6:	f000 fb17 	bl	8003128 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2201      	movs	r2, #1
 8002afe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2201      	movs	r2, #1
 8002b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2201      	movs	r2, #1
 8002b3e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2201      	movs	r2, #1
 8002b46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2201      	movs	r2, #1
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3708      	adds	r7, #8
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}

08002b64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b083      	sub	sp, #12
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d109      	bne.n	8002b9c <HAL_TIM_PWM_Start+0x24>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b8e:	b2db      	uxtb	r3, r3
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	bf14      	ite	ne
 8002b94:	2301      	movne	r3, #1
 8002b96:	2300      	moveq	r3, #0
 8002b98:	b2db      	uxtb	r3, r3
 8002b9a:	e03c      	b.n	8002c16 <HAL_TIM_PWM_Start+0x9e>
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b04      	cmp	r3, #4
 8002ba0:	d109      	bne.n	8002bb6 <HAL_TIM_PWM_Start+0x3e>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	2b01      	cmp	r3, #1
 8002bac:	bf14      	ite	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	2300      	moveq	r3, #0
 8002bb2:	b2db      	uxtb	r3, r3
 8002bb4:	e02f      	b.n	8002c16 <HAL_TIM_PWM_Start+0x9e>
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	2b08      	cmp	r3, #8
 8002bba:	d109      	bne.n	8002bd0 <HAL_TIM_PWM_Start+0x58>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bc2:	b2db      	uxtb	r3, r3
 8002bc4:	2b01      	cmp	r3, #1
 8002bc6:	bf14      	ite	ne
 8002bc8:	2301      	movne	r3, #1
 8002bca:	2300      	moveq	r3, #0
 8002bcc:	b2db      	uxtb	r3, r3
 8002bce:	e022      	b.n	8002c16 <HAL_TIM_PWM_Start+0x9e>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	2b0c      	cmp	r3, #12
 8002bd4:	d109      	bne.n	8002bea <HAL_TIM_PWM_Start+0x72>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	bf14      	ite	ne
 8002be2:	2301      	movne	r3, #1
 8002be4:	2300      	moveq	r3, #0
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	e015      	b.n	8002c16 <HAL_TIM_PWM_Start+0x9e>
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d109      	bne.n	8002c04 <HAL_TIM_PWM_Start+0x8c>
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	2b01      	cmp	r3, #1
 8002bfa:	bf14      	ite	ne
 8002bfc:	2301      	movne	r3, #1
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	e008      	b.n	8002c16 <HAL_TIM_PWM_Start+0x9e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e092      	b.n	8002d44 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d104      	bne.n	8002c2e <HAL_TIM_PWM_Start+0xb6>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2c:	e023      	b.n	8002c76 <HAL_TIM_PWM_Start+0xfe>
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	2b04      	cmp	r3, #4
 8002c32:	d104      	bne.n	8002c3e <HAL_TIM_PWM_Start+0xc6>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2202      	movs	r2, #2
 8002c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c3c:	e01b      	b.n	8002c76 <HAL_TIM_PWM_Start+0xfe>
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d104      	bne.n	8002c4e <HAL_TIM_PWM_Start+0xd6>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2202      	movs	r2, #2
 8002c48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c4c:	e013      	b.n	8002c76 <HAL_TIM_PWM_Start+0xfe>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	2b0c      	cmp	r3, #12
 8002c52:	d104      	bne.n	8002c5e <HAL_TIM_PWM_Start+0xe6>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c5c:	e00b      	b.n	8002c76 <HAL_TIM_PWM_Start+0xfe>
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d104      	bne.n	8002c6e <HAL_TIM_PWM_Start+0xf6>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2202      	movs	r2, #2
 8002c68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c6c:	e003      	b.n	8002c76 <HAL_TIM_PWM_Start+0xfe>
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2202      	movs	r2, #2
 8002c72:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	6839      	ldr	r1, [r7, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 fdea 	bl	8003858 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <HAL_TIM_PWM_Start+0x1d4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d004      	beq.n	8002c98 <HAL_TIM_PWM_Start+0x120>
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a2f      	ldr	r2, [pc, #188]	; (8002d50 <HAL_TIM_PWM_Start+0x1d8>)
 8002c94:	4293      	cmp	r3, r2
 8002c96:	d101      	bne.n	8002c9c <HAL_TIM_PWM_Start+0x124>
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e000      	b.n	8002c9e <HAL_TIM_PWM_Start+0x126>
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d007      	beq.n	8002cb2 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cb0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	4a25      	ldr	r2, [pc, #148]	; (8002d4c <HAL_TIM_PWM_Start+0x1d4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d022      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cc4:	d01d      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a22      	ldr	r2, [pc, #136]	; (8002d54 <HAL_TIM_PWM_Start+0x1dc>)
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d018      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	4a20      	ldr	r2, [pc, #128]	; (8002d58 <HAL_TIM_PWM_Start+0x1e0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d013      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a1f      	ldr	r2, [pc, #124]	; (8002d5c <HAL_TIM_PWM_Start+0x1e4>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d00e      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a19      	ldr	r2, [pc, #100]	; (8002d50 <HAL_TIM_PWM_Start+0x1d8>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	d009      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1b      	ldr	r2, [pc, #108]	; (8002d60 <HAL_TIM_PWM_Start+0x1e8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <HAL_TIM_PWM_Start+0x18a>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a19      	ldr	r2, [pc, #100]	; (8002d64 <HAL_TIM_PWM_Start+0x1ec>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d115      	bne.n	8002d2e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	4b17      	ldr	r3, [pc, #92]	; (8002d68 <HAL_TIM_PWM_Start+0x1f0>)
 8002d0a:	4013      	ands	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	2b06      	cmp	r3, #6
 8002d12:	d015      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1c8>
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d1a:	d011      	beq.n	8002d40 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f042 0201 	orr.w	r2, r2, #1
 8002d2a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d2c:	e008      	b.n	8002d40 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	681a      	ldr	r2, [r3, #0]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f042 0201 	orr.w	r2, r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]
 8002d3e:	e000      	b.n	8002d42 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d40:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3710      	adds	r7, #16
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40010000 	.word	0x40010000
 8002d50:	40010400 	.word	0x40010400
 8002d54:	40000400 	.word	0x40000400
 8002d58:	40000800 	.word	0x40000800
 8002d5c:	40000c00 	.word	0x40000c00
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40001800 	.word	0x40001800
 8002d68:	00010007 	.word	0x00010007

08002d6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b086      	sub	sp, #24
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	60f8      	str	r0, [r7, #12]
 8002d74:	60b9      	str	r1, [r7, #8]
 8002d76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e0ff      	b.n	8002f8a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2b14      	cmp	r3, #20
 8002d96:	f200 80f0 	bhi.w	8002f7a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002d9a:	a201      	add	r2, pc, #4	; (adr r2, 8002da0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002d9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da0:	08002df5 	.word	0x08002df5
 8002da4:	08002f7b 	.word	0x08002f7b
 8002da8:	08002f7b 	.word	0x08002f7b
 8002dac:	08002f7b 	.word	0x08002f7b
 8002db0:	08002e35 	.word	0x08002e35
 8002db4:	08002f7b 	.word	0x08002f7b
 8002db8:	08002f7b 	.word	0x08002f7b
 8002dbc:	08002f7b 	.word	0x08002f7b
 8002dc0:	08002e77 	.word	0x08002e77
 8002dc4:	08002f7b 	.word	0x08002f7b
 8002dc8:	08002f7b 	.word	0x08002f7b
 8002dcc:	08002f7b 	.word	0x08002f7b
 8002dd0:	08002eb7 	.word	0x08002eb7
 8002dd4:	08002f7b 	.word	0x08002f7b
 8002dd8:	08002f7b 	.word	0x08002f7b
 8002ddc:	08002f7b 	.word	0x08002f7b
 8002de0:	08002ef9 	.word	0x08002ef9
 8002de4:	08002f7b 	.word	0x08002f7b
 8002de8:	08002f7b 	.word	0x08002f7b
 8002dec:	08002f7b 	.word	0x08002f7b
 8002df0:	08002f39 	.word	0x08002f39
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	68b9      	ldr	r1, [r7, #8]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fa34 	bl	8003268 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	699a      	ldr	r2, [r3, #24]
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f042 0208 	orr.w	r2, r2, #8
 8002e0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	699a      	ldr	r2, [r3, #24]
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 0204 	bic.w	r2, r2, #4
 8002e1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	6999      	ldr	r1, [r3, #24]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	619a      	str	r2, [r3, #24]
      break;
 8002e32:	e0a5      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	68b9      	ldr	r1, [r7, #8]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fa86 	bl	800334c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	699a      	ldr	r2, [r3, #24]
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	699a      	ldr	r2, [r3, #24]
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	6999      	ldr	r1, [r3, #24]
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	021a      	lsls	r2, r3, #8
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	430a      	orrs	r2, r1
 8002e72:	619a      	str	r2, [r3, #24]
      break;
 8002e74:	e084      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68b9      	ldr	r1, [r7, #8]
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f000 fadd 	bl	800343c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	69da      	ldr	r2, [r3, #28]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f042 0208 	orr.w	r2, r2, #8
 8002e90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	69da      	ldr	r2, [r3, #28]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f022 0204 	bic.w	r2, r2, #4
 8002ea0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	69d9      	ldr	r1, [r3, #28]
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	691a      	ldr	r2, [r3, #16]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	430a      	orrs	r2, r1
 8002eb2:	61da      	str	r2, [r3, #28]
      break;
 8002eb4:	e064      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	68b9      	ldr	r1, [r7, #8]
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fb33 	bl	8003528 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	69da      	ldr	r2, [r3, #28]
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ed0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	69da      	ldr	r2, [r3, #28]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ee0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	69d9      	ldr	r1, [r3, #28]
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	691b      	ldr	r3, [r3, #16]
 8002eec:	021a      	lsls	r2, r3, #8
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	61da      	str	r2, [r3, #28]
      break;
 8002ef6:	e043      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	68b9      	ldr	r1, [r7, #8]
 8002efe:	4618      	mov	r0, r3
 8002f00:	f000 fb6a 	bl	80035d8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0208 	orr.w	r2, r2, #8
 8002f12:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f022 0204 	bic.w	r2, r2, #4
 8002f22:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	691a      	ldr	r2, [r3, #16]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f36:	e023      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 fb9c 	bl	800367c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f52:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f62:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	691b      	ldr	r3, [r3, #16]
 8002f6e:	021a      	lsls	r2, r3, #8
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	430a      	orrs	r2, r1
 8002f76:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f78:	e002      	b.n	8002f80 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	75fb      	strb	r3, [r7, #23]
      break;
 8002f7e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002f88:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop

08002f94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b084      	sub	sp, #16
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
 8002f9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_TIM_ConfigClockSource+0x1c>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e0b4      	b.n	800311a <HAL_TIM_ConfigClockSource+0x186>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2202      	movs	r2, #2
 8002fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	689b      	ldr	r3, [r3, #8]
 8002fc6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4b56      	ldr	r3, [pc, #344]	; (8003124 <HAL_TIM_ConfigClockSource+0x190>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002fd6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68ba      	ldr	r2, [r7, #8]
 8002fde:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fe8:	d03e      	beq.n	8003068 <HAL_TIM_ConfigClockSource+0xd4>
 8002fea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fee:	f200 8087 	bhi.w	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8002ff2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ff6:	f000 8086 	beq.w	8003106 <HAL_TIM_ConfigClockSource+0x172>
 8002ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffe:	d87f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003000:	2b70      	cmp	r3, #112	; 0x70
 8003002:	d01a      	beq.n	800303a <HAL_TIM_ConfigClockSource+0xa6>
 8003004:	2b70      	cmp	r3, #112	; 0x70
 8003006:	d87b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003008:	2b60      	cmp	r3, #96	; 0x60
 800300a:	d050      	beq.n	80030ae <HAL_TIM_ConfigClockSource+0x11a>
 800300c:	2b60      	cmp	r3, #96	; 0x60
 800300e:	d877      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003010:	2b50      	cmp	r3, #80	; 0x50
 8003012:	d03c      	beq.n	800308e <HAL_TIM_ConfigClockSource+0xfa>
 8003014:	2b50      	cmp	r3, #80	; 0x50
 8003016:	d873      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b40      	cmp	r3, #64	; 0x40
 800301a:	d058      	beq.n	80030ce <HAL_TIM_ConfigClockSource+0x13a>
 800301c:	2b40      	cmp	r3, #64	; 0x40
 800301e:	d86f      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b30      	cmp	r3, #48	; 0x30
 8003022:	d064      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003024:	2b30      	cmp	r3, #48	; 0x30
 8003026:	d86b      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b20      	cmp	r3, #32
 800302a:	d060      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 800302c:	2b20      	cmp	r3, #32
 800302e:	d867      	bhi.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b00      	cmp	r3, #0
 8003032:	d05c      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003034:	2b10      	cmp	r3, #16
 8003036:	d05a      	beq.n	80030ee <HAL_TIM_ConfigClockSource+0x15a>
 8003038:	e062      	b.n	8003100 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800304a:	f000 fbe5 	bl	8003818 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800305c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	68ba      	ldr	r2, [r7, #8]
 8003064:	609a      	str	r2, [r3, #8]
      break;
 8003066:	e04f      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003078:	f000 fbce 	bl	8003818 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800308a:	609a      	str	r2, [r3, #8]
      break;
 800308c:	e03c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800309a:	461a      	mov	r2, r3
 800309c:	f000 fb42 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	2150      	movs	r1, #80	; 0x50
 80030a6:	4618      	mov	r0, r3
 80030a8:	f000 fb9b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80030ac:	e02c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ba:	461a      	mov	r2, r3
 80030bc:	f000 fb61 	bl	8003782 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2160      	movs	r1, #96	; 0x60
 80030c6:	4618      	mov	r0, r3
 80030c8:	f000 fb8b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80030cc:	e01c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030da:	461a      	mov	r2, r3
 80030dc:	f000 fb22 	bl	8003724 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2140      	movs	r1, #64	; 0x40
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 fb7b 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80030ec:	e00c      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681a      	ldr	r2, [r3, #0]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4619      	mov	r1, r3
 80030f8:	4610      	mov	r0, r2
 80030fa:	f000 fb72 	bl	80037e2 <TIM_ITRx_SetConfig>
      break;
 80030fe:	e003      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	73fb      	strb	r3, [r7, #15]
      break;
 8003104:	e000      	b.n	8003108 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003106:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2201      	movs	r2, #1
 800310c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003118:	7bfb      	ldrb	r3, [r7, #15]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3710      	adds	r7, #16
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}
 8003122:	bf00      	nop
 8003124:	fffeff88 	.word	0xfffeff88

08003128 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003128:	b480      	push	{r7}
 800312a:	b085      	sub	sp, #20
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	4a40      	ldr	r2, [pc, #256]	; (800323c <TIM_Base_SetConfig+0x114>)
 800313c:	4293      	cmp	r3, r2
 800313e:	d013      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003146:	d00f      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	4a3d      	ldr	r2, [pc, #244]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00b      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	4a3c      	ldr	r2, [pc, #240]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d007      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	4a3b      	ldr	r2, [pc, #236]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d003      	beq.n	8003168 <TIM_Base_SetConfig+0x40>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	4a3a      	ldr	r2, [pc, #232]	; (800324c <TIM_Base_SetConfig+0x124>)
 8003164:	4293      	cmp	r3, r2
 8003166:	d108      	bne.n	800317a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800316e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4313      	orrs	r3, r2
 8003178:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	4a2f      	ldr	r2, [pc, #188]	; (800323c <TIM_Base_SetConfig+0x114>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d02b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003188:	d027      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	4a2c      	ldr	r2, [pc, #176]	; (8003240 <TIM_Base_SetConfig+0x118>)
 800318e:	4293      	cmp	r3, r2
 8003190:	d023      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a2b      	ldr	r2, [pc, #172]	; (8003244 <TIM_Base_SetConfig+0x11c>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a2a      	ldr	r2, [pc, #168]	; (8003248 <TIM_Base_SetConfig+0x120>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d01b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a29      	ldr	r2, [pc, #164]	; (800324c <TIM_Base_SetConfig+0x124>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d017      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a28      	ldr	r2, [pc, #160]	; (8003250 <TIM_Base_SetConfig+0x128>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d013      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a27      	ldr	r2, [pc, #156]	; (8003254 <TIM_Base_SetConfig+0x12c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d00f      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_Base_SetConfig+0x130>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d00b      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a25      	ldr	r2, [pc, #148]	; (800325c <TIM_Base_SetConfig+0x134>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d007      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a24      	ldr	r2, [pc, #144]	; (8003260 <TIM_Base_SetConfig+0x138>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d003      	beq.n	80031da <TIM_Base_SetConfig+0xb2>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a23      	ldr	r2, [pc, #140]	; (8003264 <TIM_Base_SetConfig+0x13c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d108      	bne.n	80031ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031e2:	683b      	ldr	r3, [r7, #0]
 80031e4:	68db      	ldr	r3, [r3, #12]
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	68fa      	ldr	r2, [r7, #12]
 80031fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689a      	ldr	r2, [r3, #8]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a0a      	ldr	r2, [pc, #40]	; (800323c <TIM_Base_SetConfig+0x114>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d003      	beq.n	8003220 <TIM_Base_SetConfig+0xf8>
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	4a0c      	ldr	r2, [pc, #48]	; (800324c <TIM_Base_SetConfig+0x124>)
 800321c:	4293      	cmp	r3, r2
 800321e:	d103      	bne.n	8003228 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	691a      	ldr	r2, [r3, #16]
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	615a      	str	r2, [r3, #20]
}
 800322e:	bf00      	nop
 8003230:	3714      	adds	r7, #20
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
 800323a:	bf00      	nop
 800323c:	40010000 	.word	0x40010000
 8003240:	40000400 	.word	0x40000400
 8003244:	40000800 	.word	0x40000800
 8003248:	40000c00 	.word	0x40000c00
 800324c:	40010400 	.word	0x40010400
 8003250:	40014000 	.word	0x40014000
 8003254:	40014400 	.word	0x40014400
 8003258:	40014800 	.word	0x40014800
 800325c:	40001800 	.word	0x40001800
 8003260:	40001c00 	.word	0x40001c00
 8003264:	40002000 	.word	0x40002000

08003268 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6a1b      	ldr	r3, [r3, #32]
 8003282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	699b      	ldr	r3, [r3, #24]
 800328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003290:	68fa      	ldr	r2, [r7, #12]
 8003292:	4b2b      	ldr	r3, [pc, #172]	; (8003340 <TIM_OC1_SetConfig+0xd8>)
 8003294:	4013      	ands	r3, r2
 8003296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	f023 0303 	bic.w	r3, r3, #3
 800329e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68fa      	ldr	r2, [r7, #12]
 80032a6:	4313      	orrs	r3, r2
 80032a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	f023 0302 	bic.w	r3, r3, #2
 80032b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	697a      	ldr	r2, [r7, #20]
 80032b8:	4313      	orrs	r3, r2
 80032ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	4a21      	ldr	r2, [pc, #132]	; (8003344 <TIM_OC1_SetConfig+0xdc>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	d003      	beq.n	80032cc <TIM_OC1_SetConfig+0x64>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	4a20      	ldr	r2, [pc, #128]	; (8003348 <TIM_OC1_SetConfig+0xe0>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d10c      	bne.n	80032e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	f023 0308 	bic.w	r3, r3, #8
 80032d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	697a      	ldr	r2, [r7, #20]
 80032da:	4313      	orrs	r3, r2
 80032dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f023 0304 	bic.w	r3, r3, #4
 80032e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a16      	ldr	r2, [pc, #88]	; (8003344 <TIM_OC1_SetConfig+0xdc>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d003      	beq.n	80032f6 <TIM_OC1_SetConfig+0x8e>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a15      	ldr	r2, [pc, #84]	; (8003348 <TIM_OC1_SetConfig+0xe0>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d111      	bne.n	800331a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032fe:	693b      	ldr	r3, [r7, #16]
 8003300:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	695b      	ldr	r3, [r3, #20]
 800330a:	693a      	ldr	r2, [r7, #16]
 800330c:	4313      	orrs	r3, r2
 800330e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	699b      	ldr	r3, [r3, #24]
 8003314:	693a      	ldr	r2, [r7, #16]
 8003316:	4313      	orrs	r3, r2
 8003318:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	693a      	ldr	r2, [r7, #16]
 800331e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	685a      	ldr	r2, [r3, #4]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	697a      	ldr	r2, [r7, #20]
 8003332:	621a      	str	r2, [r3, #32]
}
 8003334:	bf00      	nop
 8003336:	371c      	adds	r7, #28
 8003338:	46bd      	mov	sp, r7
 800333a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333e:	4770      	bx	lr
 8003340:	fffeff8f 	.word	0xfffeff8f
 8003344:	40010000 	.word	0x40010000
 8003348:	40010400 	.word	0x40010400

0800334c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800334c:	b480      	push	{r7}
 800334e:	b087      	sub	sp, #28
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
 8003354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	f023 0210 	bic.w	r2, r3, #16
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003374:	68fa      	ldr	r2, [r7, #12]
 8003376:	4b2e      	ldr	r3, [pc, #184]	; (8003430 <TIM_OC2_SetConfig+0xe4>)
 8003378:	4013      	ands	r3, r2
 800337a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	68fa      	ldr	r2, [r7, #12]
 800338c:	4313      	orrs	r3, r2
 800338e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003390:	697b      	ldr	r3, [r7, #20]
 8003392:	f023 0320 	bic.w	r3, r3, #32
 8003396:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	011b      	lsls	r3, r3, #4
 800339e:	697a      	ldr	r2, [r7, #20]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a23      	ldr	r2, [pc, #140]	; (8003434 <TIM_OC2_SetConfig+0xe8>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d003      	beq.n	80033b4 <TIM_OC2_SetConfig+0x68>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a22      	ldr	r2, [pc, #136]	; (8003438 <TIM_OC2_SetConfig+0xec>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d10d      	bne.n	80033d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80033ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	011b      	lsls	r3, r3, #4
 80033c2:	697a      	ldr	r2, [r7, #20]
 80033c4:	4313      	orrs	r3, r2
 80033c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a18      	ldr	r2, [pc, #96]	; (8003434 <TIM_OC2_SetConfig+0xe8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d003      	beq.n	80033e0 <TIM_OC2_SetConfig+0x94>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	4a17      	ldr	r2, [pc, #92]	; (8003438 <TIM_OC2_SetConfig+0xec>)
 80033dc:	4293      	cmp	r3, r2
 80033de:	d113      	bne.n	8003408 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	695b      	ldr	r3, [r3, #20]
 80033f4:	009b      	lsls	r3, r3, #2
 80033f6:	693a      	ldr	r2, [r7, #16]
 80033f8:	4313      	orrs	r3, r2
 80033fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	699b      	ldr	r3, [r3, #24]
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	693a      	ldr	r2, [r7, #16]
 8003404:	4313      	orrs	r3, r2
 8003406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	693a      	ldr	r2, [r7, #16]
 800340c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68fa      	ldr	r2, [r7, #12]
 8003412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685a      	ldr	r2, [r3, #4]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	621a      	str	r2, [r3, #32]
}
 8003422:	bf00      	nop
 8003424:	371c      	adds	r7, #28
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr
 800342e:	bf00      	nop
 8003430:	feff8fff 	.word	0xfeff8fff
 8003434:	40010000 	.word	0x40010000
 8003438:	40010400 	.word	0x40010400

0800343c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800343c:	b480      	push	{r7}
 800343e:	b087      	sub	sp, #28
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a1b      	ldr	r3, [r3, #32]
 800344a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a1b      	ldr	r3, [r3, #32]
 8003456:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	69db      	ldr	r3, [r3, #28]
 8003462:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003464:	68fa      	ldr	r2, [r7, #12]
 8003466:	4b2d      	ldr	r3, [pc, #180]	; (800351c <TIM_OC3_SetConfig+0xe0>)
 8003468:	4013      	ands	r3, r2
 800346a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0303 	bic.w	r3, r3, #3
 8003472:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003484:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	021b      	lsls	r3, r3, #8
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	4313      	orrs	r3, r2
 8003490:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a22      	ldr	r2, [pc, #136]	; (8003520 <TIM_OC3_SetConfig+0xe4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d003      	beq.n	80034a2 <TIM_OC3_SetConfig+0x66>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a21      	ldr	r2, [pc, #132]	; (8003524 <TIM_OC3_SetConfig+0xe8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d10d      	bne.n	80034be <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80034a2:	697b      	ldr	r3, [r7, #20]
 80034a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	021b      	lsls	r3, r3, #8
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	4313      	orrs	r3, r2
 80034b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a17      	ldr	r2, [pc, #92]	; (8003520 <TIM_OC3_SetConfig+0xe4>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d003      	beq.n	80034ce <TIM_OC3_SetConfig+0x92>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a16      	ldr	r2, [pc, #88]	; (8003524 <TIM_OC3_SetConfig+0xe8>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d113      	bne.n	80034f6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034d6:	693b      	ldr	r3, [r7, #16]
 80034d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	695b      	ldr	r3, [r3, #20]
 80034e2:	011b      	lsls	r3, r3, #4
 80034e4:	693a      	ldr	r2, [r7, #16]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	699b      	ldr	r3, [r3, #24]
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68fa      	ldr	r2, [r7, #12]
 8003500:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	621a      	str	r2, [r3, #32]
}
 8003510:	bf00      	nop
 8003512:	371c      	adds	r7, #28
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr
 800351c:	fffeff8f 	.word	0xfffeff8f
 8003520:	40010000 	.word	0x40010000
 8003524:	40010400 	.word	0x40010400

08003528 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003550:	68fa      	ldr	r2, [r7, #12]
 8003552:	4b1e      	ldr	r3, [pc, #120]	; (80035cc <TIM_OC4_SetConfig+0xa4>)
 8003554:	4013      	ands	r3, r2
 8003556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800355e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	021b      	lsls	r3, r3, #8
 8003566:	68fa      	ldr	r2, [r7, #12]
 8003568:	4313      	orrs	r3, r2
 800356a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003572:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	031b      	lsls	r3, r3, #12
 800357a:	693a      	ldr	r2, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	4a13      	ldr	r2, [pc, #76]	; (80035d0 <TIM_OC4_SetConfig+0xa8>)
 8003584:	4293      	cmp	r3, r2
 8003586:	d003      	beq.n	8003590 <TIM_OC4_SetConfig+0x68>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a12      	ldr	r2, [pc, #72]	; (80035d4 <TIM_OC4_SetConfig+0xac>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	695b      	ldr	r3, [r3, #20]
 800359c:	019b      	lsls	r3, r3, #6
 800359e:	697a      	ldr	r2, [r7, #20]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	621a      	str	r2, [r3, #32]
}
 80035be:	bf00      	nop
 80035c0:	371c      	adds	r7, #28
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	feff8fff 	.word	0xfeff8fff
 80035d0:	40010000 	.word	0x40010000
 80035d4:	40010400 	.word	0x40010400

080035d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035d8:	b480      	push	{r7}
 80035da:	b087      	sub	sp, #28
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a1b      	ldr	r3, [r3, #32]
 80035e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a1b      	ldr	r3, [r3, #32]
 80035f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	685b      	ldr	r3, [r3, #4]
 80035f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <TIM_OC5_SetConfig+0x98>)
 8003604:	4013      	ands	r3, r2
 8003606:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68fa      	ldr	r2, [r7, #12]
 800360e:	4313      	orrs	r3, r2
 8003610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003618:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	041b      	lsls	r3, r3, #16
 8003620:	693a      	ldr	r2, [r7, #16]
 8003622:	4313      	orrs	r3, r2
 8003624:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a12      	ldr	r2, [pc, #72]	; (8003674 <TIM_OC5_SetConfig+0x9c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d003      	beq.n	8003636 <TIM_OC5_SetConfig+0x5e>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a11      	ldr	r2, [pc, #68]	; (8003678 <TIM_OC5_SetConfig+0xa0>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d109      	bne.n	800364a <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800363c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	021b      	lsls	r3, r3, #8
 8003644:	697a      	ldr	r2, [r7, #20]
 8003646:	4313      	orrs	r3, r2
 8003648:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685a      	ldr	r2, [r3, #4]
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	621a      	str	r2, [r3, #32]
}
 8003664:	bf00      	nop
 8003666:	371c      	adds	r7, #28
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	fffeff8f 	.word	0xfffeff8f
 8003674:	40010000 	.word	0x40010000
 8003678:	40010400 	.word	0x40010400

0800367c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80036a4:	68fa      	ldr	r2, [r7, #12]
 80036a6:	4b1c      	ldr	r3, [pc, #112]	; (8003718 <TIM_OC6_SetConfig+0x9c>)
 80036a8:	4013      	ands	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	021b      	lsls	r3, r3, #8
 80036b2:	68fa      	ldr	r2, [r7, #12]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	051b      	lsls	r3, r3, #20
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	4313      	orrs	r3, r2
 80036ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a13      	ldr	r2, [pc, #76]	; (800371c <TIM_OC6_SetConfig+0xa0>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d003      	beq.n	80036dc <TIM_OC6_SetConfig+0x60>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	4a12      	ldr	r2, [pc, #72]	; (8003720 <TIM_OC6_SetConfig+0xa4>)
 80036d8:	4293      	cmp	r3, r2
 80036da:	d109      	bne.n	80036f0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036e2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	695b      	ldr	r3, [r3, #20]
 80036e8:	029b      	lsls	r3, r3, #10
 80036ea:	697a      	ldr	r2, [r7, #20]
 80036ec:	4313      	orrs	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	685a      	ldr	r2, [r3, #4]
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	693a      	ldr	r2, [r7, #16]
 8003708:	621a      	str	r2, [r3, #32]
}
 800370a:	bf00      	nop
 800370c:	371c      	adds	r7, #28
 800370e:	46bd      	mov	sp, r7
 8003710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003714:	4770      	bx	lr
 8003716:	bf00      	nop
 8003718:	feff8fff 	.word	0xfeff8fff
 800371c:	40010000 	.word	0x40010000
 8003720:	40010400 	.word	0x40010400

08003724 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003724:	b480      	push	{r7}
 8003726:	b087      	sub	sp, #28
 8003728:	af00      	add	r7, sp, #0
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	60b9      	str	r1, [r7, #8]
 800372e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	6a1b      	ldr	r3, [r3, #32]
 8003734:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f023 0201 	bic.w	r2, r3, #1
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	699b      	ldr	r3, [r3, #24]
 8003746:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003748:	693b      	ldr	r3, [r7, #16]
 800374a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800374e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800375a:	697b      	ldr	r3, [r7, #20]
 800375c:	f023 030a 	bic.w	r3, r3, #10
 8003760:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003762:	697a      	ldr	r2, [r7, #20]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4313      	orrs	r3, r2
 8003768:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	693a      	ldr	r2, [r7, #16]
 800376e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	621a      	str	r2, [r3, #32]
}
 8003776:	bf00      	nop
 8003778:	371c      	adds	r7, #28
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr

08003782 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003782:	b480      	push	{r7}
 8003784:	b087      	sub	sp, #28
 8003786:	af00      	add	r7, sp, #0
 8003788:	60f8      	str	r0, [r7, #12]
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f023 0210 	bic.w	r2, r3, #16
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	699b      	ldr	r3, [r3, #24]
 800379e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6a1b      	ldr	r3, [r3, #32]
 80037a4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80037ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	031b      	lsls	r3, r3, #12
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80037be:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	011b      	lsls	r3, r3, #4
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	693a      	ldr	r2, [r7, #16]
 80037d4:	621a      	str	r2, [r3, #32]
}
 80037d6:	bf00      	nop
 80037d8:	371c      	adds	r7, #28
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80037f8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80037fa:	683a      	ldr	r2, [r7, #0]
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4313      	orrs	r3, r2
 8003800:	f043 0307 	orr.w	r3, r3, #7
 8003804:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	68fa      	ldr	r2, [r7, #12]
 800380a:	609a      	str	r2, [r3, #8]
}
 800380c:	bf00      	nop
 800380e:	3714      	adds	r7, #20
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr

08003818 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003818:	b480      	push	{r7}
 800381a:	b087      	sub	sp, #28
 800381c:	af00      	add	r7, sp, #0
 800381e:	60f8      	str	r0, [r7, #12]
 8003820:	60b9      	str	r1, [r7, #8]
 8003822:	607a      	str	r2, [r7, #4]
 8003824:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800382c:	697b      	ldr	r3, [r7, #20]
 800382e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003832:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	021a      	lsls	r2, r3, #8
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	431a      	orrs	r2, r3
 800383c:	68bb      	ldr	r3, [r7, #8]
 800383e:	4313      	orrs	r3, r2
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	4313      	orrs	r3, r2
 8003844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	609a      	str	r2, [r3, #8]
}
 800384c:	bf00      	nop
 800384e:	371c      	adds	r7, #28
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003858:	b480      	push	{r7}
 800385a:	b087      	sub	sp, #28
 800385c:	af00      	add	r7, sp, #0
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	f003 031f 	and.w	r3, r3, #31
 800386a:	2201      	movs	r2, #1
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1a      	ldr	r2, [r3, #32]
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	43db      	mvns	r3, r3
 800387a:	401a      	ands	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6a1a      	ldr	r2, [r3, #32]
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 031f 	and.w	r3, r3, #31
 800388a:	6879      	ldr	r1, [r7, #4]
 800388c:	fa01 f303 	lsl.w	r3, r1, r3
 8003890:	431a      	orrs	r2, r3
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	621a      	str	r2, [r3, #32]
}
 8003896:	bf00      	nop
 8003898:	371c      	adds	r7, #28
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d101      	bne.n	80038bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038b8:	2302      	movs	r3, #2
 80038ba:	e06d      	b.n	8003998 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2201      	movs	r2, #1
 80038c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	4a30      	ldr	r2, [pc, #192]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d004      	beq.n	80038f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a2f      	ldr	r2, [pc, #188]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d108      	bne.n	8003902 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685b      	ldr	r3, [r3, #4]
 80038fc:	68fa      	ldr	r2, [r7, #12]
 80038fe:	4313      	orrs	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a20      	ldr	r2, [pc, #128]	; (80039a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d022      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800392e:	d01d      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a1d      	ldr	r2, [pc, #116]	; (80039ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d018      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a1c      	ldr	r2, [pc, #112]	; (80039b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d013      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a1a      	ldr	r2, [pc, #104]	; (80039b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d00e      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a15      	ldr	r2, [pc, #84]	; (80039a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d009      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a16      	ldr	r2, [pc, #88]	; (80039b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d004      	beq.n	800396c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4a15      	ldr	r2, [pc, #84]	; (80039bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d10c      	bne.n	8003986 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003972:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	68ba      	ldr	r2, [r7, #8]
 800397a:	4313      	orrs	r3, r2
 800397c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	68ba      	ldr	r2, [r7, #8]
 8003984:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003996:	2300      	movs	r3, #0
}
 8003998:	4618      	mov	r0, r3
 800399a:	3714      	adds	r7, #20
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr
 80039a4:	40010000 	.word	0x40010000
 80039a8:	40010400 	.word	0x40010400
 80039ac:	40000400 	.word	0x40000400
 80039b0:	40000800 	.word	0x40000800
 80039b4:	40000c00 	.word	0x40000c00
 80039b8:	40014000 	.word	0x40014000
 80039bc:	40001800 	.word	0x40001800

080039c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b082      	sub	sp, #8
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d101      	bne.n	80039d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e040      	b.n	8003a54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd fb68 	bl	80010b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2224      	movs	r2, #36	; 0x24
 80039ec:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f022 0201 	bic.w	r2, r2, #1
 80039fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f974 	bl	8003cec <UART_SetConfig>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d101      	bne.n	8003a0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e022      	b.n	8003a54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d002      	beq.n	8003a1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003a16:	6878      	ldr	r0, [r7, #4]
 8003a18:	f000 fbcc 	bl	80041b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003a2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	689a      	ldr	r2, [r3, #8]
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a4c:	6878      	ldr	r0, [r7, #4]
 8003a4e:	f000 fc53 	bl	80042f8 <UART_CheckIdleState>
 8003a52:	4603      	mov	r3, r0
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3708      	adds	r7, #8
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b08a      	sub	sp, #40	; 0x28
 8003a60:	af02      	add	r7, sp, #8
 8003a62:	60f8      	str	r0, [r7, #12]
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003a70:	2b20      	cmp	r3, #32
 8003a72:	d171      	bne.n	8003b58 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d002      	beq.n	8003a80 <HAL_UART_Transmit+0x24>
 8003a7a:	88fb      	ldrh	r3, [r7, #6]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d101      	bne.n	8003a84 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	e06a      	b.n	8003b5a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2221      	movs	r2, #33	; 0x21
 8003a90:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a92:	f7fd fbeb 	bl	800126c <HAL_GetTick>
 8003a96:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	88fa      	ldrh	r2, [r7, #6]
 8003a9c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	88fa      	ldrh	r2, [r7, #6]
 8003aa4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d108      	bne.n	8003ac4 <HAL_UART_Transmit+0x68>
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691b      	ldr	r3, [r3, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d104      	bne.n	8003ac4 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	61bb      	str	r3, [r7, #24]
 8003ac2:	e003      	b.n	8003acc <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003acc:	e02c      	b.n	8003b28 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	9300      	str	r3, [sp, #0]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	2180      	movs	r1, #128	; 0x80
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fc5a 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d001      	beq.n	8003ae8 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003ae4:	2303      	movs	r3, #3
 8003ae6:	e038      	b.n	8003b5a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d10b      	bne.n	8003b06 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	881b      	ldrh	r3, [r3, #0]
 8003af2:	461a      	mov	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003afc:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003afe:	69bb      	ldr	r3, [r7, #24]
 8003b00:	3302      	adds	r3, #2
 8003b02:	61bb      	str	r3, [r7, #24]
 8003b04:	e007      	b.n	8003b16 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	781a      	ldrb	r2, [r3, #0]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	3301      	adds	r3, #1
 8003b14:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d1cc      	bne.n	8003ace <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	9300      	str	r3, [sp, #0]
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	2140      	movs	r1, #64	; 0x40
 8003b3e:	68f8      	ldr	r0, [r7, #12]
 8003b40:	f000 fc27 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d001      	beq.n	8003b4e <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003b4a:	2303      	movs	r3, #3
 8003b4c:	e005      	b.n	8003b5a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2220      	movs	r2, #32
 8003b52:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3720      	adds	r7, #32
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08a      	sub	sp, #40	; 0x28
 8003b66:	af02      	add	r7, sp, #8
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	603b      	str	r3, [r7, #0]
 8003b6e:	4613      	mov	r3, r2
 8003b70:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b78:	2b20      	cmp	r3, #32
 8003b7a:	f040 80b1 	bne.w	8003ce0 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <HAL_UART_Receive+0x28>
 8003b84:	88fb      	ldrh	r3, [r7, #6]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d101      	bne.n	8003b8e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e0a9      	b.n	8003ce2 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2222      	movs	r2, #34	; 0x22
 8003b9a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ba4:	f7fd fb62 	bl	800126c <HAL_GetTick>
 8003ba8:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	88fa      	ldrh	r2, [r7, #6]
 8003bae:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	88fa      	ldrh	r2, [r7, #6]
 8003bb6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bc2:	d10e      	bne.n	8003be2 <HAL_UART_Receive+0x80>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	691b      	ldr	r3, [r3, #16]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d105      	bne.n	8003bd8 <HAL_UART_Receive+0x76>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003bd2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bd6:	e02d      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	22ff      	movs	r2, #255	; 0xff
 8003bdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003be0:	e028      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d10d      	bne.n	8003c06 <HAL_UART_Receive+0xa4>
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	691b      	ldr	r3, [r3, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <HAL_UART_Receive+0x9a>
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	22ff      	movs	r2, #255	; 0xff
 8003bf6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003bfa:	e01b      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	227f      	movs	r2, #127	; 0x7f
 8003c00:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c04:	e016      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c0e:	d10d      	bne.n	8003c2c <HAL_UART_Receive+0xca>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	691b      	ldr	r3, [r3, #16]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d104      	bne.n	8003c22 <HAL_UART_Receive+0xc0>
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	227f      	movs	r2, #127	; 0x7f
 8003c1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c20:	e008      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	223f      	movs	r2, #63	; 0x3f
 8003c26:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003c2a:	e003      	b.n	8003c34 <HAL_UART_Receive+0xd2>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2200      	movs	r2, #0
 8003c30:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003c3a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c44:	d108      	bne.n	8003c58 <HAL_UART_Receive+0xf6>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d104      	bne.n	8003c58 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	61bb      	str	r3, [r7, #24]
 8003c56:	e003      	b.n	8003c60 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003c60:	e032      	b.n	8003cc8 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	9300      	str	r3, [sp, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	2120      	movs	r1, #32
 8003c6c:	68f8      	ldr	r0, [r7, #12]
 8003c6e:	f000 fb90 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	e032      	b.n	8003ce2 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003c7c:	69fb      	ldr	r3, [r7, #28]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10c      	bne.n	8003c9c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c88:	b29a      	uxth	r2, r3
 8003c8a:	8a7b      	ldrh	r3, [r7, #18]
 8003c8c:	4013      	ands	r3, r2
 8003c8e:	b29a      	uxth	r2, r3
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	3302      	adds	r3, #2
 8003c98:	61bb      	str	r3, [r7, #24]
 8003c9a:	e00c      	b.n	8003cb6 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca2:	b2da      	uxtb	r2, r3
 8003ca4:	8a7b      	ldrh	r3, [r7, #18]
 8003ca6:	b2db      	uxtb	r3, r3
 8003ca8:	4013      	ands	r3, r2
 8003caa:	b2da      	uxtb	r2, r3
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003cb0:	69fb      	ldr	r3, [r7, #28]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d1c6      	bne.n	8003c62 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2220      	movs	r2, #32
 8003cd8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	e000      	b.n	8003ce2 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8003ce0:	2302      	movs	r3, #2
  }
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3720      	adds	r7, #32
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
	...

08003cec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b088      	sub	sp, #32
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689a      	ldr	r2, [r3, #8]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	691b      	ldr	r3, [r3, #16]
 8003d00:	431a      	orrs	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	695b      	ldr	r3, [r3, #20]
 8003d06:	431a      	orrs	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	4ba6      	ldr	r3, [pc, #664]	; (8003fb0 <UART_SetConfig+0x2c4>)
 8003d18:	4013      	ands	r3, r2
 8003d1a:	687a      	ldr	r2, [r7, #4]
 8003d1c:	6812      	ldr	r2, [r2, #0]
 8003d1e:	6979      	ldr	r1, [r7, #20]
 8003d20:	430b      	orrs	r3, r1
 8003d22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68da      	ldr	r2, [r3, #12]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	430a      	orrs	r2, r1
 8003d38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a1b      	ldr	r3, [r3, #32]
 8003d44:	697a      	ldr	r2, [r7, #20]
 8003d46:	4313      	orrs	r3, r2
 8003d48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	697a      	ldr	r2, [r7, #20]
 8003d5a:	430a      	orrs	r2, r1
 8003d5c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	4a94      	ldr	r2, [pc, #592]	; (8003fb4 <UART_SetConfig+0x2c8>)
 8003d64:	4293      	cmp	r3, r2
 8003d66:	d120      	bne.n	8003daa <UART_SetConfig+0xbe>
 8003d68:	4b93      	ldr	r3, [pc, #588]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d6e:	f003 0303 	and.w	r3, r3, #3
 8003d72:	2b03      	cmp	r3, #3
 8003d74:	d816      	bhi.n	8003da4 <UART_SetConfig+0xb8>
 8003d76:	a201      	add	r2, pc, #4	; (adr r2, 8003d7c <UART_SetConfig+0x90>)
 8003d78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7c:	08003d8d 	.word	0x08003d8d
 8003d80:	08003d99 	.word	0x08003d99
 8003d84:	08003d93 	.word	0x08003d93
 8003d88:	08003d9f 	.word	0x08003d9f
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77fb      	strb	r3, [r7, #31]
 8003d90:	e150      	b.n	8004034 <UART_SetConfig+0x348>
 8003d92:	2302      	movs	r3, #2
 8003d94:	77fb      	strb	r3, [r7, #31]
 8003d96:	e14d      	b.n	8004034 <UART_SetConfig+0x348>
 8003d98:	2304      	movs	r3, #4
 8003d9a:	77fb      	strb	r3, [r7, #31]
 8003d9c:	e14a      	b.n	8004034 <UART_SetConfig+0x348>
 8003d9e:	2308      	movs	r3, #8
 8003da0:	77fb      	strb	r3, [r7, #31]
 8003da2:	e147      	b.n	8004034 <UART_SetConfig+0x348>
 8003da4:	2310      	movs	r3, #16
 8003da6:	77fb      	strb	r3, [r7, #31]
 8003da8:	e144      	b.n	8004034 <UART_SetConfig+0x348>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a83      	ldr	r2, [pc, #524]	; (8003fbc <UART_SetConfig+0x2d0>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d132      	bne.n	8003e1a <UART_SetConfig+0x12e>
 8003db4:	4b80      	ldr	r3, [pc, #512]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003db6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dba:	f003 030c 	and.w	r3, r3, #12
 8003dbe:	2b0c      	cmp	r3, #12
 8003dc0:	d828      	bhi.n	8003e14 <UART_SetConfig+0x128>
 8003dc2:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0xdc>)
 8003dc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc8:	08003dfd 	.word	0x08003dfd
 8003dcc:	08003e15 	.word	0x08003e15
 8003dd0:	08003e15 	.word	0x08003e15
 8003dd4:	08003e15 	.word	0x08003e15
 8003dd8:	08003e09 	.word	0x08003e09
 8003ddc:	08003e15 	.word	0x08003e15
 8003de0:	08003e15 	.word	0x08003e15
 8003de4:	08003e15 	.word	0x08003e15
 8003de8:	08003e03 	.word	0x08003e03
 8003dec:	08003e15 	.word	0x08003e15
 8003df0:	08003e15 	.word	0x08003e15
 8003df4:	08003e15 	.word	0x08003e15
 8003df8:	08003e0f 	.word	0x08003e0f
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e118      	b.n	8004034 <UART_SetConfig+0x348>
 8003e02:	2302      	movs	r3, #2
 8003e04:	77fb      	strb	r3, [r7, #31]
 8003e06:	e115      	b.n	8004034 <UART_SetConfig+0x348>
 8003e08:	2304      	movs	r3, #4
 8003e0a:	77fb      	strb	r3, [r7, #31]
 8003e0c:	e112      	b.n	8004034 <UART_SetConfig+0x348>
 8003e0e:	2308      	movs	r3, #8
 8003e10:	77fb      	strb	r3, [r7, #31]
 8003e12:	e10f      	b.n	8004034 <UART_SetConfig+0x348>
 8003e14:	2310      	movs	r3, #16
 8003e16:	77fb      	strb	r3, [r7, #31]
 8003e18:	e10c      	b.n	8004034 <UART_SetConfig+0x348>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a68      	ldr	r2, [pc, #416]	; (8003fc0 <UART_SetConfig+0x2d4>)
 8003e20:	4293      	cmp	r3, r2
 8003e22:	d120      	bne.n	8003e66 <UART_SetConfig+0x17a>
 8003e24:	4b64      	ldr	r3, [pc, #400]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e2e:	2b30      	cmp	r3, #48	; 0x30
 8003e30:	d013      	beq.n	8003e5a <UART_SetConfig+0x16e>
 8003e32:	2b30      	cmp	r3, #48	; 0x30
 8003e34:	d814      	bhi.n	8003e60 <UART_SetConfig+0x174>
 8003e36:	2b20      	cmp	r3, #32
 8003e38:	d009      	beq.n	8003e4e <UART_SetConfig+0x162>
 8003e3a:	2b20      	cmp	r3, #32
 8003e3c:	d810      	bhi.n	8003e60 <UART_SetConfig+0x174>
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d002      	beq.n	8003e48 <UART_SetConfig+0x15c>
 8003e42:	2b10      	cmp	r3, #16
 8003e44:	d006      	beq.n	8003e54 <UART_SetConfig+0x168>
 8003e46:	e00b      	b.n	8003e60 <UART_SetConfig+0x174>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	77fb      	strb	r3, [r7, #31]
 8003e4c:	e0f2      	b.n	8004034 <UART_SetConfig+0x348>
 8003e4e:	2302      	movs	r3, #2
 8003e50:	77fb      	strb	r3, [r7, #31]
 8003e52:	e0ef      	b.n	8004034 <UART_SetConfig+0x348>
 8003e54:	2304      	movs	r3, #4
 8003e56:	77fb      	strb	r3, [r7, #31]
 8003e58:	e0ec      	b.n	8004034 <UART_SetConfig+0x348>
 8003e5a:	2308      	movs	r3, #8
 8003e5c:	77fb      	strb	r3, [r7, #31]
 8003e5e:	e0e9      	b.n	8004034 <UART_SetConfig+0x348>
 8003e60:	2310      	movs	r3, #16
 8003e62:	77fb      	strb	r3, [r7, #31]
 8003e64:	e0e6      	b.n	8004034 <UART_SetConfig+0x348>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	4a56      	ldr	r2, [pc, #344]	; (8003fc4 <UART_SetConfig+0x2d8>)
 8003e6c:	4293      	cmp	r3, r2
 8003e6e:	d120      	bne.n	8003eb2 <UART_SetConfig+0x1c6>
 8003e70:	4b51      	ldr	r3, [pc, #324]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003e72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e7c:	d013      	beq.n	8003ea6 <UART_SetConfig+0x1ba>
 8003e7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003e80:	d814      	bhi.n	8003eac <UART_SetConfig+0x1c0>
 8003e82:	2b80      	cmp	r3, #128	; 0x80
 8003e84:	d009      	beq.n	8003e9a <UART_SetConfig+0x1ae>
 8003e86:	2b80      	cmp	r3, #128	; 0x80
 8003e88:	d810      	bhi.n	8003eac <UART_SetConfig+0x1c0>
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d002      	beq.n	8003e94 <UART_SetConfig+0x1a8>
 8003e8e:	2b40      	cmp	r3, #64	; 0x40
 8003e90:	d006      	beq.n	8003ea0 <UART_SetConfig+0x1b4>
 8003e92:	e00b      	b.n	8003eac <UART_SetConfig+0x1c0>
 8003e94:	2300      	movs	r3, #0
 8003e96:	77fb      	strb	r3, [r7, #31]
 8003e98:	e0cc      	b.n	8004034 <UART_SetConfig+0x348>
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	77fb      	strb	r3, [r7, #31]
 8003e9e:	e0c9      	b.n	8004034 <UART_SetConfig+0x348>
 8003ea0:	2304      	movs	r3, #4
 8003ea2:	77fb      	strb	r3, [r7, #31]
 8003ea4:	e0c6      	b.n	8004034 <UART_SetConfig+0x348>
 8003ea6:	2308      	movs	r3, #8
 8003ea8:	77fb      	strb	r3, [r7, #31]
 8003eaa:	e0c3      	b.n	8004034 <UART_SetConfig+0x348>
 8003eac:	2310      	movs	r3, #16
 8003eae:	77fb      	strb	r3, [r7, #31]
 8003eb0:	e0c0      	b.n	8004034 <UART_SetConfig+0x348>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a44      	ldr	r2, [pc, #272]	; (8003fc8 <UART_SetConfig+0x2dc>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d125      	bne.n	8003f08 <UART_SetConfig+0x21c>
 8003ebc:	4b3e      	ldr	r3, [pc, #248]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ec2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ec6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eca:	d017      	beq.n	8003efc <UART_SetConfig+0x210>
 8003ecc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ed0:	d817      	bhi.n	8003f02 <UART_SetConfig+0x216>
 8003ed2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ed6:	d00b      	beq.n	8003ef0 <UART_SetConfig+0x204>
 8003ed8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003edc:	d811      	bhi.n	8003f02 <UART_SetConfig+0x216>
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d003      	beq.n	8003eea <UART_SetConfig+0x1fe>
 8003ee2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ee6:	d006      	beq.n	8003ef6 <UART_SetConfig+0x20a>
 8003ee8:	e00b      	b.n	8003f02 <UART_SetConfig+0x216>
 8003eea:	2300      	movs	r3, #0
 8003eec:	77fb      	strb	r3, [r7, #31]
 8003eee:	e0a1      	b.n	8004034 <UART_SetConfig+0x348>
 8003ef0:	2302      	movs	r3, #2
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e09e      	b.n	8004034 <UART_SetConfig+0x348>
 8003ef6:	2304      	movs	r3, #4
 8003ef8:	77fb      	strb	r3, [r7, #31]
 8003efa:	e09b      	b.n	8004034 <UART_SetConfig+0x348>
 8003efc:	2308      	movs	r3, #8
 8003efe:	77fb      	strb	r3, [r7, #31]
 8003f00:	e098      	b.n	8004034 <UART_SetConfig+0x348>
 8003f02:	2310      	movs	r3, #16
 8003f04:	77fb      	strb	r3, [r7, #31]
 8003f06:	e095      	b.n	8004034 <UART_SetConfig+0x348>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a2f      	ldr	r2, [pc, #188]	; (8003fcc <UART_SetConfig+0x2e0>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d125      	bne.n	8003f5e <UART_SetConfig+0x272>
 8003f12:	4b29      	ldr	r3, [pc, #164]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f20:	d017      	beq.n	8003f52 <UART_SetConfig+0x266>
 8003f22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f26:	d817      	bhi.n	8003f58 <UART_SetConfig+0x26c>
 8003f28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f2c:	d00b      	beq.n	8003f46 <UART_SetConfig+0x25a>
 8003f2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f32:	d811      	bhi.n	8003f58 <UART_SetConfig+0x26c>
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d003      	beq.n	8003f40 <UART_SetConfig+0x254>
 8003f38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f3c:	d006      	beq.n	8003f4c <UART_SetConfig+0x260>
 8003f3e:	e00b      	b.n	8003f58 <UART_SetConfig+0x26c>
 8003f40:	2301      	movs	r3, #1
 8003f42:	77fb      	strb	r3, [r7, #31]
 8003f44:	e076      	b.n	8004034 <UART_SetConfig+0x348>
 8003f46:	2302      	movs	r3, #2
 8003f48:	77fb      	strb	r3, [r7, #31]
 8003f4a:	e073      	b.n	8004034 <UART_SetConfig+0x348>
 8003f4c:	2304      	movs	r3, #4
 8003f4e:	77fb      	strb	r3, [r7, #31]
 8003f50:	e070      	b.n	8004034 <UART_SetConfig+0x348>
 8003f52:	2308      	movs	r3, #8
 8003f54:	77fb      	strb	r3, [r7, #31]
 8003f56:	e06d      	b.n	8004034 <UART_SetConfig+0x348>
 8003f58:	2310      	movs	r3, #16
 8003f5a:	77fb      	strb	r3, [r7, #31]
 8003f5c:	e06a      	b.n	8004034 <UART_SetConfig+0x348>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	4a1b      	ldr	r2, [pc, #108]	; (8003fd0 <UART_SetConfig+0x2e4>)
 8003f64:	4293      	cmp	r3, r2
 8003f66:	d138      	bne.n	8003fda <UART_SetConfig+0x2ee>
 8003f68:	4b13      	ldr	r3, [pc, #76]	; (8003fb8 <UART_SetConfig+0x2cc>)
 8003f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f76:	d017      	beq.n	8003fa8 <UART_SetConfig+0x2bc>
 8003f78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f7c:	d82a      	bhi.n	8003fd4 <UART_SetConfig+0x2e8>
 8003f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f82:	d00b      	beq.n	8003f9c <UART_SetConfig+0x2b0>
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d824      	bhi.n	8003fd4 <UART_SetConfig+0x2e8>
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d003      	beq.n	8003f96 <UART_SetConfig+0x2aa>
 8003f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f92:	d006      	beq.n	8003fa2 <UART_SetConfig+0x2b6>
 8003f94:	e01e      	b.n	8003fd4 <UART_SetConfig+0x2e8>
 8003f96:	2300      	movs	r3, #0
 8003f98:	77fb      	strb	r3, [r7, #31]
 8003f9a:	e04b      	b.n	8004034 <UART_SetConfig+0x348>
 8003f9c:	2302      	movs	r3, #2
 8003f9e:	77fb      	strb	r3, [r7, #31]
 8003fa0:	e048      	b.n	8004034 <UART_SetConfig+0x348>
 8003fa2:	2304      	movs	r3, #4
 8003fa4:	77fb      	strb	r3, [r7, #31]
 8003fa6:	e045      	b.n	8004034 <UART_SetConfig+0x348>
 8003fa8:	2308      	movs	r3, #8
 8003faa:	77fb      	strb	r3, [r7, #31]
 8003fac:	e042      	b.n	8004034 <UART_SetConfig+0x348>
 8003fae:	bf00      	nop
 8003fb0:	efff69f3 	.word	0xefff69f3
 8003fb4:	40011000 	.word	0x40011000
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40004400 	.word	0x40004400
 8003fc0:	40004800 	.word	0x40004800
 8003fc4:	40004c00 	.word	0x40004c00
 8003fc8:	40005000 	.word	0x40005000
 8003fcc:	40011400 	.word	0x40011400
 8003fd0:	40007800 	.word	0x40007800
 8003fd4:	2310      	movs	r3, #16
 8003fd6:	77fb      	strb	r3, [r7, #31]
 8003fd8:	e02c      	b.n	8004034 <UART_SetConfig+0x348>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a72      	ldr	r2, [pc, #456]	; (80041a8 <UART_SetConfig+0x4bc>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d125      	bne.n	8004030 <UART_SetConfig+0x344>
 8003fe4:	4b71      	ldr	r3, [pc, #452]	; (80041ac <UART_SetConfig+0x4c0>)
 8003fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003fee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ff2:	d017      	beq.n	8004024 <UART_SetConfig+0x338>
 8003ff4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ff8:	d817      	bhi.n	800402a <UART_SetConfig+0x33e>
 8003ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ffe:	d00b      	beq.n	8004018 <UART_SetConfig+0x32c>
 8004000:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004004:	d811      	bhi.n	800402a <UART_SetConfig+0x33e>
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <UART_SetConfig+0x326>
 800400a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800400e:	d006      	beq.n	800401e <UART_SetConfig+0x332>
 8004010:	e00b      	b.n	800402a <UART_SetConfig+0x33e>
 8004012:	2300      	movs	r3, #0
 8004014:	77fb      	strb	r3, [r7, #31]
 8004016:	e00d      	b.n	8004034 <UART_SetConfig+0x348>
 8004018:	2302      	movs	r3, #2
 800401a:	77fb      	strb	r3, [r7, #31]
 800401c:	e00a      	b.n	8004034 <UART_SetConfig+0x348>
 800401e:	2304      	movs	r3, #4
 8004020:	77fb      	strb	r3, [r7, #31]
 8004022:	e007      	b.n	8004034 <UART_SetConfig+0x348>
 8004024:	2308      	movs	r3, #8
 8004026:	77fb      	strb	r3, [r7, #31]
 8004028:	e004      	b.n	8004034 <UART_SetConfig+0x348>
 800402a:	2310      	movs	r3, #16
 800402c:	77fb      	strb	r3, [r7, #31]
 800402e:	e001      	b.n	8004034 <UART_SetConfig+0x348>
 8004030:	2310      	movs	r3, #16
 8004032:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	69db      	ldr	r3, [r3, #28]
 8004038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800403c:	d15b      	bne.n	80040f6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800403e:	7ffb      	ldrb	r3, [r7, #31]
 8004040:	2b08      	cmp	r3, #8
 8004042:	d828      	bhi.n	8004096 <UART_SetConfig+0x3aa>
 8004044:	a201      	add	r2, pc, #4	; (adr r2, 800404c <UART_SetConfig+0x360>)
 8004046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800404a:	bf00      	nop
 800404c:	08004071 	.word	0x08004071
 8004050:	08004079 	.word	0x08004079
 8004054:	08004081 	.word	0x08004081
 8004058:	08004097 	.word	0x08004097
 800405c:	08004087 	.word	0x08004087
 8004060:	08004097 	.word	0x08004097
 8004064:	08004097 	.word	0x08004097
 8004068:	08004097 	.word	0x08004097
 800406c:	0800408f 	.word	0x0800408f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004070:	f7fe f87a 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 8004074:	61b8      	str	r0, [r7, #24]
        break;
 8004076:	e013      	b.n	80040a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004078:	f7fe f88a 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 800407c:	61b8      	str	r0, [r7, #24]
        break;
 800407e:	e00f      	b.n	80040a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004080:	4b4b      	ldr	r3, [pc, #300]	; (80041b0 <UART_SetConfig+0x4c4>)
 8004082:	61bb      	str	r3, [r7, #24]
        break;
 8004084:	e00c      	b.n	80040a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004086:	f7fd ff9d 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 800408a:	61b8      	str	r0, [r7, #24]
        break;
 800408c:	e008      	b.n	80040a0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800408e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004092:	61bb      	str	r3, [r7, #24]
        break;
 8004094:	e004      	b.n	80040a0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004096:	2300      	movs	r3, #0
 8004098:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	77bb      	strb	r3, [r7, #30]
        break;
 800409e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040a0:	69bb      	ldr	r3, [r7, #24]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d074      	beq.n	8004190 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040a6:	69bb      	ldr	r3, [r7, #24]
 80040a8:	005a      	lsls	r2, r3, #1
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	085b      	lsrs	r3, r3, #1
 80040b0:	441a      	add	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	2b0f      	cmp	r3, #15
 80040c0:	d916      	bls.n	80040f0 <UART_SetConfig+0x404>
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040c8:	d212      	bcs.n	80040f0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	f023 030f 	bic.w	r3, r3, #15
 80040d2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	085b      	lsrs	r3, r3, #1
 80040d8:	b29b      	uxth	r3, r3
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	b29a      	uxth	r2, r3
 80040e0:	89fb      	ldrh	r3, [r7, #14]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	89fa      	ldrh	r2, [r7, #14]
 80040ec:	60da      	str	r2, [r3, #12]
 80040ee:	e04f      	b.n	8004190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80040f0:	2301      	movs	r3, #1
 80040f2:	77bb      	strb	r3, [r7, #30]
 80040f4:	e04c      	b.n	8004190 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80040f6:	7ffb      	ldrb	r3, [r7, #31]
 80040f8:	2b08      	cmp	r3, #8
 80040fa:	d828      	bhi.n	800414e <UART_SetConfig+0x462>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0x418>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004129 	.word	0x08004129
 8004108:	08004131 	.word	0x08004131
 800410c:	08004139 	.word	0x08004139
 8004110:	0800414f 	.word	0x0800414f
 8004114:	0800413f 	.word	0x0800413f
 8004118:	0800414f 	.word	0x0800414f
 800411c:	0800414f 	.word	0x0800414f
 8004120:	0800414f 	.word	0x0800414f
 8004124:	08004147 	.word	0x08004147
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004128:	f7fe f81e 	bl	8002168 <HAL_RCC_GetPCLK1Freq>
 800412c:	61b8      	str	r0, [r7, #24]
        break;
 800412e:	e013      	b.n	8004158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004130:	f7fe f82e 	bl	8002190 <HAL_RCC_GetPCLK2Freq>
 8004134:	61b8      	str	r0, [r7, #24]
        break;
 8004136:	e00f      	b.n	8004158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004138:	4b1d      	ldr	r3, [pc, #116]	; (80041b0 <UART_SetConfig+0x4c4>)
 800413a:	61bb      	str	r3, [r7, #24]
        break;
 800413c:	e00c      	b.n	8004158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800413e:	f7fd ff41 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8004142:	61b8      	str	r0, [r7, #24]
        break;
 8004144:	e008      	b.n	8004158 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004146:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800414a:	61bb      	str	r3, [r7, #24]
        break;
 800414c:	e004      	b.n	8004158 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800414e:	2300      	movs	r3, #0
 8004150:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004152:	2301      	movs	r3, #1
 8004154:	77bb      	strb	r3, [r7, #30]
        break;
 8004156:	bf00      	nop
    }

    if (pclk != 0U)
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d018      	beq.n	8004190 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	685b      	ldr	r3, [r3, #4]
 8004162:	085a      	lsrs	r2, r3, #1
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	441a      	add	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	685b      	ldr	r3, [r3, #4]
 800416c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004170:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b0f      	cmp	r3, #15
 8004176:	d909      	bls.n	800418c <UART_SetConfig+0x4a0>
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417e:	d205      	bcs.n	800418c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	b29a      	uxth	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	60da      	str	r2, [r3, #12]
 800418a:	e001      	b.n	8004190 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800418c:	2301      	movs	r3, #1
 800418e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800419c:	7fbb      	ldrb	r3, [r7, #30]
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3720      	adds	r7, #32
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	bf00      	nop
 80041a8:	40007c00 	.word	0x40007c00
 80041ac:	40023800 	.word	0x40023800
 80041b0:	00f42400 	.word	0x00f42400

080041b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c0:	f003 0301 	and.w	r3, r3, #1
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00a      	beq.n	80041de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	430a      	orrs	r2, r1
 80041dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041e2:	f003 0302 	and.w	r3, r3, #2
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d00a      	beq.n	8004200 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	f003 0304 	and.w	r3, r3, #4
 8004208:	2b00      	cmp	r3, #0
 800420a:	d00a      	beq.n	8004222 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	430a      	orrs	r2, r1
 8004220:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	f003 0308 	and.w	r3, r3, #8
 800422a:	2b00      	cmp	r3, #0
 800422c:	d00a      	beq.n	8004244 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685b      	ldr	r3, [r3, #4]
 8004234:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	430a      	orrs	r2, r1
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004248:	f003 0310 	and.w	r3, r3, #16
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00a      	beq.n	8004266 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004290:	2b00      	cmp	r3, #0
 8004292:	d01a      	beq.n	80042ca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042b2:	d10a      	bne.n	80042ca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	430a      	orrs	r2, r1
 80042c8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00a      	beq.n	80042ec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	430a      	orrs	r2, r1
 80042ea:	605a      	str	r2, [r3, #4]
  }
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042f8:	b580      	push	{r7, lr}
 80042fa:	b086      	sub	sp, #24
 80042fc:	af02      	add	r7, sp, #8
 80042fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004308:	f7fc ffb0 	bl	800126c <HAL_GetTick>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b08      	cmp	r3, #8
 800431a:	d10e      	bne.n	800433a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800431c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	2200      	movs	r2, #0
 8004326:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800432a:	6878      	ldr	r0, [r7, #4]
 800432c:	f000 f831 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e027      	b.n	800438a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0304 	and.w	r3, r3, #4
 8004344:	2b04      	cmp	r3, #4
 8004346:	d10e      	bne.n	8004366 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004348:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004356:	6878      	ldr	r0, [r7, #4]
 8004358:	f000 f81b 	bl	8004392 <UART_WaitOnFlagUntilTimeout>
 800435c:	4603      	mov	r3, r0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d001      	beq.n	8004366 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004362:	2303      	movs	r3, #3
 8004364:	e011      	b.n	800438a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2220      	movs	r2, #32
 800436a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2220      	movs	r2, #32
 8004370:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2200      	movs	r2, #0
 800437e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004388:	2300      	movs	r3, #0
}
 800438a:	4618      	mov	r0, r3
 800438c:	3710      	adds	r7, #16
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b09c      	sub	sp, #112	; 0x70
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	603b      	str	r3, [r7, #0]
 800439e:	4613      	mov	r3, r2
 80043a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043a2:	e0a7      	b.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043aa:	f000 80a3 	beq.w	80044f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fc ff5d 	bl	800126c <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x32>
 80043be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d13f      	bne.n	8004444 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043cc:	e853 3f00 	ldrex	r3, [r3]
 80043d0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80043d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043d4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80043d8:	667b      	str	r3, [r7, #100]	; 0x64
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	461a      	mov	r2, r3
 80043e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80043e4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80043e8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80043f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d1e6      	bne.n	80043c4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	3308      	adds	r3, #8
 80043fc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004408:	f023 0301 	bic.w	r3, r3, #1
 800440c:	663b      	str	r3, [r7, #96]	; 0x60
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	3308      	adds	r3, #8
 8004414:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004416:	64ba      	str	r2, [r7, #72]	; 0x48
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800441c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004424:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1e5      	bne.n	80043f6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2200      	movs	r2, #0
 800443c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004440:	2303      	movs	r3, #3
 8004442:	e068      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b00      	cmp	r3, #0
 8004450:	d050      	beq.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	69db      	ldr	r3, [r3, #28]
 8004458:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800445c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004460:	d148      	bne.n	80044f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800446a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004474:	e853 3f00 	ldrex	r3, [r3]
 8004478:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800447a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004480:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	461a      	mov	r2, r3
 8004488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448a:	637b      	str	r3, [r7, #52]	; 0x34
 800448c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004490:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004492:	e841 2300 	strex	r3, r2, [r1]
 8004496:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1e6      	bne.n	800446c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	3308      	adds	r3, #8
 80044a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	e853 3f00 	ldrex	r3, [r3]
 80044ac:	613b      	str	r3, [r7, #16]
   return(result);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f023 0301 	bic.w	r3, r3, #1
 80044b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	3308      	adds	r3, #8
 80044bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80044be:	623a      	str	r2, [r7, #32]
 80044c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044c2:	69f9      	ldr	r1, [r7, #28]
 80044c4:	6a3a      	ldr	r2, [r7, #32]
 80044c6:	e841 2300 	strex	r3, r2, [r1]
 80044ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d1e5      	bne.n	800449e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2220      	movs	r2, #32
 80044d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2220      	movs	r2, #32
 80044dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80044f0:	2303      	movs	r3, #3
 80044f2:	e010      	b.n	8004516 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	69da      	ldr	r2, [r3, #28]
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	4013      	ands	r3, r2
 80044fe:	68ba      	ldr	r2, [r7, #8]
 8004500:	429a      	cmp	r2, r3
 8004502:	bf0c      	ite	eq
 8004504:	2301      	moveq	r3, #1
 8004506:	2300      	movne	r3, #0
 8004508:	b2db      	uxtb	r3, r3
 800450a:	461a      	mov	r2, r3
 800450c:	79fb      	ldrb	r3, [r7, #7]
 800450e:	429a      	cmp	r2, r3
 8004510:	f43f af48 	beq.w	80043a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3770      	adds	r7, #112	; 0x70
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <siprintf>:
 8004520:	b40e      	push	{r1, r2, r3}
 8004522:	b500      	push	{lr}
 8004524:	b09c      	sub	sp, #112	; 0x70
 8004526:	ab1d      	add	r3, sp, #116	; 0x74
 8004528:	9002      	str	r0, [sp, #8]
 800452a:	9006      	str	r0, [sp, #24]
 800452c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004530:	4809      	ldr	r0, [pc, #36]	; (8004558 <siprintf+0x38>)
 8004532:	9107      	str	r1, [sp, #28]
 8004534:	9104      	str	r1, [sp, #16]
 8004536:	4909      	ldr	r1, [pc, #36]	; (800455c <siprintf+0x3c>)
 8004538:	f853 2b04 	ldr.w	r2, [r3], #4
 800453c:	9105      	str	r1, [sp, #20]
 800453e:	6800      	ldr	r0, [r0, #0]
 8004540:	9301      	str	r3, [sp, #4]
 8004542:	a902      	add	r1, sp, #8
 8004544:	f000 f992 	bl	800486c <_svfiprintf_r>
 8004548:	9b02      	ldr	r3, [sp, #8]
 800454a:	2200      	movs	r2, #0
 800454c:	701a      	strb	r2, [r3, #0]
 800454e:	b01c      	add	sp, #112	; 0x70
 8004550:	f85d eb04 	ldr.w	lr, [sp], #4
 8004554:	b003      	add	sp, #12
 8004556:	4770      	bx	lr
 8004558:	20000058 	.word	0x20000058
 800455c:	ffff0208 	.word	0xffff0208

08004560 <memset>:
 8004560:	4402      	add	r2, r0
 8004562:	4603      	mov	r3, r0
 8004564:	4293      	cmp	r3, r2
 8004566:	d100      	bne.n	800456a <memset+0xa>
 8004568:	4770      	bx	lr
 800456a:	f803 1b01 	strb.w	r1, [r3], #1
 800456e:	e7f9      	b.n	8004564 <memset+0x4>

08004570 <__errno>:
 8004570:	4b01      	ldr	r3, [pc, #4]	; (8004578 <__errno+0x8>)
 8004572:	6818      	ldr	r0, [r3, #0]
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	20000058 	.word	0x20000058

0800457c <__libc_init_array>:
 800457c:	b570      	push	{r4, r5, r6, lr}
 800457e:	4d0d      	ldr	r5, [pc, #52]	; (80045b4 <__libc_init_array+0x38>)
 8004580:	4c0d      	ldr	r4, [pc, #52]	; (80045b8 <__libc_init_array+0x3c>)
 8004582:	1b64      	subs	r4, r4, r5
 8004584:	10a4      	asrs	r4, r4, #2
 8004586:	2600      	movs	r6, #0
 8004588:	42a6      	cmp	r6, r4
 800458a:	d109      	bne.n	80045a0 <__libc_init_array+0x24>
 800458c:	4d0b      	ldr	r5, [pc, #44]	; (80045bc <__libc_init_array+0x40>)
 800458e:	4c0c      	ldr	r4, [pc, #48]	; (80045c0 <__libc_init_array+0x44>)
 8004590:	f000 fc6a 	bl	8004e68 <_init>
 8004594:	1b64      	subs	r4, r4, r5
 8004596:	10a4      	asrs	r4, r4, #2
 8004598:	2600      	movs	r6, #0
 800459a:	42a6      	cmp	r6, r4
 800459c:	d105      	bne.n	80045aa <__libc_init_array+0x2e>
 800459e:	bd70      	pop	{r4, r5, r6, pc}
 80045a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80045a4:	4798      	blx	r3
 80045a6:	3601      	adds	r6, #1
 80045a8:	e7ee      	b.n	8004588 <__libc_init_array+0xc>
 80045aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80045ae:	4798      	blx	r3
 80045b0:	3601      	adds	r6, #1
 80045b2:	e7f2      	b.n	800459a <__libc_init_array+0x1e>
 80045b4:	08004f34 	.word	0x08004f34
 80045b8:	08004f34 	.word	0x08004f34
 80045bc:	08004f34 	.word	0x08004f34
 80045c0:	08004f38 	.word	0x08004f38

080045c4 <__retarget_lock_acquire_recursive>:
 80045c4:	4770      	bx	lr

080045c6 <__retarget_lock_release_recursive>:
 80045c6:	4770      	bx	lr

080045c8 <_free_r>:
 80045c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045ca:	2900      	cmp	r1, #0
 80045cc:	d044      	beq.n	8004658 <_free_r+0x90>
 80045ce:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045d2:	9001      	str	r0, [sp, #4]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	f1a1 0404 	sub.w	r4, r1, #4
 80045da:	bfb8      	it	lt
 80045dc:	18e4      	addlt	r4, r4, r3
 80045de:	f000 f8df 	bl	80047a0 <__malloc_lock>
 80045e2:	4a1e      	ldr	r2, [pc, #120]	; (800465c <_free_r+0x94>)
 80045e4:	9801      	ldr	r0, [sp, #4]
 80045e6:	6813      	ldr	r3, [r2, #0]
 80045e8:	b933      	cbnz	r3, 80045f8 <_free_r+0x30>
 80045ea:	6063      	str	r3, [r4, #4]
 80045ec:	6014      	str	r4, [r2, #0]
 80045ee:	b003      	add	sp, #12
 80045f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045f4:	f000 b8da 	b.w	80047ac <__malloc_unlock>
 80045f8:	42a3      	cmp	r3, r4
 80045fa:	d908      	bls.n	800460e <_free_r+0x46>
 80045fc:	6825      	ldr	r5, [r4, #0]
 80045fe:	1961      	adds	r1, r4, r5
 8004600:	428b      	cmp	r3, r1
 8004602:	bf01      	itttt	eq
 8004604:	6819      	ldreq	r1, [r3, #0]
 8004606:	685b      	ldreq	r3, [r3, #4]
 8004608:	1949      	addeq	r1, r1, r5
 800460a:	6021      	streq	r1, [r4, #0]
 800460c:	e7ed      	b.n	80045ea <_free_r+0x22>
 800460e:	461a      	mov	r2, r3
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	b10b      	cbz	r3, 8004618 <_free_r+0x50>
 8004614:	42a3      	cmp	r3, r4
 8004616:	d9fa      	bls.n	800460e <_free_r+0x46>
 8004618:	6811      	ldr	r1, [r2, #0]
 800461a:	1855      	adds	r5, r2, r1
 800461c:	42a5      	cmp	r5, r4
 800461e:	d10b      	bne.n	8004638 <_free_r+0x70>
 8004620:	6824      	ldr	r4, [r4, #0]
 8004622:	4421      	add	r1, r4
 8004624:	1854      	adds	r4, r2, r1
 8004626:	42a3      	cmp	r3, r4
 8004628:	6011      	str	r1, [r2, #0]
 800462a:	d1e0      	bne.n	80045ee <_free_r+0x26>
 800462c:	681c      	ldr	r4, [r3, #0]
 800462e:	685b      	ldr	r3, [r3, #4]
 8004630:	6053      	str	r3, [r2, #4]
 8004632:	440c      	add	r4, r1
 8004634:	6014      	str	r4, [r2, #0]
 8004636:	e7da      	b.n	80045ee <_free_r+0x26>
 8004638:	d902      	bls.n	8004640 <_free_r+0x78>
 800463a:	230c      	movs	r3, #12
 800463c:	6003      	str	r3, [r0, #0]
 800463e:	e7d6      	b.n	80045ee <_free_r+0x26>
 8004640:	6825      	ldr	r5, [r4, #0]
 8004642:	1961      	adds	r1, r4, r5
 8004644:	428b      	cmp	r3, r1
 8004646:	bf04      	itt	eq
 8004648:	6819      	ldreq	r1, [r3, #0]
 800464a:	685b      	ldreq	r3, [r3, #4]
 800464c:	6063      	str	r3, [r4, #4]
 800464e:	bf04      	itt	eq
 8004650:	1949      	addeq	r1, r1, r5
 8004652:	6021      	streq	r1, [r4, #0]
 8004654:	6054      	str	r4, [r2, #4]
 8004656:	e7ca      	b.n	80045ee <_free_r+0x26>
 8004658:	b003      	add	sp, #12
 800465a:	bd30      	pop	{r4, r5, pc}
 800465c:	200003a4 	.word	0x200003a4

08004660 <sbrk_aligned>:
 8004660:	b570      	push	{r4, r5, r6, lr}
 8004662:	4e0e      	ldr	r6, [pc, #56]	; (800469c <sbrk_aligned+0x3c>)
 8004664:	460c      	mov	r4, r1
 8004666:	6831      	ldr	r1, [r6, #0]
 8004668:	4605      	mov	r5, r0
 800466a:	b911      	cbnz	r1, 8004672 <sbrk_aligned+0x12>
 800466c:	f000 fba6 	bl	8004dbc <_sbrk_r>
 8004670:	6030      	str	r0, [r6, #0]
 8004672:	4621      	mov	r1, r4
 8004674:	4628      	mov	r0, r5
 8004676:	f000 fba1 	bl	8004dbc <_sbrk_r>
 800467a:	1c43      	adds	r3, r0, #1
 800467c:	d00a      	beq.n	8004694 <sbrk_aligned+0x34>
 800467e:	1cc4      	adds	r4, r0, #3
 8004680:	f024 0403 	bic.w	r4, r4, #3
 8004684:	42a0      	cmp	r0, r4
 8004686:	d007      	beq.n	8004698 <sbrk_aligned+0x38>
 8004688:	1a21      	subs	r1, r4, r0
 800468a:	4628      	mov	r0, r5
 800468c:	f000 fb96 	bl	8004dbc <_sbrk_r>
 8004690:	3001      	adds	r0, #1
 8004692:	d101      	bne.n	8004698 <sbrk_aligned+0x38>
 8004694:	f04f 34ff 	mov.w	r4, #4294967295
 8004698:	4620      	mov	r0, r4
 800469a:	bd70      	pop	{r4, r5, r6, pc}
 800469c:	200003a8 	.word	0x200003a8

080046a0 <_malloc_r>:
 80046a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80046a4:	1ccd      	adds	r5, r1, #3
 80046a6:	f025 0503 	bic.w	r5, r5, #3
 80046aa:	3508      	adds	r5, #8
 80046ac:	2d0c      	cmp	r5, #12
 80046ae:	bf38      	it	cc
 80046b0:	250c      	movcc	r5, #12
 80046b2:	2d00      	cmp	r5, #0
 80046b4:	4607      	mov	r7, r0
 80046b6:	db01      	blt.n	80046bc <_malloc_r+0x1c>
 80046b8:	42a9      	cmp	r1, r5
 80046ba:	d905      	bls.n	80046c8 <_malloc_r+0x28>
 80046bc:	230c      	movs	r3, #12
 80046be:	603b      	str	r3, [r7, #0]
 80046c0:	2600      	movs	r6, #0
 80046c2:	4630      	mov	r0, r6
 80046c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80046c8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800479c <_malloc_r+0xfc>
 80046cc:	f000 f868 	bl	80047a0 <__malloc_lock>
 80046d0:	f8d8 3000 	ldr.w	r3, [r8]
 80046d4:	461c      	mov	r4, r3
 80046d6:	bb5c      	cbnz	r4, 8004730 <_malloc_r+0x90>
 80046d8:	4629      	mov	r1, r5
 80046da:	4638      	mov	r0, r7
 80046dc:	f7ff ffc0 	bl	8004660 <sbrk_aligned>
 80046e0:	1c43      	adds	r3, r0, #1
 80046e2:	4604      	mov	r4, r0
 80046e4:	d155      	bne.n	8004792 <_malloc_r+0xf2>
 80046e6:	f8d8 4000 	ldr.w	r4, [r8]
 80046ea:	4626      	mov	r6, r4
 80046ec:	2e00      	cmp	r6, #0
 80046ee:	d145      	bne.n	800477c <_malloc_r+0xdc>
 80046f0:	2c00      	cmp	r4, #0
 80046f2:	d048      	beq.n	8004786 <_malloc_r+0xe6>
 80046f4:	6823      	ldr	r3, [r4, #0]
 80046f6:	4631      	mov	r1, r6
 80046f8:	4638      	mov	r0, r7
 80046fa:	eb04 0903 	add.w	r9, r4, r3
 80046fe:	f000 fb5d 	bl	8004dbc <_sbrk_r>
 8004702:	4581      	cmp	r9, r0
 8004704:	d13f      	bne.n	8004786 <_malloc_r+0xe6>
 8004706:	6821      	ldr	r1, [r4, #0]
 8004708:	1a6d      	subs	r5, r5, r1
 800470a:	4629      	mov	r1, r5
 800470c:	4638      	mov	r0, r7
 800470e:	f7ff ffa7 	bl	8004660 <sbrk_aligned>
 8004712:	3001      	adds	r0, #1
 8004714:	d037      	beq.n	8004786 <_malloc_r+0xe6>
 8004716:	6823      	ldr	r3, [r4, #0]
 8004718:	442b      	add	r3, r5
 800471a:	6023      	str	r3, [r4, #0]
 800471c:	f8d8 3000 	ldr.w	r3, [r8]
 8004720:	2b00      	cmp	r3, #0
 8004722:	d038      	beq.n	8004796 <_malloc_r+0xf6>
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	42a2      	cmp	r2, r4
 8004728:	d12b      	bne.n	8004782 <_malloc_r+0xe2>
 800472a:	2200      	movs	r2, #0
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	e00f      	b.n	8004750 <_malloc_r+0xb0>
 8004730:	6822      	ldr	r2, [r4, #0]
 8004732:	1b52      	subs	r2, r2, r5
 8004734:	d41f      	bmi.n	8004776 <_malloc_r+0xd6>
 8004736:	2a0b      	cmp	r2, #11
 8004738:	d917      	bls.n	800476a <_malloc_r+0xca>
 800473a:	1961      	adds	r1, r4, r5
 800473c:	42a3      	cmp	r3, r4
 800473e:	6025      	str	r5, [r4, #0]
 8004740:	bf18      	it	ne
 8004742:	6059      	strne	r1, [r3, #4]
 8004744:	6863      	ldr	r3, [r4, #4]
 8004746:	bf08      	it	eq
 8004748:	f8c8 1000 	streq.w	r1, [r8]
 800474c:	5162      	str	r2, [r4, r5]
 800474e:	604b      	str	r3, [r1, #4]
 8004750:	4638      	mov	r0, r7
 8004752:	f104 060b 	add.w	r6, r4, #11
 8004756:	f000 f829 	bl	80047ac <__malloc_unlock>
 800475a:	f026 0607 	bic.w	r6, r6, #7
 800475e:	1d23      	adds	r3, r4, #4
 8004760:	1af2      	subs	r2, r6, r3
 8004762:	d0ae      	beq.n	80046c2 <_malloc_r+0x22>
 8004764:	1b9b      	subs	r3, r3, r6
 8004766:	50a3      	str	r3, [r4, r2]
 8004768:	e7ab      	b.n	80046c2 <_malloc_r+0x22>
 800476a:	42a3      	cmp	r3, r4
 800476c:	6862      	ldr	r2, [r4, #4]
 800476e:	d1dd      	bne.n	800472c <_malloc_r+0x8c>
 8004770:	f8c8 2000 	str.w	r2, [r8]
 8004774:	e7ec      	b.n	8004750 <_malloc_r+0xb0>
 8004776:	4623      	mov	r3, r4
 8004778:	6864      	ldr	r4, [r4, #4]
 800477a:	e7ac      	b.n	80046d6 <_malloc_r+0x36>
 800477c:	4634      	mov	r4, r6
 800477e:	6876      	ldr	r6, [r6, #4]
 8004780:	e7b4      	b.n	80046ec <_malloc_r+0x4c>
 8004782:	4613      	mov	r3, r2
 8004784:	e7cc      	b.n	8004720 <_malloc_r+0x80>
 8004786:	230c      	movs	r3, #12
 8004788:	603b      	str	r3, [r7, #0]
 800478a:	4638      	mov	r0, r7
 800478c:	f000 f80e 	bl	80047ac <__malloc_unlock>
 8004790:	e797      	b.n	80046c2 <_malloc_r+0x22>
 8004792:	6025      	str	r5, [r4, #0]
 8004794:	e7dc      	b.n	8004750 <_malloc_r+0xb0>
 8004796:	605b      	str	r3, [r3, #4]
 8004798:	deff      	udf	#255	; 0xff
 800479a:	bf00      	nop
 800479c:	200003a4 	.word	0x200003a4

080047a0 <__malloc_lock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__malloc_lock+0x8>)
 80047a2:	f7ff bf0f 	b.w	80045c4 <__retarget_lock_acquire_recursive>
 80047a6:	bf00      	nop
 80047a8:	200003a0 	.word	0x200003a0

080047ac <__malloc_unlock>:
 80047ac:	4801      	ldr	r0, [pc, #4]	; (80047b4 <__malloc_unlock+0x8>)
 80047ae:	f7ff bf0a 	b.w	80045c6 <__retarget_lock_release_recursive>
 80047b2:	bf00      	nop
 80047b4:	200003a0 	.word	0x200003a0

080047b8 <__ssputs_r>:
 80047b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047bc:	688e      	ldr	r6, [r1, #8]
 80047be:	461f      	mov	r7, r3
 80047c0:	42be      	cmp	r6, r7
 80047c2:	680b      	ldr	r3, [r1, #0]
 80047c4:	4682      	mov	sl, r0
 80047c6:	460c      	mov	r4, r1
 80047c8:	4690      	mov	r8, r2
 80047ca:	d82c      	bhi.n	8004826 <__ssputs_r+0x6e>
 80047cc:	898a      	ldrh	r2, [r1, #12]
 80047ce:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047d2:	d026      	beq.n	8004822 <__ssputs_r+0x6a>
 80047d4:	6965      	ldr	r5, [r4, #20]
 80047d6:	6909      	ldr	r1, [r1, #16]
 80047d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047dc:	eba3 0901 	sub.w	r9, r3, r1
 80047e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80047e4:	1c7b      	adds	r3, r7, #1
 80047e6:	444b      	add	r3, r9
 80047e8:	106d      	asrs	r5, r5, #1
 80047ea:	429d      	cmp	r5, r3
 80047ec:	bf38      	it	cc
 80047ee:	461d      	movcc	r5, r3
 80047f0:	0553      	lsls	r3, r2, #21
 80047f2:	d527      	bpl.n	8004844 <__ssputs_r+0x8c>
 80047f4:	4629      	mov	r1, r5
 80047f6:	f7ff ff53 	bl	80046a0 <_malloc_r>
 80047fa:	4606      	mov	r6, r0
 80047fc:	b360      	cbz	r0, 8004858 <__ssputs_r+0xa0>
 80047fe:	6921      	ldr	r1, [r4, #16]
 8004800:	464a      	mov	r2, r9
 8004802:	f000 faeb 	bl	8004ddc <memcpy>
 8004806:	89a3      	ldrh	r3, [r4, #12]
 8004808:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004810:	81a3      	strh	r3, [r4, #12]
 8004812:	6126      	str	r6, [r4, #16]
 8004814:	6165      	str	r5, [r4, #20]
 8004816:	444e      	add	r6, r9
 8004818:	eba5 0509 	sub.w	r5, r5, r9
 800481c:	6026      	str	r6, [r4, #0]
 800481e:	60a5      	str	r5, [r4, #8]
 8004820:	463e      	mov	r6, r7
 8004822:	42be      	cmp	r6, r7
 8004824:	d900      	bls.n	8004828 <__ssputs_r+0x70>
 8004826:	463e      	mov	r6, r7
 8004828:	6820      	ldr	r0, [r4, #0]
 800482a:	4632      	mov	r2, r6
 800482c:	4641      	mov	r1, r8
 800482e:	f000 faab 	bl	8004d88 <memmove>
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	1b9b      	subs	r3, r3, r6
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	4433      	add	r3, r6
 800483c:	6023      	str	r3, [r4, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004844:	462a      	mov	r2, r5
 8004846:	f000 fad7 	bl	8004df8 <_realloc_r>
 800484a:	4606      	mov	r6, r0
 800484c:	2800      	cmp	r0, #0
 800484e:	d1e0      	bne.n	8004812 <__ssputs_r+0x5a>
 8004850:	6921      	ldr	r1, [r4, #16]
 8004852:	4650      	mov	r0, sl
 8004854:	f7ff feb8 	bl	80045c8 <_free_r>
 8004858:	230c      	movs	r3, #12
 800485a:	f8ca 3000 	str.w	r3, [sl]
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	f04f 30ff 	mov.w	r0, #4294967295
 800486a:	e7e9      	b.n	8004840 <__ssputs_r+0x88>

0800486c <_svfiprintf_r>:
 800486c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004870:	4698      	mov	r8, r3
 8004872:	898b      	ldrh	r3, [r1, #12]
 8004874:	061b      	lsls	r3, r3, #24
 8004876:	b09d      	sub	sp, #116	; 0x74
 8004878:	4607      	mov	r7, r0
 800487a:	460d      	mov	r5, r1
 800487c:	4614      	mov	r4, r2
 800487e:	d50e      	bpl.n	800489e <_svfiprintf_r+0x32>
 8004880:	690b      	ldr	r3, [r1, #16]
 8004882:	b963      	cbnz	r3, 800489e <_svfiprintf_r+0x32>
 8004884:	2140      	movs	r1, #64	; 0x40
 8004886:	f7ff ff0b 	bl	80046a0 <_malloc_r>
 800488a:	6028      	str	r0, [r5, #0]
 800488c:	6128      	str	r0, [r5, #16]
 800488e:	b920      	cbnz	r0, 800489a <_svfiprintf_r+0x2e>
 8004890:	230c      	movs	r3, #12
 8004892:	603b      	str	r3, [r7, #0]
 8004894:	f04f 30ff 	mov.w	r0, #4294967295
 8004898:	e0d0      	b.n	8004a3c <_svfiprintf_r+0x1d0>
 800489a:	2340      	movs	r3, #64	; 0x40
 800489c:	616b      	str	r3, [r5, #20]
 800489e:	2300      	movs	r3, #0
 80048a0:	9309      	str	r3, [sp, #36]	; 0x24
 80048a2:	2320      	movs	r3, #32
 80048a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80048a8:	f8cd 800c 	str.w	r8, [sp, #12]
 80048ac:	2330      	movs	r3, #48	; 0x30
 80048ae:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004a54 <_svfiprintf_r+0x1e8>
 80048b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80048b6:	f04f 0901 	mov.w	r9, #1
 80048ba:	4623      	mov	r3, r4
 80048bc:	469a      	mov	sl, r3
 80048be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80048c2:	b10a      	cbz	r2, 80048c8 <_svfiprintf_r+0x5c>
 80048c4:	2a25      	cmp	r2, #37	; 0x25
 80048c6:	d1f9      	bne.n	80048bc <_svfiprintf_r+0x50>
 80048c8:	ebba 0b04 	subs.w	fp, sl, r4
 80048cc:	d00b      	beq.n	80048e6 <_svfiprintf_r+0x7a>
 80048ce:	465b      	mov	r3, fp
 80048d0:	4622      	mov	r2, r4
 80048d2:	4629      	mov	r1, r5
 80048d4:	4638      	mov	r0, r7
 80048d6:	f7ff ff6f 	bl	80047b8 <__ssputs_r>
 80048da:	3001      	adds	r0, #1
 80048dc:	f000 80a9 	beq.w	8004a32 <_svfiprintf_r+0x1c6>
 80048e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80048e2:	445a      	add	r2, fp
 80048e4:	9209      	str	r2, [sp, #36]	; 0x24
 80048e6:	f89a 3000 	ldrb.w	r3, [sl]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	f000 80a1 	beq.w	8004a32 <_svfiprintf_r+0x1c6>
 80048f0:	2300      	movs	r3, #0
 80048f2:	f04f 32ff 	mov.w	r2, #4294967295
 80048f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048fa:	f10a 0a01 	add.w	sl, sl, #1
 80048fe:	9304      	str	r3, [sp, #16]
 8004900:	9307      	str	r3, [sp, #28]
 8004902:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004906:	931a      	str	r3, [sp, #104]	; 0x68
 8004908:	4654      	mov	r4, sl
 800490a:	2205      	movs	r2, #5
 800490c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004910:	4850      	ldr	r0, [pc, #320]	; (8004a54 <_svfiprintf_r+0x1e8>)
 8004912:	f7fb fc9d 	bl	8000250 <memchr>
 8004916:	9a04      	ldr	r2, [sp, #16]
 8004918:	b9d8      	cbnz	r0, 8004952 <_svfiprintf_r+0xe6>
 800491a:	06d0      	lsls	r0, r2, #27
 800491c:	bf44      	itt	mi
 800491e:	2320      	movmi	r3, #32
 8004920:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004924:	0711      	lsls	r1, r2, #28
 8004926:	bf44      	itt	mi
 8004928:	232b      	movmi	r3, #43	; 0x2b
 800492a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800492e:	f89a 3000 	ldrb.w	r3, [sl]
 8004932:	2b2a      	cmp	r3, #42	; 0x2a
 8004934:	d015      	beq.n	8004962 <_svfiprintf_r+0xf6>
 8004936:	9a07      	ldr	r2, [sp, #28]
 8004938:	4654      	mov	r4, sl
 800493a:	2000      	movs	r0, #0
 800493c:	f04f 0c0a 	mov.w	ip, #10
 8004940:	4621      	mov	r1, r4
 8004942:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004946:	3b30      	subs	r3, #48	; 0x30
 8004948:	2b09      	cmp	r3, #9
 800494a:	d94d      	bls.n	80049e8 <_svfiprintf_r+0x17c>
 800494c:	b1b0      	cbz	r0, 800497c <_svfiprintf_r+0x110>
 800494e:	9207      	str	r2, [sp, #28]
 8004950:	e014      	b.n	800497c <_svfiprintf_r+0x110>
 8004952:	eba0 0308 	sub.w	r3, r0, r8
 8004956:	fa09 f303 	lsl.w	r3, r9, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	9304      	str	r3, [sp, #16]
 800495e:	46a2      	mov	sl, r4
 8004960:	e7d2      	b.n	8004908 <_svfiprintf_r+0x9c>
 8004962:	9b03      	ldr	r3, [sp, #12]
 8004964:	1d19      	adds	r1, r3, #4
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	9103      	str	r1, [sp, #12]
 800496a:	2b00      	cmp	r3, #0
 800496c:	bfbb      	ittet	lt
 800496e:	425b      	neglt	r3, r3
 8004970:	f042 0202 	orrlt.w	r2, r2, #2
 8004974:	9307      	strge	r3, [sp, #28]
 8004976:	9307      	strlt	r3, [sp, #28]
 8004978:	bfb8      	it	lt
 800497a:	9204      	strlt	r2, [sp, #16]
 800497c:	7823      	ldrb	r3, [r4, #0]
 800497e:	2b2e      	cmp	r3, #46	; 0x2e
 8004980:	d10c      	bne.n	800499c <_svfiprintf_r+0x130>
 8004982:	7863      	ldrb	r3, [r4, #1]
 8004984:	2b2a      	cmp	r3, #42	; 0x2a
 8004986:	d134      	bne.n	80049f2 <_svfiprintf_r+0x186>
 8004988:	9b03      	ldr	r3, [sp, #12]
 800498a:	1d1a      	adds	r2, r3, #4
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	9203      	str	r2, [sp, #12]
 8004990:	2b00      	cmp	r3, #0
 8004992:	bfb8      	it	lt
 8004994:	f04f 33ff 	movlt.w	r3, #4294967295
 8004998:	3402      	adds	r4, #2
 800499a:	9305      	str	r3, [sp, #20]
 800499c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004a64 <_svfiprintf_r+0x1f8>
 80049a0:	7821      	ldrb	r1, [r4, #0]
 80049a2:	2203      	movs	r2, #3
 80049a4:	4650      	mov	r0, sl
 80049a6:	f7fb fc53 	bl	8000250 <memchr>
 80049aa:	b138      	cbz	r0, 80049bc <_svfiprintf_r+0x150>
 80049ac:	9b04      	ldr	r3, [sp, #16]
 80049ae:	eba0 000a 	sub.w	r0, r0, sl
 80049b2:	2240      	movs	r2, #64	; 0x40
 80049b4:	4082      	lsls	r2, r0
 80049b6:	4313      	orrs	r3, r2
 80049b8:	3401      	adds	r4, #1
 80049ba:	9304      	str	r3, [sp, #16]
 80049bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c0:	4825      	ldr	r0, [pc, #148]	; (8004a58 <_svfiprintf_r+0x1ec>)
 80049c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049c6:	2206      	movs	r2, #6
 80049c8:	f7fb fc42 	bl	8000250 <memchr>
 80049cc:	2800      	cmp	r0, #0
 80049ce:	d038      	beq.n	8004a42 <_svfiprintf_r+0x1d6>
 80049d0:	4b22      	ldr	r3, [pc, #136]	; (8004a5c <_svfiprintf_r+0x1f0>)
 80049d2:	bb1b      	cbnz	r3, 8004a1c <_svfiprintf_r+0x1b0>
 80049d4:	9b03      	ldr	r3, [sp, #12]
 80049d6:	3307      	adds	r3, #7
 80049d8:	f023 0307 	bic.w	r3, r3, #7
 80049dc:	3308      	adds	r3, #8
 80049de:	9303      	str	r3, [sp, #12]
 80049e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049e2:	4433      	add	r3, r6
 80049e4:	9309      	str	r3, [sp, #36]	; 0x24
 80049e6:	e768      	b.n	80048ba <_svfiprintf_r+0x4e>
 80049e8:	fb0c 3202 	mla	r2, ip, r2, r3
 80049ec:	460c      	mov	r4, r1
 80049ee:	2001      	movs	r0, #1
 80049f0:	e7a6      	b.n	8004940 <_svfiprintf_r+0xd4>
 80049f2:	2300      	movs	r3, #0
 80049f4:	3401      	adds	r4, #1
 80049f6:	9305      	str	r3, [sp, #20]
 80049f8:	4619      	mov	r1, r3
 80049fa:	f04f 0c0a 	mov.w	ip, #10
 80049fe:	4620      	mov	r0, r4
 8004a00:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004a04:	3a30      	subs	r2, #48	; 0x30
 8004a06:	2a09      	cmp	r2, #9
 8004a08:	d903      	bls.n	8004a12 <_svfiprintf_r+0x1a6>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d0c6      	beq.n	800499c <_svfiprintf_r+0x130>
 8004a0e:	9105      	str	r1, [sp, #20]
 8004a10:	e7c4      	b.n	800499c <_svfiprintf_r+0x130>
 8004a12:	fb0c 2101 	mla	r1, ip, r1, r2
 8004a16:	4604      	mov	r4, r0
 8004a18:	2301      	movs	r3, #1
 8004a1a:	e7f0      	b.n	80049fe <_svfiprintf_r+0x192>
 8004a1c:	ab03      	add	r3, sp, #12
 8004a1e:	9300      	str	r3, [sp, #0]
 8004a20:	462a      	mov	r2, r5
 8004a22:	4b0f      	ldr	r3, [pc, #60]	; (8004a60 <_svfiprintf_r+0x1f4>)
 8004a24:	a904      	add	r1, sp, #16
 8004a26:	4638      	mov	r0, r7
 8004a28:	f3af 8000 	nop.w
 8004a2c:	1c42      	adds	r2, r0, #1
 8004a2e:	4606      	mov	r6, r0
 8004a30:	d1d6      	bne.n	80049e0 <_svfiprintf_r+0x174>
 8004a32:	89ab      	ldrh	r3, [r5, #12]
 8004a34:	065b      	lsls	r3, r3, #25
 8004a36:	f53f af2d 	bmi.w	8004894 <_svfiprintf_r+0x28>
 8004a3a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a3c:	b01d      	add	sp, #116	; 0x74
 8004a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a42:	ab03      	add	r3, sp, #12
 8004a44:	9300      	str	r3, [sp, #0]
 8004a46:	462a      	mov	r2, r5
 8004a48:	4b05      	ldr	r3, [pc, #20]	; (8004a60 <_svfiprintf_r+0x1f4>)
 8004a4a:	a904      	add	r1, sp, #16
 8004a4c:	4638      	mov	r0, r7
 8004a4e:	f000 f879 	bl	8004b44 <_printf_i>
 8004a52:	e7eb      	b.n	8004a2c <_svfiprintf_r+0x1c0>
 8004a54:	08004ef8 	.word	0x08004ef8
 8004a58:	08004f02 	.word	0x08004f02
 8004a5c:	00000000 	.word	0x00000000
 8004a60:	080047b9 	.word	0x080047b9
 8004a64:	08004efe 	.word	0x08004efe

08004a68 <_printf_common>:
 8004a68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a6c:	4616      	mov	r6, r2
 8004a6e:	4699      	mov	r9, r3
 8004a70:	688a      	ldr	r2, [r1, #8]
 8004a72:	690b      	ldr	r3, [r1, #16]
 8004a74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	bfb8      	it	lt
 8004a7c:	4613      	movlt	r3, r2
 8004a7e:	6033      	str	r3, [r6, #0]
 8004a80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a84:	4607      	mov	r7, r0
 8004a86:	460c      	mov	r4, r1
 8004a88:	b10a      	cbz	r2, 8004a8e <_printf_common+0x26>
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	0699      	lsls	r1, r3, #26
 8004a92:	bf42      	ittt	mi
 8004a94:	6833      	ldrmi	r3, [r6, #0]
 8004a96:	3302      	addmi	r3, #2
 8004a98:	6033      	strmi	r3, [r6, #0]
 8004a9a:	6825      	ldr	r5, [r4, #0]
 8004a9c:	f015 0506 	ands.w	r5, r5, #6
 8004aa0:	d106      	bne.n	8004ab0 <_printf_common+0x48>
 8004aa2:	f104 0a19 	add.w	sl, r4, #25
 8004aa6:	68e3      	ldr	r3, [r4, #12]
 8004aa8:	6832      	ldr	r2, [r6, #0]
 8004aaa:	1a9b      	subs	r3, r3, r2
 8004aac:	42ab      	cmp	r3, r5
 8004aae:	dc26      	bgt.n	8004afe <_printf_common+0x96>
 8004ab0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004ab4:	1e13      	subs	r3, r2, #0
 8004ab6:	6822      	ldr	r2, [r4, #0]
 8004ab8:	bf18      	it	ne
 8004aba:	2301      	movne	r3, #1
 8004abc:	0692      	lsls	r2, r2, #26
 8004abe:	d42b      	bmi.n	8004b18 <_printf_common+0xb0>
 8004ac0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004ac4:	4649      	mov	r1, r9
 8004ac6:	4638      	mov	r0, r7
 8004ac8:	47c0      	blx	r8
 8004aca:	3001      	adds	r0, #1
 8004acc:	d01e      	beq.n	8004b0c <_printf_common+0xa4>
 8004ace:	6823      	ldr	r3, [r4, #0]
 8004ad0:	6922      	ldr	r2, [r4, #16]
 8004ad2:	f003 0306 	and.w	r3, r3, #6
 8004ad6:	2b04      	cmp	r3, #4
 8004ad8:	bf02      	ittt	eq
 8004ada:	68e5      	ldreq	r5, [r4, #12]
 8004adc:	6833      	ldreq	r3, [r6, #0]
 8004ade:	1aed      	subeq	r5, r5, r3
 8004ae0:	68a3      	ldr	r3, [r4, #8]
 8004ae2:	bf0c      	ite	eq
 8004ae4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ae8:	2500      	movne	r5, #0
 8004aea:	4293      	cmp	r3, r2
 8004aec:	bfc4      	itt	gt
 8004aee:	1a9b      	subgt	r3, r3, r2
 8004af0:	18ed      	addgt	r5, r5, r3
 8004af2:	2600      	movs	r6, #0
 8004af4:	341a      	adds	r4, #26
 8004af6:	42b5      	cmp	r5, r6
 8004af8:	d11a      	bne.n	8004b30 <_printf_common+0xc8>
 8004afa:	2000      	movs	r0, #0
 8004afc:	e008      	b.n	8004b10 <_printf_common+0xa8>
 8004afe:	2301      	movs	r3, #1
 8004b00:	4652      	mov	r2, sl
 8004b02:	4649      	mov	r1, r9
 8004b04:	4638      	mov	r0, r7
 8004b06:	47c0      	blx	r8
 8004b08:	3001      	adds	r0, #1
 8004b0a:	d103      	bne.n	8004b14 <_printf_common+0xac>
 8004b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8004b10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b14:	3501      	adds	r5, #1
 8004b16:	e7c6      	b.n	8004aa6 <_printf_common+0x3e>
 8004b18:	18e1      	adds	r1, r4, r3
 8004b1a:	1c5a      	adds	r2, r3, #1
 8004b1c:	2030      	movs	r0, #48	; 0x30
 8004b1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b22:	4422      	add	r2, r4
 8004b24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b2c:	3302      	adds	r3, #2
 8004b2e:	e7c7      	b.n	8004ac0 <_printf_common+0x58>
 8004b30:	2301      	movs	r3, #1
 8004b32:	4622      	mov	r2, r4
 8004b34:	4649      	mov	r1, r9
 8004b36:	4638      	mov	r0, r7
 8004b38:	47c0      	blx	r8
 8004b3a:	3001      	adds	r0, #1
 8004b3c:	d0e6      	beq.n	8004b0c <_printf_common+0xa4>
 8004b3e:	3601      	adds	r6, #1
 8004b40:	e7d9      	b.n	8004af6 <_printf_common+0x8e>
	...

08004b44 <_printf_i>:
 8004b44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b48:	7e0f      	ldrb	r7, [r1, #24]
 8004b4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004b4c:	2f78      	cmp	r7, #120	; 0x78
 8004b4e:	4691      	mov	r9, r2
 8004b50:	4680      	mov	r8, r0
 8004b52:	460c      	mov	r4, r1
 8004b54:	469a      	mov	sl, r3
 8004b56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004b5a:	d807      	bhi.n	8004b6c <_printf_i+0x28>
 8004b5c:	2f62      	cmp	r7, #98	; 0x62
 8004b5e:	d80a      	bhi.n	8004b76 <_printf_i+0x32>
 8004b60:	2f00      	cmp	r7, #0
 8004b62:	f000 80d4 	beq.w	8004d0e <_printf_i+0x1ca>
 8004b66:	2f58      	cmp	r7, #88	; 0x58
 8004b68:	f000 80c0 	beq.w	8004cec <_printf_i+0x1a8>
 8004b6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004b74:	e03a      	b.n	8004bec <_printf_i+0xa8>
 8004b76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004b7a:	2b15      	cmp	r3, #21
 8004b7c:	d8f6      	bhi.n	8004b6c <_printf_i+0x28>
 8004b7e:	a101      	add	r1, pc, #4	; (adr r1, 8004b84 <_printf_i+0x40>)
 8004b80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b84:	08004bdd 	.word	0x08004bdd
 8004b88:	08004bf1 	.word	0x08004bf1
 8004b8c:	08004b6d 	.word	0x08004b6d
 8004b90:	08004b6d 	.word	0x08004b6d
 8004b94:	08004b6d 	.word	0x08004b6d
 8004b98:	08004b6d 	.word	0x08004b6d
 8004b9c:	08004bf1 	.word	0x08004bf1
 8004ba0:	08004b6d 	.word	0x08004b6d
 8004ba4:	08004b6d 	.word	0x08004b6d
 8004ba8:	08004b6d 	.word	0x08004b6d
 8004bac:	08004b6d 	.word	0x08004b6d
 8004bb0:	08004cf5 	.word	0x08004cf5
 8004bb4:	08004c1d 	.word	0x08004c1d
 8004bb8:	08004caf 	.word	0x08004caf
 8004bbc:	08004b6d 	.word	0x08004b6d
 8004bc0:	08004b6d 	.word	0x08004b6d
 8004bc4:	08004d17 	.word	0x08004d17
 8004bc8:	08004b6d 	.word	0x08004b6d
 8004bcc:	08004c1d 	.word	0x08004c1d
 8004bd0:	08004b6d 	.word	0x08004b6d
 8004bd4:	08004b6d 	.word	0x08004b6d
 8004bd8:	08004cb7 	.word	0x08004cb7
 8004bdc:	682b      	ldr	r3, [r5, #0]
 8004bde:	1d1a      	adds	r2, r3, #4
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	602a      	str	r2, [r5, #0]
 8004be4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bec:	2301      	movs	r3, #1
 8004bee:	e09f      	b.n	8004d30 <_printf_i+0x1ec>
 8004bf0:	6820      	ldr	r0, [r4, #0]
 8004bf2:	682b      	ldr	r3, [r5, #0]
 8004bf4:	0607      	lsls	r7, r0, #24
 8004bf6:	f103 0104 	add.w	r1, r3, #4
 8004bfa:	6029      	str	r1, [r5, #0]
 8004bfc:	d501      	bpl.n	8004c02 <_printf_i+0xbe>
 8004bfe:	681e      	ldr	r6, [r3, #0]
 8004c00:	e003      	b.n	8004c0a <_printf_i+0xc6>
 8004c02:	0646      	lsls	r6, r0, #25
 8004c04:	d5fb      	bpl.n	8004bfe <_printf_i+0xba>
 8004c06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c0a:	2e00      	cmp	r6, #0
 8004c0c:	da03      	bge.n	8004c16 <_printf_i+0xd2>
 8004c0e:	232d      	movs	r3, #45	; 0x2d
 8004c10:	4276      	negs	r6, r6
 8004c12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c16:	485a      	ldr	r0, [pc, #360]	; (8004d80 <_printf_i+0x23c>)
 8004c18:	230a      	movs	r3, #10
 8004c1a:	e012      	b.n	8004c42 <_printf_i+0xfe>
 8004c1c:	682b      	ldr	r3, [r5, #0]
 8004c1e:	6820      	ldr	r0, [r4, #0]
 8004c20:	1d19      	adds	r1, r3, #4
 8004c22:	6029      	str	r1, [r5, #0]
 8004c24:	0605      	lsls	r5, r0, #24
 8004c26:	d501      	bpl.n	8004c2c <_printf_i+0xe8>
 8004c28:	681e      	ldr	r6, [r3, #0]
 8004c2a:	e002      	b.n	8004c32 <_printf_i+0xee>
 8004c2c:	0641      	lsls	r1, r0, #25
 8004c2e:	d5fb      	bpl.n	8004c28 <_printf_i+0xe4>
 8004c30:	881e      	ldrh	r6, [r3, #0]
 8004c32:	4853      	ldr	r0, [pc, #332]	; (8004d80 <_printf_i+0x23c>)
 8004c34:	2f6f      	cmp	r7, #111	; 0x6f
 8004c36:	bf0c      	ite	eq
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	230a      	movne	r3, #10
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c42:	6865      	ldr	r5, [r4, #4]
 8004c44:	60a5      	str	r5, [r4, #8]
 8004c46:	2d00      	cmp	r5, #0
 8004c48:	bfa2      	ittt	ge
 8004c4a:	6821      	ldrge	r1, [r4, #0]
 8004c4c:	f021 0104 	bicge.w	r1, r1, #4
 8004c50:	6021      	strge	r1, [r4, #0]
 8004c52:	b90e      	cbnz	r6, 8004c58 <_printf_i+0x114>
 8004c54:	2d00      	cmp	r5, #0
 8004c56:	d04b      	beq.n	8004cf0 <_printf_i+0x1ac>
 8004c58:	4615      	mov	r5, r2
 8004c5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8004c5e:	fb03 6711 	mls	r7, r3, r1, r6
 8004c62:	5dc7      	ldrb	r7, [r0, r7]
 8004c64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004c68:	4637      	mov	r7, r6
 8004c6a:	42bb      	cmp	r3, r7
 8004c6c:	460e      	mov	r6, r1
 8004c6e:	d9f4      	bls.n	8004c5a <_printf_i+0x116>
 8004c70:	2b08      	cmp	r3, #8
 8004c72:	d10b      	bne.n	8004c8c <_printf_i+0x148>
 8004c74:	6823      	ldr	r3, [r4, #0]
 8004c76:	07de      	lsls	r6, r3, #31
 8004c78:	d508      	bpl.n	8004c8c <_printf_i+0x148>
 8004c7a:	6923      	ldr	r3, [r4, #16]
 8004c7c:	6861      	ldr	r1, [r4, #4]
 8004c7e:	4299      	cmp	r1, r3
 8004c80:	bfde      	ittt	le
 8004c82:	2330      	movle	r3, #48	; 0x30
 8004c84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c88:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c8c:	1b52      	subs	r2, r2, r5
 8004c8e:	6122      	str	r2, [r4, #16]
 8004c90:	f8cd a000 	str.w	sl, [sp]
 8004c94:	464b      	mov	r3, r9
 8004c96:	aa03      	add	r2, sp, #12
 8004c98:	4621      	mov	r1, r4
 8004c9a:	4640      	mov	r0, r8
 8004c9c:	f7ff fee4 	bl	8004a68 <_printf_common>
 8004ca0:	3001      	adds	r0, #1
 8004ca2:	d14a      	bne.n	8004d3a <_printf_i+0x1f6>
 8004ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca8:	b004      	add	sp, #16
 8004caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cae:	6823      	ldr	r3, [r4, #0]
 8004cb0:	f043 0320 	orr.w	r3, r3, #32
 8004cb4:	6023      	str	r3, [r4, #0]
 8004cb6:	4833      	ldr	r0, [pc, #204]	; (8004d84 <_printf_i+0x240>)
 8004cb8:	2778      	movs	r7, #120	; 0x78
 8004cba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004cbe:	6823      	ldr	r3, [r4, #0]
 8004cc0:	6829      	ldr	r1, [r5, #0]
 8004cc2:	061f      	lsls	r7, r3, #24
 8004cc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8004cc8:	d402      	bmi.n	8004cd0 <_printf_i+0x18c>
 8004cca:	065f      	lsls	r7, r3, #25
 8004ccc:	bf48      	it	mi
 8004cce:	b2b6      	uxthmi	r6, r6
 8004cd0:	07df      	lsls	r7, r3, #31
 8004cd2:	bf48      	it	mi
 8004cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd8:	6029      	str	r1, [r5, #0]
 8004cda:	bf48      	it	mi
 8004cdc:	6023      	strmi	r3, [r4, #0]
 8004cde:	b91e      	cbnz	r6, 8004ce8 <_printf_i+0x1a4>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f023 0320 	bic.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	2310      	movs	r3, #16
 8004cea:	e7a7      	b.n	8004c3c <_printf_i+0xf8>
 8004cec:	4824      	ldr	r0, [pc, #144]	; (8004d80 <_printf_i+0x23c>)
 8004cee:	e7e4      	b.n	8004cba <_printf_i+0x176>
 8004cf0:	4615      	mov	r5, r2
 8004cf2:	e7bd      	b.n	8004c70 <_printf_i+0x12c>
 8004cf4:	682b      	ldr	r3, [r5, #0]
 8004cf6:	6826      	ldr	r6, [r4, #0]
 8004cf8:	6961      	ldr	r1, [r4, #20]
 8004cfa:	1d18      	adds	r0, r3, #4
 8004cfc:	6028      	str	r0, [r5, #0]
 8004cfe:	0635      	lsls	r5, r6, #24
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	d501      	bpl.n	8004d08 <_printf_i+0x1c4>
 8004d04:	6019      	str	r1, [r3, #0]
 8004d06:	e002      	b.n	8004d0e <_printf_i+0x1ca>
 8004d08:	0670      	lsls	r0, r6, #25
 8004d0a:	d5fb      	bpl.n	8004d04 <_printf_i+0x1c0>
 8004d0c:	8019      	strh	r1, [r3, #0]
 8004d0e:	2300      	movs	r3, #0
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	4615      	mov	r5, r2
 8004d14:	e7bc      	b.n	8004c90 <_printf_i+0x14c>
 8004d16:	682b      	ldr	r3, [r5, #0]
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	602a      	str	r2, [r5, #0]
 8004d1c:	681d      	ldr	r5, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	2100      	movs	r1, #0
 8004d22:	4628      	mov	r0, r5
 8004d24:	f7fb fa94 	bl	8000250 <memchr>
 8004d28:	b108      	cbz	r0, 8004d2e <_printf_i+0x1ea>
 8004d2a:	1b40      	subs	r0, r0, r5
 8004d2c:	6060      	str	r0, [r4, #4]
 8004d2e:	6863      	ldr	r3, [r4, #4]
 8004d30:	6123      	str	r3, [r4, #16]
 8004d32:	2300      	movs	r3, #0
 8004d34:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d38:	e7aa      	b.n	8004c90 <_printf_i+0x14c>
 8004d3a:	6923      	ldr	r3, [r4, #16]
 8004d3c:	462a      	mov	r2, r5
 8004d3e:	4649      	mov	r1, r9
 8004d40:	4640      	mov	r0, r8
 8004d42:	47d0      	blx	sl
 8004d44:	3001      	adds	r0, #1
 8004d46:	d0ad      	beq.n	8004ca4 <_printf_i+0x160>
 8004d48:	6823      	ldr	r3, [r4, #0]
 8004d4a:	079b      	lsls	r3, r3, #30
 8004d4c:	d413      	bmi.n	8004d76 <_printf_i+0x232>
 8004d4e:	68e0      	ldr	r0, [r4, #12]
 8004d50:	9b03      	ldr	r3, [sp, #12]
 8004d52:	4298      	cmp	r0, r3
 8004d54:	bfb8      	it	lt
 8004d56:	4618      	movlt	r0, r3
 8004d58:	e7a6      	b.n	8004ca8 <_printf_i+0x164>
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	4632      	mov	r2, r6
 8004d5e:	4649      	mov	r1, r9
 8004d60:	4640      	mov	r0, r8
 8004d62:	47d0      	blx	sl
 8004d64:	3001      	adds	r0, #1
 8004d66:	d09d      	beq.n	8004ca4 <_printf_i+0x160>
 8004d68:	3501      	adds	r5, #1
 8004d6a:	68e3      	ldr	r3, [r4, #12]
 8004d6c:	9903      	ldr	r1, [sp, #12]
 8004d6e:	1a5b      	subs	r3, r3, r1
 8004d70:	42ab      	cmp	r3, r5
 8004d72:	dcf2      	bgt.n	8004d5a <_printf_i+0x216>
 8004d74:	e7eb      	b.n	8004d4e <_printf_i+0x20a>
 8004d76:	2500      	movs	r5, #0
 8004d78:	f104 0619 	add.w	r6, r4, #25
 8004d7c:	e7f5      	b.n	8004d6a <_printf_i+0x226>
 8004d7e:	bf00      	nop
 8004d80:	08004f09 	.word	0x08004f09
 8004d84:	08004f1a 	.word	0x08004f1a

08004d88 <memmove>:
 8004d88:	4288      	cmp	r0, r1
 8004d8a:	b510      	push	{r4, lr}
 8004d8c:	eb01 0402 	add.w	r4, r1, r2
 8004d90:	d902      	bls.n	8004d98 <memmove+0x10>
 8004d92:	4284      	cmp	r4, r0
 8004d94:	4623      	mov	r3, r4
 8004d96:	d807      	bhi.n	8004da8 <memmove+0x20>
 8004d98:	1e43      	subs	r3, r0, #1
 8004d9a:	42a1      	cmp	r1, r4
 8004d9c:	d008      	beq.n	8004db0 <memmove+0x28>
 8004d9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004da2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004da6:	e7f8      	b.n	8004d9a <memmove+0x12>
 8004da8:	4402      	add	r2, r0
 8004daa:	4601      	mov	r1, r0
 8004dac:	428a      	cmp	r2, r1
 8004dae:	d100      	bne.n	8004db2 <memmove+0x2a>
 8004db0:	bd10      	pop	{r4, pc}
 8004db2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004db6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004dba:	e7f7      	b.n	8004dac <memmove+0x24>

08004dbc <_sbrk_r>:
 8004dbc:	b538      	push	{r3, r4, r5, lr}
 8004dbe:	4d06      	ldr	r5, [pc, #24]	; (8004dd8 <_sbrk_r+0x1c>)
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4604      	mov	r4, r0
 8004dc4:	4608      	mov	r0, r1
 8004dc6:	602b      	str	r3, [r5, #0]
 8004dc8:	f7fb fecc 	bl	8000b64 <_sbrk>
 8004dcc:	1c43      	adds	r3, r0, #1
 8004dce:	d102      	bne.n	8004dd6 <_sbrk_r+0x1a>
 8004dd0:	682b      	ldr	r3, [r5, #0]
 8004dd2:	b103      	cbz	r3, 8004dd6 <_sbrk_r+0x1a>
 8004dd4:	6023      	str	r3, [r4, #0]
 8004dd6:	bd38      	pop	{r3, r4, r5, pc}
 8004dd8:	2000039c 	.word	0x2000039c

08004ddc <memcpy>:
 8004ddc:	440a      	add	r2, r1
 8004dde:	4291      	cmp	r1, r2
 8004de0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004de4:	d100      	bne.n	8004de8 <memcpy+0xc>
 8004de6:	4770      	bx	lr
 8004de8:	b510      	push	{r4, lr}
 8004dea:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004dee:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004df2:	4291      	cmp	r1, r2
 8004df4:	d1f9      	bne.n	8004dea <memcpy+0xe>
 8004df6:	bd10      	pop	{r4, pc}

08004df8 <_realloc_r>:
 8004df8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dfc:	4680      	mov	r8, r0
 8004dfe:	4614      	mov	r4, r2
 8004e00:	460e      	mov	r6, r1
 8004e02:	b921      	cbnz	r1, 8004e0e <_realloc_r+0x16>
 8004e04:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004e08:	4611      	mov	r1, r2
 8004e0a:	f7ff bc49 	b.w	80046a0 <_malloc_r>
 8004e0e:	b92a      	cbnz	r2, 8004e1c <_realloc_r+0x24>
 8004e10:	f7ff fbda 	bl	80045c8 <_free_r>
 8004e14:	4625      	mov	r5, r4
 8004e16:	4628      	mov	r0, r5
 8004e18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e1c:	f000 f81b 	bl	8004e56 <_malloc_usable_size_r>
 8004e20:	4284      	cmp	r4, r0
 8004e22:	4607      	mov	r7, r0
 8004e24:	d802      	bhi.n	8004e2c <_realloc_r+0x34>
 8004e26:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004e2a:	d812      	bhi.n	8004e52 <_realloc_r+0x5a>
 8004e2c:	4621      	mov	r1, r4
 8004e2e:	4640      	mov	r0, r8
 8004e30:	f7ff fc36 	bl	80046a0 <_malloc_r>
 8004e34:	4605      	mov	r5, r0
 8004e36:	2800      	cmp	r0, #0
 8004e38:	d0ed      	beq.n	8004e16 <_realloc_r+0x1e>
 8004e3a:	42bc      	cmp	r4, r7
 8004e3c:	4622      	mov	r2, r4
 8004e3e:	4631      	mov	r1, r6
 8004e40:	bf28      	it	cs
 8004e42:	463a      	movcs	r2, r7
 8004e44:	f7ff ffca 	bl	8004ddc <memcpy>
 8004e48:	4631      	mov	r1, r6
 8004e4a:	4640      	mov	r0, r8
 8004e4c:	f7ff fbbc 	bl	80045c8 <_free_r>
 8004e50:	e7e1      	b.n	8004e16 <_realloc_r+0x1e>
 8004e52:	4635      	mov	r5, r6
 8004e54:	e7df      	b.n	8004e16 <_realloc_r+0x1e>

08004e56 <_malloc_usable_size_r>:
 8004e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e5a:	1f18      	subs	r0, r3, #4
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	bfbc      	itt	lt
 8004e60:	580b      	ldrlt	r3, [r1, r0]
 8004e62:	18c0      	addlt	r0, r0, r3
 8004e64:	4770      	bx	lr
	...

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
