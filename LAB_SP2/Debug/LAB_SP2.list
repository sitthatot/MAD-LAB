
LAB_SP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004768  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08004968  08004968  00014968  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080049c4  080049c4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080049c4  080049c4  000149c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080049cc  080049cc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080049cc  080049cc  000149cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080049d0  080049d0  000149d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080049d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  2000005c  08004a30  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000318  08004a30  00020318  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008a  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bfcb  00000000  00000000  000200cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020ac  00000000  00000000  0002c098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008e0  00000000  00000000  0002e148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006b8  00000000  00000000  0002ea28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027d65  00000000  00000000  0002f0e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000dcae  00000000  00000000  00056e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f64ed  00000000  00000000  00064af3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002730  00000000  00000000  0015afe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015d710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	2000005c 	.word	0x2000005c
 800021c:	00000000 	.word	0x00000000
 8000220:	08004950 	.word	0x08004950

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000060 	.word	0x20000060
 800023c:	08004950 	.word	0x08004950

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b52      	ldr	r3, [pc, #328]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000600:	4a52      	ldr	r2, [pc, #328]	; (800074c <MX_ADC1_Init+0x160>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000604:	4b50      	ldr	r3, [pc, #320]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000606:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b4e      	ldr	r3, [pc, #312]	; (8000748 <MX_ADC1_Init+0x15c>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000612:	4b4d      	ldr	r3, [pc, #308]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000614:	2201      	movs	r2, #1
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b4b      	ldr	r3, [pc, #300]	; (8000748 <MX_ADC1_Init+0x15c>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b4a      	ldr	r3, [pc, #296]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b48      	ldr	r3, [pc, #288]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b46      	ldr	r3, [pc, #280]	; (8000748 <MX_ADC1_Init+0x15c>)
 800062e:	4a48      	ldr	r2, [pc, #288]	; (8000750 <MX_ADC1_Init+0x164>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b45      	ldr	r3, [pc, #276]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 8;
 8000638:	4b43      	ldr	r3, [pc, #268]	; (8000748 <MX_ADC1_Init+0x15c>)
 800063a:	2208      	movs	r2, #8
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800063e:	4b42      	ldr	r3, [pc, #264]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000640:	2201      	movs	r2, #1
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000646:	4b40      	ldr	r3, [pc, #256]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000648:	2201      	movs	r2, #1
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	483e      	ldr	r0, [pc, #248]	; (8000748 <MX_ADC1_Init+0x15c>)
 800064e:	f000 fcc9 	bl	8000fe4 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 fae4 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800065c:	2303      	movs	r3, #3
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000664:	2301      	movs	r3, #1
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4836      	ldr	r0, [pc, #216]	; (8000748 <MX_ADC1_Init+0x15c>)
 800066e:	f000 fe01 	bl	8001274 <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 fad4 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800067c:	2304      	movs	r3, #4
 800067e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000680:	2302      	movs	r3, #2
 8000682:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000684:	463b      	mov	r3, r7
 8000686:	4619      	mov	r1, r3
 8000688:	482f      	ldr	r0, [pc, #188]	; (8000748 <MX_ADC1_Init+0x15c>)
 800068a:	f000 fdf3 	bl	8001274 <HAL_ADC_ConfigChannel>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d001      	beq.n	8000698 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000694:	f000 fac6 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000698:	2305      	movs	r3, #5
 800069a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800069c:	2303      	movs	r3, #3
 800069e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006a0:	463b      	mov	r3, r7
 80006a2:	4619      	mov	r1, r3
 80006a4:	4828      	ldr	r0, [pc, #160]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006a6:	f000 fde5 	bl	8001274 <HAL_ADC_ConfigChannel>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 80006b0:	f000 fab8 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 80006b4:	2306      	movs	r3, #6
 80006b6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 80006b8:	2304      	movs	r3, #4
 80006ba:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006bc:	463b      	mov	r3, r7
 80006be:	4619      	mov	r1, r3
 80006c0:	4821      	ldr	r0, [pc, #132]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006c2:	f000 fdd7 	bl	8001274 <HAL_ADC_ConfigChannel>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 80006cc:	f000 faaa 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80006d0:	2309      	movs	r3, #9
 80006d2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_5;
 80006d4:	2305      	movs	r3, #5
 80006d6:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006d8:	463b      	mov	r3, r7
 80006da:	4619      	mov	r1, r3
 80006dc:	481a      	ldr	r0, [pc, #104]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006de:	f000 fdc9 	bl	8001274 <HAL_ADC_ConfigChannel>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 80006e8:	f000 fa9c 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006ec:	230a      	movs	r3, #10
 80006ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_6;
 80006f0:	2306      	movs	r3, #6
 80006f2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006f4:	463b      	mov	r3, r7
 80006f6:	4619      	mov	r1, r3
 80006f8:	4813      	ldr	r0, [pc, #76]	; (8000748 <MX_ADC1_Init+0x15c>)
 80006fa:	f000 fdbb 	bl	8001274 <HAL_ADC_ConfigChannel>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8000704:	f000 fa8e 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000708:	230c      	movs	r3, #12
 800070a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_7;
 800070c:	2307      	movs	r3, #7
 800070e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000710:	463b      	mov	r3, r7
 8000712:	4619      	mov	r1, r3
 8000714:	480c      	ldr	r0, [pc, #48]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000716:	f000 fdad 	bl	8001274 <HAL_ADC_ConfigChannel>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8000720:	f000 fa80 	bl	8000c24 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 8000724:	230d      	movs	r3, #13
 8000726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_8;
 8000728:	2308      	movs	r3, #8
 800072a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800072c:	463b      	mov	r3, r7
 800072e:	4619      	mov	r1, r3
 8000730:	4805      	ldr	r0, [pc, #20]	; (8000748 <MX_ADC1_Init+0x15c>)
 8000732:	f000 fd9f 	bl	8001274 <HAL_ADC_ConfigChannel>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_ADC1_Init+0x154>
  {
    Error_Handler();
 800073c:	f000 fa72 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	3710      	adds	r7, #16
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	20000078 	.word	0x20000078
 800074c:	40012000 	.word	0x40012000
 8000750:	0f000001 	.word	0x0f000001

08000754 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08c      	sub	sp, #48	; 0x30
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075c:	f107 031c 	add.w	r3, r7, #28
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a45      	ldr	r2, [pc, #276]	; (8000888 <HAL_ADC_MspInit+0x134>)
 8000772:	4293      	cmp	r3, r2
 8000774:	f040 8084 	bne.w	8000880 <HAL_ADC_MspInit+0x12c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000778:	4b44      	ldr	r3, [pc, #272]	; (800088c <HAL_ADC_MspInit+0x138>)
 800077a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077c:	4a43      	ldr	r2, [pc, #268]	; (800088c <HAL_ADC_MspInit+0x138>)
 800077e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000782:	6453      	str	r3, [r2, #68]	; 0x44
 8000784:	4b41      	ldr	r3, [pc, #260]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000788:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000790:	4b3e      	ldr	r3, [pc, #248]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000792:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000794:	4a3d      	ldr	r2, [pc, #244]	; (800088c <HAL_ADC_MspInit+0x138>)
 8000796:	f043 0304 	orr.w	r3, r3, #4
 800079a:	6313      	str	r3, [r2, #48]	; 0x30
 800079c:	4b3b      	ldr	r3, [pc, #236]	; (800088c <HAL_ADC_MspInit+0x138>)
 800079e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a0:	f003 0304 	and.w	r3, r3, #4
 80007a4:	617b      	str	r3, [r7, #20]
 80007a6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a8:	4b38      	ldr	r3, [pc, #224]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ac:	4a37      	ldr	r2, [pc, #220]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007ae:	f043 0301 	orr.w	r3, r3, #1
 80007b2:	6313      	str	r3, [r2, #48]	; 0x30
 80007b4:	4b35      	ldr	r3, [pc, #212]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b8:	f003 0301 	and.w	r3, r3, #1
 80007bc:	613b      	str	r3, [r7, #16]
 80007be:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c0:	4b32      	ldr	r3, [pc, #200]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c4:	4a31      	ldr	r2, [pc, #196]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007c6:	f043 0302 	orr.w	r3, r3, #2
 80007ca:	6313      	str	r3, [r2, #48]	; 0x30
 80007cc:	4b2f      	ldr	r3, [pc, #188]	; (800088c <HAL_ADC_MspInit+0x138>)
 80007ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d0:	f003 0302 	and.w	r3, r3, #2
 80007d4:	60fb      	str	r3, [r7, #12]
 80007d6:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 80007d8:	230d      	movs	r3, #13
 80007da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007dc:	2303      	movs	r3, #3
 80007de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e4:	f107 031c 	add.w	r3, r7, #28
 80007e8:	4619      	mov	r1, r3
 80007ea:	4829      	ldr	r0, [pc, #164]	; (8000890 <HAL_ADC_MspInit+0x13c>)
 80007ec:	f001 fc9e 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007f0:	2378      	movs	r3, #120	; 0x78
 80007f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007f4:	2303      	movs	r3, #3
 80007f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fc:	f107 031c 	add.w	r3, r7, #28
 8000800:	4619      	mov	r1, r3
 8000802:	4824      	ldr	r0, [pc, #144]	; (8000894 <HAL_ADC_MspInit+0x140>)
 8000804:	f001 fc92 	bl	800212c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000808:	2302      	movs	r3, #2
 800080a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800080c:	2303      	movs	r3, #3
 800080e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4619      	mov	r1, r3
 800081a:	481f      	ldr	r0, [pc, #124]	; (8000898 <HAL_ADC_MspInit+0x144>)
 800081c:	f001 fc86 	bl	800212c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000822:	4a1f      	ldr	r2, [pc, #124]	; (80008a0 <HAL_ADC_MspInit+0x14c>)
 8000824:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000826:	4b1d      	ldr	r3, [pc, #116]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000828:	2200      	movs	r2, #0
 800082a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800082c:	4b1b      	ldr	r3, [pc, #108]	; (800089c <HAL_ADC_MspInit+0x148>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000838:	4b18      	ldr	r3, [pc, #96]	; (800089c <HAL_ADC_MspInit+0x148>)
 800083a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800083e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000840:	4b16      	ldr	r3, [pc, #88]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000842:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000846:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <HAL_ADC_MspInit+0x148>)
 800084a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800084e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000852:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000856:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000858:	4b10      	ldr	r3, [pc, #64]	; (800089c <HAL_ADC_MspInit+0x148>)
 800085a:	2200      	movs	r2, #0
 800085c:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000860:	2200      	movs	r2, #0
 8000862:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000864:	480d      	ldr	r0, [pc, #52]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000866:	f001 f8e9 	bl	8001a3c <HAL_DMA_Init>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <HAL_ADC_MspInit+0x120>
    {
      Error_Handler();
 8000870:	f000 f9d8 	bl	8000c24 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a09      	ldr	r2, [pc, #36]	; (800089c <HAL_ADC_MspInit+0x148>)
 8000878:	639a      	str	r2, [r3, #56]	; 0x38
 800087a:	4a08      	ldr	r2, [pc, #32]	; (800089c <HAL_ADC_MspInit+0x148>)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000880:	bf00      	nop
 8000882:	3730      	adds	r7, #48	; 0x30
 8000884:	46bd      	mov	sp, r7
 8000886:	bd80      	pop	{r7, pc}
 8000888:	40012000 	.word	0x40012000
 800088c:	40023800 	.word	0x40023800
 8000890:	40020800 	.word	0x40020800
 8000894:	40020000 	.word	0x40020000
 8000898:	40020400 	.word	0x40020400
 800089c:	200000c0 	.word	0x200000c0
 80008a0:	40026410 	.word	0x40026410

080008a4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80008aa:	4b0c      	ldr	r3, [pc, #48]	; (80008dc <MX_DMA_Init+0x38>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a0b      	ldr	r2, [pc, #44]	; (80008dc <MX_DMA_Init+0x38>)
 80008b0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b09      	ldr	r3, [pc, #36]	; (80008dc <MX_DMA_Init+0x38>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80008c2:	2200      	movs	r2, #0
 80008c4:	2101      	movs	r1, #1
 80008c6:	2038      	movs	r0, #56	; 0x38
 80008c8:	f001 f881 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80008cc:	2038      	movs	r0, #56	; 0x38
 80008ce:	f001 f89a 	bl	8001a06 <HAL_NVIC_EnableIRQ>

}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b08c      	sub	sp, #48	; 0x30
 80008e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]
 80008f0:	609a      	str	r2, [r3, #8]
 80008f2:	60da      	str	r2, [r3, #12]
 80008f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008f6:	4b44      	ldr	r3, [pc, #272]	; (8000a08 <MX_GPIO_Init+0x128>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a43      	ldr	r2, [pc, #268]	; (8000a08 <MX_GPIO_Init+0x128>)
 80008fc:	f043 0304 	orr.w	r3, r3, #4
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b41      	ldr	r3, [pc, #260]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0304 	and.w	r3, r3, #4
 800090a:	61bb      	str	r3, [r7, #24]
 800090c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800090e:	4b3e      	ldr	r3, [pc, #248]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	4a3d      	ldr	r2, [pc, #244]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000914:	f043 0301 	orr.w	r3, r3, #1
 8000918:	6313      	str	r3, [r2, #48]	; 0x30
 800091a:	4b3b      	ldr	r3, [pc, #236]	; (8000a08 <MX_GPIO_Init+0x128>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	f003 0301 	and.w	r3, r3, #1
 8000922:	617b      	str	r3, [r7, #20]
 8000924:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000926:	4b38      	ldr	r3, [pc, #224]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	4a37      	ldr	r2, [pc, #220]	; (8000a08 <MX_GPIO_Init+0x128>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	; 0x30
 8000932:	4b35      	ldr	r3, [pc, #212]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	613b      	str	r3, [r7, #16]
 800093c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800093e:	4b32      	ldr	r3, [pc, #200]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	4a31      	ldr	r2, [pc, #196]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000944:	f043 0320 	orr.w	r3, r3, #32
 8000948:	6313      	str	r3, [r2, #48]	; 0x30
 800094a:	4b2f      	ldr	r3, [pc, #188]	; (8000a08 <MX_GPIO_Init+0x128>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	f003 0320 	and.w	r3, r3, #32
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000956:	4b2c      	ldr	r3, [pc, #176]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a2b      	ldr	r2, [pc, #172]	; (8000a08 <MX_GPIO_Init+0x128>)
 800095c:	f043 0310 	orr.w	r3, r3, #16
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b29      	ldr	r3, [pc, #164]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0310 	and.w	r3, r3, #16
 800096a:	60bb      	str	r3, [r7, #8]
 800096c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800096e:	4b26      	ldr	r3, [pc, #152]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a25      	ldr	r2, [pc, #148]	; (8000a08 <MX_GPIO_Init+0x128>)
 8000974:	f043 0308 	orr.w	r3, r3, #8
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_GPIO_Init+0x128>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0308 	and.w	r3, r3, #8
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800098c:	481f      	ldr	r0, [pc, #124]	; (8000a0c <MX_GPIO_Init+0x12c>)
 800098e:	f001 fd79 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 8000992:	2200      	movs	r2, #0
 8000994:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000998:	481d      	ldr	r0, [pc, #116]	; (8000a10 <MX_GPIO_Init+0x130>)
 800099a:	f001 fd73 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 800099e:	2200      	movs	r2, #0
 80009a0:	2180      	movs	r1, #128	; 0x80
 80009a2:	481c      	ldr	r0, [pc, #112]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009a4:	f001 fd6e 	bl	8002484 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009ae:	2301      	movs	r3, #1
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b6:	2300      	movs	r3, #0
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80009ba:	f107 031c 	add.w	r3, r7, #28
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x12c>)
 80009c2:	f001 fbb3 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80009c6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80009ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009cc:	2301      	movs	r3, #1
 80009ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d0:	2300      	movs	r3, #0
 80009d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009d4:	2300      	movs	r3, #0
 80009d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80009d8:	f107 031c 	add.w	r3, r7, #28
 80009dc:	4619      	mov	r1, r3
 80009de:	480c      	ldr	r0, [pc, #48]	; (8000a10 <MX_GPIO_Init+0x130>)
 80009e0:	f001 fba4 	bl	800212c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009f0:	2300      	movs	r3, #0
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4806      	ldr	r0, [pc, #24]	; (8000a14 <MX_GPIO_Init+0x134>)
 80009fc:	f001 fb96 	bl	800212c <HAL_GPIO_Init>

}
 8000a00:	bf00      	nop
 8000a02:	3730      	adds	r7, #48	; 0x30
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	40023800 	.word	0x40023800
 8000a0c:	40021400 	.word	0x40021400
 8000a10:	40021000 	.word	0x40021000
 8000a14:	40020400 	.word	0x40020400

08000a18 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b084      	sub	sp, #16
 8000a1c:	af00      	add	r7, sp, #0
 8000a1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_SET);
 8000a20:	2201      	movs	r2, #1
 8000a22:	2180      	movs	r1, #128	; 0x80
 8000a24:	4814      	ldr	r0, [pc, #80]	; (8000a78 <HAL_ADC_ConvHalfCpltCallback+0x60>)
 8000a26:	f001 fd2d 	bl	8002484 <HAL_GPIO_WritePin>
	for(int i = 0; i<=7; i++)
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]
 8000a2e:	e010      	b.n	8000a52 <HAL_ADC_ConvHalfCpltCallback+0x3a>
	{
		displayBaseDecimal(adc_val[i]);
 8000a30:	4a12      	ldr	r2, [pc, #72]	; (8000a7c <HAL_ADC_ConvHalfCpltCallback+0x64>)
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f000 f85d 	bl	8000af8 <displayBaseDecimal>
		print("\r\n");
 8000a3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a42:	2202      	movs	r2, #2
 8000a44:	490e      	ldr	r1, [pc, #56]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000a46:	480f      	ldr	r0, [pc, #60]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000a48:	f002 fe40 	bl	80036cc <HAL_UART_Transmit>
	for(int i = 0; i<=7; i++)
 8000a4c:	68fb      	ldr	r3, [r7, #12]
 8000a4e:	3301      	adds	r3, #1
 8000a50:	60fb      	str	r3, [r7, #12]
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b07      	cmp	r3, #7
 8000a56:	ddeb      	ble.n	8000a30 <HAL_ADC_ConvHalfCpltCallback+0x18>


	}
	print("\r\n");
 8000a58:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a5c:	2202      	movs	r2, #2
 8000a5e:	4908      	ldr	r1, [pc, #32]	; (8000a80 <HAL_ADC_ConvHalfCpltCallback+0x68>)
 8000a60:	4808      	ldr	r0, [pc, #32]	; (8000a84 <HAL_ADC_ConvHalfCpltCallback+0x6c>)
 8000a62:	f002 fe33 	bl	80036cc <HAL_UART_Transmit>
	HAL_Delay(400);
 8000a66:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000a6a:	f000 fa97 	bl	8000f9c <HAL_Delay>
}
 8000a6e:	bf00      	nop
 8000a70:	3710      	adds	r7, #16
 8000a72:	46bd      	mov	sp, r7
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40020400 	.word	0x40020400
 8000a7c:	20000120 	.word	0x20000120
 8000a80:	08004968 	.word	0x08004968
 8000a84:	20000144 	.word	0x20000144

08000a88 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_7,GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2180      	movs	r1, #128	; 0x80
 8000a94:	4814      	ldr	r0, [pc, #80]	; (8000ae8 <HAL_ADC_ConvCpltCallback+0x60>)
 8000a96:	f001 fcf5 	bl	8002484 <HAL_GPIO_WritePin>
	for(int i = 0; i<=7; i++)
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	e010      	b.n	8000ac2 <HAL_ADC_ConvCpltCallback+0x3a>
	{
		displayBaseDecimal(adc_val[i]);
 8000aa0:	4a12      	ldr	r2, [pc, #72]	; (8000aec <HAL_ADC_ConvCpltCallback+0x64>)
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	f000 f825 	bl	8000af8 <displayBaseDecimal>
		print("\r\n");
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	2202      	movs	r2, #2
 8000ab4:	490e      	ldr	r1, [pc, #56]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ab6:	480f      	ldr	r0, [pc, #60]	; (8000af4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000ab8:	f002 fe08 	bl	80036cc <HAL_UART_Transmit>
	for(int i = 0; i<=7; i++)
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2b07      	cmp	r3, #7
 8000ac6:	ddeb      	ble.n	8000aa0 <HAL_ADC_ConvCpltCallback+0x18>
	}
	print("\r\n");
 8000ac8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000acc:	2202      	movs	r2, #2
 8000ace:	4908      	ldr	r1, [pc, #32]	; (8000af0 <HAL_ADC_ConvCpltCallback+0x68>)
 8000ad0:	4808      	ldr	r0, [pc, #32]	; (8000af4 <HAL_ADC_ConvCpltCallback+0x6c>)
 8000ad2:	f002 fdfb 	bl	80036cc <HAL_UART_Transmit>
	HAL_Delay(400);
 8000ad6:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8000ada:	f000 fa5f 	bl	8000f9c <HAL_Delay>
}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40020400 	.word	0x40020400
 8000aec:	20000120 	.word	0x20000120
 8000af0:	08004968 	.word	0x08004968
 8000af4:	20000144 	.word	0x20000144

08000af8 <displayBaseDecimal>:

void displayBaseDecimal(uint32_t myNumber){
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b086      	sub	sp, #24
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	char toDecimal[15];
	sprintf(toDecimal,"%d",myNumber);
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	687a      	ldr	r2, [r7, #4]
 8000b06:	490b      	ldr	r1, [pc, #44]	; (8000b34 <displayBaseDecimal+0x3c>)
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fa7d 	bl	8004008 <siprintf>
	print(toDecimal);
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff fb94 	bl	8000240 <strlen>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	f107 0108 	add.w	r1, r7, #8
 8000b20:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b24:	4804      	ldr	r0, [pc, #16]	; (8000b38 <displayBaseDecimal+0x40>)
 8000b26:	f002 fdd1 	bl	80036cc <HAL_UART_Transmit>
};
 8000b2a:	bf00      	nop
 8000b2c:	3718      	adds	r7, #24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	0800496c 	.word	0x0800496c
 8000b38:	20000144 	.word	0x20000144

08000b3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b40:	f000 f9cf 	bl	8000ee2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b44:	f000 f812 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b48:	f7ff feca 	bl	80008e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000b4c:	f7ff feaa 	bl	80008a4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000b50:	f7ff fd4c 	bl	80005ec <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000b54:	f000 f90c 	bl	8000d70 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_val, 8);
 8000b58:	2208      	movs	r2, #8
 8000b5a:	4902      	ldr	r1, [pc, #8]	; (8000b64 <main+0x28>)
 8000b5c:	4802      	ldr	r0, [pc, #8]	; (8000b68 <main+0x2c>)
 8000b5e:	f000 fa85 	bl	800106c <HAL_ADC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b62:	e7fe      	b.n	8000b62 <main+0x26>
 8000b64:	20000120 	.word	0x20000120
 8000b68:	20000078 	.word	0x20000078

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 031c 	add.w	r3, r7, #28
 8000b76:	2234      	movs	r2, #52	; 0x34
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f003 fa64 	bl	8004048 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 0308 	add.w	r3, r7, #8
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	4b22      	ldr	r3, [pc, #136]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	4a21      	ldr	r2, [pc, #132]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9c:	4b1f      	ldr	r3, [pc, #124]	; (8000c1c <SystemClock_Config+0xb0>)
 8000b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000ba8:	4b1d      	ldr	r3, [pc, #116]	; (8000c20 <SystemClock_Config+0xb4>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000bb0:	4a1b      	ldr	r2, [pc, #108]	; (8000c20 <SystemClock_Config+0xb4>)
 8000bb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bb6:	6013      	str	r3, [r2, #0]
 8000bb8:	4b19      	ldr	r3, [pc, #100]	; (8000c20 <SystemClock_Config+0xb4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bc0:	603b      	str	r3, [r7, #0]
 8000bc2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc8:	2301      	movs	r3, #1
 8000bca:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bcc:	2310      	movs	r3, #16
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bd4:	f107 031c 	add.w	r3, r7, #28
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f001 fc6d 	bl	80024b8 <HAL_RCC_OscConfig>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000be4:	f000 f81e 	bl	8000c24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000be8:	230f      	movs	r3, #15
 8000bea:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000bec:	2300      	movs	r3, #0
 8000bee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000bfc:	f107 0308 	add.w	r3, r7, #8
 8000c00:	2100      	movs	r1, #0
 8000c02:	4618      	mov	r0, r3
 8000c04:	f001 ff06 	bl	8002a14 <HAL_RCC_ClockConfig>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000c0e:	f000 f809 	bl	8000c24 <Error_Handler>
  }
}
 8000c12:	bf00      	nop
 8000c14:	3750      	adds	r7, #80	; 0x50
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40023800 	.word	0x40023800
 8000c20:	40007000 	.word	0x40007000

08000c24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c28:	b672      	cpsid	i
}
 8000c2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <Error_Handler+0x8>
	...

08000c30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000c36:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <HAL_MspInit+0x44>)
 8000c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c3a:	4a0e      	ldr	r2, [pc, #56]	; (8000c74 <HAL_MspInit+0x44>)
 8000c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c40:	6413      	str	r3, [r2, #64]	; 0x40
 8000c42:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <HAL_MspInit+0x44>)
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c4a:	607b      	str	r3, [r7, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_MspInit+0x44>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_MspInit+0x44>)
 8000c54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c58:	6453      	str	r3, [r2, #68]	; 0x44
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_MspInit+0x44>)
 8000c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c62:	603b      	str	r3, [r7, #0]
 8000c64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000c66:	2005      	movs	r0, #5
 8000c68:	f000 fea6 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c6c:	bf00      	nop
 8000c6e:	3708      	adds	r7, #8
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40023800 	.word	0x40023800

08000c78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <NMI_Handler+0x4>

08000c7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c7e:	b480      	push	{r7}
 8000c80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c82:	e7fe      	b.n	8000c82 <HardFault_Handler+0x4>

08000c84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c88:	e7fe      	b.n	8000c88 <MemManage_Handler+0x4>

08000c8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <BusFault_Handler+0x4>

08000c90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <UsageFault_Handler+0x4>

08000c96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr

08000ca4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr

08000cb2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cb2:	b480      	push	{r7}
 8000cb4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr

08000cc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cc4:	f000 f94a 	bl	8000f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cc8:	bf00      	nop
 8000cca:	bd80      	pop	{r7, pc}

08000ccc <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000cd0:	4802      	ldr	r0, [pc, #8]	; (8000cdc <DMA2_Stream0_IRQHandler+0x10>)
 8000cd2:	f000 ffc1 	bl	8001c58 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000cd6:	bf00      	nop
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200000c0 	.word	0x200000c0

08000ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce8:	4a14      	ldr	r2, [pc, #80]	; (8000d3c <_sbrk+0x5c>)
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <_sbrk+0x60>)
 8000cec:	1ad3      	subs	r3, r2, r3
 8000cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cf0:	697b      	ldr	r3, [r7, #20]
 8000cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cf4:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <_sbrk+0x64>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cfc:	4b11      	ldr	r3, [pc, #68]	; (8000d44 <_sbrk+0x64>)
 8000cfe:	4a12      	ldr	r2, [pc, #72]	; (8000d48 <_sbrk+0x68>)
 8000d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d02:	4b10      	ldr	r3, [pc, #64]	; (8000d44 <_sbrk+0x64>)
 8000d04:	681a      	ldr	r2, [r3, #0]
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	4413      	add	r3, r2
 8000d0a:	693a      	ldr	r2, [r7, #16]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	d207      	bcs.n	8000d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d10:	f003 f9a2 	bl	8004058 <__errno>
 8000d14:	4603      	mov	r3, r0
 8000d16:	220c      	movs	r2, #12
 8000d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d1e:	e009      	b.n	8000d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d20:	4b08      	ldr	r3, [pc, #32]	; (8000d44 <_sbrk+0x64>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d26:	4b07      	ldr	r3, [pc, #28]	; (8000d44 <_sbrk+0x64>)
 8000d28:	681a      	ldr	r2, [r3, #0]
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	4413      	add	r3, r2
 8000d2e:	4a05      	ldr	r2, [pc, #20]	; (8000d44 <_sbrk+0x64>)
 8000d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d32:	68fb      	ldr	r3, [r7, #12]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	3718      	adds	r7, #24
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	20080000 	.word	0x20080000
 8000d40:	00000400 	.word	0x00000400
 8000d44:	20000140 	.word	0x20000140
 8000d48:	20000318 	.word	0x20000318

08000d4c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d50:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <SystemInit+0x20>)
 8000d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d56:	4a05      	ldr	r2, [pc, #20]	; (8000d6c <SystemInit+0x20>)
 8000d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d68:	4770      	bx	lr
 8000d6a:	bf00      	nop
 8000d6c:	e000ed00 	.word	0xe000ed00

08000d70 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000d74:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d76:	4a15      	ldr	r2, [pc, #84]	; (8000dcc <MX_USART3_UART_Init+0x5c>)
 8000d78:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d7c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d80:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000d82:	4b11      	ldr	r3, [pc, #68]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000d88:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000d8e:	4b0e      	ldr	r3, [pc, #56]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000d94:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d96:	220c      	movs	r2, #12
 8000d98:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d9a:	4b0b      	ldr	r3, [pc, #44]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000da6:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <MX_USART3_UART_Init+0x58>)
 8000db4:	f002 fc3c 	bl	8003630 <HAL_UART_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000dbe:	f7ff ff31 	bl	8000c24 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000144 	.word	0x20000144
 8000dcc:	40004800 	.word	0x40004800

08000dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b0ae      	sub	sp, #184	; 0xb8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ddc:	2200      	movs	r2, #0
 8000dde:	601a      	str	r2, [r3, #0]
 8000de0:	605a      	str	r2, [r3, #4]
 8000de2:	609a      	str	r2, [r3, #8]
 8000de4:	60da      	str	r2, [r3, #12]
 8000de6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000de8:	f107 0314 	add.w	r3, r7, #20
 8000dec:	2290      	movs	r2, #144	; 0x90
 8000dee:	2100      	movs	r1, #0
 8000df0:	4618      	mov	r0, r3
 8000df2:	f003 f929 	bl	8004048 <memset>
  if(uartHandle->Instance==USART3)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	4a22      	ldr	r2, [pc, #136]	; (8000e84 <HAL_UART_MspInit+0xb4>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	d13c      	bne.n	8000e7a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000e00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000e04:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e0a:	f107 0314 	add.w	r3, r7, #20
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f001 ffe6 	bl	8002de0 <HAL_RCCEx_PeriphCLKConfig>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e1a:	f7ff ff03 	bl	8000c24 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e1e:	4b1a      	ldr	r3, [pc, #104]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	4a19      	ldr	r2, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e28:	6413      	str	r3, [r2, #64]	; 0x40
 8000e2a:	4b17      	ldr	r3, [pc, #92]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e32:	613b      	str	r3, [r7, #16]
 8000e34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e36:	4b14      	ldr	r3, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a13      	ldr	r2, [pc, #76]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e3c:	f043 0308 	orr.w	r3, r3, #8
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b11      	ldr	r3, [pc, #68]	; (8000e88 <HAL_UART_MspInit+0xb8>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0308 	and.w	r3, r3, #8
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000e4e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000e52:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e68:	2307      	movs	r3, #7
 8000e6a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000e72:	4619      	mov	r1, r3
 8000e74:	4805      	ldr	r0, [pc, #20]	; (8000e8c <HAL_UART_MspInit+0xbc>)
 8000e76:	f001 f959 	bl	800212c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e7a:	bf00      	nop
 8000e7c:	37b8      	adds	r7, #184	; 0xb8
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004800 	.word	0x40004800
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020c00 	.word	0x40020c00

08000e90 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e90:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ec8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e94:	480d      	ldr	r0, [pc, #52]	; (8000ecc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e96:	490e      	ldr	r1, [pc, #56]	; (8000ed0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e98:	4a0e      	ldr	r2, [pc, #56]	; (8000ed4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e9c:	e002      	b.n	8000ea4 <LoopCopyDataInit>

08000e9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea2:	3304      	adds	r3, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ea6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ea8:	d3f9      	bcc.n	8000e9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eaa:	4a0b      	ldr	r2, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000eac:	4c0b      	ldr	r4, [pc, #44]	; (8000edc <LoopFillZerobss+0x26>)
  movs r3, #0
 8000eae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb0:	e001      	b.n	8000eb6 <LoopFillZerobss>

08000eb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb4:	3204      	adds	r2, #4

08000eb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000eb8:	d3fb      	bcc.n	8000eb2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eba:	f7ff ff47 	bl	8000d4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f003 f8d1 	bl	8004064 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fe3b 	bl	8000b3c <main>
  bx  lr    
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000ecc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ed0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000ed4:	080049d4 	.word	0x080049d4
  ldr r2, =_sbss
 8000ed8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000edc:	20000318 	.word	0x20000318

08000ee0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC_IRQHandler>

08000ee2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee2:	b580      	push	{r7, lr}
 8000ee4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	f000 fd66 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eec:	2000      	movs	r0, #0
 8000eee:	f000 f805 	bl	8000efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ef2:	f7ff fe9d 	bl	8000c30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ef6:	2300      	movs	r3, #0
}
 8000ef8:	4618      	mov	r0, r3
 8000efa:	bd80      	pop	{r7, pc}

08000efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f04:	4b12      	ldr	r3, [pc, #72]	; (8000f50 <HAL_InitTick+0x54>)
 8000f06:	681a      	ldr	r2, [r3, #0]
 8000f08:	4b12      	ldr	r3, [pc, #72]	; (8000f54 <HAL_InitTick+0x58>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 fd81 	bl	8001a22 <HAL_SYSTICK_Config>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f26:	2301      	movs	r3, #1
 8000f28:	e00e      	b.n	8000f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	2b0f      	cmp	r3, #15
 8000f2e:	d80a      	bhi.n	8000f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f30:	2200      	movs	r2, #0
 8000f32:	6879      	ldr	r1, [r7, #4]
 8000f34:	f04f 30ff 	mov.w	r0, #4294967295
 8000f38:	f000 fd49 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f3c:	4a06      	ldr	r2, [pc, #24]	; (8000f58 <HAL_InitTick+0x5c>)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
 8000f44:	e000      	b.n	8000f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f46:	2301      	movs	r3, #1
}
 8000f48:	4618      	mov	r0, r3
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	20000000 	.word	0x20000000
 8000f54:	20000008 	.word	0x20000008
 8000f58:	20000004 	.word	0x20000004

08000f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <HAL_IncTick+0x20>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	461a      	mov	r2, r3
 8000f66:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <HAL_IncTick+0x24>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4413      	add	r3, r2
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_IncTick+0x24>)
 8000f6e:	6013      	str	r3, [r2, #0]
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	20000008 	.word	0x20000008
 8000f80:	200001cc 	.word	0x200001cc

08000f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return uwTick;
 8000f88:	4b03      	ldr	r3, [pc, #12]	; (8000f98 <HAL_GetTick+0x14>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	200001cc 	.word	0x200001cc

08000f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b084      	sub	sp, #16
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fa4:	f7ff ffee 	bl	8000f84 <HAL_GetTick>
 8000fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fae:	68fb      	ldr	r3, [r7, #12]
 8000fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fb4:	d005      	beq.n	8000fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fb6:	4b0a      	ldr	r3, [pc, #40]	; (8000fe0 <HAL_Delay+0x44>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	461a      	mov	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000fc2:	bf00      	nop
 8000fc4:	f7ff ffde 	bl	8000f84 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	68bb      	ldr	r3, [r7, #8]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	68fa      	ldr	r2, [r7, #12]
 8000fd0:	429a      	cmp	r2, r3
 8000fd2:	d8f7      	bhi.n	8000fc4 <HAL_Delay+0x28>
  {
  }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000008 	.word	0x20000008

08000fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e031      	b.n	800105e <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d109      	bne.n	8001016 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fba6 	bl	8000754 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2200      	movs	r2, #0
 8001012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800101a:	f003 0310 	and.w	r3, r3, #16
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <HAL_ADC_Init+0x84>)
 8001028:	4013      	ands	r3, r2
 800102a:	f043 0202 	orr.w	r2, r3, #2
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001032:	6878      	ldr	r0, [r7, #4]
 8001034:	f000 fa74 	bl	8001520 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001042:	f023 0303 	bic.w	r3, r3, #3
 8001046:	f043 0201 	orr.w	r2, r3, #1
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	641a      	str	r2, [r3, #64]	; 0x40
 800104e:	e001      	b.n	8001054 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	2200      	movs	r2, #0
 8001058:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	ffffeefd 	.word	0xffffeefd

0800106c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001082:	2b01      	cmp	r3, #1
 8001084:	d101      	bne.n	800108a <HAL_ADC_Start_DMA+0x1e>
 8001086:	2302      	movs	r3, #2
 8001088:	e0d4      	b.n	8001234 <HAL_ADC_Start_DMA+0x1c8>
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	2201      	movs	r2, #1
 800108e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b01      	cmp	r3, #1
 800109e:	d018      	beq.n	80010d2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	689a      	ldr	r2, [r3, #8]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f042 0201 	orr.w	r2, r2, #1
 80010ae:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80010b0:	4b62      	ldr	r3, [pc, #392]	; (800123c <HAL_ADC_Start_DMA+0x1d0>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a62      	ldr	r2, [pc, #392]	; (8001240 <HAL_ADC_Start_DMA+0x1d4>)
 80010b6:	fba2 2303 	umull	r2, r3, r2, r3
 80010ba:	0c9a      	lsrs	r2, r3, #18
 80010bc:	4613      	mov	r3, r2
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	4413      	add	r3, r2
 80010c2:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010c4:	e002      	b.n	80010cc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3b01      	subs	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 80010cc:	697b      	ldr	r3, [r7, #20]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d1f9      	bne.n	80010c6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	689b      	ldr	r3, [r3, #8]
 80010d8:	f003 0301 	and.w	r3, r3, #1
 80010dc:	2b01      	cmp	r3, #1
 80010de:	f040 809c 	bne.w	800121a <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80010e6:	4b57      	ldr	r3, [pc, #348]	; (8001244 <HAL_ADC_Start_DMA+0x1d8>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d007      	beq.n	8001110 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001104:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001108:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800111c:	d106      	bne.n	800112c <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001122:	f023 0206 	bic.w	r2, r3, #6
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	645a      	str	r2, [r3, #68]	; 0x44
 800112a:	e002      	b.n	8001132 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	2200      	movs	r2, #0
 8001130:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	2200      	movs	r2, #0
 8001136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	4a42      	ldr	r2, [pc, #264]	; (8001248 <HAL_ADC_Start_DMA+0x1dc>)
 8001140:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001146:	4a41      	ldr	r2, [pc, #260]	; (800124c <HAL_ADC_Start_DMA+0x1e0>)
 8001148:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114e:	4a40      	ldr	r2, [pc, #256]	; (8001250 <HAL_ADC_Start_DMA+0x1e4>)
 8001150:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800115a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685a      	ldr	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800116a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	689a      	ldr	r2, [r3, #8]
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800117a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	334c      	adds	r3, #76	; 0x4c
 8001186:	4619      	mov	r1, r3
 8001188:	68ba      	ldr	r2, [r7, #8]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	f000 fd04 	bl	8001b98 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8001190:	4b30      	ldr	r3, [pc, #192]	; (8001254 <HAL_ADC_Start_DMA+0x1e8>)
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 031f 	and.w	r3, r3, #31
 8001198:	2b00      	cmp	r3, #0
 800119a:	d10f      	bne.n	80011bc <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d143      	bne.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	689a      	ldr	r2, [r3, #8]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011b8:	609a      	str	r2, [r3, #8]
 80011ba:	e03a      	b.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a25      	ldr	r2, [pc, #148]	; (8001258 <HAL_ADC_Start_DMA+0x1ec>)
 80011c2:	4293      	cmp	r3, r2
 80011c4:	d10e      	bne.n	80011e4 <HAL_ADC_Start_DMA+0x178>
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	689b      	ldr	r3, [r3, #8]
 80011cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d107      	bne.n	80011e4 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	689a      	ldr	r2, [r3, #8]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011e2:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80011e4:	4b1b      	ldr	r3, [pc, #108]	; (8001254 <HAL_ADC_Start_DMA+0x1e8>)
 80011e6:	685b      	ldr	r3, [r3, #4]
 80011e8:	f003 0310 	and.w	r3, r3, #16
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d120      	bne.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011f0:	68fb      	ldr	r3, [r7, #12]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	4a19      	ldr	r2, [pc, #100]	; (800125c <HAL_ADC_Start_DMA+0x1f0>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d11b      	bne.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	689b      	ldr	r3, [r3, #8]
 8001200:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001204:	2b00      	cmp	r3, #0
 8001206:	d114      	bne.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001216:	609a      	str	r2, [r3, #8]
 8001218:	e00b      	b.n	8001232 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800121e:	f043 0210 	orr.w	r2, r3, #16
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122a:	f043 0201 	orr.w	r2, r3, #1
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001232:	2300      	movs	r3, #0
}
 8001234:	4618      	mov	r0, r3
 8001236:	3718      	adds	r7, #24
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	431bde83 	.word	0x431bde83
 8001244:	fffff8fe 	.word	0xfffff8fe
 8001248:	08001715 	.word	0x08001715
 800124c:	080017cf 	.word	0x080017cf
 8001250:	080017eb 	.word	0x080017eb
 8001254:	40012300 	.word	0x40012300
 8001258:	40012000 	.word	0x40012000
 800125c:	40012200 	.word	0x40012200

08001260 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001260:	b480      	push	{r7}
 8001262:	b083      	sub	sp, #12
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
 800127c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001288:	2b01      	cmp	r3, #1
 800128a:	d101      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1c>
 800128c:	2302      	movs	r3, #2
 800128e:	e136      	b.n	80014fe <HAL_ADC_ConfigChannel+0x28a>
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2201      	movs	r2, #1
 8001294:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	2b09      	cmp	r3, #9
 800129e:	d93a      	bls.n	8001316 <HAL_ADC_ConfigChannel+0xa2>
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80012a8:	d035      	beq.n	8001316 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	68d9      	ldr	r1, [r3, #12]
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	b29b      	uxth	r3, r3
 80012b6:	461a      	mov	r2, r3
 80012b8:	4613      	mov	r3, r2
 80012ba:	005b      	lsls	r3, r3, #1
 80012bc:	4413      	add	r3, r2
 80012be:	3b1e      	subs	r3, #30
 80012c0:	2207      	movs	r2, #7
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	400a      	ands	r2, r1
 80012ce:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	4a8d      	ldr	r2, [pc, #564]	; (800150c <HAL_ADC_ConfigChannel+0x298>)
 80012d6:	4293      	cmp	r3, r2
 80012d8:	d10a      	bne.n	80012f0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68d9      	ldr	r1, [r3, #12]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	061a      	lsls	r2, r3, #24
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012ee:	e035      	b.n	800135c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	68d9      	ldr	r1, [r3, #12]
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	689a      	ldr	r2, [r3, #8]
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	b29b      	uxth	r3, r3
 8001300:	4618      	mov	r0, r3
 8001302:	4603      	mov	r3, r0
 8001304:	005b      	lsls	r3, r3, #1
 8001306:	4403      	add	r3, r0
 8001308:	3b1e      	subs	r3, #30
 800130a:	409a      	lsls	r2, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001314:	e022      	b.n	800135c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	6919      	ldr	r1, [r3, #16]
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	b29b      	uxth	r3, r3
 8001322:	461a      	mov	r2, r3
 8001324:	4613      	mov	r3, r2
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	4413      	add	r3, r2
 800132a:	2207      	movs	r2, #7
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	43da      	mvns	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	400a      	ands	r2, r1
 8001338:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	6919      	ldr	r1, [r3, #16]
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	689a      	ldr	r2, [r3, #8]
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	b29b      	uxth	r3, r3
 800134a:	4618      	mov	r0, r3
 800134c:	4603      	mov	r3, r0
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	4403      	add	r3, r0
 8001352:	409a      	lsls	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	430a      	orrs	r2, r1
 800135a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	2b06      	cmp	r3, #6
 8001362:	d824      	bhi.n	80013ae <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	3b05      	subs	r3, #5
 8001376:	221f      	movs	r2, #31
 8001378:	fa02 f303 	lsl.w	r3, r2, r3
 800137c:	43da      	mvns	r2, r3
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	400a      	ands	r2, r1
 8001384:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	b29b      	uxth	r3, r3
 8001392:	4618      	mov	r0, r3
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	3b05      	subs	r3, #5
 80013a0:	fa00 f203 	lsl.w	r2, r0, r3
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	430a      	orrs	r2, r1
 80013aa:	635a      	str	r2, [r3, #52]	; 0x34
 80013ac:	e04c      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	2b0c      	cmp	r3, #12
 80013b4:	d824      	bhi.n	8001400 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685a      	ldr	r2, [r3, #4]
 80013c0:	4613      	mov	r3, r2
 80013c2:	009b      	lsls	r3, r3, #2
 80013c4:	4413      	add	r3, r2
 80013c6:	3b23      	subs	r3, #35	; 0x23
 80013c8:	221f      	movs	r2, #31
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43da      	mvns	r2, r3
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	400a      	ands	r2, r1
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80013de:	683b      	ldr	r3, [r7, #0]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	b29b      	uxth	r3, r3
 80013e4:	4618      	mov	r0, r3
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685a      	ldr	r2, [r3, #4]
 80013ea:	4613      	mov	r3, r2
 80013ec:	009b      	lsls	r3, r3, #2
 80013ee:	4413      	add	r3, r2
 80013f0:	3b23      	subs	r3, #35	; 0x23
 80013f2:	fa00 f203 	lsl.w	r2, r0, r3
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	430a      	orrs	r2, r1
 80013fc:	631a      	str	r2, [r3, #48]	; 0x30
 80013fe:	e023      	b.n	8001448 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685a      	ldr	r2, [r3, #4]
 800140a:	4613      	mov	r3, r2
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	4413      	add	r3, r2
 8001410:	3b41      	subs	r3, #65	; 0x41
 8001412:	221f      	movs	r2, #31
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43da      	mvns	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	400a      	ands	r2, r1
 8001420:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	b29b      	uxth	r3, r3
 800142e:	4618      	mov	r0, r3
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685a      	ldr	r2, [r3, #4]
 8001434:	4613      	mov	r3, r2
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	4413      	add	r3, r2
 800143a:	3b41      	subs	r3, #65	; 0x41
 800143c:	fa00 f203 	lsl.w	r2, r0, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a30      	ldr	r2, [pc, #192]	; (8001510 <HAL_ADC_ConfigChannel+0x29c>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d10a      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1f4>
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800145a:	d105      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800145c:	4b2d      	ldr	r3, [pc, #180]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	4a2c      	ldr	r2, [pc, #176]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 8001462:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001466:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a28      	ldr	r2, [pc, #160]	; (8001510 <HAL_ADC_ConfigChannel+0x29c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10f      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x21e>
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2b12      	cmp	r3, #18
 8001478:	d10b      	bne.n	8001492 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	4a25      	ldr	r2, [pc, #148]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 8001480:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001484:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001486:	4b23      	ldr	r3, [pc, #140]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	4a22      	ldr	r2, [pc, #136]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 800148c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001490:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a1e      	ldr	r2, [pc, #120]	; (8001510 <HAL_ADC_ConfigChannel+0x29c>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d12b      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x280>
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a1a      	ldr	r2, [pc, #104]	; (800150c <HAL_ADC_ConfigChannel+0x298>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d003      	beq.n	80014ae <HAL_ADC_ConfigChannel+0x23a>
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	2b11      	cmp	r3, #17
 80014ac:	d122      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80014ae:	4b19      	ldr	r3, [pc, #100]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	4a18      	ldr	r2, [pc, #96]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 80014b4:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80014b8:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80014ba:	4b16      	ldr	r3, [pc, #88]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 80014bc:	685b      	ldr	r3, [r3, #4]
 80014be:	4a15      	ldr	r2, [pc, #84]	; (8001514 <HAL_ADC_ConfigChannel+0x2a0>)
 80014c0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80014c4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a10      	ldr	r2, [pc, #64]	; (800150c <HAL_ADC_ConfigChannel+0x298>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d111      	bne.n	80014f4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <HAL_ADC_ConfigChannel+0x2a4>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a11      	ldr	r2, [pc, #68]	; (800151c <HAL_ADC_ConfigChannel+0x2a8>)
 80014d6:	fba2 2303 	umull	r2, r3, r2, r3
 80014da:	0c9a      	lsrs	r2, r3, #18
 80014dc:	4613      	mov	r3, r2
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	4413      	add	r3, r2
 80014e2:	005b      	lsls	r3, r3, #1
 80014e4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014e6:	e002      	b.n	80014ee <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d1f9      	bne.n	80014e8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2200      	movs	r2, #0
 80014f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80014fc:	2300      	movs	r3, #0
}
 80014fe:	4618      	mov	r0, r3
 8001500:	3714      	adds	r7, #20
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	10000012 	.word	0x10000012
 8001510:	40012000 	.word	0x40012000
 8001514:	40012300 	.word	0x40012300
 8001518:	20000000 	.word	0x20000000
 800151c:	431bde83 	.word	0x431bde83

08001520 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001528:	4b78      	ldr	r3, [pc, #480]	; (800170c <ADC_Init+0x1ec>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	4a77      	ldr	r2, [pc, #476]	; (800170c <ADC_Init+0x1ec>)
 800152e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001532:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001534:	4b75      	ldr	r3, [pc, #468]	; (800170c <ADC_Init+0x1ec>)
 8001536:	685a      	ldr	r2, [r3, #4]
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	685b      	ldr	r3, [r3, #4]
 800153c:	4973      	ldr	r1, [pc, #460]	; (800170c <ADC_Init+0x1ec>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	685a      	ldr	r2, [r3, #4]
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001550:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	6859      	ldr	r1, [r3, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	691b      	ldr	r3, [r3, #16]
 800155c:	021a      	lsls	r2, r3, #8
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	430a      	orrs	r2, r1
 8001564:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	685a      	ldr	r2, [r3, #4]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001574:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	6859      	ldr	r1, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	689a      	ldr	r2, [r3, #8]
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001596:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	6899      	ldr	r1, [r3, #8]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	430a      	orrs	r2, r1
 80015a8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <ADC_Init+0x1f0>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d022      	beq.n	80015fa <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	689a      	ldr	r2, [r3, #8]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80015c2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	6899      	ldr	r1, [r3, #8]
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	430a      	orrs	r2, r1
 80015d4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	689a      	ldr	r2, [r3, #8]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80015e4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6899      	ldr	r1, [r3, #8]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	430a      	orrs	r2, r1
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	e00f      	b.n	800161a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	689a      	ldr	r2, [r3, #8]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001608:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	689a      	ldr	r2, [r3, #8]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001618:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	689a      	ldr	r2, [r3, #8]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 0202 	bic.w	r2, r2, #2
 8001628:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6899      	ldr	r1, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	699b      	ldr	r3, [r3, #24]
 8001634:	005a      	lsls	r2, r3, #1
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d01b      	beq.n	8001680 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	685a      	ldr	r2, [r3, #4]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001656:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	685a      	ldr	r2, [r3, #4]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001666:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	6859      	ldr	r1, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001672:	3b01      	subs	r3, #1
 8001674:	035a      	lsls	r2, r3, #13
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	430a      	orrs	r2, r1
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	e007      	b.n	8001690 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	685a      	ldr	r2, [r3, #4]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800168e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800169e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	3b01      	subs	r3, #1
 80016ac:	051a      	lsls	r2, r3, #20
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	689a      	ldr	r2, [r3, #8]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	6899      	ldr	r1, [r3, #8]
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80016d2:	025a      	lsls	r2, r3, #9
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	430a      	orrs	r2, r1
 80016da:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	689a      	ldr	r2, [r3, #8]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80016ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6899      	ldr	r1, [r3, #8]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	695b      	ldr	r3, [r3, #20]
 80016f6:	029a      	lsls	r2, r3, #10
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	430a      	orrs	r2, r1
 80016fe:	609a      	str	r2, [r3, #8]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40012300 	.word	0x40012300
 8001710:	0f000001 	.word	0x0f000001

08001714 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001720:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001726:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800172a:	2b00      	cmp	r3, #0
 800172c:	d13c      	bne.n	80017a8 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001744:	2b00      	cmp	r3, #0
 8001746:	d12b      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001748:	68fb      	ldr	r3, [r7, #12]
 800174a:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800174c:	2b00      	cmp	r3, #0
 800174e:	d127      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001756:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800175a:	2b00      	cmp	r3, #0
 800175c:	d006      	beq.n	800176c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001768:	2b00      	cmp	r3, #0
 800176a:	d119      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	685a      	ldr	r2, [r3, #4]
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f022 0220 	bic.w	r2, r2, #32
 800177a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001780:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001790:	2b00      	cmp	r3, #0
 8001792:	d105      	bne.n	80017a0 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f043 0201 	orr.w	r2, r3, #1
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80017a0:	68f8      	ldr	r0, [r7, #12]
 80017a2:	f7ff f971 	bl	8000a88 <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80017a6:	e00e      	b.n	80017c6 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ac:	f003 0310 	and.w	r3, r3, #16
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d003      	beq.n	80017bc <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80017b4:	68f8      	ldr	r0, [r7, #12]
 80017b6:	f7ff fd53 	bl	8001260 <HAL_ADC_ErrorCallback>
}
 80017ba:	e004      	b.n	80017c6 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	4798      	blx	r3
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}

080017ce <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017ce:	b580      	push	{r7, lr}
 80017d0:	b084      	sub	sp, #16
 80017d2:	af00      	add	r7, sp, #0
 80017d4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017da:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80017dc:	68f8      	ldr	r0, [r7, #12]
 80017de:	f7ff f91b 	bl	8000a18 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80017e2:	bf00      	nop
 80017e4:	3710      	adds	r7, #16
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}

080017ea <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	b084      	sub	sp, #16
 80017ee:	af00      	add	r7, sp, #0
 80017f0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	2240      	movs	r2, #64	; 0x40
 80017fc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001802:	f043 0204 	orr.w	r2, r3, #4
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff fd28 	bl	8001260 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001810:	bf00      	nop
 8001812:	3710      	adds	r7, #16
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001840:	4b06      	ldr	r3, [pc, #24]	; (800185c <__NVIC_SetPriorityGrouping+0x44>)
 8001842:	4313      	orrs	r3, r2
 8001844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001846:	4a04      	ldr	r2, [pc, #16]	; (8001858 <__NVIC_SetPriorityGrouping+0x40>)
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	60d3      	str	r3, [r2, #12]
}
 800184c:	bf00      	nop
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	e000ed00 	.word	0xe000ed00
 800185c:	05fa0000 	.word	0x05fa0000

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	; (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	; (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	; (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	; (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	; 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	; 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	; (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	; (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	; (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b086      	sub	sp, #24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001a48:	f7ff fa9c 	bl	8000f84 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d101      	bne.n	8001a58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001a54:	2301      	movs	r3, #1
 8001a56:	e099      	b.n	8001b8c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2202      	movs	r2, #2
 8001a5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	681a      	ldr	r2, [r3, #0]
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f022 0201 	bic.w	r2, r2, #1
 8001a76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a78:	e00f      	b.n	8001a9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a7a:	f7ff fa83 	bl	8000f84 <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b05      	cmp	r3, #5
 8001a86:	d908      	bls.n	8001a9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2220      	movs	r2, #32
 8001a8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2203      	movs	r2, #3
 8001a92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a96:	2303      	movs	r3, #3
 8001a98:	e078      	b.n	8001b8c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1e8      	bne.n	8001a7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ab0:	697a      	ldr	r2, [r7, #20]
 8001ab2:	4b38      	ldr	r3, [pc, #224]	; (8001b94 <HAL_DMA_Init+0x158>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	685a      	ldr	r2, [r3, #4]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ac6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	691b      	ldr	r3, [r3, #16]
 8001acc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ad2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	699b      	ldr	r3, [r3, #24]
 8001ad8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ade:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ae6:	697a      	ldr	r2, [r7, #20]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d107      	bne.n	8001b04 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	4313      	orrs	r3, r2
 8001afe:	697a      	ldr	r2, [r7, #20]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	695b      	ldr	r3, [r3, #20]
 8001b12:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	697a      	ldr	r2, [r7, #20]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b2a:	2b04      	cmp	r3, #4
 8001b2c:	d117      	bne.n	8001b5e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b32:	697a      	ldr	r2, [r7, #20]
 8001b34:	4313      	orrs	r3, r2
 8001b36:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00e      	beq.n	8001b5e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001b40:	6878      	ldr	r0, [r7, #4]
 8001b42:	f000 fa77 	bl	8002034 <DMA_CheckFifoParam>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d008      	beq.n	8001b5e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2240      	movs	r2, #64	; 0x40
 8001b50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2201      	movs	r2, #1
 8001b56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e016      	b.n	8001b8c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 fa2e 	bl	8001fc8 <DMA_CalcBaseAndBitshift>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b74:	223f      	movs	r2, #63	; 0x3f
 8001b76:	409a      	lsls	r2, r3
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2200      	movs	r2, #0
 8001b80:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	2201      	movs	r2, #1
 8001b86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b8a:	2300      	movs	r3, #0
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	3718      	adds	r7, #24
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}
 8001b94:	e010803f 	.word	0xe010803f

08001b98 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b086      	sub	sp, #24
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	60f8      	str	r0, [r7, #12]
 8001ba0:	60b9      	str	r1, [r7, #8]
 8001ba2:	607a      	str	r2, [r7, #4]
 8001ba4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d101      	bne.n	8001bbe <HAL_DMA_Start_IT+0x26>
 8001bba:	2302      	movs	r3, #2
 8001bbc:	e048      	b.n	8001c50 <HAL_DMA_Start_IT+0xb8>
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d137      	bne.n	8001c42 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2202      	movs	r2, #2
 8001bd6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	687a      	ldr	r2, [r7, #4]
 8001be4:	68b9      	ldr	r1, [r7, #8]
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 f9c0 	bl	8001f6c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf0:	223f      	movs	r2, #63	; 0x3f
 8001bf2:	409a      	lsls	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	681a      	ldr	r2, [r3, #0]
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f042 0216 	orr.w	r2, r2, #22
 8001c06:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	695a      	ldr	r2, [r3, #20]
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c16:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	681a      	ldr	r2, [r3, #0]
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0201 	orr.w	r2, r2, #1
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	e005      	b.n	8001c4e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001c4a:	2302      	movs	r3, #2
 8001c4c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001c4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3718      	adds	r7, #24
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001c64:	4b8e      	ldr	r3, [pc, #568]	; (8001ea0 <HAL_DMA_IRQHandler+0x248>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a8e      	ldr	r2, [pc, #568]	; (8001ea4 <HAL_DMA_IRQHandler+0x24c>)
 8001c6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c6e:	0a9b      	lsrs	r3, r3, #10
 8001c70:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c76:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c82:	2208      	movs	r2, #8
 8001c84:	409a      	lsls	r2, r3
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4013      	ands	r3, r2
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d01a      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	f003 0304 	and.w	r3, r3, #4
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d013      	beq.n	8001cc4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0204 	bic.w	r2, r2, #4
 8001caa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	2208      	movs	r2, #8
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0201 	orr.w	r2, r3, #1
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc8:	2201      	movs	r2, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	4013      	ands	r3, r2
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d012      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	695b      	ldr	r3, [r3, #20]
 8001cda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d00b      	beq.n	8001cfa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	409a      	lsls	r2, r3
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f043 0202 	orr.w	r2, r3, #2
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfe:	2204      	movs	r2, #4
 8001d00:	409a      	lsls	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	4013      	ands	r3, r2
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d012      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00b      	beq.n	8001d30 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d1c:	2204      	movs	r2, #4
 8001d1e:	409a      	lsls	r2, r3
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d28:	f043 0204 	orr.w	r2, r3, #4
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d34:	2210      	movs	r2, #16
 8001d36:	409a      	lsls	r2, r3
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d043      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0308 	and.w	r3, r3, #8
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d03c      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d52:	2210      	movs	r2, #16
 8001d54:	409a      	lsls	r2, r3
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d018      	beq.n	8001d9a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d108      	bne.n	8001d88 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d024      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	4798      	blx	r3
 8001d86:	e01f      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d01b      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	4798      	blx	r3
 8001d98:	e016      	b.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d107      	bne.n	8001db8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	681a      	ldr	r2, [r3, #0]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 0208 	bic.w	r2, r2, #8
 8001db6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2220      	movs	r2, #32
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	f000 808f 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f000 8087 	beq.w	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dee:	2220      	movs	r2, #32
 8001df0:	409a      	lsls	r2, r3
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	2b05      	cmp	r3, #5
 8001e00:	d136      	bne.n	8001e70 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f022 0216 	bic.w	r2, r2, #22
 8001e10:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	695a      	ldr	r2, [r3, #20]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e20:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d103      	bne.n	8001e32 <HAL_DMA_IRQHandler+0x1da>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d007      	beq.n	8001e42 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f022 0208 	bic.w	r2, r2, #8
 8001e40:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e46:	223f      	movs	r2, #63	; 0x3f
 8001e48:	409a      	lsls	r2, r3
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	2201      	movs	r2, #1
 8001e52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2200      	movs	r2, #0
 8001e5a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d07e      	beq.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e6a:	6878      	ldr	r0, [r7, #4]
 8001e6c:	4798      	blx	r3
        }
        return;
 8001e6e:	e079      	b.n	8001f64 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d01d      	beq.n	8001eba <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d10d      	bne.n	8001ea8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d031      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	4798      	blx	r3
 8001e9c:	e02c      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
 8001e9e:	bf00      	nop
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d023      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	4798      	blx	r3
 8001eb8:	e01e      	b.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d10f      	bne.n	8001ee8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0210 	bic.w	r2, r2, #16
 8001ed6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef4:	6878      	ldr	r0, [r7, #4]
 8001ef6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d032      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f04:	f003 0301 	and.w	r3, r3, #1
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d022      	beq.n	8001f52 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2205      	movs	r2, #5
 8001f10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0201 	bic.w	r2, r2, #1
 8001f22:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	3301      	adds	r3, #1
 8001f28:	60bb      	str	r3, [r7, #8]
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d307      	bcc.n	8001f40 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d1f2      	bne.n	8001f24 <HAL_DMA_IRQHandler+0x2cc>
 8001f3e:	e000      	b.n	8001f42 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f40:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2201      	movs	r2, #1
 8001f46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d005      	beq.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	4798      	blx	r3
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001f64:	bf00      	nop
    }
  }
}
 8001f66:	3718      	adds	r7, #24
 8001f68:	46bd      	mov	sp, r7
 8001f6a:	bd80      	pop	{r7, pc}

08001f6c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	60f8      	str	r0, [r7, #12]
 8001f74:	60b9      	str	r1, [r7, #8]
 8001f76:	607a      	str	r2, [r7, #4]
 8001f78:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001f88:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	683a      	ldr	r2, [r7, #0]
 8001f90:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b40      	cmp	r3, #64	; 0x40
 8001f98:	d108      	bne.n	8001fac <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001faa:	e007      	b.n	8001fbc <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	60da      	str	r2, [r3, #12]
}
 8001fbc:	bf00      	nop
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr

08001fc8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	3b10      	subs	r3, #16
 8001fd8:	4a13      	ldr	r2, [pc, #76]	; (8002028 <DMA_CalcBaseAndBitshift+0x60>)
 8001fda:	fba2 2303 	umull	r2, r3, r2, r3
 8001fde:	091b      	lsrs	r3, r3, #4
 8001fe0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001fe2:	4a12      	ldr	r2, [pc, #72]	; (800202c <DMA_CalcBaseAndBitshift+0x64>)
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	461a      	mov	r2, r3
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	2b03      	cmp	r3, #3
 8001ff4:	d908      	bls.n	8002008 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	461a      	mov	r2, r3
 8001ffc:	4b0c      	ldr	r3, [pc, #48]	; (8002030 <DMA_CalcBaseAndBitshift+0x68>)
 8001ffe:	4013      	ands	r3, r2
 8002000:	1d1a      	adds	r2, r3, #4
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	659a      	str	r2, [r3, #88]	; 0x58
 8002006:	e006      	b.n	8002016 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	461a      	mov	r2, r3
 800200e:	4b08      	ldr	r3, [pc, #32]	; (8002030 <DMA_CalcBaseAndBitshift+0x68>)
 8002010:	4013      	ands	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800201a:	4618      	mov	r0, r3
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr
 8002026:	bf00      	nop
 8002028:	aaaaaaab 	.word	0xaaaaaaab
 800202c:	08004988 	.word	0x08004988
 8002030:	fffffc00 	.word	0xfffffc00

08002034 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002034:	b480      	push	{r7}
 8002036:	b085      	sub	sp, #20
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800203c:	2300      	movs	r3, #0
 800203e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002044:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	699b      	ldr	r3, [r3, #24]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d11f      	bne.n	800208e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d856      	bhi.n	8002102 <DMA_CheckFifoParam+0xce>
 8002054:	a201      	add	r2, pc, #4	; (adr r2, 800205c <DMA_CheckFifoParam+0x28>)
 8002056:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800205a:	bf00      	nop
 800205c:	0800206d 	.word	0x0800206d
 8002060:	0800207f 	.word	0x0800207f
 8002064:	0800206d 	.word	0x0800206d
 8002068:	08002103 	.word	0x08002103
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002070:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002074:	2b00      	cmp	r3, #0
 8002076:	d046      	beq.n	8002106 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002078:	2301      	movs	r3, #1
 800207a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800207c:	e043      	b.n	8002106 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002082:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002086:	d140      	bne.n	800210a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800208c:	e03d      	b.n	800210a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002096:	d121      	bne.n	80020dc <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	2b03      	cmp	r3, #3
 800209c:	d837      	bhi.n	800210e <DMA_CheckFifoParam+0xda>
 800209e:	a201      	add	r2, pc, #4	; (adr r2, 80020a4 <DMA_CheckFifoParam+0x70>)
 80020a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a4:	080020b5 	.word	0x080020b5
 80020a8:	080020bb 	.word	0x080020bb
 80020ac:	080020b5 	.word	0x080020b5
 80020b0:	080020cd 	.word	0x080020cd
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	73fb      	strb	r3, [r7, #15]
      break;
 80020b8:	e030      	b.n	800211c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d025      	beq.n	8002112 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020ca:	e022      	b.n	8002112 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d4:	d11f      	bne.n	8002116 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80020da:	e01c      	b.n	8002116 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d903      	bls.n	80020ea <DMA_CheckFifoParam+0xb6>
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	2b03      	cmp	r3, #3
 80020e6:	d003      	beq.n	80020f0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80020e8:	e018      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	73fb      	strb	r3, [r7, #15]
      break;
 80020ee:	e015      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d00e      	beq.n	800211a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	73fb      	strb	r3, [r7, #15]
      break;
 8002100:	e00b      	b.n	800211a <DMA_CheckFifoParam+0xe6>
      break;
 8002102:	bf00      	nop
 8002104:	e00a      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002106:	bf00      	nop
 8002108:	e008      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210a:	bf00      	nop
 800210c:	e006      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800210e:	bf00      	nop
 8002110:	e004      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 8002112:	bf00      	nop
 8002114:	e002      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;   
 8002116:	bf00      	nop
 8002118:	e000      	b.n	800211c <DMA_CheckFifoParam+0xe8>
      break;
 800211a:	bf00      	nop
    }
  } 
  
  return status; 
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3714      	adds	r7, #20
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr
 800212a:	bf00      	nop

0800212c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800212c:	b480      	push	{r7}
 800212e:	b089      	sub	sp, #36	; 0x24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002136:	2300      	movs	r3, #0
 8002138:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002142:	2300      	movs	r3, #0
 8002144:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
 800214a:	e175      	b.n	8002438 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800214c:	2201      	movs	r2, #1
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	697a      	ldr	r2, [r7, #20]
 800215c:	4013      	ands	r3, r2
 800215e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002160:	693a      	ldr	r2, [r7, #16]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	429a      	cmp	r2, r3
 8002166:	f040 8164 	bne.w	8002432 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0303 	and.w	r3, r3, #3
 8002172:	2b01      	cmp	r3, #1
 8002174:	d005      	beq.n	8002182 <HAL_GPIO_Init+0x56>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	f003 0303 	and.w	r3, r3, #3
 800217e:	2b02      	cmp	r3, #2
 8002180:	d130      	bne.n	80021e4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	005b      	lsls	r3, r3, #1
 800218c:	2203      	movs	r2, #3
 800218e:	fa02 f303 	lsl.w	r3, r2, r3
 8002192:	43db      	mvns	r3, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4013      	ands	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68da      	ldr	r2, [r3, #12]
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	005b      	lsls	r3, r3, #1
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	4313      	orrs	r3, r2
 80021aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021b8:	2201      	movs	r2, #1
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	fa02 f303 	lsl.w	r3, r2, r3
 80021c0:	43db      	mvns	r3, r3
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	4013      	ands	r3, r2
 80021c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 0201 	and.w	r2, r3, #1
 80021d2:	69fb      	ldr	r3, [r7, #28]
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	4313      	orrs	r3, r2
 80021dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	69ba      	ldr	r2, [r7, #24]
 80021e2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	f003 0303 	and.w	r3, r3, #3
 80021ec:	2b03      	cmp	r3, #3
 80021ee:	d017      	beq.n	8002220 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	005b      	lsls	r3, r3, #1
 80021fa:	2203      	movs	r2, #3
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	43db      	mvns	r3, r3
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	689a      	ldr	r2, [r3, #8]
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	005b      	lsls	r3, r3, #1
 8002210:	fa02 f303 	lsl.w	r3, r2, r3
 8002214:	69ba      	ldr	r2, [r7, #24]
 8002216:	4313      	orrs	r3, r2
 8002218:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f003 0303 	and.w	r3, r3, #3
 8002228:	2b02      	cmp	r3, #2
 800222a:	d123      	bne.n	8002274 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	08da      	lsrs	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	3208      	adds	r2, #8
 8002234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002238:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	220f      	movs	r2, #15
 8002244:	fa02 f303 	lsl.w	r3, r2, r3
 8002248:	43db      	mvns	r3, r3
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	4013      	ands	r3, r2
 800224e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	691a      	ldr	r2, [r3, #16]
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	f003 0307 	and.w	r3, r3, #7
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	4313      	orrs	r3, r2
 8002264:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	08da      	lsrs	r2, r3, #3
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	3208      	adds	r2, #8
 800226e:	69b9      	ldr	r1, [r7, #24]
 8002270:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	005b      	lsls	r3, r3, #1
 800227e:	2203      	movs	r2, #3
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0203 	and.w	r2, r3, #3
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	005b      	lsls	r3, r3, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	69ba      	ldr	r2, [r7, #24]
 800229e:	4313      	orrs	r3, r2
 80022a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f000 80be 	beq.w	8002432 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022b6:	4b66      	ldr	r3, [pc, #408]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ba:	4a65      	ldr	r2, [pc, #404]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022c0:	6453      	str	r3, [r2, #68]	; 0x44
 80022c2:	4b63      	ldr	r3, [pc, #396]	; (8002450 <HAL_GPIO_Init+0x324>)
 80022c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ca:	60fb      	str	r3, [r7, #12]
 80022cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80022ce:	4a61      	ldr	r2, [pc, #388]	; (8002454 <HAL_GPIO_Init+0x328>)
 80022d0:	69fb      	ldr	r3, [r7, #28]
 80022d2:	089b      	lsrs	r3, r3, #2
 80022d4:	3302      	adds	r3, #2
 80022d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022da:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	f003 0303 	and.w	r3, r3, #3
 80022e2:	009b      	lsls	r3, r3, #2
 80022e4:	220f      	movs	r2, #15
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a58      	ldr	r2, [pc, #352]	; (8002458 <HAL_GPIO_Init+0x32c>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d037      	beq.n	800236a <HAL_GPIO_Init+0x23e>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	4a57      	ldr	r2, [pc, #348]	; (800245c <HAL_GPIO_Init+0x330>)
 80022fe:	4293      	cmp	r3, r2
 8002300:	d031      	beq.n	8002366 <HAL_GPIO_Init+0x23a>
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_GPIO_Init+0x334>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d02b      	beq.n	8002362 <HAL_GPIO_Init+0x236>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_GPIO_Init+0x338>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d025      	beq.n	800235e <HAL_GPIO_Init+0x232>
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4a54      	ldr	r2, [pc, #336]	; (8002468 <HAL_GPIO_Init+0x33c>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d01f      	beq.n	800235a <HAL_GPIO_Init+0x22e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4a53      	ldr	r2, [pc, #332]	; (800246c <HAL_GPIO_Init+0x340>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d019      	beq.n	8002356 <HAL_GPIO_Init+0x22a>
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	4a52      	ldr	r2, [pc, #328]	; (8002470 <HAL_GPIO_Init+0x344>)
 8002326:	4293      	cmp	r3, r2
 8002328:	d013      	beq.n	8002352 <HAL_GPIO_Init+0x226>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a51      	ldr	r2, [pc, #324]	; (8002474 <HAL_GPIO_Init+0x348>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d00d      	beq.n	800234e <HAL_GPIO_Init+0x222>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4a50      	ldr	r2, [pc, #320]	; (8002478 <HAL_GPIO_Init+0x34c>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d007      	beq.n	800234a <HAL_GPIO_Init+0x21e>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a4f      	ldr	r2, [pc, #316]	; (800247c <HAL_GPIO_Init+0x350>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d101      	bne.n	8002346 <HAL_GPIO_Init+0x21a>
 8002342:	2309      	movs	r3, #9
 8002344:	e012      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002346:	230a      	movs	r3, #10
 8002348:	e010      	b.n	800236c <HAL_GPIO_Init+0x240>
 800234a:	2308      	movs	r3, #8
 800234c:	e00e      	b.n	800236c <HAL_GPIO_Init+0x240>
 800234e:	2307      	movs	r3, #7
 8002350:	e00c      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002352:	2306      	movs	r3, #6
 8002354:	e00a      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002356:	2305      	movs	r3, #5
 8002358:	e008      	b.n	800236c <HAL_GPIO_Init+0x240>
 800235a:	2304      	movs	r3, #4
 800235c:	e006      	b.n	800236c <HAL_GPIO_Init+0x240>
 800235e:	2303      	movs	r3, #3
 8002360:	e004      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002362:	2302      	movs	r3, #2
 8002364:	e002      	b.n	800236c <HAL_GPIO_Init+0x240>
 8002366:	2301      	movs	r3, #1
 8002368:	e000      	b.n	800236c <HAL_GPIO_Init+0x240>
 800236a:	2300      	movs	r3, #0
 800236c:	69fa      	ldr	r2, [r7, #28]
 800236e:	f002 0203 	and.w	r2, r2, #3
 8002372:	0092      	lsls	r2, r2, #2
 8002374:	4093      	lsls	r3, r2
 8002376:	69ba      	ldr	r2, [r7, #24]
 8002378:	4313      	orrs	r3, r2
 800237a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800237c:	4935      	ldr	r1, [pc, #212]	; (8002454 <HAL_GPIO_Init+0x328>)
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	089b      	lsrs	r3, r3, #2
 8002382:	3302      	adds	r3, #2
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800238a:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_GPIO_Init+0x354>)
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	43db      	mvns	r3, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4013      	ands	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80023a6:	69ba      	ldr	r2, [r7, #24]
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	4313      	orrs	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023ae:	4a34      	ldr	r2, [pc, #208]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023b4:	4b32      	ldr	r3, [pc, #200]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023b6:	68db      	ldr	r3, [r3, #12]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80023d8:	4a29      	ldr	r2, [pc, #164]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023da:	69bb      	ldr	r3, [r7, #24]
 80023dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80023de:	4b28      	ldr	r3, [pc, #160]	; (8002480 <HAL_GPIO_Init+0x354>)
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	43db      	mvns	r3, r3
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	4013      	ands	r3, r2
 80023ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d003      	beq.n	8002402 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80023fa:	69ba      	ldr	r2, [r7, #24]
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002402:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_GPIO_Init+0x354>)
 8002404:	69bb      	ldr	r3, [r7, #24]
 8002406:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_GPIO_Init+0x354>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	43db      	mvns	r3, r3
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4013      	ands	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800242c:	4a14      	ldr	r2, [pc, #80]	; (8002480 <HAL_GPIO_Init+0x354>)
 800242e:	69bb      	ldr	r3, [r7, #24]
 8002430:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	3301      	adds	r3, #1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	2b0f      	cmp	r3, #15
 800243c:	f67f ae86 	bls.w	800214c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002440:	bf00      	nop
 8002442:	bf00      	nop
 8002444:	3724      	adds	r7, #36	; 0x24
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40013800 	.word	0x40013800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400
 8002460:	40020800 	.word	0x40020800
 8002464:	40020c00 	.word	0x40020c00
 8002468:	40021000 	.word	0x40021000
 800246c:	40021400 	.word	0x40021400
 8002470:	40021800 	.word	0x40021800
 8002474:	40021c00 	.word	0x40021c00
 8002478:	40022000 	.word	0x40022000
 800247c:	40022400 	.word	0x40022400
 8002480:	40013c00 	.word	0x40013c00

08002484 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	460b      	mov	r3, r1
 800248e:	807b      	strh	r3, [r7, #2]
 8002490:	4613      	mov	r3, r2
 8002492:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002494:	787b      	ldrb	r3, [r7, #1]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d003      	beq.n	80024a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800249a:	887a      	ldrh	r2, [r7, #2]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80024a0:	e003      	b.n	80024aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80024a2:	887b      	ldrh	r3, [r7, #2]
 80024a4:	041a      	lsls	r2, r3, #16
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	619a      	str	r2, [r3, #24]
}
 80024aa:	bf00      	nop
 80024ac:	370c      	adds	r7, #12
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
	...

080024b8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80024c0:	2300      	movs	r3, #0
 80024c2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d101      	bne.n	80024ce <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e29b      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f000 8087 	beq.w	80025ea <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024dc:	4b96      	ldr	r3, [pc, #600]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 030c 	and.w	r3, r3, #12
 80024e4:	2b04      	cmp	r3, #4
 80024e6:	d00c      	beq.n	8002502 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024e8:	4b93      	ldr	r3, [pc, #588]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 030c 	and.w	r3, r3, #12
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d112      	bne.n	800251a <HAL_RCC_OscConfig+0x62>
 80024f4:	4b90      	ldr	r3, [pc, #576]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002500:	d10b      	bne.n	800251a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002502:	4b8d      	ldr	r3, [pc, #564]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d06c      	beq.n	80025e8 <HAL_RCC_OscConfig+0x130>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d168      	bne.n	80025e8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e275      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002522:	d106      	bne.n	8002532 <HAL_RCC_OscConfig+0x7a>
 8002524:	4b84      	ldr	r3, [pc, #528]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a83      	ldr	r2, [pc, #524]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800252a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252e:	6013      	str	r3, [r2, #0]
 8002530:	e02e      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	685b      	ldr	r3, [r3, #4]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d10c      	bne.n	8002554 <HAL_RCC_OscConfig+0x9c>
 800253a:	4b7f      	ldr	r3, [pc, #508]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a7e      	ldr	r2, [pc, #504]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002540:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002544:	6013      	str	r3, [r2, #0]
 8002546:	4b7c      	ldr	r3, [pc, #496]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a7b      	ldr	r2, [pc, #492]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800254c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002550:	6013      	str	r3, [r2, #0]
 8002552:	e01d      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800255c:	d10c      	bne.n	8002578 <HAL_RCC_OscConfig+0xc0>
 800255e:	4b76      	ldr	r3, [pc, #472]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a75      	ldr	r2, [pc, #468]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002568:	6013      	str	r3, [r2, #0]
 800256a:	4b73      	ldr	r3, [pc, #460]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a72      	ldr	r2, [pc, #456]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002570:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002574:	6013      	str	r3, [r2, #0]
 8002576:	e00b      	b.n	8002590 <HAL_RCC_OscConfig+0xd8>
 8002578:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a6e      	ldr	r2, [pc, #440]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800257e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002582:	6013      	str	r3, [r2, #0]
 8002584:	4b6c      	ldr	r3, [pc, #432]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	4a6b      	ldr	r2, [pc, #428]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800258a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800258e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d013      	beq.n	80025c0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002598:	f7fe fcf4 	bl	8000f84 <HAL_GetTick>
 800259c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259e:	e008      	b.n	80025b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025a0:	f7fe fcf0 	bl	8000f84 <HAL_GetTick>
 80025a4:	4602      	mov	r2, r0
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	2b64      	cmp	r3, #100	; 0x64
 80025ac:	d901      	bls.n	80025b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e229      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b2:	4b61      	ldr	r3, [pc, #388]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d0f0      	beq.n	80025a0 <HAL_RCC_OscConfig+0xe8>
 80025be:	e014      	b.n	80025ea <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025c0:	f7fe fce0 	bl	8000f84 <HAL_GetTick>
 80025c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe fcdc 	bl	8000f84 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e215      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b57      	ldr	r3, [pc, #348]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x110>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 0302 	and.w	r3, r3, #2
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d069      	beq.n	80026ca <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025f6:	4b50      	ldr	r3, [pc, #320]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d00b      	beq.n	800261a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002602:	4b4d      	ldr	r3, [pc, #308]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	f003 030c 	and.w	r3, r3, #12
 800260a:	2b08      	cmp	r3, #8
 800260c:	d11c      	bne.n	8002648 <HAL_RCC_OscConfig+0x190>
 800260e:	4b4a      	ldr	r3, [pc, #296]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d116      	bne.n	8002648 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800261a:	4b47      	ldr	r3, [pc, #284]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0302 	and.w	r3, r3, #2
 8002622:	2b00      	cmp	r3, #0
 8002624:	d005      	beq.n	8002632 <HAL_RCC_OscConfig+0x17a>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	68db      	ldr	r3, [r3, #12]
 800262a:	2b01      	cmp	r3, #1
 800262c:	d001      	beq.n	8002632 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e1e9      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002632:	4b41      	ldr	r3, [pc, #260]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	691b      	ldr	r3, [r3, #16]
 800263e:	00db      	lsls	r3, r3, #3
 8002640:	493d      	ldr	r1, [pc, #244]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002642:	4313      	orrs	r3, r2
 8002644:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002646:	e040      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d023      	beq.n	8002698 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002650:	4b39      	ldr	r3, [pc, #228]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a38      	ldr	r2, [pc, #224]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002656:	f043 0301 	orr.w	r3, r3, #1
 800265a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800265c:	f7fe fc92 	bl	8000f84 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe fc8e 	bl	8000f84 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e1c7      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4929      	ldr	r1, [pc, #164]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002692:	4313      	orrs	r3, r2
 8002694:	600b      	str	r3, [r1, #0]
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002698:	4b27      	ldr	r3, [pc, #156]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a26      	ldr	r2, [pc, #152]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026a4:	f7fe fc6e 	bl	8000f84 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026ac:	f7fe fc6a 	bl	8000f84 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e1a3      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026be:	4b1e      	ldr	r3, [pc, #120]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0308 	and.w	r3, r3, #8
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d038      	beq.n	8002748 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d019      	beq.n	8002712 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026de:	4b16      	ldr	r3, [pc, #88]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026ea:	f7fe fc4b 	bl	8000f84 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fc47 	bl	8000f84 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e180      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	4b0c      	ldr	r3, [pc, #48]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x23a>
 8002710:	e01a      	b.n	8002748 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002712:	4b09      	ldr	r3, [pc, #36]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002716:	4a08      	ldr	r2, [pc, #32]	; (8002738 <HAL_RCC_OscConfig+0x280>)
 8002718:	f023 0301 	bic.w	r3, r3, #1
 800271c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800271e:	f7fe fc31 	bl	8000f84 <HAL_GetTick>
 8002722:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	e00a      	b.n	800273c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe fc2d 	bl	8000f84 <HAL_GetTick>
 800272a:	4602      	mov	r2, r0
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d903      	bls.n	800273c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e166      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
 8002738:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800273c:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800273e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002740:	f003 0302 	and.w	r3, r3, #2
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1ee      	bne.n	8002726 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f003 0304 	and.w	r3, r3, #4
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 80a4 	beq.w	800289e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b8c      	ldr	r3, [pc, #560]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800275e:	2b00      	cmp	r3, #0
 8002760:	d10d      	bne.n	800277e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b89      	ldr	r3, [pc, #548]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a88      	ldr	r2, [pc, #544]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002768:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
 800276e:	4b86      	ldr	r3, [pc, #536]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002772:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002776:	60bb      	str	r3, [r7, #8]
 8002778:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800277a:	2301      	movs	r3, #1
 800277c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d118      	bne.n	80027bc <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800278a:	4b80      	ldr	r3, [pc, #512]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a7f      	ldr	r2, [pc, #508]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 8002790:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002794:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002796:	f7fe fbf5 	bl	8000f84 <HAL_GetTick>
 800279a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800279c:	e008      	b.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279e:	f7fe fbf1 	bl	8000f84 <HAL_GetTick>
 80027a2:	4602      	mov	r2, r0
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	1ad3      	subs	r3, r2, r3
 80027a8:	2b64      	cmp	r3, #100	; 0x64
 80027aa:	d901      	bls.n	80027b0 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80027ac:	2303      	movs	r3, #3
 80027ae:	e12a      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80027b0:	4b76      	ldr	r3, [pc, #472]	; (800298c <HAL_RCC_OscConfig+0x4d4>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0f0      	beq.n	800279e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	689b      	ldr	r3, [r3, #8]
 80027c0:	2b01      	cmp	r3, #1
 80027c2:	d106      	bne.n	80027d2 <HAL_RCC_OscConfig+0x31a>
 80027c4:	4b70      	ldr	r3, [pc, #448]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c8:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027ca:	f043 0301 	orr.w	r3, r3, #1
 80027ce:	6713      	str	r3, [r2, #112]	; 0x70
 80027d0:	e02d      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	689b      	ldr	r3, [r3, #8]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d10c      	bne.n	80027f4 <HAL_RCC_OscConfig+0x33c>
 80027da:	4b6b      	ldr	r3, [pc, #428]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027de:	4a6a      	ldr	r2, [pc, #424]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6713      	str	r3, [r2, #112]	; 0x70
 80027e6:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ea:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027ec:	f023 0304 	bic.w	r3, r3, #4
 80027f0:	6713      	str	r3, [r2, #112]	; 0x70
 80027f2:	e01c      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	2b05      	cmp	r3, #5
 80027fa:	d10c      	bne.n	8002816 <HAL_RCC_OscConfig+0x35e>
 80027fc:	4b62      	ldr	r3, [pc, #392]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80027fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002800:	4a61      	ldr	r2, [pc, #388]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002802:	f043 0304 	orr.w	r3, r3, #4
 8002806:	6713      	str	r3, [r2, #112]	; 0x70
 8002808:	4b5f      	ldr	r3, [pc, #380]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800280a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800280c:	4a5e      	ldr	r2, [pc, #376]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800280e:	f043 0301 	orr.w	r3, r3, #1
 8002812:	6713      	str	r3, [r2, #112]	; 0x70
 8002814:	e00b      	b.n	800282e <HAL_RCC_OscConfig+0x376>
 8002816:	4b5c      	ldr	r3, [pc, #368]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800281a:	4a5b      	ldr	r2, [pc, #364]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800281c:	f023 0301 	bic.w	r3, r3, #1
 8002820:	6713      	str	r3, [r2, #112]	; 0x70
 8002822:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	4a58      	ldr	r2, [pc, #352]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002828:	f023 0304 	bic.w	r3, r3, #4
 800282c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d015      	beq.n	8002862 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fba5 	bl	8000f84 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800283e:	f7fe fba1 	bl	8000f84 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	f241 3288 	movw	r2, #5000	; 0x1388
 800284c:	4293      	cmp	r3, r2
 800284e:	d901      	bls.n	8002854 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002850:	2303      	movs	r3, #3
 8002852:	e0d8      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d0ee      	beq.n	800283e <HAL_RCC_OscConfig+0x386>
 8002860:	e014      	b.n	800288c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002862:	f7fe fb8f 	bl	8000f84 <HAL_GetTick>
 8002866:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002868:	e00a      	b.n	8002880 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800286a:	f7fe fb8b 	bl	8000f84 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	f241 3288 	movw	r2, #5000	; 0x1388
 8002878:	4293      	cmp	r3, r2
 800287a:	d901      	bls.n	8002880 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e0c2      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002882:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d1ee      	bne.n	800286a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800288c:	7dfb      	ldrb	r3, [r7, #23]
 800288e:	2b01      	cmp	r3, #1
 8002890:	d105      	bne.n	800289e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002892:	4b3d      	ldr	r3, [pc, #244]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800289c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	699b      	ldr	r3, [r3, #24]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	f000 80ae 	beq.w	8002a04 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028a8:	4b37      	ldr	r3, [pc, #220]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f003 030c 	and.w	r3, r3, #12
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d06d      	beq.n	8002990 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	699b      	ldr	r3, [r3, #24]
 80028b8:	2b02      	cmp	r3, #2
 80028ba:	d14b      	bne.n	8002954 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028bc:	4b32      	ldr	r3, [pc, #200]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4a31      	ldr	r2, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80028c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c8:	f7fe fb5c 	bl	8000f84 <HAL_GetTick>
 80028cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ce:	e008      	b.n	80028e2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d0:	f7fe fb58 	bl	8000f84 <HAL_GetTick>
 80028d4:	4602      	mov	r2, r0
 80028d6:	693b      	ldr	r3, [r7, #16]
 80028d8:	1ad3      	subs	r3, r2, r3
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e091      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028e2:	4b29      	ldr	r3, [pc, #164]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d1f0      	bne.n	80028d0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	69da      	ldr	r2, [r3, #28]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6a1b      	ldr	r3, [r3, #32]
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	019b      	lsls	r3, r3, #6
 80028fe:	431a      	orrs	r2, r3
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002904:	085b      	lsrs	r3, r3, #1
 8002906:	3b01      	subs	r3, #1
 8002908:	041b      	lsls	r3, r3, #16
 800290a:	431a      	orrs	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002910:	061b      	lsls	r3, r3, #24
 8002912:	431a      	orrs	r2, r3
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002918:	071b      	lsls	r3, r3, #28
 800291a:	491b      	ldr	r1, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002920:	4b19      	ldr	r3, [pc, #100]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7fe fb2a 	bl	8000f84 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002934:	f7fe fb26 	bl	8000f84 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e05f      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002946:	4b10      	ldr	r3, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d0f0      	beq.n	8002934 <HAL_RCC_OscConfig+0x47c>
 8002952:	e057      	b.n	8002a04 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002954:	4b0c      	ldr	r3, [pc, #48]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a0b      	ldr	r2, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800295a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800295e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002960:	f7fe fb10 	bl	8000f84 <HAL_GetTick>
 8002964:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002966:	e008      	b.n	800297a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002968:	f7fe fb0c 	bl	8000f84 <HAL_GetTick>
 800296c:	4602      	mov	r2, r0
 800296e:	693b      	ldr	r3, [r7, #16]
 8002970:	1ad3      	subs	r3, r2, r3
 8002972:	2b02      	cmp	r3, #2
 8002974:	d901      	bls.n	800297a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002976:	2303      	movs	r3, #3
 8002978:	e045      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800297a:	4b03      	ldr	r3, [pc, #12]	; (8002988 <HAL_RCC_OscConfig+0x4d0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002982:	2b00      	cmp	r3, #0
 8002984:	d1f0      	bne.n	8002968 <HAL_RCC_OscConfig+0x4b0>
 8002986:	e03d      	b.n	8002a04 <HAL_RCC_OscConfig+0x54c>
 8002988:	40023800 	.word	0x40023800
 800298c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002990:	4b1f      	ldr	r3, [pc, #124]	; (8002a10 <HAL_RCC_OscConfig+0x558>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	699b      	ldr	r3, [r3, #24]
 800299a:	2b01      	cmp	r3, #1
 800299c:	d030      	beq.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029a8:	429a      	cmp	r2, r3
 80029aa:	d129      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d122      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80029c0:	4013      	ands	r3, r2
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80029c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d119      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	3b01      	subs	r3, #1
 80029da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029dc:	429a      	cmp	r2, r3
 80029de:	d10f      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d107      	bne.n	8002a00 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d001      	beq.n	8002a04 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	e000      	b.n	8002a06 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002a04:	2300      	movs	r3, #0
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40023800 	.word	0x40023800

08002a14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d101      	bne.n	8002a2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	e0d0      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002a2c:	4b6a      	ldr	r3, [pc, #424]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f003 030f 	and.w	r3, r3, #15
 8002a34:	683a      	ldr	r2, [r7, #0]
 8002a36:	429a      	cmp	r2, r3
 8002a38:	d910      	bls.n	8002a5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a3a:	4b67      	ldr	r3, [pc, #412]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f023 020f 	bic.w	r2, r3, #15
 8002a42:	4965      	ldr	r1, [pc, #404]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a4a:	4b63      	ldr	r3, [pc, #396]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 030f 	and.w	r3, r3, #15
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	429a      	cmp	r2, r3
 8002a56:	d001      	beq.n	8002a5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002a58:	2301      	movs	r3, #1
 8002a5a:	e0b8      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f003 0302 	and.w	r3, r3, #2
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d020      	beq.n	8002aaa <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d005      	beq.n	8002a80 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a74:	4b59      	ldr	r3, [pc, #356]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	4a58      	ldr	r2, [pc, #352]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a7a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a7e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0308 	and.w	r3, r3, #8
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d005      	beq.n	8002a98 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a8c:	4b53      	ldr	r3, [pc, #332]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	4a52      	ldr	r2, [pc, #328]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a92:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a96:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a98:	4b50      	ldr	r3, [pc, #320]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	689b      	ldr	r3, [r3, #8]
 8002aa4:	494d      	ldr	r1, [pc, #308]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d040      	beq.n	8002b38 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d107      	bne.n	8002ace <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002abe:	4b47      	ldr	r3, [pc, #284]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d115      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002aca:	2301      	movs	r3, #1
 8002acc:	e07f      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	685b      	ldr	r3, [r3, #4]
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d107      	bne.n	8002ae6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ad6:	4b41      	ldr	r3, [pc, #260]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d109      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e073      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae6:	4b3d      	ldr	r3, [pc, #244]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e06b      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002af6:	4b39      	ldr	r3, [pc, #228]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002af8:	689b      	ldr	r3, [r3, #8]
 8002afa:	f023 0203 	bic.w	r2, r3, #3
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	4936      	ldr	r1, [pc, #216]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b04:	4313      	orrs	r3, r2
 8002b06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b08:	f7fe fa3c 	bl	8000f84 <HAL_GetTick>
 8002b0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b0e:	e00a      	b.n	8002b26 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b10:	f7fe fa38 	bl	8000f84 <HAL_GetTick>
 8002b14:	4602      	mov	r2, r0
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1e:	4293      	cmp	r3, r2
 8002b20:	d901      	bls.n	8002b26 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002b22:	2303      	movs	r3, #3
 8002b24:	e053      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b26:	4b2d      	ldr	r3, [pc, #180]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f003 020c 	and.w	r2, r3, #12
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d1eb      	bne.n	8002b10 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002b38:	4b27      	ldr	r3, [pc, #156]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f003 030f 	and.w	r3, r3, #15
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d210      	bcs.n	8002b68 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b46:	4b24      	ldr	r3, [pc, #144]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f023 020f 	bic.w	r2, r3, #15
 8002b4e:	4922      	ldr	r1, [pc, #136]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b56:	4b20      	ldr	r3, [pc, #128]	; (8002bd8 <HAL_RCC_ClockConfig+0x1c4>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	683a      	ldr	r2, [r7, #0]
 8002b60:	429a      	cmp	r2, r3
 8002b62:	d001      	beq.n	8002b68 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002b64:	2301      	movs	r3, #1
 8002b66:	e032      	b.n	8002bce <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d008      	beq.n	8002b86 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b74:	4b19      	ldr	r3, [pc, #100]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	68db      	ldr	r3, [r3, #12]
 8002b80:	4916      	ldr	r1, [pc, #88]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f003 0308 	and.w	r3, r3, #8
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d009      	beq.n	8002ba6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002b92:	4b12      	ldr	r3, [pc, #72]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002b94:	689b      	ldr	r3, [r3, #8]
 8002b96:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	00db      	lsls	r3, r3, #3
 8002ba0:	490e      	ldr	r1, [pc, #56]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ba6:	f000 f821 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8002baa:	4602      	mov	r2, r0
 8002bac:	4b0b      	ldr	r3, [pc, #44]	; (8002bdc <HAL_RCC_ClockConfig+0x1c8>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	091b      	lsrs	r3, r3, #4
 8002bb2:	f003 030f 	and.w	r3, r3, #15
 8002bb6:	490a      	ldr	r1, [pc, #40]	; (8002be0 <HAL_RCC_ClockConfig+0x1cc>)
 8002bb8:	5ccb      	ldrb	r3, [r1, r3]
 8002bba:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbe:	4a09      	ldr	r2, [pc, #36]	; (8002be4 <HAL_RCC_ClockConfig+0x1d0>)
 8002bc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002bc2:	4b09      	ldr	r3, [pc, #36]	; (8002be8 <HAL_RCC_ClockConfig+0x1d4>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	f7fe f998 	bl	8000efc <HAL_InitTick>

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3710      	adds	r7, #16
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	bd80      	pop	{r7, pc}
 8002bd6:	bf00      	nop
 8002bd8:	40023c00 	.word	0x40023c00
 8002bdc:	40023800 	.word	0x40023800
 8002be0:	08004970 	.word	0x08004970
 8002be4:	20000000 	.word	0x20000000
 8002be8:	20000004 	.word	0x20000004

08002bec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bf0:	b090      	sub	sp, #64	; 0x40
 8002bf2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	637b      	str	r3, [r7, #52]	; 0x34
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002c00:	2300      	movs	r3, #0
 8002c02:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c04:	4b59      	ldr	r3, [pc, #356]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c06:	689b      	ldr	r3, [r3, #8]
 8002c08:	f003 030c 	and.w	r3, r3, #12
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d00d      	beq.n	8002c2c <HAL_RCC_GetSysClockFreq+0x40>
 8002c10:	2b08      	cmp	r3, #8
 8002c12:	f200 80a1 	bhi.w	8002d58 <HAL_RCC_GetSysClockFreq+0x16c>
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d002      	beq.n	8002c20 <HAL_RCC_GetSysClockFreq+0x34>
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d003      	beq.n	8002c26 <HAL_RCC_GetSysClockFreq+0x3a>
 8002c1e:	e09b      	b.n	8002d58 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c20:	4b53      	ldr	r3, [pc, #332]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002c22:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c24:	e09b      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c26:	4b53      	ldr	r3, [pc, #332]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c28:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002c2a:	e098      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c2c:	4b4f      	ldr	r3, [pc, #316]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c34:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002c36:	4b4d      	ldr	r3, [pc, #308]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d028      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c42:	4b4a      	ldr	r3, [pc, #296]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	2200      	movs	r2, #0
 8002c4a:	623b      	str	r3, [r7, #32]
 8002c4c:	627a      	str	r2, [r7, #36]	; 0x24
 8002c4e:	6a3b      	ldr	r3, [r7, #32]
 8002c50:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002c54:	2100      	movs	r1, #0
 8002c56:	4b47      	ldr	r3, [pc, #284]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c58:	fb03 f201 	mul.w	r2, r3, r1
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	fb00 f303 	mul.w	r3, r0, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	4a43      	ldr	r2, [pc, #268]	; (8002d74 <HAL_RCC_GetSysClockFreq+0x188>)
 8002c66:	fba0 1202 	umull	r1, r2, r0, r2
 8002c6a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002c6c:	460a      	mov	r2, r1
 8002c6e:	62ba      	str	r2, [r7, #40]	; 0x28
 8002c70:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c72:	4413      	add	r3, r2
 8002c74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	2200      	movs	r2, #0
 8002c7a:	61bb      	str	r3, [r7, #24]
 8002c7c:	61fa      	str	r2, [r7, #28]
 8002c7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c82:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002c86:	f7fd fb33 	bl	80002f0 <__aeabi_uldivmod>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	4613      	mov	r3, r2
 8002c90:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c92:	e053      	b.n	8002d3c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c94:	4b35      	ldr	r3, [pc, #212]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	099b      	lsrs	r3, r3, #6
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	613b      	str	r3, [r7, #16]
 8002c9e:	617a      	str	r2, [r7, #20]
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002ca6:	f04f 0b00 	mov.w	fp, #0
 8002caa:	4652      	mov	r2, sl
 8002cac:	465b      	mov	r3, fp
 8002cae:	f04f 0000 	mov.w	r0, #0
 8002cb2:	f04f 0100 	mov.w	r1, #0
 8002cb6:	0159      	lsls	r1, r3, #5
 8002cb8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cbc:	0150      	lsls	r0, r2, #5
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	460b      	mov	r3, r1
 8002cc2:	ebb2 080a 	subs.w	r8, r2, sl
 8002cc6:	eb63 090b 	sbc.w	r9, r3, fp
 8002cca:	f04f 0200 	mov.w	r2, #0
 8002cce:	f04f 0300 	mov.w	r3, #0
 8002cd2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002cd6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002cda:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002cde:	ebb2 0408 	subs.w	r4, r2, r8
 8002ce2:	eb63 0509 	sbc.w	r5, r3, r9
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 0300 	mov.w	r3, #0
 8002cee:	00eb      	lsls	r3, r5, #3
 8002cf0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002cf4:	00e2      	lsls	r2, r4, #3
 8002cf6:	4614      	mov	r4, r2
 8002cf8:	461d      	mov	r5, r3
 8002cfa:	eb14 030a 	adds.w	r3, r4, sl
 8002cfe:	603b      	str	r3, [r7, #0]
 8002d00:	eb45 030b 	adc.w	r3, r5, fp
 8002d04:	607b      	str	r3, [r7, #4]
 8002d06:	f04f 0200 	mov.w	r2, #0
 8002d0a:	f04f 0300 	mov.w	r3, #0
 8002d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002d12:	4629      	mov	r1, r5
 8002d14:	028b      	lsls	r3, r1, #10
 8002d16:	4621      	mov	r1, r4
 8002d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002d1c:	4621      	mov	r1, r4
 8002d1e:	028a      	lsls	r2, r1, #10
 8002d20:	4610      	mov	r0, r2
 8002d22:	4619      	mov	r1, r3
 8002d24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d26:	2200      	movs	r2, #0
 8002d28:	60bb      	str	r3, [r7, #8]
 8002d2a:	60fa      	str	r2, [r7, #12]
 8002d2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002d30:	f7fd fade 	bl	80002f0 <__aeabi_uldivmod>
 8002d34:	4602      	mov	r2, r0
 8002d36:	460b      	mov	r3, r1
 8002d38:	4613      	mov	r3, r2
 8002d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_GetSysClockFreq+0x180>)
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	0c1b      	lsrs	r3, r3, #16
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	3301      	adds	r3, #1
 8002d48:	005b      	lsls	r3, r3, #1
 8002d4a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002d4c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d54:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d56:	e002      	b.n	8002d5e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d58:	4b05      	ldr	r3, [pc, #20]	; (8002d70 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d5a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3740      	adds	r7, #64	; 0x40
 8002d64:	46bd      	mov	sp, r7
 8002d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	00f42400 	.word	0x00f42400
 8002d74:	017d7840 	.word	0x017d7840

08002d78 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d7c:	4b03      	ldr	r3, [pc, #12]	; (8002d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	46bd      	mov	sp, r7
 8002d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d88:	4770      	bx	lr
 8002d8a:	bf00      	nop
 8002d8c:	20000000 	.word	0x20000000

08002d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002d94:	f7ff fff0 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	4b05      	ldr	r3, [pc, #20]	; (8002db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	0a9b      	lsrs	r3, r3, #10
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	4903      	ldr	r1, [pc, #12]	; (8002db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002da6:	5ccb      	ldrb	r3, [r1, r3]
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	40023800 	.word	0x40023800
 8002db4:	08004980 	.word	0x08004980

08002db8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002dbc:	f7ff ffdc 	bl	8002d78 <HAL_RCC_GetHCLKFreq>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	0b5b      	lsrs	r3, r3, #13
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	4903      	ldr	r1, [pc, #12]	; (8002ddc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002dce:	5ccb      	ldrb	r3, [r1, r3]
 8002dd0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	40023800 	.word	0x40023800
 8002ddc:	08004980 	.word	0x08004980

08002de0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b088      	sub	sp, #32
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002de8:	2300      	movs	r3, #0
 8002dea:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002dec:	2300      	movs	r3, #0
 8002dee:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002df0:	2300      	movs	r3, #0
 8002df2:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002df4:	2300      	movs	r3, #0
 8002df6:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f003 0301 	and.w	r3, r3, #1
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d012      	beq.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e08:	4b69      	ldr	r3, [pc, #420]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	4a68      	ldr	r2, [pc, #416]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e0e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002e12:	6093      	str	r3, [r2, #8]
 8002e14:	4b66      	ldr	r3, [pc, #408]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e1c:	4964      	ldr	r1, [pc, #400]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d101      	bne.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d017      	beq.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e3a:	4b5d      	ldr	r3, [pc, #372]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e40:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e48:	4959      	ldr	r1, [pc, #356]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002e58:	d101      	bne.n	8002e5e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002e66:	2301      	movs	r3, #1
 8002e68:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d017      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002e76:	4b4e      	ldr	r3, [pc, #312]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002e7c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e84:	494a      	ldr	r1, [pc, #296]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e94:	d101      	bne.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002e96:	2301      	movs	r3, #1
 8002e98:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d001      	beq.n	8002eb6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0320 	and.w	r3, r3, #32
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 808b 	beq.w	8002fda <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ec4:	4b3a      	ldr	r3, [pc, #232]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ec8:	4a39      	ldr	r2, [pc, #228]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002eca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ece:	6413      	str	r3, [r2, #64]	; 0x40
 8002ed0:	4b37      	ldr	r3, [pc, #220]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	60bb      	str	r3, [r7, #8]
 8002eda:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002edc:	4b35      	ldr	r3, [pc, #212]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a34      	ldr	r2, [pc, #208]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ee2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ee6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee8:	f7fe f84c 	bl	8000f84 <HAL_GetTick>
 8002eec:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ef0:	f7fe f848 	bl	8000f84 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b64      	cmp	r3, #100	; 0x64
 8002efc:	d901      	bls.n	8002f02 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e38f      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002f02:	4b2c      	ldr	r3, [pc, #176]	; (8002fb4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002f0e:	4b28      	ldr	r3, [pc, #160]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f12:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f16:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d035      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f26:	693a      	ldr	r2, [r7, #16]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	d02e      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f2c:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f34:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002f36:	4b1e      	ldr	r3, [pc, #120]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f3a:	4a1d      	ldr	r2, [pc, #116]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f40:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002f42:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f46:	4a1a      	ldr	r2, [pc, #104]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002f4e:	4a18      	ldr	r2, [pc, #96]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002f54:	4b16      	ldr	r3, [pc, #88]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f58:	f003 0301 	and.w	r3, r3, #1
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d114      	bne.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f60:	f7fe f810 	bl	8000f84 <HAL_GetTick>
 8002f64:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f66:	e00a      	b.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f68:	f7fe f80c 	bl	8000f84 <HAL_GetTick>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	697b      	ldr	r3, [r7, #20]
 8002f70:	1ad3      	subs	r3, r2, r3
 8002f72:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d901      	bls.n	8002f7e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e351      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7e:	4b0c      	ldr	r3, [pc, #48]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f82:	f003 0302 	and.w	r3, r3, #2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d0ee      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f92:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f96:	d111      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002f98:	4b05      	ldr	r3, [pc, #20]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fa4:	4b04      	ldr	r3, [pc, #16]	; (8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002fa6:	400b      	ands	r3, r1
 8002fa8:	4901      	ldr	r1, [pc, #4]	; (8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002faa:	4313      	orrs	r3, r2
 8002fac:	608b      	str	r3, [r1, #8]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002fb0:	40023800 	.word	0x40023800
 8002fb4:	40007000 	.word	0x40007000
 8002fb8:	0ffffcff 	.word	0x0ffffcff
 8002fbc:	4bac      	ldr	r3, [pc, #688]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	4aab      	ldr	r2, [pc, #684]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fc2:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002fc6:	6093      	str	r3, [r2, #8]
 8002fc8:	4ba9      	ldr	r3, [pc, #676]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002fd4:	49a6      	ldr	r1, [pc, #664]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0310 	and.w	r3, r3, #16
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d010      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002fe6:	4ba2      	ldr	r3, [pc, #648]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fe8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002fec:	4aa0      	ldr	r2, [pc, #640]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ff2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002ff6:	4b9e      	ldr	r3, [pc, #632]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ff8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003000:	499b      	ldr	r1, [pc, #620]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003002:	4313      	orrs	r3, r2
 8003004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003010:	2b00      	cmp	r3, #0
 8003012:	d00a      	beq.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003014:	4b96      	ldr	r3, [pc, #600]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800301a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003022:	4993      	ldr	r1, [pc, #588]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003024:	4313      	orrs	r3, r2
 8003026:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003032:	2b00      	cmp	r3, #0
 8003034:	d00a      	beq.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003036:	4b8e      	ldr	r3, [pc, #568]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003038:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800303c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003044:	498a      	ldr	r1, [pc, #552]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003046:	4313      	orrs	r3, r2
 8003048:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d00a      	beq.n	800306e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003058:	4b85      	ldr	r3, [pc, #532]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800305a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800305e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003066:	4982      	ldr	r1, [pc, #520]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003068:	4313      	orrs	r3, r2
 800306a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003076:	2b00      	cmp	r3, #0
 8003078:	d00a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800307a:	4b7d      	ldr	r3, [pc, #500]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800307c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003080:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003088:	4979      	ldr	r1, [pc, #484]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800308a:	4313      	orrs	r3, r2
 800308c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800309c:	4b74      	ldr	r3, [pc, #464]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800309e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030a2:	f023 0203 	bic.w	r2, r3, #3
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4971      	ldr	r1, [pc, #452]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ac:	4313      	orrs	r3, r2
 80030ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d00a      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80030be:	4b6c      	ldr	r3, [pc, #432]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030c4:	f023 020c 	bic.w	r2, r3, #12
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80030cc:	4968      	ldr	r1, [pc, #416]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030e0:	4b63      	ldr	r3, [pc, #396]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80030e6:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ee:	4960      	ldr	r1, [pc, #384]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d00a      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003108:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003110:	4957      	ldr	r1, [pc, #348]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003112:	4313      	orrs	r3, r2
 8003114:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003120:	2b00      	cmp	r3, #0
 8003122:	d00a      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003124:	4b52      	ldr	r3, [pc, #328]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800312a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003132:	494f      	ldr	r1, [pc, #316]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003134:	4313      	orrs	r3, r2
 8003136:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00a      	beq.n	800315c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003146:	4b4a      	ldr	r3, [pc, #296]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800314c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003154:	4946      	ldr	r1, [pc, #280]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003156:	4313      	orrs	r3, r2
 8003158:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d00a      	beq.n	800317e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003168:	4b41      	ldr	r3, [pc, #260]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800316e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003176:	493e      	ldr	r1, [pc, #248]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003178:	4313      	orrs	r3, r2
 800317a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d00a      	beq.n	80031a0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800318a:	4b39      	ldr	r3, [pc, #228]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800318c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003190:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003198:	4935      	ldr	r1, [pc, #212]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800319a:	4313      	orrs	r3, r2
 800319c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d00a      	beq.n	80031c2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ac:	4b30      	ldr	r3, [pc, #192]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031b2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031ba:	492d      	ldr	r1, [pc, #180]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d011      	beq.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80031ce:	4b28      	ldr	r3, [pc, #160]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031d4:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031dc:	4924      	ldr	r1, [pc, #144]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031de:	4313      	orrs	r3, r2
 80031e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80031ec:	d101      	bne.n	80031f2 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80031ee:	2301      	movs	r3, #1
 80031f0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0308 	and.w	r3, r3, #8
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80031fe:	2301      	movs	r3, #1
 8003200:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d00a      	beq.n	8003224 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003214:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800321c:	4914      	ldr	r1, [pc, #80]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321e:	4313      	orrs	r3, r2
 8003220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00b      	beq.n	8003248 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003230:	4b0f      	ldr	r3, [pc, #60]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003236:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003240:	490b      	ldr	r1, [pc, #44]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003242:	4313      	orrs	r3, r2
 8003244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d00f      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003254:	4b06      	ldr	r3, [pc, #24]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800325a:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003264:	4902      	ldr	r1, [pc, #8]	; (8003270 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003266:	4313      	orrs	r3, r2
 8003268:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800326c:	e002      	b.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00b      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003280:	4b8a      	ldr	r3, [pc, #552]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003282:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003290:	4986      	ldr	r1, [pc, #536]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003292:	4313      	orrs	r3, r2
 8003294:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00b      	beq.n	80032bc <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80032a4:	4b81      	ldr	r3, [pc, #516]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b4:	497d      	ldr	r1, [pc, #500]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032b6:	4313      	orrs	r3, r2
 80032b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d006      	beq.n	80032d0 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	f000 80d6 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032d0:	4b76      	ldr	r3, [pc, #472]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	4a75      	ldr	r2, [pc, #468]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032d6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032dc:	f7fd fe52 	bl	8000f84 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032e2:	e008      	b.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80032e4:	f7fd fe4e 	bl	8000f84 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	2b64      	cmp	r3, #100	; 0x64
 80032f0:	d901      	bls.n	80032f6 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f2:	2303      	movs	r3, #3
 80032f4:	e195      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f6:	4b6d      	ldr	r3, [pc, #436]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d1f0      	bne.n	80032e4 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0301 	and.w	r3, r3, #1
 800330a:	2b00      	cmp	r3, #0
 800330c:	d021      	beq.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x572>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003312:	2b00      	cmp	r3, #0
 8003314:	d11d      	bne.n	8003352 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003316:	4b65      	ldr	r3, [pc, #404]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003318:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800331c:	0c1b      	lsrs	r3, r3, #16
 800331e:	f003 0303 	and.w	r3, r3, #3
 8003322:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003324:	4b61      	ldr	r3, [pc, #388]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003326:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800332a:	0e1b      	lsrs	r3, r3, #24
 800332c:	f003 030f 	and.w	r3, r3, #15
 8003330:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	019a      	lsls	r2, r3, #6
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	041b      	lsls	r3, r3, #16
 800333c:	431a      	orrs	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	061b      	lsls	r3, r3, #24
 8003342:	431a      	orrs	r2, r3
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	071b      	lsls	r3, r3, #28
 800334a:	4958      	ldr	r1, [pc, #352]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800334c:	4313      	orrs	r3, r2
 800334e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d004      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x588>
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003366:	d00a      	beq.n	800337e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003370:	2b00      	cmp	r3, #0
 8003372:	d02e      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800337c:	d129      	bne.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800337e:	4b4b      	ldr	r3, [pc, #300]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0303 	and.w	r3, r3, #3
 800338a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800338c:	4b47      	ldr	r3, [pc, #284]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800338e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003392:	0f1b      	lsrs	r3, r3, #28
 8003394:	f003 0307 	and.w	r3, r3, #7
 8003398:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	019a      	lsls	r2, r3, #6
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	041b      	lsls	r3, r3, #16
 80033a4:	431a      	orrs	r2, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	061b      	lsls	r3, r3, #24
 80033ac:	431a      	orrs	r2, r3
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	071b      	lsls	r3, r3, #28
 80033b2:	493e      	ldr	r1, [pc, #248]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80033ba:	4b3c      	ldr	r3, [pc, #240]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c0:	f023 021f 	bic.w	r2, r3, #31
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	3b01      	subs	r3, #1
 80033ca:	4938      	ldr	r1, [pc, #224]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033cc:	4313      	orrs	r3, r2
 80033ce:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d01d      	beq.n	800341a <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80033de:	4b33      	ldr	r3, [pc, #204]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033e4:	0e1b      	lsrs	r3, r3, #24
 80033e6:	f003 030f 	and.w	r3, r3, #15
 80033ea:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80033ec:	4b2f      	ldr	r3, [pc, #188]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80033f2:	0f1b      	lsrs	r3, r3, #28
 80033f4:	f003 0307 	and.w	r3, r3, #7
 80033f8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	019a      	lsls	r2, r3, #6
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	691b      	ldr	r3, [r3, #16]
 8003404:	041b      	lsls	r3, r3, #16
 8003406:	431a      	orrs	r2, r3
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	061b      	lsls	r3, r3, #24
 800340c:	431a      	orrs	r2, r3
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	071b      	lsls	r3, r3, #28
 8003412:	4926      	ldr	r1, [pc, #152]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003414:	4313      	orrs	r3, r2
 8003416:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d011      	beq.n	800344a <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	019a      	lsls	r2, r3, #6
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	691b      	ldr	r3, [r3, #16]
 8003430:	041b      	lsls	r3, r3, #16
 8003432:	431a      	orrs	r2, r3
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	061b      	lsls	r3, r3, #24
 800343a:	431a      	orrs	r2, r3
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	689b      	ldr	r3, [r3, #8]
 8003440:	071b      	lsls	r3, r3, #28
 8003442:	491a      	ldr	r1, [pc, #104]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003444:	4313      	orrs	r3, r2
 8003446:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800344a:	4b18      	ldr	r3, [pc, #96]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	4a17      	ldr	r2, [pc, #92]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003450:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003456:	f7fd fd95 	bl	8000f84 <HAL_GetTick>
 800345a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800345c:	e008      	b.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800345e:	f7fd fd91 	bl	8000f84 <HAL_GetTick>
 8003462:	4602      	mov	r2, r0
 8003464:	697b      	ldr	r3, [r7, #20]
 8003466:	1ad3      	subs	r3, r2, r3
 8003468:	2b64      	cmp	r3, #100	; 0x64
 800346a:	d901      	bls.n	8003470 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800346c:	2303      	movs	r3, #3
 800346e:	e0d8      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003470:	4b0e      	ldr	r3, [pc, #56]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	d0f0      	beq.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b01      	cmp	r3, #1
 8003480:	f040 80ce 	bne.w	8003620 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003484:	4b09      	ldr	r3, [pc, #36]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	4a08      	ldr	r2, [pc, #32]	; (80034ac <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800348a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800348e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003490:	f7fd fd78 	bl	8000f84 <HAL_GetTick>
 8003494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003496:	e00b      	b.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003498:	f7fd fd74 	bl	8000f84 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b64      	cmp	r3, #100	; 0x64
 80034a4:	d904      	bls.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e0bb      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
 80034aa:	bf00      	nop
 80034ac:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80034b0:	4b5e      	ldr	r3, [pc, #376]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80034bc:	d0ec      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d02e      	beq.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d12a      	bne.n	800353c <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80034e6:	4b51      	ldr	r3, [pc, #324]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	f003 0303 	and.w	r3, r3, #3
 80034f2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80034f4:	4b4d      	ldr	r3, [pc, #308]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80034f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034fa:	0f1b      	lsrs	r3, r3, #28
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	019a      	lsls	r2, r3, #6
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	041b      	lsls	r3, r3, #16
 800350c:	431a      	orrs	r2, r3
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	699b      	ldr	r3, [r3, #24]
 8003512:	061b      	lsls	r3, r3, #24
 8003514:	431a      	orrs	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	071b      	lsls	r3, r3, #28
 800351a:	4944      	ldr	r1, [pc, #272]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800351c:	4313      	orrs	r3, r2
 800351e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003522:	4b42      	ldr	r3, [pc, #264]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003524:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003528:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003530:	3b01      	subs	r3, #1
 8003532:	021b      	lsls	r3, r3, #8
 8003534:	493d      	ldr	r1, [pc, #244]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003536:	4313      	orrs	r3, r2
 8003538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003544:	2b00      	cmp	r3, #0
 8003546:	d022      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800354c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003550:	d11d      	bne.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003552:	4b36      	ldr	r3, [pc, #216]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003554:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003558:	0e1b      	lsrs	r3, r3, #24
 800355a:	f003 030f 	and.w	r3, r3, #15
 800355e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003560:	4b32      	ldr	r3, [pc, #200]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003562:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003566:	0f1b      	lsrs	r3, r3, #28
 8003568:	f003 0307 	and.w	r3, r3, #7
 800356c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	019a      	lsls	r2, r3, #6
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	041b      	lsls	r3, r3, #16
 800357a:	431a      	orrs	r2, r3
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	061b      	lsls	r3, r3, #24
 8003580:	431a      	orrs	r2, r3
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	071b      	lsls	r3, r3, #28
 8003586:	4929      	ldr	r1, [pc, #164]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0308 	and.w	r3, r3, #8
 8003596:	2b00      	cmp	r3, #0
 8003598:	d028      	beq.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800359a:	4b24      	ldr	r3, [pc, #144]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	0e1b      	lsrs	r3, r3, #24
 80035a2:	f003 030f 	and.w	r3, r3, #15
 80035a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035a8:	4b20      	ldr	r3, [pc, #128]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035ae:	0c1b      	lsrs	r3, r3, #16
 80035b0:	f003 0303 	and.w	r3, r3, #3
 80035b4:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	019a      	lsls	r2, r3, #6
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	041b      	lsls	r3, r3, #16
 80035c0:	431a      	orrs	r2, r3
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	061b      	lsls	r3, r3, #24
 80035c6:	431a      	orrs	r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	69db      	ldr	r3, [r3, #28]
 80035cc:	071b      	lsls	r3, r3, #28
 80035ce:	4917      	ldr	r1, [pc, #92]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80035d6:	4b15      	ldr	r3, [pc, #84]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80035dc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e4:	4911      	ldr	r1, [pc, #68]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035e6:	4313      	orrs	r3, r2
 80035e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80035ec:	4b0f      	ldr	r3, [pc, #60]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0e      	ldr	r2, [pc, #56]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035f8:	f7fd fcc4 	bl	8000f84 <HAL_GetTick>
 80035fc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003600:	f7fd fcc0 	bl	8000f84 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b64      	cmp	r3, #100	; 0x64
 800360c:	d901      	bls.n	8003612 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e007      	b.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800361a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800361e:	d1ef      	bne.n	8003600 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3720      	adds	r7, #32
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	40023800 	.word	0x40023800

08003630 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b082      	sub	sp, #8
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d101      	bne.n	8003642 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e040      	b.n	80036c4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003646:	2b00      	cmp	r3, #0
 8003648:	d106      	bne.n	8003658 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2200      	movs	r2, #0
 800364e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7fd fbbc 	bl	8000dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2224      	movs	r2, #36	; 0x24
 800365c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0201 	bic.w	r2, r2, #1
 800366c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f8b0 	bl	80037d4 <UART_SetConfig>
 8003674:	4603      	mov	r3, r0
 8003676:	2b01      	cmp	r3, #1
 8003678:	d101      	bne.n	800367e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800367a:	2301      	movs	r3, #1
 800367c:	e022      	b.n	80036c4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003682:	2b00      	cmp	r3, #0
 8003684:	d002      	beq.n	800368c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003686:	6878      	ldr	r0, [r7, #4]
 8003688:	f000 fb08 	bl	8003c9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685a      	ldr	r2, [r3, #4]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800369a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	689a      	ldr	r2, [r3, #8]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80036aa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681a      	ldr	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f042 0201 	orr.w	r2, r2, #1
 80036ba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fb8f 	bl	8003de0 <UART_CheckIdleState>
 80036c2:	4603      	mov	r3, r0
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3708      	adds	r7, #8
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b08a      	sub	sp, #40	; 0x28
 80036d0:	af02      	add	r7, sp, #8
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e0:	2b20      	cmp	r3, #32
 80036e2:	d171      	bne.n	80037c8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d002      	beq.n	80036f0 <HAL_UART_Transmit+0x24>
 80036ea:	88fb      	ldrh	r3, [r7, #6]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e06a      	b.n	80037ca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003702:	f7fd fc3f 	bl	8000f84 <HAL_GetTick>
 8003706:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	88fa      	ldrh	r2, [r7, #6]
 800370c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	88fa      	ldrh	r2, [r7, #6]
 8003714:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003720:	d108      	bne.n	8003734 <HAL_UART_Transmit+0x68>
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	691b      	ldr	r3, [r3, #16]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d104      	bne.n	8003734 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800372a:	2300      	movs	r3, #0
 800372c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	61bb      	str	r3, [r7, #24]
 8003732:	e003      	b.n	800373c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003738:	2300      	movs	r3, #0
 800373a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800373c:	e02c      	b.n	8003798 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	697b      	ldr	r3, [r7, #20]
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	; 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f000 fb96 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d001      	beq.n	8003758 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003754:	2303      	movs	r3, #3
 8003756:	e038      	b.n	80037ca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10b      	bne.n	8003776 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	881b      	ldrh	r3, [r3, #0]
 8003762:	461a      	mov	r2, r3
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800376c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	3302      	adds	r3, #2
 8003772:	61bb      	str	r3, [r7, #24]
 8003774:	e007      	b.n	8003786 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	781a      	ldrb	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	3301      	adds	r3, #1
 8003784:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800378c:	b29b      	uxth	r3, r3
 800378e:	3b01      	subs	r3, #1
 8003790:	b29a      	uxth	r2, r3
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800379e:	b29b      	uxth	r3, r3
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1cc      	bne.n	800373e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	9300      	str	r3, [sp, #0]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	2200      	movs	r2, #0
 80037ac:	2140      	movs	r1, #64	; 0x40
 80037ae:	68f8      	ldr	r0, [r7, #12]
 80037b0:	f000 fb63 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e005      	b.n	80037ca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	2220      	movs	r2, #32
 80037c2:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80037c4:	2300      	movs	r3, #0
 80037c6:	e000      	b.n	80037ca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80037c8:	2302      	movs	r3, #2
  }
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3720      	adds	r7, #32
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b088      	sub	sp, #32
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80037dc:	2300      	movs	r3, #0
 80037de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689a      	ldr	r2, [r3, #8]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	691b      	ldr	r3, [r3, #16]
 80037e8:	431a      	orrs	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	695b      	ldr	r3, [r3, #20]
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	69db      	ldr	r3, [r3, #28]
 80037f4:	4313      	orrs	r3, r2
 80037f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	4ba6      	ldr	r3, [pc, #664]	; (8003a98 <UART_SetConfig+0x2c4>)
 8003800:	4013      	ands	r3, r2
 8003802:	687a      	ldr	r2, [r7, #4]
 8003804:	6812      	ldr	r2, [r2, #0]
 8003806:	6979      	ldr	r1, [r7, #20]
 8003808:	430b      	orrs	r3, r1
 800380a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68da      	ldr	r2, [r3, #12]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	430a      	orrs	r2, r1
 8003820:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	699b      	ldr	r3, [r3, #24]
 8003826:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	697a      	ldr	r2, [r7, #20]
 800382e:	4313      	orrs	r3, r2
 8003830:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	697a      	ldr	r2, [r7, #20]
 8003842:	430a      	orrs	r2, r1
 8003844:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4a94      	ldr	r2, [pc, #592]	; (8003a9c <UART_SetConfig+0x2c8>)
 800384c:	4293      	cmp	r3, r2
 800384e:	d120      	bne.n	8003892 <UART_SetConfig+0xbe>
 8003850:	4b93      	ldr	r3, [pc, #588]	; (8003aa0 <UART_SetConfig+0x2cc>)
 8003852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003856:	f003 0303 	and.w	r3, r3, #3
 800385a:	2b03      	cmp	r3, #3
 800385c:	d816      	bhi.n	800388c <UART_SetConfig+0xb8>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <UART_SetConfig+0x90>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003875 	.word	0x08003875
 8003868:	08003881 	.word	0x08003881
 800386c:	0800387b 	.word	0x0800387b
 8003870:	08003887 	.word	0x08003887
 8003874:	2301      	movs	r3, #1
 8003876:	77fb      	strb	r3, [r7, #31]
 8003878:	e150      	b.n	8003b1c <UART_SetConfig+0x348>
 800387a:	2302      	movs	r3, #2
 800387c:	77fb      	strb	r3, [r7, #31]
 800387e:	e14d      	b.n	8003b1c <UART_SetConfig+0x348>
 8003880:	2304      	movs	r3, #4
 8003882:	77fb      	strb	r3, [r7, #31]
 8003884:	e14a      	b.n	8003b1c <UART_SetConfig+0x348>
 8003886:	2308      	movs	r3, #8
 8003888:	77fb      	strb	r3, [r7, #31]
 800388a:	e147      	b.n	8003b1c <UART_SetConfig+0x348>
 800388c:	2310      	movs	r3, #16
 800388e:	77fb      	strb	r3, [r7, #31]
 8003890:	e144      	b.n	8003b1c <UART_SetConfig+0x348>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a83      	ldr	r2, [pc, #524]	; (8003aa4 <UART_SetConfig+0x2d0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d132      	bne.n	8003902 <UART_SetConfig+0x12e>
 800389c:	4b80      	ldr	r3, [pc, #512]	; (8003aa0 <UART_SetConfig+0x2cc>)
 800389e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038a2:	f003 030c 	and.w	r3, r3, #12
 80038a6:	2b0c      	cmp	r3, #12
 80038a8:	d828      	bhi.n	80038fc <UART_SetConfig+0x128>
 80038aa:	a201      	add	r2, pc, #4	; (adr r2, 80038b0 <UART_SetConfig+0xdc>)
 80038ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038b0:	080038e5 	.word	0x080038e5
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038fd 	.word	0x080038fd
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038f1 	.word	0x080038f1
 80038c4:	080038fd 	.word	0x080038fd
 80038c8:	080038fd 	.word	0x080038fd
 80038cc:	080038fd 	.word	0x080038fd
 80038d0:	080038eb 	.word	0x080038eb
 80038d4:	080038fd 	.word	0x080038fd
 80038d8:	080038fd 	.word	0x080038fd
 80038dc:	080038fd 	.word	0x080038fd
 80038e0:	080038f7 	.word	0x080038f7
 80038e4:	2300      	movs	r3, #0
 80038e6:	77fb      	strb	r3, [r7, #31]
 80038e8:	e118      	b.n	8003b1c <UART_SetConfig+0x348>
 80038ea:	2302      	movs	r3, #2
 80038ec:	77fb      	strb	r3, [r7, #31]
 80038ee:	e115      	b.n	8003b1c <UART_SetConfig+0x348>
 80038f0:	2304      	movs	r3, #4
 80038f2:	77fb      	strb	r3, [r7, #31]
 80038f4:	e112      	b.n	8003b1c <UART_SetConfig+0x348>
 80038f6:	2308      	movs	r3, #8
 80038f8:	77fb      	strb	r3, [r7, #31]
 80038fa:	e10f      	b.n	8003b1c <UART_SetConfig+0x348>
 80038fc:	2310      	movs	r3, #16
 80038fe:	77fb      	strb	r3, [r7, #31]
 8003900:	e10c      	b.n	8003b1c <UART_SetConfig+0x348>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a68      	ldr	r2, [pc, #416]	; (8003aa8 <UART_SetConfig+0x2d4>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d120      	bne.n	800394e <UART_SetConfig+0x17a>
 800390c:	4b64      	ldr	r3, [pc, #400]	; (8003aa0 <UART_SetConfig+0x2cc>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003916:	2b30      	cmp	r3, #48	; 0x30
 8003918:	d013      	beq.n	8003942 <UART_SetConfig+0x16e>
 800391a:	2b30      	cmp	r3, #48	; 0x30
 800391c:	d814      	bhi.n	8003948 <UART_SetConfig+0x174>
 800391e:	2b20      	cmp	r3, #32
 8003920:	d009      	beq.n	8003936 <UART_SetConfig+0x162>
 8003922:	2b20      	cmp	r3, #32
 8003924:	d810      	bhi.n	8003948 <UART_SetConfig+0x174>
 8003926:	2b00      	cmp	r3, #0
 8003928:	d002      	beq.n	8003930 <UART_SetConfig+0x15c>
 800392a:	2b10      	cmp	r3, #16
 800392c:	d006      	beq.n	800393c <UART_SetConfig+0x168>
 800392e:	e00b      	b.n	8003948 <UART_SetConfig+0x174>
 8003930:	2300      	movs	r3, #0
 8003932:	77fb      	strb	r3, [r7, #31]
 8003934:	e0f2      	b.n	8003b1c <UART_SetConfig+0x348>
 8003936:	2302      	movs	r3, #2
 8003938:	77fb      	strb	r3, [r7, #31]
 800393a:	e0ef      	b.n	8003b1c <UART_SetConfig+0x348>
 800393c:	2304      	movs	r3, #4
 800393e:	77fb      	strb	r3, [r7, #31]
 8003940:	e0ec      	b.n	8003b1c <UART_SetConfig+0x348>
 8003942:	2308      	movs	r3, #8
 8003944:	77fb      	strb	r3, [r7, #31]
 8003946:	e0e9      	b.n	8003b1c <UART_SetConfig+0x348>
 8003948:	2310      	movs	r3, #16
 800394a:	77fb      	strb	r3, [r7, #31]
 800394c:	e0e6      	b.n	8003b1c <UART_SetConfig+0x348>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	4a56      	ldr	r2, [pc, #344]	; (8003aac <UART_SetConfig+0x2d8>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d120      	bne.n	800399a <UART_SetConfig+0x1c6>
 8003958:	4b51      	ldr	r3, [pc, #324]	; (8003aa0 <UART_SetConfig+0x2cc>)
 800395a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800395e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003962:	2bc0      	cmp	r3, #192	; 0xc0
 8003964:	d013      	beq.n	800398e <UART_SetConfig+0x1ba>
 8003966:	2bc0      	cmp	r3, #192	; 0xc0
 8003968:	d814      	bhi.n	8003994 <UART_SetConfig+0x1c0>
 800396a:	2b80      	cmp	r3, #128	; 0x80
 800396c:	d009      	beq.n	8003982 <UART_SetConfig+0x1ae>
 800396e:	2b80      	cmp	r3, #128	; 0x80
 8003970:	d810      	bhi.n	8003994 <UART_SetConfig+0x1c0>
 8003972:	2b00      	cmp	r3, #0
 8003974:	d002      	beq.n	800397c <UART_SetConfig+0x1a8>
 8003976:	2b40      	cmp	r3, #64	; 0x40
 8003978:	d006      	beq.n	8003988 <UART_SetConfig+0x1b4>
 800397a:	e00b      	b.n	8003994 <UART_SetConfig+0x1c0>
 800397c:	2300      	movs	r3, #0
 800397e:	77fb      	strb	r3, [r7, #31]
 8003980:	e0cc      	b.n	8003b1c <UART_SetConfig+0x348>
 8003982:	2302      	movs	r3, #2
 8003984:	77fb      	strb	r3, [r7, #31]
 8003986:	e0c9      	b.n	8003b1c <UART_SetConfig+0x348>
 8003988:	2304      	movs	r3, #4
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e0c6      	b.n	8003b1c <UART_SetConfig+0x348>
 800398e:	2308      	movs	r3, #8
 8003990:	77fb      	strb	r3, [r7, #31]
 8003992:	e0c3      	b.n	8003b1c <UART_SetConfig+0x348>
 8003994:	2310      	movs	r3, #16
 8003996:	77fb      	strb	r3, [r7, #31]
 8003998:	e0c0      	b.n	8003b1c <UART_SetConfig+0x348>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a44      	ldr	r2, [pc, #272]	; (8003ab0 <UART_SetConfig+0x2dc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d125      	bne.n	80039f0 <UART_SetConfig+0x21c>
 80039a4:	4b3e      	ldr	r3, [pc, #248]	; (8003aa0 <UART_SetConfig+0x2cc>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b2:	d017      	beq.n	80039e4 <UART_SetConfig+0x210>
 80039b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039b8:	d817      	bhi.n	80039ea <UART_SetConfig+0x216>
 80039ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039be:	d00b      	beq.n	80039d8 <UART_SetConfig+0x204>
 80039c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80039c4:	d811      	bhi.n	80039ea <UART_SetConfig+0x216>
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <UART_SetConfig+0x1fe>
 80039ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039ce:	d006      	beq.n	80039de <UART_SetConfig+0x20a>
 80039d0:	e00b      	b.n	80039ea <UART_SetConfig+0x216>
 80039d2:	2300      	movs	r3, #0
 80039d4:	77fb      	strb	r3, [r7, #31]
 80039d6:	e0a1      	b.n	8003b1c <UART_SetConfig+0x348>
 80039d8:	2302      	movs	r3, #2
 80039da:	77fb      	strb	r3, [r7, #31]
 80039dc:	e09e      	b.n	8003b1c <UART_SetConfig+0x348>
 80039de:	2304      	movs	r3, #4
 80039e0:	77fb      	strb	r3, [r7, #31]
 80039e2:	e09b      	b.n	8003b1c <UART_SetConfig+0x348>
 80039e4:	2308      	movs	r3, #8
 80039e6:	77fb      	strb	r3, [r7, #31]
 80039e8:	e098      	b.n	8003b1c <UART_SetConfig+0x348>
 80039ea:	2310      	movs	r3, #16
 80039ec:	77fb      	strb	r3, [r7, #31]
 80039ee:	e095      	b.n	8003b1c <UART_SetConfig+0x348>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a2f      	ldr	r2, [pc, #188]	; (8003ab4 <UART_SetConfig+0x2e0>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d125      	bne.n	8003a46 <UART_SetConfig+0x272>
 80039fa:	4b29      	ldr	r3, [pc, #164]	; (8003aa0 <UART_SetConfig+0x2cc>)
 80039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003a04:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a08:	d017      	beq.n	8003a3a <UART_SetConfig+0x266>
 8003a0a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003a0e:	d817      	bhi.n	8003a40 <UART_SetConfig+0x26c>
 8003a10:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a14:	d00b      	beq.n	8003a2e <UART_SetConfig+0x25a>
 8003a16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a1a:	d811      	bhi.n	8003a40 <UART_SetConfig+0x26c>
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d003      	beq.n	8003a28 <UART_SetConfig+0x254>
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d006      	beq.n	8003a34 <UART_SetConfig+0x260>
 8003a26:	e00b      	b.n	8003a40 <UART_SetConfig+0x26c>
 8003a28:	2301      	movs	r3, #1
 8003a2a:	77fb      	strb	r3, [r7, #31]
 8003a2c:	e076      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a2e:	2302      	movs	r3, #2
 8003a30:	77fb      	strb	r3, [r7, #31]
 8003a32:	e073      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a34:	2304      	movs	r3, #4
 8003a36:	77fb      	strb	r3, [r7, #31]
 8003a38:	e070      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a3a:	2308      	movs	r3, #8
 8003a3c:	77fb      	strb	r3, [r7, #31]
 8003a3e:	e06d      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a40:	2310      	movs	r3, #16
 8003a42:	77fb      	strb	r3, [r7, #31]
 8003a44:	e06a      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a1b      	ldr	r2, [pc, #108]	; (8003ab8 <UART_SetConfig+0x2e4>)
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d138      	bne.n	8003ac2 <UART_SetConfig+0x2ee>
 8003a50:	4b13      	ldr	r3, [pc, #76]	; (8003aa0 <UART_SetConfig+0x2cc>)
 8003a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a56:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003a5a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a5e:	d017      	beq.n	8003a90 <UART_SetConfig+0x2bc>
 8003a60:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a64:	d82a      	bhi.n	8003abc <UART_SetConfig+0x2e8>
 8003a66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a6a:	d00b      	beq.n	8003a84 <UART_SetConfig+0x2b0>
 8003a6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a70:	d824      	bhi.n	8003abc <UART_SetConfig+0x2e8>
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d003      	beq.n	8003a7e <UART_SetConfig+0x2aa>
 8003a76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a7a:	d006      	beq.n	8003a8a <UART_SetConfig+0x2b6>
 8003a7c:	e01e      	b.n	8003abc <UART_SetConfig+0x2e8>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	77fb      	strb	r3, [r7, #31]
 8003a82:	e04b      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a84:	2302      	movs	r3, #2
 8003a86:	77fb      	strb	r3, [r7, #31]
 8003a88:	e048      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a8a:	2304      	movs	r3, #4
 8003a8c:	77fb      	strb	r3, [r7, #31]
 8003a8e:	e045      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a90:	2308      	movs	r3, #8
 8003a92:	77fb      	strb	r3, [r7, #31]
 8003a94:	e042      	b.n	8003b1c <UART_SetConfig+0x348>
 8003a96:	bf00      	nop
 8003a98:	efff69f3 	.word	0xefff69f3
 8003a9c:	40011000 	.word	0x40011000
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	40004800 	.word	0x40004800
 8003aac:	40004c00 	.word	0x40004c00
 8003ab0:	40005000 	.word	0x40005000
 8003ab4:	40011400 	.word	0x40011400
 8003ab8:	40007800 	.word	0x40007800
 8003abc:	2310      	movs	r3, #16
 8003abe:	77fb      	strb	r3, [r7, #31]
 8003ac0:	e02c      	b.n	8003b1c <UART_SetConfig+0x348>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4a72      	ldr	r2, [pc, #456]	; (8003c90 <UART_SetConfig+0x4bc>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d125      	bne.n	8003b18 <UART_SetConfig+0x344>
 8003acc:	4b71      	ldr	r3, [pc, #452]	; (8003c94 <UART_SetConfig+0x4c0>)
 8003ace:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ad2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003ad6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ada:	d017      	beq.n	8003b0c <UART_SetConfig+0x338>
 8003adc:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003ae0:	d817      	bhi.n	8003b12 <UART_SetConfig+0x33e>
 8003ae2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ae6:	d00b      	beq.n	8003b00 <UART_SetConfig+0x32c>
 8003ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003aec:	d811      	bhi.n	8003b12 <UART_SetConfig+0x33e>
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d003      	beq.n	8003afa <UART_SetConfig+0x326>
 8003af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003af6:	d006      	beq.n	8003b06 <UART_SetConfig+0x332>
 8003af8:	e00b      	b.n	8003b12 <UART_SetConfig+0x33e>
 8003afa:	2300      	movs	r3, #0
 8003afc:	77fb      	strb	r3, [r7, #31]
 8003afe:	e00d      	b.n	8003b1c <UART_SetConfig+0x348>
 8003b00:	2302      	movs	r3, #2
 8003b02:	77fb      	strb	r3, [r7, #31]
 8003b04:	e00a      	b.n	8003b1c <UART_SetConfig+0x348>
 8003b06:	2304      	movs	r3, #4
 8003b08:	77fb      	strb	r3, [r7, #31]
 8003b0a:	e007      	b.n	8003b1c <UART_SetConfig+0x348>
 8003b0c:	2308      	movs	r3, #8
 8003b0e:	77fb      	strb	r3, [r7, #31]
 8003b10:	e004      	b.n	8003b1c <UART_SetConfig+0x348>
 8003b12:	2310      	movs	r3, #16
 8003b14:	77fb      	strb	r3, [r7, #31]
 8003b16:	e001      	b.n	8003b1c <UART_SetConfig+0x348>
 8003b18:	2310      	movs	r3, #16
 8003b1a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	69db      	ldr	r3, [r3, #28]
 8003b20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b24:	d15b      	bne.n	8003bde <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003b26:	7ffb      	ldrb	r3, [r7, #31]
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d828      	bhi.n	8003b7e <UART_SetConfig+0x3aa>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <UART_SetConfig+0x360>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b59 	.word	0x08003b59
 8003b38:	08003b61 	.word	0x08003b61
 8003b3c:	08003b69 	.word	0x08003b69
 8003b40:	08003b7f 	.word	0x08003b7f
 8003b44:	08003b6f 	.word	0x08003b6f
 8003b48:	08003b7f 	.word	0x08003b7f
 8003b4c:	08003b7f 	.word	0x08003b7f
 8003b50:	08003b7f 	.word	0x08003b7f
 8003b54:	08003b77 	.word	0x08003b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b58:	f7ff f91a 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003b5c:	61b8      	str	r0, [r7, #24]
        break;
 8003b5e:	e013      	b.n	8003b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b60:	f7ff f92a 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003b64:	61b8      	str	r0, [r7, #24]
        break;
 8003b66:	e00f      	b.n	8003b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b68:	4b4b      	ldr	r3, [pc, #300]	; (8003c98 <UART_SetConfig+0x4c4>)
 8003b6a:	61bb      	str	r3, [r7, #24]
        break;
 8003b6c:	e00c      	b.n	8003b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b6e:	f7ff f83d 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8003b72:	61b8      	str	r0, [r7, #24]
        break;
 8003b74:	e008      	b.n	8003b88 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b7a:	61bb      	str	r3, [r7, #24]
        break;
 8003b7c:	e004      	b.n	8003b88 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003b82:	2301      	movs	r3, #1
 8003b84:	77bb      	strb	r3, [r7, #30]
        break;
 8003b86:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003b88:	69bb      	ldr	r3, [r7, #24]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d074      	beq.n	8003c78 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003b8e:	69bb      	ldr	r3, [r7, #24]
 8003b90:	005a      	lsls	r2, r3, #1
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	441a      	add	r2, r3
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ba4:	693b      	ldr	r3, [r7, #16]
 8003ba6:	2b0f      	cmp	r3, #15
 8003ba8:	d916      	bls.n	8003bd8 <UART_SetConfig+0x404>
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bb0:	d212      	bcs.n	8003bd8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bb2:	693b      	ldr	r3, [r7, #16]
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	f023 030f 	bic.w	r3, r3, #15
 8003bba:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003bbc:	693b      	ldr	r3, [r7, #16]
 8003bbe:	085b      	lsrs	r3, r3, #1
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	f003 0307 	and.w	r3, r3, #7
 8003bc6:	b29a      	uxth	r2, r3
 8003bc8:	89fb      	ldrh	r3, [r7, #14]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	89fa      	ldrh	r2, [r7, #14]
 8003bd4:	60da      	str	r2, [r3, #12]
 8003bd6:	e04f      	b.n	8003c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	77bb      	strb	r3, [r7, #30]
 8003bdc:	e04c      	b.n	8003c78 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003bde:	7ffb      	ldrb	r3, [r7, #31]
 8003be0:	2b08      	cmp	r3, #8
 8003be2:	d828      	bhi.n	8003c36 <UART_SetConfig+0x462>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0x418>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c11 	.word	0x08003c11
 8003bf0:	08003c19 	.word	0x08003c19
 8003bf4:	08003c21 	.word	0x08003c21
 8003bf8:	08003c37 	.word	0x08003c37
 8003bfc:	08003c27 	.word	0x08003c27
 8003c00:	08003c37 	.word	0x08003c37
 8003c04:	08003c37 	.word	0x08003c37
 8003c08:	08003c37 	.word	0x08003c37
 8003c0c:	08003c2f 	.word	0x08003c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c10:	f7ff f8be 	bl	8002d90 <HAL_RCC_GetPCLK1Freq>
 8003c14:	61b8      	str	r0, [r7, #24]
        break;
 8003c16:	e013      	b.n	8003c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c18:	f7ff f8ce 	bl	8002db8 <HAL_RCC_GetPCLK2Freq>
 8003c1c:	61b8      	str	r0, [r7, #24]
        break;
 8003c1e:	e00f      	b.n	8003c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c20:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <UART_SetConfig+0x4c4>)
 8003c22:	61bb      	str	r3, [r7, #24]
        break;
 8003c24:	e00c      	b.n	8003c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c26:	f7fe ffe1 	bl	8002bec <HAL_RCC_GetSysClockFreq>
 8003c2a:	61b8      	str	r0, [r7, #24]
        break;
 8003c2c:	e008      	b.n	8003c40 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c2e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c32:	61bb      	str	r3, [r7, #24]
        break;
 8003c34:	e004      	b.n	8003c40 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003c36:	2300      	movs	r3, #0
 8003c38:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c3e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c40:	69bb      	ldr	r3, [r7, #24]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d018      	beq.n	8003c78 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	085a      	lsrs	r2, r3, #1
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	441a      	add	r2, r3
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c58:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	2b0f      	cmp	r3, #15
 8003c5e:	d909      	bls.n	8003c74 <UART_SetConfig+0x4a0>
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c66:	d205      	bcs.n	8003c74 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	b29a      	uxth	r2, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	60da      	str	r2, [r3, #12]
 8003c72:	e001      	b.n	8003c78 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003c74:	2301      	movs	r3, #1
 8003c76:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2200      	movs	r2, #0
 8003c82:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003c84:	7fbb      	ldrb	r3, [r7, #30]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3720      	adds	r7, #32
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40007c00 	.word	0x40007c00
 8003c94:	40023800 	.word	0x40023800
 8003c98:	00f42400 	.word	0x00f42400

08003c9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	b083      	sub	sp, #12
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00a      	beq.n	8003cc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	430a      	orrs	r2, r1
 8003cc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d00a      	beq.n	8003ce8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	430a      	orrs	r2, r1
 8003ce6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cec:	f003 0304 	and.w	r3, r3, #4
 8003cf0:	2b00      	cmp	r3, #0
 8003cf2:	d00a      	beq.n	8003d0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0e:	f003 0308 	and.w	r3, r3, #8
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d00a      	beq.n	8003d2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d30:	f003 0310 	and.w	r3, r3, #16
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d00a      	beq.n	8003d4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	430a      	orrs	r2, r1
 8003d4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d52:	f003 0320 	and.w	r3, r3, #32
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d00a      	beq.n	8003d70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	430a      	orrs	r2, r1
 8003d6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d01a      	beq.n	8003db2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d10a      	bne.n	8003db2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	685b      	ldr	r3, [r3, #4]
 8003da2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	430a      	orrs	r2, r1
 8003db0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	605a      	str	r2, [r3, #4]
  }
}
 8003dd4:	bf00      	nop
 8003dd6:	370c      	adds	r7, #12
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dde:	4770      	bx	lr

08003de0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b086      	sub	sp, #24
 8003de4:	af02      	add	r7, sp, #8
 8003de6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003df0:	f7fd f8c8 	bl	8000f84 <HAL_GetTick>
 8003df4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0308 	and.w	r3, r3, #8
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d10e      	bne.n	8003e22 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e04:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e08:	9300      	str	r3, [sp, #0]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e12:	6878      	ldr	r0, [r7, #4]
 8003e14:	f000 f831 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d001      	beq.n	8003e22 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e027      	b.n	8003e72 <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0304 	and.w	r3, r3, #4
 8003e2c:	2b04      	cmp	r3, #4
 8003e2e:	d10e      	bne.n	8003e4e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f81b 	bl	8003e7a <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e011      	b.n	8003e72 <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2200      	movs	r2, #0
 8003e6c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003e70:	2300      	movs	r3, #0
}
 8003e72:	4618      	mov	r0, r3
 8003e74:	3710      	adds	r7, #16
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}

08003e7a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e7a:	b580      	push	{r7, lr}
 8003e7c:	b09c      	sub	sp, #112	; 0x70
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	60f8      	str	r0, [r7, #12]
 8003e82:	60b9      	str	r1, [r7, #8]
 8003e84:	603b      	str	r3, [r7, #0]
 8003e86:	4613      	mov	r3, r2
 8003e88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e8a:	e0a7      	b.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e92:	f000 80a3 	beq.w	8003fdc <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e96:	f7fd f875 	bl	8000f84 <HAL_GetTick>
 8003e9a:	4602      	mov	r2, r0
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	1ad3      	subs	r3, r2, r3
 8003ea0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ea2:	429a      	cmp	r2, r3
 8003ea4:	d302      	bcc.n	8003eac <UART_WaitOnFlagUntilTimeout+0x32>
 8003ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d13f      	bne.n	8003f2c <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003eb4:	e853 3f00 	ldrex	r3, [r3]
 8003eb8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003eba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ebc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ec0:	667b      	str	r3, [r7, #100]	; 0x64
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	461a      	mov	r2, r3
 8003ec8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eca:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ecc:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ece:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ed0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ed2:	e841 2300 	strex	r3, r2, [r1]
 8003ed6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ed8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d1e6      	bne.n	8003eac <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3308      	adds	r3, #8
 8003ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef0:	f023 0301 	bic.w	r3, r3, #1
 8003ef4:	663b      	str	r3, [r7, #96]	; 0x60
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	3308      	adds	r3, #8
 8003efc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003efe:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e5      	bne.n	8003ede <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	2220      	movs	r2, #32
 8003f1c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2200      	movs	r2, #0
 8003f24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e068      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f003 0304 	and.w	r3, r3, #4
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d050      	beq.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	69db      	ldr	r3, [r3, #28]
 8003f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f48:	d148      	bne.n	8003fdc <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f52:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f5c:	e853 3f00 	ldrex	r3, [r3]
 8003f60:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f64:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	461a      	mov	r2, r3
 8003f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f72:	637b      	str	r3, [r7, #52]	; 0x34
 8003f74:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f76:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f7a:	e841 2300 	strex	r3, r2, [r1]
 8003f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d1e6      	bne.n	8003f54 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3308      	adds	r3, #8
 8003f8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	e853 3f00 	ldrex	r3, [r3]
 8003f94:	613b      	str	r3, [r7, #16]
   return(result);
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	f023 0301 	bic.w	r3, r3, #1
 8003f9c:	66bb      	str	r3, [r7, #104]	; 0x68
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	3308      	adds	r3, #8
 8003fa4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fa6:	623a      	str	r2, [r7, #32]
 8003fa8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	69f9      	ldr	r1, [r7, #28]
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	e841 2300 	strex	r3, r2, [r1]
 8003fb2:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fb4:	69bb      	ldr	r3, [r7, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d1e5      	bne.n	8003f86 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2220      	movs	r2, #32
 8003fbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	2220      	movs	r2, #32
 8003fc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	2220      	movs	r2, #32
 8003fcc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e010      	b.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	69da      	ldr	r2, [r3, #28]
 8003fe2:	68bb      	ldr	r3, [r7, #8]
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	68ba      	ldr	r2, [r7, #8]
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	bf0c      	ite	eq
 8003fec:	2301      	moveq	r3, #1
 8003fee:	2300      	movne	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	461a      	mov	r2, r3
 8003ff4:	79fb      	ldrb	r3, [r7, #7]
 8003ff6:	429a      	cmp	r2, r3
 8003ff8:	f43f af48 	beq.w	8003e8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3770      	adds	r7, #112	; 0x70
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <siprintf>:
 8004008:	b40e      	push	{r1, r2, r3}
 800400a:	b500      	push	{lr}
 800400c:	b09c      	sub	sp, #112	; 0x70
 800400e:	ab1d      	add	r3, sp, #116	; 0x74
 8004010:	9002      	str	r0, [sp, #8]
 8004012:	9006      	str	r0, [sp, #24]
 8004014:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004018:	4809      	ldr	r0, [pc, #36]	; (8004040 <siprintf+0x38>)
 800401a:	9107      	str	r1, [sp, #28]
 800401c:	9104      	str	r1, [sp, #16]
 800401e:	4909      	ldr	r1, [pc, #36]	; (8004044 <siprintf+0x3c>)
 8004020:	f853 2b04 	ldr.w	r2, [r3], #4
 8004024:	9105      	str	r1, [sp, #20]
 8004026:	6800      	ldr	r0, [r0, #0]
 8004028:	9301      	str	r3, [sp, #4]
 800402a:	a902      	add	r1, sp, #8
 800402c:	f000 f992 	bl	8004354 <_svfiprintf_r>
 8004030:	9b02      	ldr	r3, [sp, #8]
 8004032:	2200      	movs	r2, #0
 8004034:	701a      	strb	r2, [r3, #0]
 8004036:	b01c      	add	sp, #112	; 0x70
 8004038:	f85d eb04 	ldr.w	lr, [sp], #4
 800403c:	b003      	add	sp, #12
 800403e:	4770      	bx	lr
 8004040:	20000058 	.word	0x20000058
 8004044:	ffff0208 	.word	0xffff0208

08004048 <memset>:
 8004048:	4402      	add	r2, r0
 800404a:	4603      	mov	r3, r0
 800404c:	4293      	cmp	r3, r2
 800404e:	d100      	bne.n	8004052 <memset+0xa>
 8004050:	4770      	bx	lr
 8004052:	f803 1b01 	strb.w	r1, [r3], #1
 8004056:	e7f9      	b.n	800404c <memset+0x4>

08004058 <__errno>:
 8004058:	4b01      	ldr	r3, [pc, #4]	; (8004060 <__errno+0x8>)
 800405a:	6818      	ldr	r0, [r3, #0]
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	20000058 	.word	0x20000058

08004064 <__libc_init_array>:
 8004064:	b570      	push	{r4, r5, r6, lr}
 8004066:	4d0d      	ldr	r5, [pc, #52]	; (800409c <__libc_init_array+0x38>)
 8004068:	4c0d      	ldr	r4, [pc, #52]	; (80040a0 <__libc_init_array+0x3c>)
 800406a:	1b64      	subs	r4, r4, r5
 800406c:	10a4      	asrs	r4, r4, #2
 800406e:	2600      	movs	r6, #0
 8004070:	42a6      	cmp	r6, r4
 8004072:	d109      	bne.n	8004088 <__libc_init_array+0x24>
 8004074:	4d0b      	ldr	r5, [pc, #44]	; (80040a4 <__libc_init_array+0x40>)
 8004076:	4c0c      	ldr	r4, [pc, #48]	; (80040a8 <__libc_init_array+0x44>)
 8004078:	f000 fc6a 	bl	8004950 <_init>
 800407c:	1b64      	subs	r4, r4, r5
 800407e:	10a4      	asrs	r4, r4, #2
 8004080:	2600      	movs	r6, #0
 8004082:	42a6      	cmp	r6, r4
 8004084:	d105      	bne.n	8004092 <__libc_init_array+0x2e>
 8004086:	bd70      	pop	{r4, r5, r6, pc}
 8004088:	f855 3b04 	ldr.w	r3, [r5], #4
 800408c:	4798      	blx	r3
 800408e:	3601      	adds	r6, #1
 8004090:	e7ee      	b.n	8004070 <__libc_init_array+0xc>
 8004092:	f855 3b04 	ldr.w	r3, [r5], #4
 8004096:	4798      	blx	r3
 8004098:	3601      	adds	r6, #1
 800409a:	e7f2      	b.n	8004082 <__libc_init_array+0x1e>
 800409c:	080049cc 	.word	0x080049cc
 80040a0:	080049cc 	.word	0x080049cc
 80040a4:	080049cc 	.word	0x080049cc
 80040a8:	080049d0 	.word	0x080049d0

080040ac <__retarget_lock_acquire_recursive>:
 80040ac:	4770      	bx	lr

080040ae <__retarget_lock_release_recursive>:
 80040ae:	4770      	bx	lr

080040b0 <_free_r>:
 80040b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80040b2:	2900      	cmp	r1, #0
 80040b4:	d044      	beq.n	8004140 <_free_r+0x90>
 80040b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80040ba:	9001      	str	r0, [sp, #4]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	f1a1 0404 	sub.w	r4, r1, #4
 80040c2:	bfb8      	it	lt
 80040c4:	18e4      	addlt	r4, r4, r3
 80040c6:	f000 f8df 	bl	8004288 <__malloc_lock>
 80040ca:	4a1e      	ldr	r2, [pc, #120]	; (8004144 <_free_r+0x94>)
 80040cc:	9801      	ldr	r0, [sp, #4]
 80040ce:	6813      	ldr	r3, [r2, #0]
 80040d0:	b933      	cbnz	r3, 80040e0 <_free_r+0x30>
 80040d2:	6063      	str	r3, [r4, #4]
 80040d4:	6014      	str	r4, [r2, #0]
 80040d6:	b003      	add	sp, #12
 80040d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80040dc:	f000 b8da 	b.w	8004294 <__malloc_unlock>
 80040e0:	42a3      	cmp	r3, r4
 80040e2:	d908      	bls.n	80040f6 <_free_r+0x46>
 80040e4:	6825      	ldr	r5, [r4, #0]
 80040e6:	1961      	adds	r1, r4, r5
 80040e8:	428b      	cmp	r3, r1
 80040ea:	bf01      	itttt	eq
 80040ec:	6819      	ldreq	r1, [r3, #0]
 80040ee:	685b      	ldreq	r3, [r3, #4]
 80040f0:	1949      	addeq	r1, r1, r5
 80040f2:	6021      	streq	r1, [r4, #0]
 80040f4:	e7ed      	b.n	80040d2 <_free_r+0x22>
 80040f6:	461a      	mov	r2, r3
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	b10b      	cbz	r3, 8004100 <_free_r+0x50>
 80040fc:	42a3      	cmp	r3, r4
 80040fe:	d9fa      	bls.n	80040f6 <_free_r+0x46>
 8004100:	6811      	ldr	r1, [r2, #0]
 8004102:	1855      	adds	r5, r2, r1
 8004104:	42a5      	cmp	r5, r4
 8004106:	d10b      	bne.n	8004120 <_free_r+0x70>
 8004108:	6824      	ldr	r4, [r4, #0]
 800410a:	4421      	add	r1, r4
 800410c:	1854      	adds	r4, r2, r1
 800410e:	42a3      	cmp	r3, r4
 8004110:	6011      	str	r1, [r2, #0]
 8004112:	d1e0      	bne.n	80040d6 <_free_r+0x26>
 8004114:	681c      	ldr	r4, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	6053      	str	r3, [r2, #4]
 800411a:	440c      	add	r4, r1
 800411c:	6014      	str	r4, [r2, #0]
 800411e:	e7da      	b.n	80040d6 <_free_r+0x26>
 8004120:	d902      	bls.n	8004128 <_free_r+0x78>
 8004122:	230c      	movs	r3, #12
 8004124:	6003      	str	r3, [r0, #0]
 8004126:	e7d6      	b.n	80040d6 <_free_r+0x26>
 8004128:	6825      	ldr	r5, [r4, #0]
 800412a:	1961      	adds	r1, r4, r5
 800412c:	428b      	cmp	r3, r1
 800412e:	bf04      	itt	eq
 8004130:	6819      	ldreq	r1, [r3, #0]
 8004132:	685b      	ldreq	r3, [r3, #4]
 8004134:	6063      	str	r3, [r4, #4]
 8004136:	bf04      	itt	eq
 8004138:	1949      	addeq	r1, r1, r5
 800413a:	6021      	streq	r1, [r4, #0]
 800413c:	6054      	str	r4, [r2, #4]
 800413e:	e7ca      	b.n	80040d6 <_free_r+0x26>
 8004140:	b003      	add	sp, #12
 8004142:	bd30      	pop	{r4, r5, pc}
 8004144:	20000310 	.word	0x20000310

08004148 <sbrk_aligned>:
 8004148:	b570      	push	{r4, r5, r6, lr}
 800414a:	4e0e      	ldr	r6, [pc, #56]	; (8004184 <sbrk_aligned+0x3c>)
 800414c:	460c      	mov	r4, r1
 800414e:	6831      	ldr	r1, [r6, #0]
 8004150:	4605      	mov	r5, r0
 8004152:	b911      	cbnz	r1, 800415a <sbrk_aligned+0x12>
 8004154:	f000 fba6 	bl	80048a4 <_sbrk_r>
 8004158:	6030      	str	r0, [r6, #0]
 800415a:	4621      	mov	r1, r4
 800415c:	4628      	mov	r0, r5
 800415e:	f000 fba1 	bl	80048a4 <_sbrk_r>
 8004162:	1c43      	adds	r3, r0, #1
 8004164:	d00a      	beq.n	800417c <sbrk_aligned+0x34>
 8004166:	1cc4      	adds	r4, r0, #3
 8004168:	f024 0403 	bic.w	r4, r4, #3
 800416c:	42a0      	cmp	r0, r4
 800416e:	d007      	beq.n	8004180 <sbrk_aligned+0x38>
 8004170:	1a21      	subs	r1, r4, r0
 8004172:	4628      	mov	r0, r5
 8004174:	f000 fb96 	bl	80048a4 <_sbrk_r>
 8004178:	3001      	adds	r0, #1
 800417a:	d101      	bne.n	8004180 <sbrk_aligned+0x38>
 800417c:	f04f 34ff 	mov.w	r4, #4294967295
 8004180:	4620      	mov	r0, r4
 8004182:	bd70      	pop	{r4, r5, r6, pc}
 8004184:	20000314 	.word	0x20000314

08004188 <_malloc_r>:
 8004188:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800418c:	1ccd      	adds	r5, r1, #3
 800418e:	f025 0503 	bic.w	r5, r5, #3
 8004192:	3508      	adds	r5, #8
 8004194:	2d0c      	cmp	r5, #12
 8004196:	bf38      	it	cc
 8004198:	250c      	movcc	r5, #12
 800419a:	2d00      	cmp	r5, #0
 800419c:	4607      	mov	r7, r0
 800419e:	db01      	blt.n	80041a4 <_malloc_r+0x1c>
 80041a0:	42a9      	cmp	r1, r5
 80041a2:	d905      	bls.n	80041b0 <_malloc_r+0x28>
 80041a4:	230c      	movs	r3, #12
 80041a6:	603b      	str	r3, [r7, #0]
 80041a8:	2600      	movs	r6, #0
 80041aa:	4630      	mov	r0, r6
 80041ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80041b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004284 <_malloc_r+0xfc>
 80041b4:	f000 f868 	bl	8004288 <__malloc_lock>
 80041b8:	f8d8 3000 	ldr.w	r3, [r8]
 80041bc:	461c      	mov	r4, r3
 80041be:	bb5c      	cbnz	r4, 8004218 <_malloc_r+0x90>
 80041c0:	4629      	mov	r1, r5
 80041c2:	4638      	mov	r0, r7
 80041c4:	f7ff ffc0 	bl	8004148 <sbrk_aligned>
 80041c8:	1c43      	adds	r3, r0, #1
 80041ca:	4604      	mov	r4, r0
 80041cc:	d155      	bne.n	800427a <_malloc_r+0xf2>
 80041ce:	f8d8 4000 	ldr.w	r4, [r8]
 80041d2:	4626      	mov	r6, r4
 80041d4:	2e00      	cmp	r6, #0
 80041d6:	d145      	bne.n	8004264 <_malloc_r+0xdc>
 80041d8:	2c00      	cmp	r4, #0
 80041da:	d048      	beq.n	800426e <_malloc_r+0xe6>
 80041dc:	6823      	ldr	r3, [r4, #0]
 80041de:	4631      	mov	r1, r6
 80041e0:	4638      	mov	r0, r7
 80041e2:	eb04 0903 	add.w	r9, r4, r3
 80041e6:	f000 fb5d 	bl	80048a4 <_sbrk_r>
 80041ea:	4581      	cmp	r9, r0
 80041ec:	d13f      	bne.n	800426e <_malloc_r+0xe6>
 80041ee:	6821      	ldr	r1, [r4, #0]
 80041f0:	1a6d      	subs	r5, r5, r1
 80041f2:	4629      	mov	r1, r5
 80041f4:	4638      	mov	r0, r7
 80041f6:	f7ff ffa7 	bl	8004148 <sbrk_aligned>
 80041fa:	3001      	adds	r0, #1
 80041fc:	d037      	beq.n	800426e <_malloc_r+0xe6>
 80041fe:	6823      	ldr	r3, [r4, #0]
 8004200:	442b      	add	r3, r5
 8004202:	6023      	str	r3, [r4, #0]
 8004204:	f8d8 3000 	ldr.w	r3, [r8]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d038      	beq.n	800427e <_malloc_r+0xf6>
 800420c:	685a      	ldr	r2, [r3, #4]
 800420e:	42a2      	cmp	r2, r4
 8004210:	d12b      	bne.n	800426a <_malloc_r+0xe2>
 8004212:	2200      	movs	r2, #0
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	e00f      	b.n	8004238 <_malloc_r+0xb0>
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	1b52      	subs	r2, r2, r5
 800421c:	d41f      	bmi.n	800425e <_malloc_r+0xd6>
 800421e:	2a0b      	cmp	r2, #11
 8004220:	d917      	bls.n	8004252 <_malloc_r+0xca>
 8004222:	1961      	adds	r1, r4, r5
 8004224:	42a3      	cmp	r3, r4
 8004226:	6025      	str	r5, [r4, #0]
 8004228:	bf18      	it	ne
 800422a:	6059      	strne	r1, [r3, #4]
 800422c:	6863      	ldr	r3, [r4, #4]
 800422e:	bf08      	it	eq
 8004230:	f8c8 1000 	streq.w	r1, [r8]
 8004234:	5162      	str	r2, [r4, r5]
 8004236:	604b      	str	r3, [r1, #4]
 8004238:	4638      	mov	r0, r7
 800423a:	f104 060b 	add.w	r6, r4, #11
 800423e:	f000 f829 	bl	8004294 <__malloc_unlock>
 8004242:	f026 0607 	bic.w	r6, r6, #7
 8004246:	1d23      	adds	r3, r4, #4
 8004248:	1af2      	subs	r2, r6, r3
 800424a:	d0ae      	beq.n	80041aa <_malloc_r+0x22>
 800424c:	1b9b      	subs	r3, r3, r6
 800424e:	50a3      	str	r3, [r4, r2]
 8004250:	e7ab      	b.n	80041aa <_malloc_r+0x22>
 8004252:	42a3      	cmp	r3, r4
 8004254:	6862      	ldr	r2, [r4, #4]
 8004256:	d1dd      	bne.n	8004214 <_malloc_r+0x8c>
 8004258:	f8c8 2000 	str.w	r2, [r8]
 800425c:	e7ec      	b.n	8004238 <_malloc_r+0xb0>
 800425e:	4623      	mov	r3, r4
 8004260:	6864      	ldr	r4, [r4, #4]
 8004262:	e7ac      	b.n	80041be <_malloc_r+0x36>
 8004264:	4634      	mov	r4, r6
 8004266:	6876      	ldr	r6, [r6, #4]
 8004268:	e7b4      	b.n	80041d4 <_malloc_r+0x4c>
 800426a:	4613      	mov	r3, r2
 800426c:	e7cc      	b.n	8004208 <_malloc_r+0x80>
 800426e:	230c      	movs	r3, #12
 8004270:	603b      	str	r3, [r7, #0]
 8004272:	4638      	mov	r0, r7
 8004274:	f000 f80e 	bl	8004294 <__malloc_unlock>
 8004278:	e797      	b.n	80041aa <_malloc_r+0x22>
 800427a:	6025      	str	r5, [r4, #0]
 800427c:	e7dc      	b.n	8004238 <_malloc_r+0xb0>
 800427e:	605b      	str	r3, [r3, #4]
 8004280:	deff      	udf	#255	; 0xff
 8004282:	bf00      	nop
 8004284:	20000310 	.word	0x20000310

08004288 <__malloc_lock>:
 8004288:	4801      	ldr	r0, [pc, #4]	; (8004290 <__malloc_lock+0x8>)
 800428a:	f7ff bf0f 	b.w	80040ac <__retarget_lock_acquire_recursive>
 800428e:	bf00      	nop
 8004290:	2000030c 	.word	0x2000030c

08004294 <__malloc_unlock>:
 8004294:	4801      	ldr	r0, [pc, #4]	; (800429c <__malloc_unlock+0x8>)
 8004296:	f7ff bf0a 	b.w	80040ae <__retarget_lock_release_recursive>
 800429a:	bf00      	nop
 800429c:	2000030c 	.word	0x2000030c

080042a0 <__ssputs_r>:
 80042a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80042a4:	688e      	ldr	r6, [r1, #8]
 80042a6:	461f      	mov	r7, r3
 80042a8:	42be      	cmp	r6, r7
 80042aa:	680b      	ldr	r3, [r1, #0]
 80042ac:	4682      	mov	sl, r0
 80042ae:	460c      	mov	r4, r1
 80042b0:	4690      	mov	r8, r2
 80042b2:	d82c      	bhi.n	800430e <__ssputs_r+0x6e>
 80042b4:	898a      	ldrh	r2, [r1, #12]
 80042b6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80042ba:	d026      	beq.n	800430a <__ssputs_r+0x6a>
 80042bc:	6965      	ldr	r5, [r4, #20]
 80042be:	6909      	ldr	r1, [r1, #16]
 80042c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80042c4:	eba3 0901 	sub.w	r9, r3, r1
 80042c8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80042cc:	1c7b      	adds	r3, r7, #1
 80042ce:	444b      	add	r3, r9
 80042d0:	106d      	asrs	r5, r5, #1
 80042d2:	429d      	cmp	r5, r3
 80042d4:	bf38      	it	cc
 80042d6:	461d      	movcc	r5, r3
 80042d8:	0553      	lsls	r3, r2, #21
 80042da:	d527      	bpl.n	800432c <__ssputs_r+0x8c>
 80042dc:	4629      	mov	r1, r5
 80042de:	f7ff ff53 	bl	8004188 <_malloc_r>
 80042e2:	4606      	mov	r6, r0
 80042e4:	b360      	cbz	r0, 8004340 <__ssputs_r+0xa0>
 80042e6:	6921      	ldr	r1, [r4, #16]
 80042e8:	464a      	mov	r2, r9
 80042ea:	f000 faeb 	bl	80048c4 <memcpy>
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042f8:	81a3      	strh	r3, [r4, #12]
 80042fa:	6126      	str	r6, [r4, #16]
 80042fc:	6165      	str	r5, [r4, #20]
 80042fe:	444e      	add	r6, r9
 8004300:	eba5 0509 	sub.w	r5, r5, r9
 8004304:	6026      	str	r6, [r4, #0]
 8004306:	60a5      	str	r5, [r4, #8]
 8004308:	463e      	mov	r6, r7
 800430a:	42be      	cmp	r6, r7
 800430c:	d900      	bls.n	8004310 <__ssputs_r+0x70>
 800430e:	463e      	mov	r6, r7
 8004310:	6820      	ldr	r0, [r4, #0]
 8004312:	4632      	mov	r2, r6
 8004314:	4641      	mov	r1, r8
 8004316:	f000 faab 	bl	8004870 <memmove>
 800431a:	68a3      	ldr	r3, [r4, #8]
 800431c:	1b9b      	subs	r3, r3, r6
 800431e:	60a3      	str	r3, [r4, #8]
 8004320:	6823      	ldr	r3, [r4, #0]
 8004322:	4433      	add	r3, r6
 8004324:	6023      	str	r3, [r4, #0]
 8004326:	2000      	movs	r0, #0
 8004328:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800432c:	462a      	mov	r2, r5
 800432e:	f000 fad7 	bl	80048e0 <_realloc_r>
 8004332:	4606      	mov	r6, r0
 8004334:	2800      	cmp	r0, #0
 8004336:	d1e0      	bne.n	80042fa <__ssputs_r+0x5a>
 8004338:	6921      	ldr	r1, [r4, #16]
 800433a:	4650      	mov	r0, sl
 800433c:	f7ff feb8 	bl	80040b0 <_free_r>
 8004340:	230c      	movs	r3, #12
 8004342:	f8ca 3000 	str.w	r3, [sl]
 8004346:	89a3      	ldrh	r3, [r4, #12]
 8004348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800434c:	81a3      	strh	r3, [r4, #12]
 800434e:	f04f 30ff 	mov.w	r0, #4294967295
 8004352:	e7e9      	b.n	8004328 <__ssputs_r+0x88>

08004354 <_svfiprintf_r>:
 8004354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004358:	4698      	mov	r8, r3
 800435a:	898b      	ldrh	r3, [r1, #12]
 800435c:	061b      	lsls	r3, r3, #24
 800435e:	b09d      	sub	sp, #116	; 0x74
 8004360:	4607      	mov	r7, r0
 8004362:	460d      	mov	r5, r1
 8004364:	4614      	mov	r4, r2
 8004366:	d50e      	bpl.n	8004386 <_svfiprintf_r+0x32>
 8004368:	690b      	ldr	r3, [r1, #16]
 800436a:	b963      	cbnz	r3, 8004386 <_svfiprintf_r+0x32>
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	f7ff ff0b 	bl	8004188 <_malloc_r>
 8004372:	6028      	str	r0, [r5, #0]
 8004374:	6128      	str	r0, [r5, #16]
 8004376:	b920      	cbnz	r0, 8004382 <_svfiprintf_r+0x2e>
 8004378:	230c      	movs	r3, #12
 800437a:	603b      	str	r3, [r7, #0]
 800437c:	f04f 30ff 	mov.w	r0, #4294967295
 8004380:	e0d0      	b.n	8004524 <_svfiprintf_r+0x1d0>
 8004382:	2340      	movs	r3, #64	; 0x40
 8004384:	616b      	str	r3, [r5, #20]
 8004386:	2300      	movs	r3, #0
 8004388:	9309      	str	r3, [sp, #36]	; 0x24
 800438a:	2320      	movs	r3, #32
 800438c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004390:	f8cd 800c 	str.w	r8, [sp, #12]
 8004394:	2330      	movs	r3, #48	; 0x30
 8004396:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800453c <_svfiprintf_r+0x1e8>
 800439a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800439e:	f04f 0901 	mov.w	r9, #1
 80043a2:	4623      	mov	r3, r4
 80043a4:	469a      	mov	sl, r3
 80043a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043aa:	b10a      	cbz	r2, 80043b0 <_svfiprintf_r+0x5c>
 80043ac:	2a25      	cmp	r2, #37	; 0x25
 80043ae:	d1f9      	bne.n	80043a4 <_svfiprintf_r+0x50>
 80043b0:	ebba 0b04 	subs.w	fp, sl, r4
 80043b4:	d00b      	beq.n	80043ce <_svfiprintf_r+0x7a>
 80043b6:	465b      	mov	r3, fp
 80043b8:	4622      	mov	r2, r4
 80043ba:	4629      	mov	r1, r5
 80043bc:	4638      	mov	r0, r7
 80043be:	f7ff ff6f 	bl	80042a0 <__ssputs_r>
 80043c2:	3001      	adds	r0, #1
 80043c4:	f000 80a9 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043ca:	445a      	add	r2, fp
 80043cc:	9209      	str	r2, [sp, #36]	; 0x24
 80043ce:	f89a 3000 	ldrb.w	r3, [sl]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	f000 80a1 	beq.w	800451a <_svfiprintf_r+0x1c6>
 80043d8:	2300      	movs	r3, #0
 80043da:	f04f 32ff 	mov.w	r2, #4294967295
 80043de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80043e2:	f10a 0a01 	add.w	sl, sl, #1
 80043e6:	9304      	str	r3, [sp, #16]
 80043e8:	9307      	str	r3, [sp, #28]
 80043ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80043ee:	931a      	str	r3, [sp, #104]	; 0x68
 80043f0:	4654      	mov	r4, sl
 80043f2:	2205      	movs	r2, #5
 80043f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80043f8:	4850      	ldr	r0, [pc, #320]	; (800453c <_svfiprintf_r+0x1e8>)
 80043fa:	f7fb ff29 	bl	8000250 <memchr>
 80043fe:	9a04      	ldr	r2, [sp, #16]
 8004400:	b9d8      	cbnz	r0, 800443a <_svfiprintf_r+0xe6>
 8004402:	06d0      	lsls	r0, r2, #27
 8004404:	bf44      	itt	mi
 8004406:	2320      	movmi	r3, #32
 8004408:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800440c:	0711      	lsls	r1, r2, #28
 800440e:	bf44      	itt	mi
 8004410:	232b      	movmi	r3, #43	; 0x2b
 8004412:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004416:	f89a 3000 	ldrb.w	r3, [sl]
 800441a:	2b2a      	cmp	r3, #42	; 0x2a
 800441c:	d015      	beq.n	800444a <_svfiprintf_r+0xf6>
 800441e:	9a07      	ldr	r2, [sp, #28]
 8004420:	4654      	mov	r4, sl
 8004422:	2000      	movs	r0, #0
 8004424:	f04f 0c0a 	mov.w	ip, #10
 8004428:	4621      	mov	r1, r4
 800442a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800442e:	3b30      	subs	r3, #48	; 0x30
 8004430:	2b09      	cmp	r3, #9
 8004432:	d94d      	bls.n	80044d0 <_svfiprintf_r+0x17c>
 8004434:	b1b0      	cbz	r0, 8004464 <_svfiprintf_r+0x110>
 8004436:	9207      	str	r2, [sp, #28]
 8004438:	e014      	b.n	8004464 <_svfiprintf_r+0x110>
 800443a:	eba0 0308 	sub.w	r3, r0, r8
 800443e:	fa09 f303 	lsl.w	r3, r9, r3
 8004442:	4313      	orrs	r3, r2
 8004444:	9304      	str	r3, [sp, #16]
 8004446:	46a2      	mov	sl, r4
 8004448:	e7d2      	b.n	80043f0 <_svfiprintf_r+0x9c>
 800444a:	9b03      	ldr	r3, [sp, #12]
 800444c:	1d19      	adds	r1, r3, #4
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	9103      	str	r1, [sp, #12]
 8004452:	2b00      	cmp	r3, #0
 8004454:	bfbb      	ittet	lt
 8004456:	425b      	neglt	r3, r3
 8004458:	f042 0202 	orrlt.w	r2, r2, #2
 800445c:	9307      	strge	r3, [sp, #28]
 800445e:	9307      	strlt	r3, [sp, #28]
 8004460:	bfb8      	it	lt
 8004462:	9204      	strlt	r2, [sp, #16]
 8004464:	7823      	ldrb	r3, [r4, #0]
 8004466:	2b2e      	cmp	r3, #46	; 0x2e
 8004468:	d10c      	bne.n	8004484 <_svfiprintf_r+0x130>
 800446a:	7863      	ldrb	r3, [r4, #1]
 800446c:	2b2a      	cmp	r3, #42	; 0x2a
 800446e:	d134      	bne.n	80044da <_svfiprintf_r+0x186>
 8004470:	9b03      	ldr	r3, [sp, #12]
 8004472:	1d1a      	adds	r2, r3, #4
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	9203      	str	r2, [sp, #12]
 8004478:	2b00      	cmp	r3, #0
 800447a:	bfb8      	it	lt
 800447c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004480:	3402      	adds	r4, #2
 8004482:	9305      	str	r3, [sp, #20]
 8004484:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800454c <_svfiprintf_r+0x1f8>
 8004488:	7821      	ldrb	r1, [r4, #0]
 800448a:	2203      	movs	r2, #3
 800448c:	4650      	mov	r0, sl
 800448e:	f7fb fedf 	bl	8000250 <memchr>
 8004492:	b138      	cbz	r0, 80044a4 <_svfiprintf_r+0x150>
 8004494:	9b04      	ldr	r3, [sp, #16]
 8004496:	eba0 000a 	sub.w	r0, r0, sl
 800449a:	2240      	movs	r2, #64	; 0x40
 800449c:	4082      	lsls	r2, r0
 800449e:	4313      	orrs	r3, r2
 80044a0:	3401      	adds	r4, #1
 80044a2:	9304      	str	r3, [sp, #16]
 80044a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044a8:	4825      	ldr	r0, [pc, #148]	; (8004540 <_svfiprintf_r+0x1ec>)
 80044aa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80044ae:	2206      	movs	r2, #6
 80044b0:	f7fb fece 	bl	8000250 <memchr>
 80044b4:	2800      	cmp	r0, #0
 80044b6:	d038      	beq.n	800452a <_svfiprintf_r+0x1d6>
 80044b8:	4b22      	ldr	r3, [pc, #136]	; (8004544 <_svfiprintf_r+0x1f0>)
 80044ba:	bb1b      	cbnz	r3, 8004504 <_svfiprintf_r+0x1b0>
 80044bc:	9b03      	ldr	r3, [sp, #12]
 80044be:	3307      	adds	r3, #7
 80044c0:	f023 0307 	bic.w	r3, r3, #7
 80044c4:	3308      	adds	r3, #8
 80044c6:	9303      	str	r3, [sp, #12]
 80044c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044ca:	4433      	add	r3, r6
 80044cc:	9309      	str	r3, [sp, #36]	; 0x24
 80044ce:	e768      	b.n	80043a2 <_svfiprintf_r+0x4e>
 80044d0:	fb0c 3202 	mla	r2, ip, r2, r3
 80044d4:	460c      	mov	r4, r1
 80044d6:	2001      	movs	r0, #1
 80044d8:	e7a6      	b.n	8004428 <_svfiprintf_r+0xd4>
 80044da:	2300      	movs	r3, #0
 80044dc:	3401      	adds	r4, #1
 80044de:	9305      	str	r3, [sp, #20]
 80044e0:	4619      	mov	r1, r3
 80044e2:	f04f 0c0a 	mov.w	ip, #10
 80044e6:	4620      	mov	r0, r4
 80044e8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80044ec:	3a30      	subs	r2, #48	; 0x30
 80044ee:	2a09      	cmp	r2, #9
 80044f0:	d903      	bls.n	80044fa <_svfiprintf_r+0x1a6>
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0c6      	beq.n	8004484 <_svfiprintf_r+0x130>
 80044f6:	9105      	str	r1, [sp, #20]
 80044f8:	e7c4      	b.n	8004484 <_svfiprintf_r+0x130>
 80044fa:	fb0c 2101 	mla	r1, ip, r1, r2
 80044fe:	4604      	mov	r4, r0
 8004500:	2301      	movs	r3, #1
 8004502:	e7f0      	b.n	80044e6 <_svfiprintf_r+0x192>
 8004504:	ab03      	add	r3, sp, #12
 8004506:	9300      	str	r3, [sp, #0]
 8004508:	462a      	mov	r2, r5
 800450a:	4b0f      	ldr	r3, [pc, #60]	; (8004548 <_svfiprintf_r+0x1f4>)
 800450c:	a904      	add	r1, sp, #16
 800450e:	4638      	mov	r0, r7
 8004510:	f3af 8000 	nop.w
 8004514:	1c42      	adds	r2, r0, #1
 8004516:	4606      	mov	r6, r0
 8004518:	d1d6      	bne.n	80044c8 <_svfiprintf_r+0x174>
 800451a:	89ab      	ldrh	r3, [r5, #12]
 800451c:	065b      	lsls	r3, r3, #25
 800451e:	f53f af2d 	bmi.w	800437c <_svfiprintf_r+0x28>
 8004522:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004524:	b01d      	add	sp, #116	; 0x74
 8004526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800452a:	ab03      	add	r3, sp, #12
 800452c:	9300      	str	r3, [sp, #0]
 800452e:	462a      	mov	r2, r5
 8004530:	4b05      	ldr	r3, [pc, #20]	; (8004548 <_svfiprintf_r+0x1f4>)
 8004532:	a904      	add	r1, sp, #16
 8004534:	4638      	mov	r0, r7
 8004536:	f000 f879 	bl	800462c <_printf_i>
 800453a:	e7eb      	b.n	8004514 <_svfiprintf_r+0x1c0>
 800453c:	08004990 	.word	0x08004990
 8004540:	0800499a 	.word	0x0800499a
 8004544:	00000000 	.word	0x00000000
 8004548:	080042a1 	.word	0x080042a1
 800454c:	08004996 	.word	0x08004996

08004550 <_printf_common>:
 8004550:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004554:	4616      	mov	r6, r2
 8004556:	4699      	mov	r9, r3
 8004558:	688a      	ldr	r2, [r1, #8]
 800455a:	690b      	ldr	r3, [r1, #16]
 800455c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004560:	4293      	cmp	r3, r2
 8004562:	bfb8      	it	lt
 8004564:	4613      	movlt	r3, r2
 8004566:	6033      	str	r3, [r6, #0]
 8004568:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800456c:	4607      	mov	r7, r0
 800456e:	460c      	mov	r4, r1
 8004570:	b10a      	cbz	r2, 8004576 <_printf_common+0x26>
 8004572:	3301      	adds	r3, #1
 8004574:	6033      	str	r3, [r6, #0]
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	0699      	lsls	r1, r3, #26
 800457a:	bf42      	ittt	mi
 800457c:	6833      	ldrmi	r3, [r6, #0]
 800457e:	3302      	addmi	r3, #2
 8004580:	6033      	strmi	r3, [r6, #0]
 8004582:	6825      	ldr	r5, [r4, #0]
 8004584:	f015 0506 	ands.w	r5, r5, #6
 8004588:	d106      	bne.n	8004598 <_printf_common+0x48>
 800458a:	f104 0a19 	add.w	sl, r4, #25
 800458e:	68e3      	ldr	r3, [r4, #12]
 8004590:	6832      	ldr	r2, [r6, #0]
 8004592:	1a9b      	subs	r3, r3, r2
 8004594:	42ab      	cmp	r3, r5
 8004596:	dc26      	bgt.n	80045e6 <_printf_common+0x96>
 8004598:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800459c:	1e13      	subs	r3, r2, #0
 800459e:	6822      	ldr	r2, [r4, #0]
 80045a0:	bf18      	it	ne
 80045a2:	2301      	movne	r3, #1
 80045a4:	0692      	lsls	r2, r2, #26
 80045a6:	d42b      	bmi.n	8004600 <_printf_common+0xb0>
 80045a8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80045ac:	4649      	mov	r1, r9
 80045ae:	4638      	mov	r0, r7
 80045b0:	47c0      	blx	r8
 80045b2:	3001      	adds	r0, #1
 80045b4:	d01e      	beq.n	80045f4 <_printf_common+0xa4>
 80045b6:	6823      	ldr	r3, [r4, #0]
 80045b8:	6922      	ldr	r2, [r4, #16]
 80045ba:	f003 0306 	and.w	r3, r3, #6
 80045be:	2b04      	cmp	r3, #4
 80045c0:	bf02      	ittt	eq
 80045c2:	68e5      	ldreq	r5, [r4, #12]
 80045c4:	6833      	ldreq	r3, [r6, #0]
 80045c6:	1aed      	subeq	r5, r5, r3
 80045c8:	68a3      	ldr	r3, [r4, #8]
 80045ca:	bf0c      	ite	eq
 80045cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80045d0:	2500      	movne	r5, #0
 80045d2:	4293      	cmp	r3, r2
 80045d4:	bfc4      	itt	gt
 80045d6:	1a9b      	subgt	r3, r3, r2
 80045d8:	18ed      	addgt	r5, r5, r3
 80045da:	2600      	movs	r6, #0
 80045dc:	341a      	adds	r4, #26
 80045de:	42b5      	cmp	r5, r6
 80045e0:	d11a      	bne.n	8004618 <_printf_common+0xc8>
 80045e2:	2000      	movs	r0, #0
 80045e4:	e008      	b.n	80045f8 <_printf_common+0xa8>
 80045e6:	2301      	movs	r3, #1
 80045e8:	4652      	mov	r2, sl
 80045ea:	4649      	mov	r1, r9
 80045ec:	4638      	mov	r0, r7
 80045ee:	47c0      	blx	r8
 80045f0:	3001      	adds	r0, #1
 80045f2:	d103      	bne.n	80045fc <_printf_common+0xac>
 80045f4:	f04f 30ff 	mov.w	r0, #4294967295
 80045f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045fc:	3501      	adds	r5, #1
 80045fe:	e7c6      	b.n	800458e <_printf_common+0x3e>
 8004600:	18e1      	adds	r1, r4, r3
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	2030      	movs	r0, #48	; 0x30
 8004606:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800460a:	4422      	add	r2, r4
 800460c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004610:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004614:	3302      	adds	r3, #2
 8004616:	e7c7      	b.n	80045a8 <_printf_common+0x58>
 8004618:	2301      	movs	r3, #1
 800461a:	4622      	mov	r2, r4
 800461c:	4649      	mov	r1, r9
 800461e:	4638      	mov	r0, r7
 8004620:	47c0      	blx	r8
 8004622:	3001      	adds	r0, #1
 8004624:	d0e6      	beq.n	80045f4 <_printf_common+0xa4>
 8004626:	3601      	adds	r6, #1
 8004628:	e7d9      	b.n	80045de <_printf_common+0x8e>
	...

0800462c <_printf_i>:
 800462c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004630:	7e0f      	ldrb	r7, [r1, #24]
 8004632:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004634:	2f78      	cmp	r7, #120	; 0x78
 8004636:	4691      	mov	r9, r2
 8004638:	4680      	mov	r8, r0
 800463a:	460c      	mov	r4, r1
 800463c:	469a      	mov	sl, r3
 800463e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004642:	d807      	bhi.n	8004654 <_printf_i+0x28>
 8004644:	2f62      	cmp	r7, #98	; 0x62
 8004646:	d80a      	bhi.n	800465e <_printf_i+0x32>
 8004648:	2f00      	cmp	r7, #0
 800464a:	f000 80d4 	beq.w	80047f6 <_printf_i+0x1ca>
 800464e:	2f58      	cmp	r7, #88	; 0x58
 8004650:	f000 80c0 	beq.w	80047d4 <_printf_i+0x1a8>
 8004654:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004658:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800465c:	e03a      	b.n	80046d4 <_printf_i+0xa8>
 800465e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004662:	2b15      	cmp	r3, #21
 8004664:	d8f6      	bhi.n	8004654 <_printf_i+0x28>
 8004666:	a101      	add	r1, pc, #4	; (adr r1, 800466c <_printf_i+0x40>)
 8004668:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800466c:	080046c5 	.word	0x080046c5
 8004670:	080046d9 	.word	0x080046d9
 8004674:	08004655 	.word	0x08004655
 8004678:	08004655 	.word	0x08004655
 800467c:	08004655 	.word	0x08004655
 8004680:	08004655 	.word	0x08004655
 8004684:	080046d9 	.word	0x080046d9
 8004688:	08004655 	.word	0x08004655
 800468c:	08004655 	.word	0x08004655
 8004690:	08004655 	.word	0x08004655
 8004694:	08004655 	.word	0x08004655
 8004698:	080047dd 	.word	0x080047dd
 800469c:	08004705 	.word	0x08004705
 80046a0:	08004797 	.word	0x08004797
 80046a4:	08004655 	.word	0x08004655
 80046a8:	08004655 	.word	0x08004655
 80046ac:	080047ff 	.word	0x080047ff
 80046b0:	08004655 	.word	0x08004655
 80046b4:	08004705 	.word	0x08004705
 80046b8:	08004655 	.word	0x08004655
 80046bc:	08004655 	.word	0x08004655
 80046c0:	0800479f 	.word	0x0800479f
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	1d1a      	adds	r2, r3, #4
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	602a      	str	r2, [r5, #0]
 80046cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046d0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046d4:	2301      	movs	r3, #1
 80046d6:	e09f      	b.n	8004818 <_printf_i+0x1ec>
 80046d8:	6820      	ldr	r0, [r4, #0]
 80046da:	682b      	ldr	r3, [r5, #0]
 80046dc:	0607      	lsls	r7, r0, #24
 80046de:	f103 0104 	add.w	r1, r3, #4
 80046e2:	6029      	str	r1, [r5, #0]
 80046e4:	d501      	bpl.n	80046ea <_printf_i+0xbe>
 80046e6:	681e      	ldr	r6, [r3, #0]
 80046e8:	e003      	b.n	80046f2 <_printf_i+0xc6>
 80046ea:	0646      	lsls	r6, r0, #25
 80046ec:	d5fb      	bpl.n	80046e6 <_printf_i+0xba>
 80046ee:	f9b3 6000 	ldrsh.w	r6, [r3]
 80046f2:	2e00      	cmp	r6, #0
 80046f4:	da03      	bge.n	80046fe <_printf_i+0xd2>
 80046f6:	232d      	movs	r3, #45	; 0x2d
 80046f8:	4276      	negs	r6, r6
 80046fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046fe:	485a      	ldr	r0, [pc, #360]	; (8004868 <_printf_i+0x23c>)
 8004700:	230a      	movs	r3, #10
 8004702:	e012      	b.n	800472a <_printf_i+0xfe>
 8004704:	682b      	ldr	r3, [r5, #0]
 8004706:	6820      	ldr	r0, [r4, #0]
 8004708:	1d19      	adds	r1, r3, #4
 800470a:	6029      	str	r1, [r5, #0]
 800470c:	0605      	lsls	r5, r0, #24
 800470e:	d501      	bpl.n	8004714 <_printf_i+0xe8>
 8004710:	681e      	ldr	r6, [r3, #0]
 8004712:	e002      	b.n	800471a <_printf_i+0xee>
 8004714:	0641      	lsls	r1, r0, #25
 8004716:	d5fb      	bpl.n	8004710 <_printf_i+0xe4>
 8004718:	881e      	ldrh	r6, [r3, #0]
 800471a:	4853      	ldr	r0, [pc, #332]	; (8004868 <_printf_i+0x23c>)
 800471c:	2f6f      	cmp	r7, #111	; 0x6f
 800471e:	bf0c      	ite	eq
 8004720:	2308      	moveq	r3, #8
 8004722:	230a      	movne	r3, #10
 8004724:	2100      	movs	r1, #0
 8004726:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800472a:	6865      	ldr	r5, [r4, #4]
 800472c:	60a5      	str	r5, [r4, #8]
 800472e:	2d00      	cmp	r5, #0
 8004730:	bfa2      	ittt	ge
 8004732:	6821      	ldrge	r1, [r4, #0]
 8004734:	f021 0104 	bicge.w	r1, r1, #4
 8004738:	6021      	strge	r1, [r4, #0]
 800473a:	b90e      	cbnz	r6, 8004740 <_printf_i+0x114>
 800473c:	2d00      	cmp	r5, #0
 800473e:	d04b      	beq.n	80047d8 <_printf_i+0x1ac>
 8004740:	4615      	mov	r5, r2
 8004742:	fbb6 f1f3 	udiv	r1, r6, r3
 8004746:	fb03 6711 	mls	r7, r3, r1, r6
 800474a:	5dc7      	ldrb	r7, [r0, r7]
 800474c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004750:	4637      	mov	r7, r6
 8004752:	42bb      	cmp	r3, r7
 8004754:	460e      	mov	r6, r1
 8004756:	d9f4      	bls.n	8004742 <_printf_i+0x116>
 8004758:	2b08      	cmp	r3, #8
 800475a:	d10b      	bne.n	8004774 <_printf_i+0x148>
 800475c:	6823      	ldr	r3, [r4, #0]
 800475e:	07de      	lsls	r6, r3, #31
 8004760:	d508      	bpl.n	8004774 <_printf_i+0x148>
 8004762:	6923      	ldr	r3, [r4, #16]
 8004764:	6861      	ldr	r1, [r4, #4]
 8004766:	4299      	cmp	r1, r3
 8004768:	bfde      	ittt	le
 800476a:	2330      	movle	r3, #48	; 0x30
 800476c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004770:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004774:	1b52      	subs	r2, r2, r5
 8004776:	6122      	str	r2, [r4, #16]
 8004778:	f8cd a000 	str.w	sl, [sp]
 800477c:	464b      	mov	r3, r9
 800477e:	aa03      	add	r2, sp, #12
 8004780:	4621      	mov	r1, r4
 8004782:	4640      	mov	r0, r8
 8004784:	f7ff fee4 	bl	8004550 <_printf_common>
 8004788:	3001      	adds	r0, #1
 800478a:	d14a      	bne.n	8004822 <_printf_i+0x1f6>
 800478c:	f04f 30ff 	mov.w	r0, #4294967295
 8004790:	b004      	add	sp, #16
 8004792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	f043 0320 	orr.w	r3, r3, #32
 800479c:	6023      	str	r3, [r4, #0]
 800479e:	4833      	ldr	r0, [pc, #204]	; (800486c <_printf_i+0x240>)
 80047a0:	2778      	movs	r7, #120	; 0x78
 80047a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	6829      	ldr	r1, [r5, #0]
 80047aa:	061f      	lsls	r7, r3, #24
 80047ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80047b0:	d402      	bmi.n	80047b8 <_printf_i+0x18c>
 80047b2:	065f      	lsls	r7, r3, #25
 80047b4:	bf48      	it	mi
 80047b6:	b2b6      	uxthmi	r6, r6
 80047b8:	07df      	lsls	r7, r3, #31
 80047ba:	bf48      	it	mi
 80047bc:	f043 0320 	orrmi.w	r3, r3, #32
 80047c0:	6029      	str	r1, [r5, #0]
 80047c2:	bf48      	it	mi
 80047c4:	6023      	strmi	r3, [r4, #0]
 80047c6:	b91e      	cbnz	r6, 80047d0 <_printf_i+0x1a4>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	f023 0320 	bic.w	r3, r3, #32
 80047ce:	6023      	str	r3, [r4, #0]
 80047d0:	2310      	movs	r3, #16
 80047d2:	e7a7      	b.n	8004724 <_printf_i+0xf8>
 80047d4:	4824      	ldr	r0, [pc, #144]	; (8004868 <_printf_i+0x23c>)
 80047d6:	e7e4      	b.n	80047a2 <_printf_i+0x176>
 80047d8:	4615      	mov	r5, r2
 80047da:	e7bd      	b.n	8004758 <_printf_i+0x12c>
 80047dc:	682b      	ldr	r3, [r5, #0]
 80047de:	6826      	ldr	r6, [r4, #0]
 80047e0:	6961      	ldr	r1, [r4, #20]
 80047e2:	1d18      	adds	r0, r3, #4
 80047e4:	6028      	str	r0, [r5, #0]
 80047e6:	0635      	lsls	r5, r6, #24
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	d501      	bpl.n	80047f0 <_printf_i+0x1c4>
 80047ec:	6019      	str	r1, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <_printf_i+0x1ca>
 80047f0:	0670      	lsls	r0, r6, #25
 80047f2:	d5fb      	bpl.n	80047ec <_printf_i+0x1c0>
 80047f4:	8019      	strh	r1, [r3, #0]
 80047f6:	2300      	movs	r3, #0
 80047f8:	6123      	str	r3, [r4, #16]
 80047fa:	4615      	mov	r5, r2
 80047fc:	e7bc      	b.n	8004778 <_printf_i+0x14c>
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	1d1a      	adds	r2, r3, #4
 8004802:	602a      	str	r2, [r5, #0]
 8004804:	681d      	ldr	r5, [r3, #0]
 8004806:	6862      	ldr	r2, [r4, #4]
 8004808:	2100      	movs	r1, #0
 800480a:	4628      	mov	r0, r5
 800480c:	f7fb fd20 	bl	8000250 <memchr>
 8004810:	b108      	cbz	r0, 8004816 <_printf_i+0x1ea>
 8004812:	1b40      	subs	r0, r0, r5
 8004814:	6060      	str	r0, [r4, #4]
 8004816:	6863      	ldr	r3, [r4, #4]
 8004818:	6123      	str	r3, [r4, #16]
 800481a:	2300      	movs	r3, #0
 800481c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004820:	e7aa      	b.n	8004778 <_printf_i+0x14c>
 8004822:	6923      	ldr	r3, [r4, #16]
 8004824:	462a      	mov	r2, r5
 8004826:	4649      	mov	r1, r9
 8004828:	4640      	mov	r0, r8
 800482a:	47d0      	blx	sl
 800482c:	3001      	adds	r0, #1
 800482e:	d0ad      	beq.n	800478c <_printf_i+0x160>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	079b      	lsls	r3, r3, #30
 8004834:	d413      	bmi.n	800485e <_printf_i+0x232>
 8004836:	68e0      	ldr	r0, [r4, #12]
 8004838:	9b03      	ldr	r3, [sp, #12]
 800483a:	4298      	cmp	r0, r3
 800483c:	bfb8      	it	lt
 800483e:	4618      	movlt	r0, r3
 8004840:	e7a6      	b.n	8004790 <_printf_i+0x164>
 8004842:	2301      	movs	r3, #1
 8004844:	4632      	mov	r2, r6
 8004846:	4649      	mov	r1, r9
 8004848:	4640      	mov	r0, r8
 800484a:	47d0      	blx	sl
 800484c:	3001      	adds	r0, #1
 800484e:	d09d      	beq.n	800478c <_printf_i+0x160>
 8004850:	3501      	adds	r5, #1
 8004852:	68e3      	ldr	r3, [r4, #12]
 8004854:	9903      	ldr	r1, [sp, #12]
 8004856:	1a5b      	subs	r3, r3, r1
 8004858:	42ab      	cmp	r3, r5
 800485a:	dcf2      	bgt.n	8004842 <_printf_i+0x216>
 800485c:	e7eb      	b.n	8004836 <_printf_i+0x20a>
 800485e:	2500      	movs	r5, #0
 8004860:	f104 0619 	add.w	r6, r4, #25
 8004864:	e7f5      	b.n	8004852 <_printf_i+0x226>
 8004866:	bf00      	nop
 8004868:	080049a1 	.word	0x080049a1
 800486c:	080049b2 	.word	0x080049b2

08004870 <memmove>:
 8004870:	4288      	cmp	r0, r1
 8004872:	b510      	push	{r4, lr}
 8004874:	eb01 0402 	add.w	r4, r1, r2
 8004878:	d902      	bls.n	8004880 <memmove+0x10>
 800487a:	4284      	cmp	r4, r0
 800487c:	4623      	mov	r3, r4
 800487e:	d807      	bhi.n	8004890 <memmove+0x20>
 8004880:	1e43      	subs	r3, r0, #1
 8004882:	42a1      	cmp	r1, r4
 8004884:	d008      	beq.n	8004898 <memmove+0x28>
 8004886:	f811 2b01 	ldrb.w	r2, [r1], #1
 800488a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800488e:	e7f8      	b.n	8004882 <memmove+0x12>
 8004890:	4402      	add	r2, r0
 8004892:	4601      	mov	r1, r0
 8004894:	428a      	cmp	r2, r1
 8004896:	d100      	bne.n	800489a <memmove+0x2a>
 8004898:	bd10      	pop	{r4, pc}
 800489a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800489e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80048a2:	e7f7      	b.n	8004894 <memmove+0x24>

080048a4 <_sbrk_r>:
 80048a4:	b538      	push	{r3, r4, r5, lr}
 80048a6:	4d06      	ldr	r5, [pc, #24]	; (80048c0 <_sbrk_r+0x1c>)
 80048a8:	2300      	movs	r3, #0
 80048aa:	4604      	mov	r4, r0
 80048ac:	4608      	mov	r0, r1
 80048ae:	602b      	str	r3, [r5, #0]
 80048b0:	f7fc fa16 	bl	8000ce0 <_sbrk>
 80048b4:	1c43      	adds	r3, r0, #1
 80048b6:	d102      	bne.n	80048be <_sbrk_r+0x1a>
 80048b8:	682b      	ldr	r3, [r5, #0]
 80048ba:	b103      	cbz	r3, 80048be <_sbrk_r+0x1a>
 80048bc:	6023      	str	r3, [r4, #0]
 80048be:	bd38      	pop	{r3, r4, r5, pc}
 80048c0:	20000308 	.word	0x20000308

080048c4 <memcpy>:
 80048c4:	440a      	add	r2, r1
 80048c6:	4291      	cmp	r1, r2
 80048c8:	f100 33ff 	add.w	r3, r0, #4294967295
 80048cc:	d100      	bne.n	80048d0 <memcpy+0xc>
 80048ce:	4770      	bx	lr
 80048d0:	b510      	push	{r4, lr}
 80048d2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048d6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048da:	4291      	cmp	r1, r2
 80048dc:	d1f9      	bne.n	80048d2 <memcpy+0xe>
 80048de:	bd10      	pop	{r4, pc}

080048e0 <_realloc_r>:
 80048e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048e4:	4680      	mov	r8, r0
 80048e6:	4614      	mov	r4, r2
 80048e8:	460e      	mov	r6, r1
 80048ea:	b921      	cbnz	r1, 80048f6 <_realloc_r+0x16>
 80048ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048f0:	4611      	mov	r1, r2
 80048f2:	f7ff bc49 	b.w	8004188 <_malloc_r>
 80048f6:	b92a      	cbnz	r2, 8004904 <_realloc_r+0x24>
 80048f8:	f7ff fbda 	bl	80040b0 <_free_r>
 80048fc:	4625      	mov	r5, r4
 80048fe:	4628      	mov	r0, r5
 8004900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004904:	f000 f81b 	bl	800493e <_malloc_usable_size_r>
 8004908:	4284      	cmp	r4, r0
 800490a:	4607      	mov	r7, r0
 800490c:	d802      	bhi.n	8004914 <_realloc_r+0x34>
 800490e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004912:	d812      	bhi.n	800493a <_realloc_r+0x5a>
 8004914:	4621      	mov	r1, r4
 8004916:	4640      	mov	r0, r8
 8004918:	f7ff fc36 	bl	8004188 <_malloc_r>
 800491c:	4605      	mov	r5, r0
 800491e:	2800      	cmp	r0, #0
 8004920:	d0ed      	beq.n	80048fe <_realloc_r+0x1e>
 8004922:	42bc      	cmp	r4, r7
 8004924:	4622      	mov	r2, r4
 8004926:	4631      	mov	r1, r6
 8004928:	bf28      	it	cs
 800492a:	463a      	movcs	r2, r7
 800492c:	f7ff ffca 	bl	80048c4 <memcpy>
 8004930:	4631      	mov	r1, r6
 8004932:	4640      	mov	r0, r8
 8004934:	f7ff fbbc 	bl	80040b0 <_free_r>
 8004938:	e7e1      	b.n	80048fe <_realloc_r+0x1e>
 800493a:	4635      	mov	r5, r6
 800493c:	e7df      	b.n	80048fe <_realloc_r+0x1e>

0800493e <_malloc_usable_size_r>:
 800493e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004942:	1f18      	subs	r0, r3, #4
 8004944:	2b00      	cmp	r3, #0
 8004946:	bfbc      	itt	lt
 8004948:	580b      	ldrlt	r3, [r1, r0]
 800494a:	18c0      	addlt	r0, r0, r3
 800494c:	4770      	bx	lr
	...

08004950 <_init>:
 8004950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004952:	bf00      	nop
 8004954:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004956:	bc08      	pop	{r3}
 8004958:	469e      	mov	lr, r3
 800495a:	4770      	bx	lr

0800495c <_fini>:
 800495c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800495e:	bf00      	nop
 8004960:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004962:	bc08      	pop	{r3}
 8004964:	469e      	mov	lr, r3
 8004966:	4770      	bx	lr
