
LAB_SP2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b38  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003d30  08003d30  00013d30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d50  08003d50  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003d50  08003d50  00013d50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003d58  08003d58  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003d58  08003d58  00013d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003d5c  08003d5c  00013d5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003d60  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001c0  20000010  08003d70  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001d0  08003d70  000201d0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000bcdd  00000000  00000000  00020081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001fb5  00000000  00000000  0002bd5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000008b8  00000000  00000000  0002dd18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000069f  00000000  00000000  0002e5d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a24  00000000  00000000  0002ec6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d669  00000000  00000000  00056693  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f5ff1  00000000  00000000  00063cfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021ac  00000000  00000000  00159cf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0015be9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000010 	.word	0x20000010
 8000214:	00000000 	.word	0x00000000
 8000218:	08003d18 	.word	0x08003d18

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000014 	.word	0x20000014
 8000234:	08003d18 	.word	0x08003d18

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b970 	b.w	8000530 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	460d      	mov	r5, r1
 8000270:	4604      	mov	r4, r0
 8000272:	460f      	mov	r7, r1
 8000274:	2b00      	cmp	r3, #0
 8000276:	d14a      	bne.n	800030e <__udivmoddi4+0xa6>
 8000278:	428a      	cmp	r2, r1
 800027a:	4694      	mov	ip, r2
 800027c:	d965      	bls.n	800034a <__udivmoddi4+0xe2>
 800027e:	fab2 f382 	clz	r3, r2
 8000282:	b143      	cbz	r3, 8000296 <__udivmoddi4+0x2e>
 8000284:	fa02 fc03 	lsl.w	ip, r2, r3
 8000288:	f1c3 0220 	rsb	r2, r3, #32
 800028c:	409f      	lsls	r7, r3
 800028e:	fa20 f202 	lsr.w	r2, r0, r2
 8000292:	4317      	orrs	r7, r2
 8000294:	409c      	lsls	r4, r3
 8000296:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800029a:	fa1f f58c 	uxth.w	r5, ip
 800029e:	fbb7 f1fe 	udiv	r1, r7, lr
 80002a2:	0c22      	lsrs	r2, r4, #16
 80002a4:	fb0e 7711 	mls	r7, lr, r1, r7
 80002a8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ac:	fb01 f005 	mul.w	r0, r1, r5
 80002b0:	4290      	cmp	r0, r2
 80002b2:	d90a      	bls.n	80002ca <__udivmoddi4+0x62>
 80002b4:	eb1c 0202 	adds.w	r2, ip, r2
 80002b8:	f101 37ff 	add.w	r7, r1, #4294967295
 80002bc:	f080 811c 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002c0:	4290      	cmp	r0, r2
 80002c2:	f240 8119 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002c6:	3902      	subs	r1, #2
 80002c8:	4462      	add	r2, ip
 80002ca:	1a12      	subs	r2, r2, r0
 80002cc:	b2a4      	uxth	r4, r4
 80002ce:	fbb2 f0fe 	udiv	r0, r2, lr
 80002d2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002d6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002da:	fb00 f505 	mul.w	r5, r0, r5
 80002de:	42a5      	cmp	r5, r4
 80002e0:	d90a      	bls.n	80002f8 <__udivmoddi4+0x90>
 80002e2:	eb1c 0404 	adds.w	r4, ip, r4
 80002e6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ea:	f080 8107 	bcs.w	80004fc <__udivmoddi4+0x294>
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	f240 8104 	bls.w	80004fc <__udivmoddi4+0x294>
 80002f4:	4464      	add	r4, ip
 80002f6:	3802      	subs	r0, #2
 80002f8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002fc:	1b64      	subs	r4, r4, r5
 80002fe:	2100      	movs	r1, #0
 8000300:	b11e      	cbz	r6, 800030a <__udivmoddi4+0xa2>
 8000302:	40dc      	lsrs	r4, r3
 8000304:	2300      	movs	r3, #0
 8000306:	e9c6 4300 	strd	r4, r3, [r6]
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0xbc>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80ed 	beq.w	80004f2 <__udivmoddi4+0x28a>
 8000318:	2100      	movs	r1, #0
 800031a:	e9c6 0500 	strd	r0, r5, [r6]
 800031e:	4608      	mov	r0, r1
 8000320:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000324:	fab3 f183 	clz	r1, r3
 8000328:	2900      	cmp	r1, #0
 800032a:	d149      	bne.n	80003c0 <__udivmoddi4+0x158>
 800032c:	42ab      	cmp	r3, r5
 800032e:	d302      	bcc.n	8000336 <__udivmoddi4+0xce>
 8000330:	4282      	cmp	r2, r0
 8000332:	f200 80f8 	bhi.w	8000526 <__udivmoddi4+0x2be>
 8000336:	1a84      	subs	r4, r0, r2
 8000338:	eb65 0203 	sbc.w	r2, r5, r3
 800033c:	2001      	movs	r0, #1
 800033e:	4617      	mov	r7, r2
 8000340:	2e00      	cmp	r6, #0
 8000342:	d0e2      	beq.n	800030a <__udivmoddi4+0xa2>
 8000344:	e9c6 4700 	strd	r4, r7, [r6]
 8000348:	e7df      	b.n	800030a <__udivmoddi4+0xa2>
 800034a:	b902      	cbnz	r2, 800034e <__udivmoddi4+0xe6>
 800034c:	deff      	udf	#255	; 0xff
 800034e:	fab2 f382 	clz	r3, r2
 8000352:	2b00      	cmp	r3, #0
 8000354:	f040 8090 	bne.w	8000478 <__udivmoddi4+0x210>
 8000358:	1a8a      	subs	r2, r1, r2
 800035a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800035e:	fa1f fe8c 	uxth.w	lr, ip
 8000362:	2101      	movs	r1, #1
 8000364:	fbb2 f5f7 	udiv	r5, r2, r7
 8000368:	fb07 2015 	mls	r0, r7, r5, r2
 800036c:	0c22      	lsrs	r2, r4, #16
 800036e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000372:	fb0e f005 	mul.w	r0, lr, r5
 8000376:	4290      	cmp	r0, r2
 8000378:	d908      	bls.n	800038c <__udivmoddi4+0x124>
 800037a:	eb1c 0202 	adds.w	r2, ip, r2
 800037e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4290      	cmp	r0, r2
 8000386:	f200 80cb 	bhi.w	8000520 <__udivmoddi4+0x2b8>
 800038a:	4645      	mov	r5, r8
 800038c:	1a12      	subs	r2, r2, r0
 800038e:	b2a4      	uxth	r4, r4
 8000390:	fbb2 f0f7 	udiv	r0, r2, r7
 8000394:	fb07 2210 	mls	r2, r7, r0, r2
 8000398:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800039c:	fb0e fe00 	mul.w	lr, lr, r0
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	d908      	bls.n	80003b6 <__udivmoddi4+0x14e>
 80003a4:	eb1c 0404 	adds.w	r4, ip, r4
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	d202      	bcs.n	80003b4 <__udivmoddi4+0x14c>
 80003ae:	45a6      	cmp	lr, r4
 80003b0:	f200 80bb 	bhi.w	800052a <__udivmoddi4+0x2c2>
 80003b4:	4610      	mov	r0, r2
 80003b6:	eba4 040e 	sub.w	r4, r4, lr
 80003ba:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003be:	e79f      	b.n	8000300 <__udivmoddi4+0x98>
 80003c0:	f1c1 0720 	rsb	r7, r1, #32
 80003c4:	408b      	lsls	r3, r1
 80003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ca:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ce:	fa05 f401 	lsl.w	r4, r5, r1
 80003d2:	fa20 f307 	lsr.w	r3, r0, r7
 80003d6:	40fd      	lsrs	r5, r7
 80003d8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003dc:	4323      	orrs	r3, r4
 80003de:	fbb5 f8f9 	udiv	r8, r5, r9
 80003e2:	fa1f fe8c 	uxth.w	lr, ip
 80003e6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ea:	0c1c      	lsrs	r4, r3, #16
 80003ec:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003f0:	fb08 f50e 	mul.w	r5, r8, lr
 80003f4:	42a5      	cmp	r5, r4
 80003f6:	fa02 f201 	lsl.w	r2, r2, r1
 80003fa:	fa00 f001 	lsl.w	r0, r0, r1
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1c 0404 	adds.w	r4, ip, r4
 8000404:	f108 3aff 	add.w	sl, r8, #4294967295
 8000408:	f080 8088 	bcs.w	800051c <__udivmoddi4+0x2b4>
 800040c:	42a5      	cmp	r5, r4
 800040e:	f240 8085 	bls.w	800051c <__udivmoddi4+0x2b4>
 8000412:	f1a8 0802 	sub.w	r8, r8, #2
 8000416:	4464      	add	r4, ip
 8000418:	1b64      	subs	r4, r4, r5
 800041a:	b29d      	uxth	r5, r3
 800041c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000420:	fb09 4413 	mls	r4, r9, r3, r4
 8000424:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000428:	fb03 fe0e 	mul.w	lr, r3, lr
 800042c:	45a6      	cmp	lr, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1c 0404 	adds.w	r4, ip, r4
 8000434:	f103 35ff 	add.w	r5, r3, #4294967295
 8000438:	d26c      	bcs.n	8000514 <__udivmoddi4+0x2ac>
 800043a:	45a6      	cmp	lr, r4
 800043c:	d96a      	bls.n	8000514 <__udivmoddi4+0x2ac>
 800043e:	3b02      	subs	r3, #2
 8000440:	4464      	add	r4, ip
 8000442:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000446:	fba3 9502 	umull	r9, r5, r3, r2
 800044a:	eba4 040e 	sub.w	r4, r4, lr
 800044e:	42ac      	cmp	r4, r5
 8000450:	46c8      	mov	r8, r9
 8000452:	46ae      	mov	lr, r5
 8000454:	d356      	bcc.n	8000504 <__udivmoddi4+0x29c>
 8000456:	d053      	beq.n	8000500 <__udivmoddi4+0x298>
 8000458:	b156      	cbz	r6, 8000470 <__udivmoddi4+0x208>
 800045a:	ebb0 0208 	subs.w	r2, r0, r8
 800045e:	eb64 040e 	sbc.w	r4, r4, lr
 8000462:	fa04 f707 	lsl.w	r7, r4, r7
 8000466:	40ca      	lsrs	r2, r1
 8000468:	40cc      	lsrs	r4, r1
 800046a:	4317      	orrs	r7, r2
 800046c:	e9c6 7400 	strd	r7, r4, [r6]
 8000470:	4618      	mov	r0, r3
 8000472:	2100      	movs	r1, #0
 8000474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000478:	f1c3 0120 	rsb	r1, r3, #32
 800047c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000480:	fa20 f201 	lsr.w	r2, r0, r1
 8000484:	fa25 f101 	lsr.w	r1, r5, r1
 8000488:	409d      	lsls	r5, r3
 800048a:	432a      	orrs	r2, r5
 800048c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000490:	fa1f fe8c 	uxth.w	lr, ip
 8000494:	fbb1 f0f7 	udiv	r0, r1, r7
 8000498:	fb07 1510 	mls	r5, r7, r0, r1
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004a2:	fb00 f50e 	mul.w	r5, r0, lr
 80004a6:	428d      	cmp	r5, r1
 80004a8:	fa04 f403 	lsl.w	r4, r4, r3
 80004ac:	d908      	bls.n	80004c0 <__udivmoddi4+0x258>
 80004ae:	eb1c 0101 	adds.w	r1, ip, r1
 80004b2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004b6:	d22f      	bcs.n	8000518 <__udivmoddi4+0x2b0>
 80004b8:	428d      	cmp	r5, r1
 80004ba:	d92d      	bls.n	8000518 <__udivmoddi4+0x2b0>
 80004bc:	3802      	subs	r0, #2
 80004be:	4461      	add	r1, ip
 80004c0:	1b49      	subs	r1, r1, r5
 80004c2:	b292      	uxth	r2, r2
 80004c4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004c8:	fb07 1115 	mls	r1, r7, r5, r1
 80004cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d0:	fb05 f10e 	mul.w	r1, r5, lr
 80004d4:	4291      	cmp	r1, r2
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x282>
 80004d8:	eb1c 0202 	adds.w	r2, ip, r2
 80004dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004e0:	d216      	bcs.n	8000510 <__udivmoddi4+0x2a8>
 80004e2:	4291      	cmp	r1, r2
 80004e4:	d914      	bls.n	8000510 <__udivmoddi4+0x2a8>
 80004e6:	3d02      	subs	r5, #2
 80004e8:	4462      	add	r2, ip
 80004ea:	1a52      	subs	r2, r2, r1
 80004ec:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004f0:	e738      	b.n	8000364 <__udivmoddi4+0xfc>
 80004f2:	4631      	mov	r1, r6
 80004f4:	4630      	mov	r0, r6
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xa2>
 80004f8:	4639      	mov	r1, r7
 80004fa:	e6e6      	b.n	80002ca <__udivmoddi4+0x62>
 80004fc:	4610      	mov	r0, r2
 80004fe:	e6fb      	b.n	80002f8 <__udivmoddi4+0x90>
 8000500:	4548      	cmp	r0, r9
 8000502:	d2a9      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000504:	ebb9 0802 	subs.w	r8, r9, r2
 8000508:	eb65 0e0c 	sbc.w	lr, r5, ip
 800050c:	3b01      	subs	r3, #1
 800050e:	e7a3      	b.n	8000458 <__udivmoddi4+0x1f0>
 8000510:	4645      	mov	r5, r8
 8000512:	e7ea      	b.n	80004ea <__udivmoddi4+0x282>
 8000514:	462b      	mov	r3, r5
 8000516:	e794      	b.n	8000442 <__udivmoddi4+0x1da>
 8000518:	4640      	mov	r0, r8
 800051a:	e7d1      	b.n	80004c0 <__udivmoddi4+0x258>
 800051c:	46d0      	mov	r8, sl
 800051e:	e77b      	b.n	8000418 <__udivmoddi4+0x1b0>
 8000520:	3d02      	subs	r5, #2
 8000522:	4462      	add	r2, ip
 8000524:	e732      	b.n	800038c <__udivmoddi4+0x124>
 8000526:	4608      	mov	r0, r1
 8000528:	e70a      	b.n	8000340 <__udivmoddi4+0xd8>
 800052a:	4464      	add	r4, ip
 800052c:	3802      	subs	r0, #2
 800052e:	e742      	b.n	80003b6 <__udivmoddi4+0x14e>

08000530 <__aeabi_idiv0>:
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop

08000534 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000534:	b580      	push	{r7, lr}
 8000536:	b084      	sub	sp, #16
 8000538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800053a:	463b      	mov	r3, r7
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
 8000542:	609a      	str	r2, [r3, #8]
 8000544:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000546:	4b28      	ldr	r3, [pc, #160]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000548:	4a28      	ldr	r2, [pc, #160]	; (80005ec <MX_ADC1_Init+0xb8>)
 800054a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <MX_ADC1_Init+0xb4>)
 800054e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000552:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000554:	4b24      	ldr	r3, [pc, #144]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <MX_ADC1_Init+0xb4>)
 800055c:	2201      	movs	r2, #1
 800055e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000562:	2201      	movs	r2, #1
 8000564:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000566:	4b20      	ldr	r3, [pc, #128]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000568:	2200      	movs	r2, #0
 800056a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800056e:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000570:	2200      	movs	r2, #0
 8000572:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000574:	4b1c      	ldr	r3, [pc, #112]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000576:	4a1e      	ldr	r2, [pc, #120]	; (80005f0 <MX_ADC1_Init+0xbc>)
 8000578:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800057a:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <MX_ADC1_Init+0xb4>)
 800057c:	2200      	movs	r2, #0
 800057e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000580:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000582:	2202      	movs	r2, #2
 8000584:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000586:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000588:	2201      	movs	r2, #1
 800058a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000590:	2200      	movs	r2, #0
 8000592:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000594:	4814      	ldr	r0, [pc, #80]	; (80005e8 <MX_ADC1_Init+0xb4>)
 8000596:	f000 fb77 	bl	8000c88 <HAL_ADC_Init>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80005a0:	f000 f9ec 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80005a4:	2303      	movs	r3, #3
 80005a6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005a8:	2301      	movs	r3, #1
 80005aa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 80005ac:	2301      	movs	r3, #1
 80005ae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	4619      	mov	r1, r3
 80005b4:	480c      	ldr	r0, [pc, #48]	; (80005e8 <MX_ADC1_Init+0xb4>)
 80005b6:	f000 fcb9 	bl	8000f2c <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80005c0:	f000 f9dc 	bl	800097c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80005c4:	230a      	movs	r3, #10
 80005c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005c8:	2302      	movs	r3, #2
 80005ca:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005cc:	463b      	mov	r3, r7
 80005ce:	4619      	mov	r1, r3
 80005d0:	4805      	ldr	r0, [pc, #20]	; (80005e8 <MX_ADC1_Init+0xb4>)
 80005d2:	f000 fcab 	bl	8000f2c <HAL_ADC_ConfigChannel>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d001      	beq.n	80005e0 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80005dc:	f000 f9ce 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000002c 	.word	0x2000002c
 80005ec:	40012000 	.word	0x40012000
 80005f0:	0f000001 	.word	0x0f000001

080005f4 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08a      	sub	sp, #40	; 0x28
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fc:	f107 0314 	add.w	r3, r7, #20
 8000600:	2200      	movs	r2, #0
 8000602:	601a      	str	r2, [r3, #0]
 8000604:	605a      	str	r2, [r3, #4]
 8000606:	609a      	str	r2, [r3, #8]
 8000608:	60da      	str	r2, [r3, #12]
 800060a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a39      	ldr	r2, [pc, #228]	; (80006f8 <HAL_ADC_MspInit+0x104>)
 8000612:	4293      	cmp	r3, r2
 8000614:	d16b      	bne.n	80006ee <HAL_ADC_MspInit+0xfa>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000616:	4b39      	ldr	r3, [pc, #228]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800061a:	4a38      	ldr	r2, [pc, #224]	; (80006fc <HAL_ADC_MspInit+0x108>)
 800061c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000620:	6453      	str	r3, [r2, #68]	; 0x44
 8000622:	4b36      	ldr	r3, [pc, #216]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800062a:	613b      	str	r3, [r7, #16]
 800062c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800062e:	4b33      	ldr	r3, [pc, #204]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	4a32      	ldr	r2, [pc, #200]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000634:	f043 0304 	orr.w	r3, r3, #4
 8000638:	6313      	str	r3, [r2, #48]	; 0x30
 800063a:	4b30      	ldr	r3, [pc, #192]	; (80006fc <HAL_ADC_MspInit+0x108>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	f003 0304 	and.w	r3, r3, #4
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000646:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	4a2c      	ldr	r2, [pc, #176]	; (80006fc <HAL_ADC_MspInit+0x108>)
 800064c:	f043 0301 	orr.w	r3, r3, #1
 8000650:	6313      	str	r3, [r2, #48]	; 0x30
 8000652:	4b2a      	ldr	r3, [pc, #168]	; (80006fc <HAL_ADC_MspInit+0x108>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	f003 0301 	and.w	r3, r3, #1
 800065a:	60bb      	str	r3, [r7, #8]
 800065c:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA7     ------> ADC1_IN7
    PC4     ------> ADC1_IN14
    PC5     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800065e:	2333      	movs	r3, #51	; 0x33
 8000660:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000662:	2303      	movs	r3, #3
 8000664:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4823      	ldr	r0, [pc, #140]	; (8000700 <HAL_ADC_MspInit+0x10c>)
 8000672:	f001 fbb7 	bl	8001de4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_7;
 8000676:	238e      	movs	r3, #142	; 0x8e
 8000678:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800067a:	2303      	movs	r3, #3
 800067c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	481e      	ldr	r0, [pc, #120]	; (8000704 <HAL_ADC_MspInit+0x110>)
 800068a:	f001 fbab 	bl	8001de4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800068e:	4b1e      	ldr	r3, [pc, #120]	; (8000708 <HAL_ADC_MspInit+0x114>)
 8000690:	4a1e      	ldr	r2, [pc, #120]	; (800070c <HAL_ADC_MspInit+0x118>)
 8000692:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <HAL_ADC_MspInit+0x114>)
 8000696:	2200      	movs	r2, #0
 8000698:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800069a:	4b1b      	ldr	r3, [pc, #108]	; (8000708 <HAL_ADC_MspInit+0x114>)
 800069c:	2200      	movs	r2, #0
 800069e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80006a6:	4b18      	ldr	r3, [pc, #96]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006a8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80006ac:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80006ae:	4b16      	ldr	r3, [pc, #88]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80006b4:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80006b6:	4b14      	ldr	r3, [pc, #80]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006b8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006bc:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006c4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80006d2:	480d      	ldr	r0, [pc, #52]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006d4:	f001 f80e 	bl	80016f4 <HAL_DMA_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <HAL_ADC_MspInit+0xee>
    {
      Error_Handler();
 80006de:	f000 f94d 	bl	800097c <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	4a08      	ldr	r2, [pc, #32]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006e6:	639a      	str	r2, [r3, #56]	; 0x38
 80006e8:	4a07      	ldr	r2, [pc, #28]	; (8000708 <HAL_ADC_MspInit+0x114>)
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 80006ee:	bf00      	nop
 80006f0:	3728      	adds	r7, #40	; 0x28
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40012000 	.word	0x40012000
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020800 	.word	0x40020800
 8000704:	40020000 	.word	0x40020000
 8000708:	20000074 	.word	0x20000074
 800070c:	40026410 	.word	0x40026410

08000710 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b082      	sub	sp, #8
 8000714:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_DMA_Init+0x38>)
 8000718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800071a:	4a0b      	ldr	r2, [pc, #44]	; (8000748 <MX_DMA_Init+0x38>)
 800071c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000720:	6313      	str	r3, [r2, #48]	; 0x30
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <MX_DMA_Init+0x38>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 800072e:	2200      	movs	r2, #0
 8000730:	2101      	movs	r1, #1
 8000732:	2038      	movs	r0, #56	; 0x38
 8000734:	f000 ffa7 	bl	8001686 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000738:	2038      	movs	r0, #56	; 0x38
 800073a:	f000 ffc0 	bl	80016be <HAL_NVIC_EnableIRQ>

}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000752:	f107 0314 	add.w	r3, r7, #20
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
 8000760:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000762:	4b35      	ldr	r3, [pc, #212]	; (8000838 <MX_GPIO_Init+0xec>)
 8000764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000766:	4a34      	ldr	r2, [pc, #208]	; (8000838 <MX_GPIO_Init+0xec>)
 8000768:	f043 0304 	orr.w	r3, r3, #4
 800076c:	6313      	str	r3, [r2, #48]	; 0x30
 800076e:	4b32      	ldr	r3, [pc, #200]	; (8000838 <MX_GPIO_Init+0xec>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	f003 0304 	and.w	r3, r3, #4
 8000776:	613b      	str	r3, [r7, #16]
 8000778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077a:	4b2f      	ldr	r3, [pc, #188]	; (8000838 <MX_GPIO_Init+0xec>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a2e      	ldr	r2, [pc, #184]	; (8000838 <MX_GPIO_Init+0xec>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b2c      	ldr	r3, [pc, #176]	; (8000838 <MX_GPIO_Init+0xec>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000792:	4b29      	ldr	r3, [pc, #164]	; (8000838 <MX_GPIO_Init+0xec>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a28      	ldr	r2, [pc, #160]	; (8000838 <MX_GPIO_Init+0xec>)
 8000798:	f043 0320 	orr.w	r3, r3, #32
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b26      	ldr	r3, [pc, #152]	; (8000838 <MX_GPIO_Init+0xec>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0320 	and.w	r3, r3, #32
 80007a6:	60bb      	str	r3, [r7, #8]
 80007a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <MX_GPIO_Init+0xec>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a22      	ldr	r2, [pc, #136]	; (8000838 <MX_GPIO_Init+0xec>)
 80007b0:	f043 0310 	orr.w	r3, r3, #16
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b20      	ldr	r3, [pc, #128]	; (8000838 <MX_GPIO_Init+0xec>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0310 	and.w	r3, r3, #16
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0xec>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0xec>)
 80007c8:	f043 0308 	orr.w	r3, r3, #8
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0xec>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_13, GPIO_PIN_RESET);
 80007da:	2200      	movs	r2, #0
 80007dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007e0:	4816      	ldr	r0, [pc, #88]	; (800083c <MX_GPIO_Init+0xf0>)
 80007e2:	f001 fcab 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9, GPIO_PIN_RESET);
 80007e6:	2200      	movs	r2, #0
 80007e8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ec:	4814      	ldr	r0, [pc, #80]	; (8000840 <MX_GPIO_Init+0xf4>)
 80007ee:	f001 fca5 	bl	800213c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	480c      	ldr	r0, [pc, #48]	; (800083c <MX_GPIO_Init+0xf0>)
 800080c:	f001 faea 	bl	8001de4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000810:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000816:	2301      	movs	r3, #1
 8000818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081a:	2300      	movs	r3, #0
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081e:	2300      	movs	r3, #0
 8000820:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000822:	f107 0314 	add.w	r3, r7, #20
 8000826:	4619      	mov	r1, r3
 8000828:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_GPIO_Init+0xf4>)
 800082a:	f001 fadb 	bl	8001de4 <HAL_GPIO_Init>

}
 800082e:	bf00      	nop
 8000830:	3728      	adds	r7, #40	; 0x28
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40021400 	.word	0x40021400
 8000840:	40021000 	.word	0x40021000

08000844 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000848:	f000 f9c1 	bl	8000bce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800084c:	f000 f82a 	bl	80008a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000850:	f7ff ff7c 	bl	800074c <MX_GPIO_Init>
  MX_DMA_Init();
 8000854:	f7ff ff5c 	bl	8000710 <MX_DMA_Init>
  MX_ADC1_Init();
 8000858:	f7ff fe6c 	bl	8000534 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 800085c:	f000 f8fe 	bl	8000a5c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, (uint32_t *)adc_val, adc_channel_count);
 8000860:	4b0a      	ldr	r3, [pc, #40]	; (800088c <main+0x48>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	461a      	mov	r2, r3
 8000866:	490a      	ldr	r1, [pc, #40]	; (8000890 <main+0x4c>)
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <main+0x50>)
 800086a:	f000 fa51 	bl	8000d10 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  //HAL_ADC_Start(&hadc1);
  while (1)
  {
	  if (adc_conv_complete_flag == 1){
 800086e:	4b0a      	ldr	r3, [pc, #40]	; (8000898 <main+0x54>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d1fb      	bne.n	800086e <main+0x2a>
		  HAL_UART_Transmit(&huart3, (uint8_t *) dma_result_buffer, sizeof(dma_result_buffer), 1000);
 8000876:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800087a:	2264      	movs	r2, #100	; 0x64
 800087c:	4907      	ldr	r1, [pc, #28]	; (800089c <main+0x58>)
 800087e:	4808      	ldr	r0, [pc, #32]	; (80008a0 <main+0x5c>)
 8000880:	f002 fd80 	bl	8003384 <HAL_UART_Transmit>
		  adc_conv_complete_flag = 0;
 8000884:	4b04      	ldr	r3, [pc, #16]	; (8000898 <main+0x54>)
 8000886:	2200      	movs	r2, #0
 8000888:	701a      	strb	r2, [r3, #0]
	  if (adc_conv_complete_flag == 1){
 800088a:	e7f0      	b.n	800086e <main+0x2a>
 800088c:	20000000 	.word	0x20000000
 8000890:	200000d4 	.word	0x200000d4
 8000894:	2000002c 	.word	0x2000002c
 8000898:	200000dc 	.word	0x200000dc
 800089c:	200000e0 	.word	0x200000e0
 80008a0:	20000144 	.word	0x20000144

080008a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b094      	sub	sp, #80	; 0x50
 80008a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008aa:	f107 031c 	add.w	r3, r7, #28
 80008ae:	2234      	movs	r2, #52	; 0x34
 80008b0:	2100      	movs	r1, #0
 80008b2:	4618      	mov	r0, r3
 80008b4:	f003 fa03 	bl	8003cbe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008b8:	f107 0308 	add.w	r3, r7, #8
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
 80008c2:	609a      	str	r2, [r3, #8]
 80008c4:	60da      	str	r2, [r3, #12]
 80008c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <SystemClock_Config+0xb0>)
 80008ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008cc:	4a21      	ldr	r2, [pc, #132]	; (8000954 <SystemClock_Config+0xb0>)
 80008ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d2:	6413      	str	r3, [r2, #64]	; 0x40
 80008d4:	4b1f      	ldr	r3, [pc, #124]	; (8000954 <SystemClock_Config+0xb0>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008dc:	607b      	str	r3, [r7, #4]
 80008de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80008e0:	4b1d      	ldr	r3, [pc, #116]	; (8000958 <SystemClock_Config+0xb4>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80008e8:	4a1b      	ldr	r2, [pc, #108]	; (8000958 <SystemClock_Config+0xb4>)
 80008ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008ee:	6013      	str	r3, [r2, #0]
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <SystemClock_Config+0xb4>)
 80008f2:	681b      	ldr	r3, [r3, #0]
 80008f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80008f8:	603b      	str	r3, [r7, #0]
 80008fa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008fc:	2302      	movs	r3, #2
 80008fe:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000900:	2301      	movs	r3, #1
 8000902:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000904:	2310      	movs	r3, #16
 8000906:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000908:	2300      	movs	r3, #0
 800090a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800090c:	f107 031c 	add.w	r3, r7, #28
 8000910:	4618      	mov	r0, r3
 8000912:	f001 fc2d 	bl	8002170 <HAL_RCC_OscConfig>
 8000916:	4603      	mov	r3, r0
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SystemClock_Config+0x7c>
  {
    Error_Handler();
 800091c:	f000 f82e 	bl	800097c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000920:	230f      	movs	r3, #15
 8000922:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2100      	movs	r1, #0
 800093a:	4618      	mov	r0, r3
 800093c:	f001 fec6 	bl	80026cc <HAL_RCC_ClockConfig>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000946:	f000 f819 	bl	800097c <Error_Handler>
  }
}
 800094a:	bf00      	nop
 800094c:	3750      	adds	r7, #80	; 0x50
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40007000 	.word	0x40007000

0800095c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800095c:	b480      	push	{r7}
 800095e:	b083      	sub	sp, #12
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
    // I set adc_conv_complete_flag variable to 1 when,
    // HAL_ADC_ConvCpltCallback function is call.
    adc_conv_complete_flag = 1;
 8000964:	4b04      	ldr	r3, [pc, #16]	; (8000978 <HAL_ADC_ConvCpltCallback+0x1c>)
 8000966:	2201      	movs	r2, #1
 8000968:	701a      	strb	r2, [r3, #0]
}
 800096a:	bf00      	nop
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	200000dc 	.word	0x200000dc

0800097c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000980:	b672      	cpsid	i
}
 8000982:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000984:	e7fe      	b.n	8000984 <Error_Handler+0x8>
	...

08000988 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0f      	ldr	r3, [pc, #60]	; (80009cc <HAL_MspInit+0x44>)
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	4a0e      	ldr	r2, [pc, #56]	; (80009cc <HAL_MspInit+0x44>)
 8000994:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000998:	6413      	str	r3, [r2, #64]	; 0x40
 800099a:	4b0c      	ldr	r3, [pc, #48]	; (80009cc <HAL_MspInit+0x44>)
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009a2:	607b      	str	r3, [r7, #4]
 80009a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b09      	ldr	r3, [pc, #36]	; (80009cc <HAL_MspInit+0x44>)
 80009a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009aa:	4a08      	ldr	r2, [pc, #32]	; (80009cc <HAL_MspInit+0x44>)
 80009ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009b0:	6453      	str	r3, [r2, #68]	; 0x44
 80009b2:	4b06      	ldr	r3, [pc, #24]	; (80009cc <HAL_MspInit+0x44>)
 80009b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 80009be:	2005      	movs	r0, #5
 80009c0:	f000 fe56 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	40023800 	.word	0x40023800

080009d0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d4:	e7fe      	b.n	80009d4 <NMI_Handler+0x4>

080009d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d6:	b480      	push	{r7}
 80009d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009da:	e7fe      	b.n	80009da <HardFault_Handler+0x4>

080009dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009dc:	b480      	push	{r7}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009e0:	e7fe      	b.n	80009e0 <MemManage_Handler+0x4>

080009e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009e2:	b480      	push	{r7}
 80009e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e6:	e7fe      	b.n	80009e6 <BusFault_Handler+0x4>

080009e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009ec:	e7fe      	b.n	80009ec <UsageFault_Handler+0x4>

080009ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a00:	bf00      	nop
 8000a02:	46bd      	mov	sp, r7
 8000a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a08:	4770      	bx	lr

08000a0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a0e:	bf00      	nop
 8000a10:	46bd      	mov	sp, r7
 8000a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a16:	4770      	bx	lr

08000a18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a1c:	f000 f914 	bl	8000c48 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a20:	bf00      	nop
 8000a22:	bd80      	pop	{r7, pc}

08000a24 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a28:	4802      	ldr	r0, [pc, #8]	; (8000a34 <DMA2_Stream0_IRQHandler+0x10>)
 8000a2a:	f000 ff71 	bl	8001910 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000a2e:	bf00      	nop
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	20000074 	.word	0x20000074

08000a38 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <SystemInit+0x20>)
 8000a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a42:	4a05      	ldr	r2, [pc, #20]	; (8000a58 <SystemInit+0x20>)
 8000a44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000ed00 	.word	0xe000ed00

08000a5c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a62:	4a15      	ldr	r2, [pc, #84]	; (8000ab8 <MX_USART3_UART_Init+0x5c>)
 8000a64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a68:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a6c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000a7a:	4b0e      	ldr	r3, [pc, #56]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a82:	220c      	movs	r2, #12
 8000a84:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a86:	4b0b      	ldr	r3, [pc, #44]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a8c:	4b09      	ldr	r3, [pc, #36]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a98:	4b06      	ldr	r3, [pc, #24]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000a9e:	4805      	ldr	r0, [pc, #20]	; (8000ab4 <MX_USART3_UART_Init+0x58>)
 8000aa0:	f002 fc22 	bl	80032e8 <HAL_UART_Init>
 8000aa4:	4603      	mov	r3, r0
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d001      	beq.n	8000aae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000aaa:	f7ff ff67 	bl	800097c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	20000144 	.word	0x20000144
 8000ab8:	40004800 	.word	0x40004800

08000abc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b0ae      	sub	sp, #184	; 0xb8
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2290      	movs	r2, #144	; 0x90
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 f8ee 	bl	8003cbe <memset>
  if(uartHandle->Instance==USART3)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a22      	ldr	r2, [pc, #136]	; (8000b70 <HAL_UART_MspInit+0xb4>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d13c      	bne.n	8000b66 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000aec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000af0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000af2:	2300      	movs	r3, #0
 8000af4:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000af6:	f107 0314 	add.w	r3, r7, #20
 8000afa:	4618      	mov	r0, r3
 8000afc:	f001 ffcc 	bl	8002a98 <HAL_RCCEx_PeriphCLKConfig>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b06:	f7ff ff39 	bl	800097c <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000b0a:	4b1a      	ldr	r3, [pc, #104]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b0e:	4a19      	ldr	r2, [pc, #100]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b10:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b14:	6413      	str	r3, [r2, #64]	; 0x40
 8000b16:	4b17      	ldr	r3, [pc, #92]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b22:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b26:	4a13      	ldr	r2, [pc, #76]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b28:	f043 0308 	orr.w	r3, r3, #8
 8000b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <HAL_UART_MspInit+0xb8>)
 8000b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b32:	f003 0308 	and.w	r3, r3, #8
 8000b36:	60fb      	str	r3, [r7, #12]
 8000b38:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b3a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b3e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b42:	2302      	movs	r3, #2
 8000b44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b48:	2300      	movs	r3, #0
 8000b4a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b4e:	2303      	movs	r3, #3
 8000b50:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b54:	2307      	movs	r3, #7
 8000b56:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b5a:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4805      	ldr	r0, [pc, #20]	; (8000b78 <HAL_UART_MspInit+0xbc>)
 8000b62:	f001 f93f 	bl	8001de4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000b66:	bf00      	nop
 8000b68:	37b8      	adds	r7, #184	; 0xb8
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	bf00      	nop
 8000b70:	40004800 	.word	0x40004800
 8000b74:	40023800 	.word	0x40023800
 8000b78:	40020c00 	.word	0x40020c00

08000b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bb4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b82:	490e      	ldr	r1, [pc, #56]	; (8000bbc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b84:	4a0e      	ldr	r2, [pc, #56]	; (8000bc0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b88:	e002      	b.n	8000b90 <LoopCopyDataInit>

08000b8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b8e:	3304      	adds	r3, #4

08000b90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b94:	d3f9      	bcc.n	8000b8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b96:	4a0b      	ldr	r2, [pc, #44]	; (8000bc4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b98:	4c0b      	ldr	r4, [pc, #44]	; (8000bc8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b9c:	e001      	b.n	8000ba2 <LoopFillZerobss>

08000b9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba0:	3204      	adds	r2, #4

08000ba2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ba2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ba4:	d3fb      	bcc.n	8000b9e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ba6:	f7ff ff47 	bl	8000a38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000baa:	f003 f891 	bl	8003cd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bae:	f7ff fe49 	bl	8000844 <main>
  bx  lr    
 8000bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bb4:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000bb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bbc:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000bc0:	08003d60 	.word	0x08003d60
  ldr r2, =_sbss
 8000bc4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000bc8:	200001d0 	.word	0x200001d0

08000bcc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bcc:	e7fe      	b.n	8000bcc <ADC_IRQHandler>

08000bce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bce:	b580      	push	{r7, lr}
 8000bd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd2:	2003      	movs	r0, #3
 8000bd4:	f000 fd4c 	bl	8001670 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f000 f805 	bl	8000be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bde:	f7ff fed3 	bl	8000988 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be2:	2300      	movs	r3, #0
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	bd80      	pop	{r7, pc}

08000be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <HAL_InitTick+0x54>)
 8000bf2:	681a      	ldr	r2, [r3, #0]
 8000bf4:	4b12      	ldr	r3, [pc, #72]	; (8000c40 <HAL_InitTick+0x58>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c06:	4618      	mov	r0, r3
 8000c08:	f000 fd67 	bl	80016da <HAL_SYSTICK_Config>
 8000c0c:	4603      	mov	r3, r0
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d001      	beq.n	8000c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c12:	2301      	movs	r3, #1
 8000c14:	e00e      	b.n	8000c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d80a      	bhi.n	8000c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	f04f 30ff 	mov.w	r0, #4294967295
 8000c24:	f000 fd2f 	bl	8001686 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c28:	4a06      	ldr	r2, [pc, #24]	; (8000c44 <HAL_InitTick+0x5c>)
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e000      	b.n	8000c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
}
 8000c34:	4618      	mov	r0, r3
 8000c36:	3708      	adds	r7, #8
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	20000004 	.word	0x20000004
 8000c40:	2000000c 	.word	0x2000000c
 8000c44:	20000008 	.word	0x20000008

08000c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c4c:	4b06      	ldr	r3, [pc, #24]	; (8000c68 <HAL_IncTick+0x20>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	461a      	mov	r2, r3
 8000c52:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <HAL_IncTick+0x24>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4413      	add	r3, r2
 8000c58:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_IncTick+0x24>)
 8000c5a:	6013      	str	r3, [r2, #0]
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	2000000c 	.word	0x2000000c
 8000c6c:	200001cc 	.word	0x200001cc

08000c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return uwTick;
 8000c74:	4b03      	ldr	r3, [pc, #12]	; (8000c84 <HAL_GetTick+0x14>)
 8000c76:	681b      	ldr	r3, [r3, #0]
}
 8000c78:	4618      	mov	r0, r3
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr
 8000c82:	bf00      	nop
 8000c84:	200001cc 	.word	0x200001cc

08000c88 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c90:	2300      	movs	r3, #0
 8000c92:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d101      	bne.n	8000c9e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c9a:	2301      	movs	r3, #1
 8000c9c:	e031      	b.n	8000d02 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d109      	bne.n	8000cba <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ca6:	6878      	ldr	r0, [r7, #4]
 8000ca8:	f7ff fca4 	bl	80005f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2200      	movs	r2, #0
 8000cb0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cbe:	f003 0310 	and.w	r3, r3, #16
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d116      	bne.n	8000cf4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_ADC_Init+0x84>)
 8000ccc:	4013      	ands	r3, r2
 8000cce:	f043 0202 	orr.w	r2, r3, #2
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000cd6:	6878      	ldr	r0, [r7, #4]
 8000cd8:	f000 fa7e 	bl	80011d8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce6:	f023 0303 	bic.w	r3, r3, #3
 8000cea:	f043 0201 	orr.w	r2, r3, #1
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000cf2:	e001      	b.n	8000cf8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	3710      	adds	r7, #16
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	ffffeefd 	.word	0xffffeefd

08000d10 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b086      	sub	sp, #24
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	60f8      	str	r0, [r7, #12]
 8000d18:	60b9      	str	r1, [r7, #8]
 8000d1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d101      	bne.n	8000d2e <HAL_ADC_Start_DMA+0x1e>
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	e0d4      	b.n	8000ed8 <HAL_ADC_Start_DMA+0x1c8>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2201      	movs	r2, #1
 8000d32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
     Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689b      	ldr	r3, [r3, #8]
 8000d3c:	f003 0301 	and.w	r3, r3, #1
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d018      	beq.n	8000d76 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	689a      	ldr	r2, [r3, #8]
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f042 0201 	orr.w	r2, r2, #1
 8000d52:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8000d54:	4b62      	ldr	r3, [pc, #392]	; (8000ee0 <HAL_ADC_Start_DMA+0x1d0>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	4a62      	ldr	r2, [pc, #392]	; (8000ee4 <HAL_ADC_Start_DMA+0x1d4>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	0c9a      	lsrs	r2, r3, #18
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000d68:	e002      	b.n	8000d70 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8000d6a:	697b      	ldr	r3, [r7, #20]
 8000d6c:	3b01      	subs	r3, #1
 8000d6e:	617b      	str	r3, [r7, #20]
    while(counter != 0)
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d1f9      	bne.n	8000d6a <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000d76:	68fb      	ldr	r3, [r7, #12]
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	f003 0301 	and.w	r3, r3, #1
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	f040 809c 	bne.w	8000ebe <HAL_ADC_Start_DMA+0x1ae>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d8a:	4b57      	ldr	r3, [pc, #348]	; (8000ee8 <HAL_ADC_Start_DMA+0x1d8>)
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d007      	beq.n	8000db4 <HAL_ADC_Start_DMA+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000dac:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000db0:	68fb      	ldr	r3, [r7, #12]
 8000db2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000dbc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000dc0:	d106      	bne.n	8000dd0 <HAL_ADC_Start_DMA+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc6:	f023 0206 	bic.w	r2, r3, #6
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	645a      	str	r2, [r3, #68]	; 0x44
 8000dce:	e002      	b.n	8000dd6 <HAL_ADC_Start_DMA+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000de2:	4a42      	ldr	r2, [pc, #264]	; (8000eec <HAL_ADC_Start_DMA+0x1dc>)
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dea:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <HAL_ADC_Start_DMA+0x1e0>)
 8000dec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000df2:	4a40      	ldr	r2, [pc, #256]	; (8000ef4 <HAL_ADC_Start_DMA+0x1e4>)
 8000df4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000df6:	68fb      	ldr	r3, [r7, #12]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8000e00:	68fb      	ldr	r3, [r7, #12]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	685a      	ldr	r2, [r3, #4]
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8000e0e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	689a      	ldr	r2, [r3, #8]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000e1e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	334c      	adds	r3, #76	; 0x4c
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	68ba      	ldr	r2, [r7, #8]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f000 fd0e 	bl	8001850 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8000e34:	4b30      	ldr	r3, [pc, #192]	; (8000ef8 <HAL_ADC_Start_DMA+0x1e8>)
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f003 031f 	and.w	r3, r3, #31
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d10f      	bne.n	8000e60 <HAL_ADC_Start_DMA+0x150>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d143      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	689a      	ldr	r2, [r3, #8]
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e5c:	609a      	str	r2, [r3, #8]
 8000e5e:	e03a      	b.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a25      	ldr	r2, [pc, #148]	; (8000efc <HAL_ADC_Start_DMA+0x1ec>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d10e      	bne.n	8000e88 <HAL_ADC_Start_DMA+0x178>
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	689b      	ldr	r3, [r3, #8]
 8000e70:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d107      	bne.n	8000e88 <HAL_ADC_Start_DMA+0x178>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000e86:	609a      	str	r2, [r3, #8]
      }
      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8000e88:	4b1b      	ldr	r3, [pc, #108]	; (8000ef8 <HAL_ADC_Start_DMA+0x1e8>)
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f003 0310 	and.w	r3, r3, #16
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d120      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
      {
        /* if instance of handle correspond to ADC3 and  no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a19      	ldr	r2, [pc, #100]	; (8000f00 <HAL_ADC_Start_DMA+0x1f0>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d11b      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689b      	ldr	r3, [r3, #8]
 8000ea4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d114      	bne.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	689a      	ldr	r2, [r3, #8]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	e00b      	b.n	8000ed6 <HAL_ADC_Start_DMA+0x1c6>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec2:	f043 0210 	orr.w	r2, r3, #16
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f043 0201 	orr.w	r2, r3, #1
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000ed6:	2300      	movs	r3, #0
}
 8000ed8:	4618      	mov	r0, r3
 8000eda:	3718      	adds	r7, #24
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000004 	.word	0x20000004
 8000ee4:	431bde83 	.word	0x431bde83
 8000ee8:	fffff8fe 	.word	0xfffff8fe
 8000eec:	080013cd 	.word	0x080013cd
 8000ef0:	08001487 	.word	0x08001487
 8000ef4:	080014a3 	.word	0x080014a3
 8000ef8:	40012300 	.word	0x40012300
 8000efc:	40012000 	.word	0x40012000
 8000f00:	40012200 	.word	0x40012200

08000f04 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8000f0c:	bf00      	nop
 8000f0e:	370c      	adds	r7, #12
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	b083      	sub	sp, #12
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8000f20:	bf00      	nop
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
 8000f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d101      	bne.n	8000f48 <HAL_ADC_ConfigChannel+0x1c>
 8000f44:	2302      	movs	r3, #2
 8000f46:	e136      	b.n	80011b6 <HAL_ADC_ConfigChannel+0x28a>
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b09      	cmp	r3, #9
 8000f56:	d93a      	bls.n	8000fce <HAL_ADC_ConfigChannel+0xa2>
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000f60:	d035      	beq.n	8000fce <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	68d9      	ldr	r1, [r3, #12]
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b29b      	uxth	r3, r3
 8000f6e:	461a      	mov	r2, r3
 8000f70:	4613      	mov	r3, r2
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	4413      	add	r3, r2
 8000f76:	3b1e      	subs	r3, #30
 8000f78:	2207      	movs	r2, #7
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43da      	mvns	r2, r3
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	400a      	ands	r2, r1
 8000f86:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	4a8d      	ldr	r2, [pc, #564]	; (80011c4 <HAL_ADC_ConfigChannel+0x298>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d10a      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	68d9      	ldr	r1, [r3, #12]
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	061a      	lsls	r2, r3, #24
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	430a      	orrs	r2, r1
 8000fa4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fa6:	e035      	b.n	8001014 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	68d9      	ldr	r1, [r3, #12]
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689a      	ldr	r2, [r3, #8]
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	b29b      	uxth	r3, r3
 8000fb8:	4618      	mov	r0, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	005b      	lsls	r3, r3, #1
 8000fbe:	4403      	add	r3, r0
 8000fc0:	3b1e      	subs	r3, #30
 8000fc2:	409a      	lsls	r2, r3
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	430a      	orrs	r2, r1
 8000fca:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fcc:	e022      	b.n	8001014 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	6919      	ldr	r1, [r3, #16]
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	b29b      	uxth	r3, r3
 8000fda:	461a      	mov	r2, r3
 8000fdc:	4613      	mov	r3, r2
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	4413      	add	r3, r2
 8000fe2:	2207      	movs	r2, #7
 8000fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe8:	43da      	mvns	r2, r3
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	400a      	ands	r2, r1
 8000ff0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	6919      	ldr	r1, [r3, #16]
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	689a      	ldr	r2, [r3, #8]
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	b29b      	uxth	r3, r3
 8001002:	4618      	mov	r0, r3
 8001004:	4603      	mov	r3, r0
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4403      	add	r3, r0
 800100a:	409a      	lsls	r2, r3
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	430a      	orrs	r2, r1
 8001012:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b06      	cmp	r3, #6
 800101a:	d824      	bhi.n	8001066 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685a      	ldr	r2, [r3, #4]
 8001026:	4613      	mov	r3, r2
 8001028:	009b      	lsls	r3, r3, #2
 800102a:	4413      	add	r3, r2
 800102c:	3b05      	subs	r3, #5
 800102e:	221f      	movs	r2, #31
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43da      	mvns	r2, r3
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	400a      	ands	r2, r1
 800103c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	b29b      	uxth	r3, r3
 800104a:	4618      	mov	r0, r3
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685a      	ldr	r2, [r3, #4]
 8001050:	4613      	mov	r3, r2
 8001052:	009b      	lsls	r3, r3, #2
 8001054:	4413      	add	r3, r2
 8001056:	3b05      	subs	r3, #5
 8001058:	fa00 f203 	lsl.w	r2, r0, r3
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	430a      	orrs	r2, r1
 8001062:	635a      	str	r2, [r3, #52]	; 0x34
 8001064:	e04c      	b.n	8001100 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	2b0c      	cmp	r3, #12
 800106c:	d824      	bhi.n	80010b8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	4613      	mov	r3, r2
 800107a:	009b      	lsls	r3, r3, #2
 800107c:	4413      	add	r3, r2
 800107e:	3b23      	subs	r3, #35	; 0x23
 8001080:	221f      	movs	r2, #31
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43da      	mvns	r2, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	400a      	ands	r2, r1
 800108e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	b29b      	uxth	r3, r3
 800109c:	4618      	mov	r0, r3
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685a      	ldr	r2, [r3, #4]
 80010a2:	4613      	mov	r3, r2
 80010a4:	009b      	lsls	r3, r3, #2
 80010a6:	4413      	add	r3, r2
 80010a8:	3b23      	subs	r3, #35	; 0x23
 80010aa:	fa00 f203 	lsl.w	r2, r0, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	430a      	orrs	r2, r1
 80010b4:	631a      	str	r2, [r3, #48]	; 0x30
 80010b6:	e023      	b.n	8001100 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	009b      	lsls	r3, r3, #2
 80010c6:	4413      	add	r3, r2
 80010c8:	3b41      	subs	r3, #65	; 0x41
 80010ca:	221f      	movs	r2, #31
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43da      	mvns	r2, r3
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	400a      	ands	r2, r1
 80010d8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4618      	mov	r0, r3
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b41      	subs	r3, #65	; 0x41
 80010f4:	fa00 f203 	lsl.w	r2, r0, r3
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	430a      	orrs	r2, r1
 80010fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a30      	ldr	r2, [pc, #192]	; (80011c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d10a      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x1f4>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001112:	d105      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001114:	4b2d      	ldr	r3, [pc, #180]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	4a2c      	ldr	r2, [pc, #176]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 800111a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800111e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a28      	ldr	r2, [pc, #160]	; (80011c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d10f      	bne.n	800114a <HAL_ADC_ConfigChannel+0x21e>
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2b12      	cmp	r3, #18
 8001130:	d10b      	bne.n	800114a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001132:	4b26      	ldr	r3, [pc, #152]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	4a25      	ldr	r2, [pc, #148]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001138:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800113c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800113e:	4b23      	ldr	r3, [pc, #140]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	4a22      	ldr	r2, [pc, #136]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001144:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001148:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4a1e      	ldr	r2, [pc, #120]	; (80011c8 <HAL_ADC_ConfigChannel+0x29c>)
 8001150:	4293      	cmp	r3, r2
 8001152:	d12b      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x280>
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	4a1a      	ldr	r2, [pc, #104]	; (80011c4 <HAL_ADC_ConfigChannel+0x298>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d003      	beq.n	8001166 <HAL_ADC_ConfigChannel+0x23a>
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b11      	cmp	r3, #17
 8001164:	d122      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001166:	4b19      	ldr	r3, [pc, #100]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001168:	685b      	ldr	r3, [r3, #4]
 800116a:	4a18      	ldr	r2, [pc, #96]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 800116c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001170:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001172:	4b16      	ldr	r3, [pc, #88]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	4a15      	ldr	r2, [pc, #84]	; (80011cc <HAL_ADC_ConfigChannel+0x2a0>)
 8001178:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800117c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800117e:	683b      	ldr	r3, [r7, #0]
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a10      	ldr	r2, [pc, #64]	; (80011c4 <HAL_ADC_ConfigChannel+0x298>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d111      	bne.n	80011ac <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_ADC_ConfigChannel+0x2a4>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a11      	ldr	r2, [pc, #68]	; (80011d4 <HAL_ADC_ConfigChannel+0x2a8>)
 800118e:	fba2 2303 	umull	r2, r3, r2, r3
 8001192:	0c9a      	lsrs	r2, r3, #18
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800119e:	e002      	b.n	80011a6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	3b01      	subs	r3, #1
 80011a4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d1f9      	bne.n	80011a0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2200      	movs	r2, #0
 80011b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80011b4:	2300      	movs	r3, #0
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3714      	adds	r7, #20
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	10000012 	.word	0x10000012
 80011c8:	40012000 	.word	0x40012000
 80011cc:	40012300 	.word	0x40012300
 80011d0:	20000004 	.word	0x20000004
 80011d4:	431bde83 	.word	0x431bde83

080011d8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <ADC_Init+0x1ec>)
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <ADC_Init+0x1ec>)
 80011e6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80011ea:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80011ec:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <ADC_Init+0x1ec>)
 80011ee:	685a      	ldr	r2, [r3, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4973      	ldr	r1, [pc, #460]	; (80013c4 <ADC_Init+0x1ec>)
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	685a      	ldr	r2, [r3, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001208:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	6859      	ldr	r1, [r3, #4]
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	021a      	lsls	r2, r3, #8
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	430a      	orrs	r2, r1
 800121c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800122c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6859      	ldr	r1, [r3, #4]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	430a      	orrs	r2, r1
 800123e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	689a      	ldr	r2, [r3, #8]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800124e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6899      	ldr	r1, [r3, #8]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	68da      	ldr	r2, [r3, #12]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	430a      	orrs	r2, r1
 8001260:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001266:	4a58      	ldr	r2, [pc, #352]	; (80013c8 <ADC_Init+0x1f0>)
 8001268:	4293      	cmp	r3, r2
 800126a:	d022      	beq.n	80012b2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689a      	ldr	r2, [r3, #8]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800127a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	6899      	ldr	r1, [r3, #8]
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	430a      	orrs	r2, r1
 800128c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	689a      	ldr	r2, [r3, #8]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800129c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	6899      	ldr	r1, [r3, #8]
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	430a      	orrs	r2, r1
 80012ae:	609a      	str	r2, [r3, #8]
 80012b0:	e00f      	b.n	80012d2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	689a      	ldr	r2, [r3, #8]
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80012c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	689a      	ldr	r2, [r3, #8]
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80012d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689a      	ldr	r2, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	f022 0202 	bic.w	r2, r2, #2
 80012e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	6899      	ldr	r1, [r3, #8]
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	005a      	lsls	r2, r3, #1
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	430a      	orrs	r2, r1
 80012f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d01b      	beq.n	8001338 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	685a      	ldr	r2, [r3, #4]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800130e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	685a      	ldr	r2, [r3, #4]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800131e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	6859      	ldr	r1, [r3, #4]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800132a:	3b01      	subs	r3, #1
 800132c:	035a      	lsls	r2, r3, #13
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	430a      	orrs	r2, r1
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	e007      	b.n	8001348 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	685a      	ldr	r2, [r3, #4]
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001346:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001356:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	69db      	ldr	r3, [r3, #28]
 8001362:	3b01      	subs	r3, #1
 8001364:	051a      	lsls	r2, r3, #20
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	430a      	orrs	r2, r1
 800136c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800137c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	6899      	ldr	r1, [r3, #8]
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800138a:	025a      	lsls	r2, r3, #9
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	430a      	orrs	r2, r1
 8001392:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	689a      	ldr	r2, [r3, #8]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6899      	ldr	r1, [r3, #8]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	695b      	ldr	r3, [r3, #20]
 80013ae:	029a      	lsls	r2, r3, #10
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	430a      	orrs	r2, r1
 80013b6:	609a      	str	r2, [r3, #8]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	40012300 	.word	0x40012300
 80013c8:	0f000001 	.word	0x0f000001

080013cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d13c      	bne.n	8001460 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d12b      	bne.n	8001458 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001404:	2b00      	cmp	r3, #0
 8001406:	d127      	bne.n	8001458 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800140e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001412:	2b00      	cmp	r3, #0
 8001414:	d006      	beq.n	8001424 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001420:	2b00      	cmp	r3, #0
 8001422:	d119      	bne.n	8001458 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	685a      	ldr	r2, [r3, #4]
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f022 0220 	bic.w	r2, r2, #32
 8001432:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001444:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d105      	bne.n	8001458 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001450:	f043 0201 	orr.w	r2, r3, #1
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fa7f 	bl	800095c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800145e:	e00e      	b.n	800147e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	d003      	beq.n	8001474 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800146c:	68f8      	ldr	r0, [r7, #12]
 800146e:	f7ff fd53 	bl	8000f18 <HAL_ADC_ErrorCallback>
}
 8001472:	e004      	b.n	800147e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	4798      	blx	r3
}
 800147e:	bf00      	nop
 8001480:	3710      	adds	r7, #16
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}

08001486 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001486:	b580      	push	{r7, lr}
 8001488:	b084      	sub	sp, #16
 800148a:	af00      	add	r7, sp, #0
 800148c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001492:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001494:	68f8      	ldr	r0, [r7, #12]
 8001496:	f7ff fd35 	bl	8000f04 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800149a:	bf00      	nop
 800149c:	3710      	adds	r7, #16
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b084      	sub	sp, #16
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	2240      	movs	r2, #64	; 0x40
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ba:	f043 0204 	orr.w	r2, r3, #4
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff fd28 	bl	8000f18 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80014c8:	bf00      	nop
 80014ca:	3710      	adds	r7, #16
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}

080014d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b085      	sub	sp, #20
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	f003 0307 	and.w	r3, r3, #7
 80014de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014e0:	4b0b      	ldr	r3, [pc, #44]	; (8001510 <__NVIC_SetPriorityGrouping+0x40>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014e6:	68ba      	ldr	r2, [r7, #8]
 80014e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014f4:	68bb      	ldr	r3, [r7, #8]
 80014f6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <__NVIC_SetPriorityGrouping+0x44>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014fe:	4a04      	ldr	r2, [pc, #16]	; (8001510 <__NVIC_SetPriorityGrouping+0x40>)
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	60d3      	str	r3, [r2, #12]
}
 8001504:	bf00      	nop
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00
 8001514:	05fa0000 	.word	0x05fa0000

08001518 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <__NVIC_GetPriorityGrouping+0x18>)
 800151e:	68db      	ldr	r3, [r3, #12]
 8001520:	0a1b      	lsrs	r3, r3, #8
 8001522:	f003 0307 	and.w	r3, r3, #7
}
 8001526:	4618      	mov	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152e:	4770      	bx	lr
 8001530:	e000ed00 	.word	0xe000ed00

08001534 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	4603      	mov	r3, r0
 800153c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	2b00      	cmp	r3, #0
 8001544:	db0b      	blt.n	800155e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001546:	79fb      	ldrb	r3, [r7, #7]
 8001548:	f003 021f 	and.w	r2, r3, #31
 800154c:	4907      	ldr	r1, [pc, #28]	; (800156c <__NVIC_EnableIRQ+0x38>)
 800154e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001552:	095b      	lsrs	r3, r3, #5
 8001554:	2001      	movs	r0, #1
 8001556:	fa00 f202 	lsl.w	r2, r0, r2
 800155a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800155e:	bf00      	nop
 8001560:	370c      	adds	r7, #12
 8001562:	46bd      	mov	sp, r7
 8001564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001568:	4770      	bx	lr
 800156a:	bf00      	nop
 800156c:	e000e100 	.word	0xe000e100

08001570 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	4603      	mov	r3, r0
 8001578:	6039      	str	r1, [r7, #0]
 800157a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	2b00      	cmp	r3, #0
 8001582:	db0a      	blt.n	800159a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	b2da      	uxtb	r2, r3
 8001588:	490c      	ldr	r1, [pc, #48]	; (80015bc <__NVIC_SetPriority+0x4c>)
 800158a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800158e:	0112      	lsls	r2, r2, #4
 8001590:	b2d2      	uxtb	r2, r2
 8001592:	440b      	add	r3, r1
 8001594:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001598:	e00a      	b.n	80015b0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800159a:	683b      	ldr	r3, [r7, #0]
 800159c:	b2da      	uxtb	r2, r3
 800159e:	4908      	ldr	r1, [pc, #32]	; (80015c0 <__NVIC_SetPriority+0x50>)
 80015a0:	79fb      	ldrb	r3, [r7, #7]
 80015a2:	f003 030f 	and.w	r3, r3, #15
 80015a6:	3b04      	subs	r3, #4
 80015a8:	0112      	lsls	r2, r2, #4
 80015aa:	b2d2      	uxtb	r2, r2
 80015ac:	440b      	add	r3, r1
 80015ae:	761a      	strb	r2, [r3, #24]
}
 80015b0:	bf00      	nop
 80015b2:	370c      	adds	r7, #12
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	e000e100 	.word	0xe000e100
 80015c0:	e000ed00 	.word	0xe000ed00

080015c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b089      	sub	sp, #36	; 0x24
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	60f8      	str	r0, [r7, #12]
 80015cc:	60b9      	str	r1, [r7, #8]
 80015ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015d8:	69fb      	ldr	r3, [r7, #28]
 80015da:	f1c3 0307 	rsb	r3, r3, #7
 80015de:	2b04      	cmp	r3, #4
 80015e0:	bf28      	it	cs
 80015e2:	2304      	movcs	r3, #4
 80015e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	3304      	adds	r3, #4
 80015ea:	2b06      	cmp	r3, #6
 80015ec:	d902      	bls.n	80015f4 <NVIC_EncodePriority+0x30>
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3b03      	subs	r3, #3
 80015f2:	e000      	b.n	80015f6 <NVIC_EncodePriority+0x32>
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015f8:	f04f 32ff 	mov.w	r2, #4294967295
 80015fc:	69bb      	ldr	r3, [r7, #24]
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43da      	mvns	r2, r3
 8001604:	68bb      	ldr	r3, [r7, #8]
 8001606:	401a      	ands	r2, r3
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800160c:	f04f 31ff 	mov.w	r1, #4294967295
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	fa01 f303 	lsl.w	r3, r1, r3
 8001616:	43d9      	mvns	r1, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	4313      	orrs	r3, r2
         );
}
 800161e:	4618      	mov	r0, r3
 8001620:	3724      	adds	r7, #36	; 0x24
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
	...

0800162c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3b01      	subs	r3, #1
 8001638:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800163c:	d301      	bcc.n	8001642 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800163e:	2301      	movs	r3, #1
 8001640:	e00f      	b.n	8001662 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001642:	4a0a      	ldr	r2, [pc, #40]	; (800166c <SysTick_Config+0x40>)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	3b01      	subs	r3, #1
 8001648:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800164a:	210f      	movs	r1, #15
 800164c:	f04f 30ff 	mov.w	r0, #4294967295
 8001650:	f7ff ff8e 	bl	8001570 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001654:	4b05      	ldr	r3, [pc, #20]	; (800166c <SysTick_Config+0x40>)
 8001656:	2200      	movs	r2, #0
 8001658:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800165a:	4b04      	ldr	r3, [pc, #16]	; (800166c <SysTick_Config+0x40>)
 800165c:	2207      	movs	r2, #7
 800165e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001660:	2300      	movs	r3, #0
}
 8001662:	4618      	mov	r0, r3
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	e000e010 	.word	0xe000e010

08001670 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ff29 	bl	80014d0 <__NVIC_SetPriorityGrouping>
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001686:	b580      	push	{r7, lr}
 8001688:	b086      	sub	sp, #24
 800168a:	af00      	add	r7, sp, #0
 800168c:	4603      	mov	r3, r0
 800168e:	60b9      	str	r1, [r7, #8]
 8001690:	607a      	str	r2, [r7, #4]
 8001692:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001694:	2300      	movs	r3, #0
 8001696:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001698:	f7ff ff3e 	bl	8001518 <__NVIC_GetPriorityGrouping>
 800169c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	68b9      	ldr	r1, [r7, #8]
 80016a2:	6978      	ldr	r0, [r7, #20]
 80016a4:	f7ff ff8e 	bl	80015c4 <NVIC_EncodePriority>
 80016a8:	4602      	mov	r2, r0
 80016aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016ae:	4611      	mov	r1, r2
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff ff5d 	bl	8001570 <__NVIC_SetPriority>
}
 80016b6:	bf00      	nop
 80016b8:	3718      	adds	r7, #24
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bd80      	pop	{r7, pc}

080016be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016be:	b580      	push	{r7, lr}
 80016c0:	b082      	sub	sp, #8
 80016c2:	af00      	add	r7, sp, #0
 80016c4:	4603      	mov	r3, r0
 80016c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016cc:	4618      	mov	r0, r3
 80016ce:	f7ff ff31 	bl	8001534 <__NVIC_EnableIRQ>
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ffa2 	bl	800162c <SysTick_Config>
 80016e8:	4603      	mov	r3, r0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}
	...

080016f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b086      	sub	sp, #24
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80016fc:	2300      	movs	r3, #0
 80016fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001700:	f7ff fab6 	bl	8000c70 <HAL_GetTick>
 8001704:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d101      	bne.n	8001710 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	e099      	b.n	8001844 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2202      	movs	r2, #2
 8001714:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	2200      	movs	r2, #0
 800171c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 0201 	bic.w	r2, r2, #1
 800172e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001730:	e00f      	b.n	8001752 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001732:	f7ff fa9d 	bl	8000c70 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b05      	cmp	r3, #5
 800173e:	d908      	bls.n	8001752 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	2220      	movs	r2, #32
 8001744:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2203      	movs	r2, #3
 800174a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800174e:	2303      	movs	r3, #3
 8001750:	e078      	b.n	8001844 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	f003 0301 	and.w	r3, r3, #1
 800175c:	2b00      	cmp	r3, #0
 800175e:	d1e8      	bne.n	8001732 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	4b38      	ldr	r3, [pc, #224]	; (800184c <HAL_DMA_Init+0x158>)
 800176c:	4013      	ands	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800177e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800179e:	697a      	ldr	r2, [r7, #20]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a8:	2b04      	cmp	r3, #4
 80017aa:	d107      	bne.n	80017bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b4:	4313      	orrs	r3, r2
 80017b6:	697a      	ldr	r2, [r7, #20]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	697a      	ldr	r2, [r7, #20]
 80017c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	f023 0307 	bic.w	r3, r3, #7
 80017d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	4313      	orrs	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e2:	2b04      	cmp	r3, #4
 80017e4:	d117      	bne.n	8001816 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d00e      	beq.n	8001816 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80017f8:	6878      	ldr	r0, [r7, #4]
 80017fa:	f000 fa77 	bl	8001cec <DMA_CheckFifoParam>
 80017fe:	4603      	mov	r3, r0
 8001800:	2b00      	cmp	r3, #0
 8001802:	d008      	beq.n	8001816 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2240      	movs	r2, #64	; 0x40
 8001808:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	2201      	movs	r2, #1
 800180e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001812:	2301      	movs	r3, #1
 8001814:	e016      	b.n	8001844 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	697a      	ldr	r2, [r7, #20]
 800181c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 fa2e 	bl	8001c80 <DMA_CalcBaseAndBitshift>
 8001824:	4603      	mov	r3, r0
 8001826:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800182c:	223f      	movs	r2, #63	; 0x3f
 800182e:	409a      	lsls	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3718      	adds	r7, #24
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	e010803f 	.word	0xe010803f

08001850 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
 800185c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800185e:	2300      	movs	r3, #0
 8001860:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001866:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800186e:	2b01      	cmp	r3, #1
 8001870:	d101      	bne.n	8001876 <HAL_DMA_Start_IT+0x26>
 8001872:	2302      	movs	r3, #2
 8001874:	e048      	b.n	8001908 <HAL_DMA_Start_IT+0xb8>
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	2201      	movs	r2, #1
 800187a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001884:	b2db      	uxtb	r3, r3
 8001886:	2b01      	cmp	r3, #1
 8001888:	d137      	bne.n	80018fa <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	2202      	movs	r2, #2
 800188e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	2200      	movs	r2, #0
 8001896:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	687a      	ldr	r2, [r7, #4]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	68f8      	ldr	r0, [r7, #12]
 80018a0:	f000 f9c0 	bl	8001c24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018a8:	223f      	movs	r2, #63	; 0x3f
 80018aa:	409a      	lsls	r2, r3
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f042 0216 	orr.w	r2, r2, #22
 80018be:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80018ce:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d007      	beq.n	80018e8 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f042 0208 	orr.w	r2, r2, #8
 80018e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f042 0201 	orr.w	r2, r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	e005      	b.n	8001906 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	2200      	movs	r2, #0
 80018fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001902:	2302      	movs	r3, #2
 8001904:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001906:	7dfb      	ldrb	r3, [r7, #23]
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}

08001910 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001918:	2300      	movs	r3, #0
 800191a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800191c:	4b8e      	ldr	r3, [pc, #568]	; (8001b58 <HAL_DMA_IRQHandler+0x248>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a8e      	ldr	r2, [pc, #568]	; (8001b5c <HAL_DMA_IRQHandler+0x24c>)
 8001922:	fba2 2303 	umull	r2, r3, r2, r3
 8001926:	0a9b      	lsrs	r3, r3, #10
 8001928:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2208      	movs	r2, #8
 800193c:	409a      	lsls	r2, r3
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	4013      	ands	r3, r2
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01a      	beq.n	800197c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d013      	beq.n	800197c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 0204 	bic.w	r2, r2, #4
 8001962:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001968:	2208      	movs	r2, #8
 800196a:	409a      	lsls	r2, r3
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001974:	f043 0201 	orr.w	r2, r3, #1
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001980:	2201      	movs	r2, #1
 8001982:	409a      	lsls	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	4013      	ands	r3, r2
 8001988:	2b00      	cmp	r3, #0
 800198a:	d012      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	695b      	ldr	r3, [r3, #20]
 8001992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00b      	beq.n	80019b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800199e:	2201      	movs	r2, #1
 80019a0:	409a      	lsls	r2, r3
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019aa:	f043 0202 	orr.w	r2, r3, #2
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b6:	2204      	movs	r2, #4
 80019b8:	409a      	lsls	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	4013      	ands	r3, r2
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d012      	beq.n	80019e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 0302 	and.w	r3, r3, #2
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d00b      	beq.n	80019e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	2204      	movs	r2, #4
 80019d6:	409a      	lsls	r2, r3
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019e0:	f043 0204 	orr.w	r2, r3, #4
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	2210      	movs	r2, #16
 80019ee:	409a      	lsls	r2, r3
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d043      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 0308 	and.w	r3, r3, #8
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d03c      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a0a:	2210      	movs	r2, #16
 8001a0c:	409a      	lsls	r2, r3
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d018      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d108      	bne.n	8001a40 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d024      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3a:	6878      	ldr	r0, [r7, #4]
 8001a3c:	4798      	blx	r3
 8001a3e:	e01f      	b.n	8001a80 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d01b      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4798      	blx	r3
 8001a50:	e016      	b.n	8001a80 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0208 	bic.w	r2, r2, #8
 8001a6e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d003      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a7c:	6878      	ldr	r0, [r7, #4]
 8001a7e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	2220      	movs	r2, #32
 8001a86:	409a      	lsls	r2, r3
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	f000 808f 	beq.w	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0310 	and.w	r3, r3, #16
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	f000 8087 	beq.w	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aa6:	2220      	movs	r2, #32
 8001aa8:	409a      	lsls	r2, r3
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab4:	b2db      	uxtb	r3, r3
 8001ab6:	2b05      	cmp	r3, #5
 8001ab8:	d136      	bne.n	8001b28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	681a      	ldr	r2, [r3, #0]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f022 0216 	bic.w	r2, r2, #22
 8001ac8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	695a      	ldr	r2, [r3, #20]
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d103      	bne.n	8001aea <HAL_DMA_IRQHandler+0x1da>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d007      	beq.n	8001afa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	681a      	ldr	r2, [r3, #0]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f022 0208 	bic.w	r2, r2, #8
 8001af8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001afe:	223f      	movs	r2, #63	; 0x3f
 8001b00:	409a      	lsls	r2, r3
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d07e      	beq.n	8001c1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	4798      	blx	r3
        }
        return;
 8001b26:	e079      	b.n	8001c1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d01d      	beq.n	8001b72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d10d      	bne.n	8001b60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d031      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b50:	6878      	ldr	r0, [r7, #4]
 8001b52:	4798      	blx	r3
 8001b54:	e02c      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
 8001b56:	bf00      	nop
 8001b58:	20000004 	.word	0x20000004
 8001b5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d023      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b6c:	6878      	ldr	r0, [r7, #4]
 8001b6e:	4798      	blx	r3
 8001b70:	e01e      	b.n	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d10f      	bne.n	8001ba0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f022 0210 	bic.w	r2, r2, #16
 8001b8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d032      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bbc:	f003 0301 	and.w	r3, r3, #1
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d022      	beq.n	8001c0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2205      	movs	r2, #5
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0201 	bic.w	r2, r2, #1
 8001bda:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	3301      	adds	r3, #1
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	697a      	ldr	r2, [r7, #20]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d307      	bcc.n	8001bf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d1f2      	bne.n	8001bdc <HAL_DMA_IRQHandler+0x2cc>
 8001bf6:	e000      	b.n	8001bfa <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001bf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	2200      	movs	r2, #0
 8001c06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d005      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c16:	6878      	ldr	r0, [r7, #4]
 8001c18:	4798      	blx	r3
 8001c1a:	e000      	b.n	8001c1e <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c1c:	bf00      	nop
    }
  }
}
 8001c1e:	3718      	adds	r7, #24
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}

08001c24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c24:	b480      	push	{r7}
 8001c26:	b085      	sub	sp, #20
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	60f8      	str	r0, [r7, #12]
 8001c2c:	60b9      	str	r1, [r7, #8]
 8001c2e:	607a      	str	r2, [r7, #4]
 8001c30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	689b      	ldr	r3, [r3, #8]
 8001c4e:	2b40      	cmp	r3, #64	; 0x40
 8001c50:	d108      	bne.n	8001c64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	687a      	ldr	r2, [r7, #4]
 8001c58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001c62:	e007      	b.n	8001c74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	68ba      	ldr	r2, [r7, #8]
 8001c6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	687a      	ldr	r2, [r7, #4]
 8001c72:	60da      	str	r2, [r3, #12]
}
 8001c74:	bf00      	nop
 8001c76:	3714      	adds	r7, #20
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	3b10      	subs	r3, #16
 8001c90:	4a13      	ldr	r2, [pc, #76]	; (8001ce0 <DMA_CalcBaseAndBitshift+0x60>)
 8001c92:	fba2 2303 	umull	r2, r3, r2, r3
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c9a:	4a12      	ldr	r2, [pc, #72]	; (8001ce4 <DMA_CalcBaseAndBitshift+0x64>)
 8001c9c:	68fb      	ldr	r3, [r7, #12]
 8001c9e:	4413      	add	r3, r2
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	461a      	mov	r2, r3
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2b03      	cmp	r3, #3
 8001cac:	d908      	bls.n	8001cc0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	1d1a      	adds	r2, r3, #4
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	659a      	str	r2, [r3, #88]	; 0x58
 8001cbe:	e006      	b.n	8001cce <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4b08      	ldr	r3, [pc, #32]	; (8001ce8 <DMA_CalcBaseAndBitshift+0x68>)
 8001cc8:	4013      	ands	r3, r2
 8001cca:	687a      	ldr	r2, [r7, #4]
 8001ccc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	3714      	adds	r7, #20
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	aaaaaaab 	.word	0xaaaaaaab
 8001ce4:	08003d48 	.word	0x08003d48
 8001ce8:	fffffc00 	.word	0xfffffc00

08001cec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d11f      	bne.n	8001d46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	2b03      	cmp	r3, #3
 8001d0a:	d856      	bhi.n	8001dba <DMA_CheckFifoParam+0xce>
 8001d0c:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <DMA_CheckFifoParam+0x28>)
 8001d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d12:	bf00      	nop
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001d37 	.word	0x08001d37
 8001d1c:	08001d25 	.word	0x08001d25
 8001d20:	08001dbb 	.word	0x08001dbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d046      	beq.n	8001dbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d34:	e043      	b.n	8001dbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d3e:	d140      	bne.n	8001dc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d44:	e03d      	b.n	8001dc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d4e:	d121      	bne.n	8001d94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	2b03      	cmp	r3, #3
 8001d54:	d837      	bhi.n	8001dc6 <DMA_CheckFifoParam+0xda>
 8001d56:	a201      	add	r2, pc, #4	; (adr r2, 8001d5c <DMA_CheckFifoParam+0x70>)
 8001d58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d5c:	08001d6d 	.word	0x08001d6d
 8001d60:	08001d73 	.word	0x08001d73
 8001d64:	08001d6d 	.word	0x08001d6d
 8001d68:	08001d85 	.word	0x08001d85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d70:	e030      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d025      	beq.n	8001dca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d82:	e022      	b.n	8001dca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d8c:	d11f      	bne.n	8001dce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d8e:	2301      	movs	r3, #1
 8001d90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d92:	e01c      	b.n	8001dce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	2b02      	cmp	r3, #2
 8001d98:	d903      	bls.n	8001da2 <DMA_CheckFifoParam+0xb6>
 8001d9a:	68bb      	ldr	r3, [r7, #8]
 8001d9c:	2b03      	cmp	r3, #3
 8001d9e:	d003      	beq.n	8001da8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001da0:	e018      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	73fb      	strb	r3, [r7, #15]
      break;
 8001da6:	e015      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d00e      	beq.n	8001dd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	73fb      	strb	r3, [r7, #15]
      break;
 8001db8:	e00b      	b.n	8001dd2 <DMA_CheckFifoParam+0xe6>
      break;
 8001dba:	bf00      	nop
 8001dbc:	e00a      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dbe:	bf00      	nop
 8001dc0:	e008      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc2:	bf00      	nop
 8001dc4:	e006      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dc6:	bf00      	nop
 8001dc8:	e004      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dca:	bf00      	nop
 8001dcc:	e002      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;   
 8001dce:	bf00      	nop
 8001dd0:	e000      	b.n	8001dd4 <DMA_CheckFifoParam+0xe8>
      break;
 8001dd2:	bf00      	nop
    }
  } 
  
  return status; 
 8001dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop

08001de4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b089      	sub	sp, #36	; 0x24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001dee:	2300      	movs	r3, #0
 8001df0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001df2:	2300      	movs	r3, #0
 8001df4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dfe:	2300      	movs	r3, #0
 8001e00:	61fb      	str	r3, [r7, #28]
 8001e02:	e175      	b.n	80020f0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001e04:	2201      	movs	r2, #1
 8001e06:	69fb      	ldr	r3, [r7, #28]
 8001e08:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	697a      	ldr	r2, [r7, #20]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e18:	693a      	ldr	r2, [r7, #16]
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	f040 8164 	bne.w	80020ea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b01      	cmp	r3, #1
 8001e2c:	d005      	beq.n	8001e3a <HAL_GPIO_Init+0x56>
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f003 0303 	and.w	r3, r3, #3
 8001e36:	2b02      	cmp	r3, #2
 8001e38:	d130      	bne.n	8001e9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001e40:	69fb      	ldr	r3, [r7, #28]
 8001e42:	005b      	lsls	r3, r3, #1
 8001e44:	2203      	movs	r2, #3
 8001e46:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4a:	43db      	mvns	r3, r3
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	4013      	ands	r3, r2
 8001e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	69fb      	ldr	r3, [r7, #28]
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5e:	69ba      	ldr	r2, [r7, #24]
 8001e60:	4313      	orrs	r3, r2
 8001e62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e70:	2201      	movs	r2, #1
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	fa02 f303 	lsl.w	r3, r2, r3
 8001e78:	43db      	mvns	r3, r3
 8001e7a:	69ba      	ldr	r2, [r7, #24]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	091b      	lsrs	r3, r3, #4
 8001e86:	f003 0201 	and.w	r2, r3, #1
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69ba      	ldr	r2, [r7, #24]
 8001e9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	685b      	ldr	r3, [r3, #4]
 8001ea0:	f003 0303 	and.w	r3, r3, #3
 8001ea4:	2b03      	cmp	r3, #3
 8001ea6:	d017      	beq.n	8001ed8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	68db      	ldr	r3, [r3, #12]
 8001eac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	005b      	lsls	r3, r3, #1
 8001eb2:	2203      	movs	r2, #3
 8001eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb8:	43db      	mvns	r3, r3
 8001eba:	69ba      	ldr	r2, [r7, #24]
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f003 0303 	and.w	r3, r3, #3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d123      	bne.n	8001f2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001ee4:	69fb      	ldr	r3, [r7, #28]
 8001ee6:	08da      	lsrs	r2, r3, #3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	3208      	adds	r2, #8
 8001eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	f003 0307 	and.w	r3, r3, #7
 8001ef8:	009b      	lsls	r3, r3, #2
 8001efa:	220f      	movs	r2, #15
 8001efc:	fa02 f303 	lsl.w	r3, r2, r3
 8001f00:	43db      	mvns	r3, r3
 8001f02:	69ba      	ldr	r2, [r7, #24]
 8001f04:	4013      	ands	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	691a      	ldr	r2, [r3, #16]
 8001f0c:	69fb      	ldr	r3, [r7, #28]
 8001f0e:	f003 0307 	and.w	r3, r3, #7
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	fa02 f303 	lsl.w	r3, r2, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4313      	orrs	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001f1e:	69fb      	ldr	r3, [r7, #28]
 8001f20:	08da      	lsrs	r2, r3, #3
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	3208      	adds	r2, #8
 8001f26:	69b9      	ldr	r1, [r7, #24]
 8001f28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001f32:	69fb      	ldr	r3, [r7, #28]
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	2203      	movs	r2, #3
 8001f38:	fa02 f303 	lsl.w	r3, r2, r3
 8001f3c:	43db      	mvns	r3, r3
 8001f3e:	69ba      	ldr	r2, [r7, #24]
 8001f40:	4013      	ands	r3, r2
 8001f42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	f003 0203 	and.w	r2, r3, #3
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	005b      	lsls	r3, r3, #1
 8001f50:	fa02 f303 	lsl.w	r3, r2, r3
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	4313      	orrs	r3, r2
 8001f58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001f60:	683b      	ldr	r3, [r7, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	f000 80be 	beq.w	80020ea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f6e:	4b66      	ldr	r3, [pc, #408]	; (8002108 <HAL_GPIO_Init+0x324>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a65      	ldr	r2, [pc, #404]	; (8002108 <HAL_GPIO_Init+0x324>)
 8001f74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b63      	ldr	r3, [pc, #396]	; (8002108 <HAL_GPIO_Init+0x324>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001f86:	4a61      	ldr	r2, [pc, #388]	; (800210c <HAL_GPIO_Init+0x328>)
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	089b      	lsrs	r3, r3, #2
 8001f8c:	3302      	adds	r3, #2
 8001f8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001f94:	69fb      	ldr	r3, [r7, #28]
 8001f96:	f003 0303 	and.w	r3, r3, #3
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	220f      	movs	r2, #15
 8001f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa2:	43db      	mvns	r3, r3
 8001fa4:	69ba      	ldr	r2, [r7, #24]
 8001fa6:	4013      	ands	r3, r2
 8001fa8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	4a58      	ldr	r2, [pc, #352]	; (8002110 <HAL_GPIO_Init+0x32c>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d037      	beq.n	8002022 <HAL_GPIO_Init+0x23e>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	4a57      	ldr	r2, [pc, #348]	; (8002114 <HAL_GPIO_Init+0x330>)
 8001fb6:	4293      	cmp	r3, r2
 8001fb8:	d031      	beq.n	800201e <HAL_GPIO_Init+0x23a>
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4a56      	ldr	r2, [pc, #344]	; (8002118 <HAL_GPIO_Init+0x334>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d02b      	beq.n	800201a <HAL_GPIO_Init+0x236>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	4a55      	ldr	r2, [pc, #340]	; (800211c <HAL_GPIO_Init+0x338>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d025      	beq.n	8002016 <HAL_GPIO_Init+0x232>
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	4a54      	ldr	r2, [pc, #336]	; (8002120 <HAL_GPIO_Init+0x33c>)
 8001fce:	4293      	cmp	r3, r2
 8001fd0:	d01f      	beq.n	8002012 <HAL_GPIO_Init+0x22e>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	4a53      	ldr	r2, [pc, #332]	; (8002124 <HAL_GPIO_Init+0x340>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d019      	beq.n	800200e <HAL_GPIO_Init+0x22a>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	4a52      	ldr	r2, [pc, #328]	; (8002128 <HAL_GPIO_Init+0x344>)
 8001fde:	4293      	cmp	r3, r2
 8001fe0:	d013      	beq.n	800200a <HAL_GPIO_Init+0x226>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4a51      	ldr	r2, [pc, #324]	; (800212c <HAL_GPIO_Init+0x348>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d00d      	beq.n	8002006 <HAL_GPIO_Init+0x222>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a50      	ldr	r2, [pc, #320]	; (8002130 <HAL_GPIO_Init+0x34c>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d007      	beq.n	8002002 <HAL_GPIO_Init+0x21e>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	4a4f      	ldr	r2, [pc, #316]	; (8002134 <HAL_GPIO_Init+0x350>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d101      	bne.n	8001ffe <HAL_GPIO_Init+0x21a>
 8001ffa:	2309      	movs	r3, #9
 8001ffc:	e012      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8001ffe:	230a      	movs	r3, #10
 8002000:	e010      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8002002:	2308      	movs	r3, #8
 8002004:	e00e      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8002006:	2307      	movs	r3, #7
 8002008:	e00c      	b.n	8002024 <HAL_GPIO_Init+0x240>
 800200a:	2306      	movs	r3, #6
 800200c:	e00a      	b.n	8002024 <HAL_GPIO_Init+0x240>
 800200e:	2305      	movs	r3, #5
 8002010:	e008      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8002012:	2304      	movs	r3, #4
 8002014:	e006      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8002016:	2303      	movs	r3, #3
 8002018:	e004      	b.n	8002024 <HAL_GPIO_Init+0x240>
 800201a:	2302      	movs	r3, #2
 800201c:	e002      	b.n	8002024 <HAL_GPIO_Init+0x240>
 800201e:	2301      	movs	r3, #1
 8002020:	e000      	b.n	8002024 <HAL_GPIO_Init+0x240>
 8002022:	2300      	movs	r3, #0
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	f002 0203 	and.w	r2, r2, #3
 800202a:	0092      	lsls	r2, r2, #2
 800202c:	4093      	lsls	r3, r2
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	4313      	orrs	r3, r2
 8002032:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002034:	4935      	ldr	r1, [pc, #212]	; (800210c <HAL_GPIO_Init+0x328>)
 8002036:	69fb      	ldr	r3, [r7, #28]
 8002038:	089b      	lsrs	r3, r3, #2
 800203a:	3302      	adds	r3, #2
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002042:	4b3d      	ldr	r3, [pc, #244]	; (8002138 <HAL_GPIO_Init+0x354>)
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d003      	beq.n	8002066 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	693b      	ldr	r3, [r7, #16]
 8002062:	4313      	orrs	r3, r2
 8002064:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002066:	4a34      	ldr	r2, [pc, #208]	; (8002138 <HAL_GPIO_Init+0x354>)
 8002068:	69bb      	ldr	r3, [r7, #24]
 800206a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800206c:	4b32      	ldr	r3, [pc, #200]	; (8002138 <HAL_GPIO_Init+0x354>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	43db      	mvns	r3, r3
 8002076:	69ba      	ldr	r2, [r7, #24]
 8002078:	4013      	ands	r3, r2
 800207a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	685b      	ldr	r3, [r3, #4]
 8002080:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002084:	2b00      	cmp	r3, #0
 8002086:	d003      	beq.n	8002090 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002088:	69ba      	ldr	r2, [r7, #24]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002090:	4a29      	ldr	r2, [pc, #164]	; (8002138 <HAL_GPIO_Init+0x354>)
 8002092:	69bb      	ldr	r3, [r7, #24]
 8002094:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002096:	4b28      	ldr	r3, [pc, #160]	; (8002138 <HAL_GPIO_Init+0x354>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	43db      	mvns	r3, r3
 80020a0:	69ba      	ldr	r2, [r7, #24]
 80020a2:	4013      	ands	r3, r2
 80020a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d003      	beq.n	80020ba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80020b2:	69ba      	ldr	r2, [r7, #24]
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	4313      	orrs	r3, r2
 80020b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ba:	4a1f      	ldr	r2, [pc, #124]	; (8002138 <HAL_GPIO_Init+0x354>)
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80020c0:	4b1d      	ldr	r3, [pc, #116]	; (8002138 <HAL_GPIO_Init+0x354>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d003      	beq.n	80020e4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020e4:	4a14      	ldr	r2, [pc, #80]	; (8002138 <HAL_GPIO_Init+0x354>)
 80020e6:	69bb      	ldr	r3, [r7, #24]
 80020e8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	3301      	adds	r3, #1
 80020ee:	61fb      	str	r3, [r7, #28]
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	2b0f      	cmp	r3, #15
 80020f4:	f67f ae86 	bls.w	8001e04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80020f8:	bf00      	nop
 80020fa:	bf00      	nop
 80020fc:	3724      	adds	r7, #36	; 0x24
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	40023800 	.word	0x40023800
 800210c:	40013800 	.word	0x40013800
 8002110:	40020000 	.word	0x40020000
 8002114:	40020400 	.word	0x40020400
 8002118:	40020800 	.word	0x40020800
 800211c:	40020c00 	.word	0x40020c00
 8002120:	40021000 	.word	0x40021000
 8002124:	40021400 	.word	0x40021400
 8002128:	40021800 	.word	0x40021800
 800212c:	40021c00 	.word	0x40021c00
 8002130:	40022000 	.word	0x40022000
 8002134:	40022400 	.word	0x40022400
 8002138:	40013c00 	.word	0x40013c00

0800213c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	460b      	mov	r3, r1
 8002146:	807b      	strh	r3, [r7, #2]
 8002148:	4613      	mov	r3, r2
 800214a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800214c:	787b      	ldrb	r3, [r7, #1]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002152:	887a      	ldrh	r2, [r7, #2]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002158:	e003      	b.n	8002162 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800215a:	887b      	ldrh	r3, [r7, #2]
 800215c:	041a      	lsls	r2, r3, #16
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	619a      	str	r2, [r3, #24]
}
 8002162:	bf00      	nop
 8002164:	370c      	adds	r7, #12
 8002166:	46bd      	mov	sp, r7
 8002168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216c:	4770      	bx	lr
	...

08002170 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002178:	2300      	movs	r3, #0
 800217a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e29b      	b.n	80026be <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 8087 	beq.w	80022a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002194:	4b96      	ldr	r3, [pc, #600]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f003 030c 	and.w	r3, r3, #12
 800219c:	2b04      	cmp	r3, #4
 800219e:	d00c      	beq.n	80021ba <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021a0:	4b93      	ldr	r3, [pc, #588]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	f003 030c 	and.w	r3, r3, #12
 80021a8:	2b08      	cmp	r3, #8
 80021aa:	d112      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62>
 80021ac:	4b90      	ldr	r3, [pc, #576]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021ae:	685b      	ldr	r3, [r3, #4]
 80021b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021b8:	d10b      	bne.n	80021d2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021ba:	4b8d      	ldr	r3, [pc, #564]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d06c      	beq.n	80022a0 <HAL_RCC_OscConfig+0x130>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d168      	bne.n	80022a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e275      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021da:	d106      	bne.n	80021ea <HAL_RCC_OscConfig+0x7a>
 80021dc:	4b84      	ldr	r3, [pc, #528]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	4a83      	ldr	r2, [pc, #524]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80021e6:	6013      	str	r3, [r2, #0]
 80021e8:	e02e      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x9c>
 80021f2:	4b7f      	ldr	r3, [pc, #508]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a7e      	ldr	r2, [pc, #504]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80021f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80021fc:	6013      	str	r3, [r2, #0]
 80021fe:	4b7c      	ldr	r3, [pc, #496]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4a7b      	ldr	r2, [pc, #492]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002204:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002208:	6013      	str	r3, [r2, #0]
 800220a:	e01d      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002214:	d10c      	bne.n	8002230 <HAL_RCC_OscConfig+0xc0>
 8002216:	4b76      	ldr	r3, [pc, #472]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a75      	ldr	r2, [pc, #468]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800221c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b73      	ldr	r3, [pc, #460]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	4a72      	ldr	r2, [pc, #456]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800222c:	6013      	str	r3, [r2, #0]
 800222e:	e00b      	b.n	8002248 <HAL_RCC_OscConfig+0xd8>
 8002230:	4b6f      	ldr	r3, [pc, #444]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a6e      	ldr	r2, [pc, #440]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002236:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800223a:	6013      	str	r3, [r2, #0]
 800223c:	4b6c      	ldr	r3, [pc, #432]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a6b      	ldr	r2, [pc, #428]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002242:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002246:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d013      	beq.n	8002278 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002250:	f7fe fd0e 	bl	8000c70 <HAL_GetTick>
 8002254:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	e008      	b.n	800226a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002258:	f7fe fd0a 	bl	8000c70 <HAL_GetTick>
 800225c:	4602      	mov	r2, r0
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	1ad3      	subs	r3, r2, r3
 8002262:	2b64      	cmp	r3, #100	; 0x64
 8002264:	d901      	bls.n	800226a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002266:	2303      	movs	r3, #3
 8002268:	e229      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800226a:	4b61      	ldr	r3, [pc, #388]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d0f0      	beq.n	8002258 <HAL_RCC_OscConfig+0xe8>
 8002276:	e014      	b.n	80022a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002278:	f7fe fcfa 	bl	8000c70 <HAL_GetTick>
 800227c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800227e:	e008      	b.n	8002292 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002280:	f7fe fcf6 	bl	8000c70 <HAL_GetTick>
 8002284:	4602      	mov	r2, r0
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	1ad3      	subs	r3, r2, r3
 800228a:	2b64      	cmp	r3, #100	; 0x64
 800228c:	d901      	bls.n	8002292 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e215      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002292:	4b57      	ldr	r3, [pc, #348]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229a:	2b00      	cmp	r3, #0
 800229c:	d1f0      	bne.n	8002280 <HAL_RCC_OscConfig+0x110>
 800229e:	e000      	b.n	80022a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d069      	beq.n	8002382 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022ae:	4b50      	ldr	r3, [pc, #320]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f003 030c 	and.w	r3, r3, #12
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00b      	beq.n	80022d2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80022ba:	4b4d      	ldr	r3, [pc, #308]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	f003 030c 	and.w	r3, r3, #12
 80022c2:	2b08      	cmp	r3, #8
 80022c4:	d11c      	bne.n	8002300 <HAL_RCC_OscConfig+0x190>
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d116      	bne.n	8002300 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022d2:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0302 	and.w	r3, r3, #2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d005      	beq.n	80022ea <HAL_RCC_OscConfig+0x17a>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e1e9      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ea:	4b41      	ldr	r3, [pc, #260]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	691b      	ldr	r3, [r3, #16]
 80022f6:	00db      	lsls	r3, r3, #3
 80022f8:	493d      	ldr	r1, [pc, #244]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022fe:	e040      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d023      	beq.n	8002350 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002308:	4b39      	ldr	r3, [pc, #228]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a38      	ldr	r2, [pc, #224]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800230e:	f043 0301 	orr.w	r3, r3, #1
 8002312:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002314:	f7fe fcac 	bl	8000c70 <HAL_GetTick>
 8002318:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231a:	e008      	b.n	800232e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800231c:	f7fe fca8 	bl	8000c70 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	1ad3      	subs	r3, r2, r3
 8002326:	2b02      	cmp	r3, #2
 8002328:	d901      	bls.n	800232e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800232a:	2303      	movs	r3, #3
 800232c:	e1c7      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d0f0      	beq.n	800231c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4929      	ldr	r1, [pc, #164]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
 800234e:	e018      	b.n	8002382 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a26      	ldr	r2, [pc, #152]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002356:	f023 0301 	bic.w	r3, r3, #1
 800235a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235c:	f7fe fc88 	bl	8000c70 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002364:	f7fe fc84 	bl	8000c70 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e1a3      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002376:	4b1e      	ldr	r3, [pc, #120]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	2b00      	cmp	r3, #0
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0308 	and.w	r3, r3, #8
 800238a:	2b00      	cmp	r3, #0
 800238c:	d038      	beq.n	8002400 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d019      	beq.n	80023ca <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002396:	4b16      	ldr	r3, [pc, #88]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 8002398:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800239a:	4a15      	ldr	r2, [pc, #84]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023a2:	f7fe fc65 	bl	8000c70 <HAL_GetTick>
 80023a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023a8:	e008      	b.n	80023bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023aa:	f7fe fc61 	bl	8000c70 <HAL_GetTick>
 80023ae:	4602      	mov	r2, r0
 80023b0:	693b      	ldr	r3, [r7, #16]
 80023b2:	1ad3      	subs	r3, r2, r3
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e180      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023bc:	4b0c      	ldr	r3, [pc, #48]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d0f0      	beq.n	80023aa <HAL_RCC_OscConfig+0x23a>
 80023c8:	e01a      	b.n	8002400 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80023ca:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ce:	4a08      	ldr	r2, [pc, #32]	; (80023f0 <HAL_RCC_OscConfig+0x280>)
 80023d0:	f023 0301 	bic.w	r3, r3, #1
 80023d4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023d6:	f7fe fc4b 	bl	8000c70 <HAL_GetTick>
 80023da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023dc:	e00a      	b.n	80023f4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023de:	f7fe fc47 	bl	8000c70 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d903      	bls.n	80023f4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e166      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
 80023f0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023f4:	4b92      	ldr	r3, [pc, #584]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80023f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f8:	f003 0302 	and.w	r3, r3, #2
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1ee      	bne.n	80023de <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80a4 	beq.w	8002556 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800240e:	4b8c      	ldr	r3, [pc, #560]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10d      	bne.n	8002436 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800241a:	4b89      	ldr	r3, [pc, #548]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800241c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241e:	4a88      	ldr	r2, [pc, #544]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002420:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002424:	6413      	str	r3, [r2, #64]	; 0x40
 8002426:	4b86      	ldr	r3, [pc, #536]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800242a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800242e:	60bb      	str	r3, [r7, #8]
 8002430:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002432:	2301      	movs	r3, #1
 8002434:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002436:	4b83      	ldr	r3, [pc, #524]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243e:	2b00      	cmp	r3, #0
 8002440:	d118      	bne.n	8002474 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002442:	4b80      	ldr	r3, [pc, #512]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a7f      	ldr	r2, [pc, #508]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 8002448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800244c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800244e:	f7fe fc0f 	bl	8000c70 <HAL_GetTick>
 8002452:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002454:	e008      	b.n	8002468 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002456:	f7fe fc0b 	bl	8000c70 <HAL_GetTick>
 800245a:	4602      	mov	r2, r0
 800245c:	693b      	ldr	r3, [r7, #16]
 800245e:	1ad3      	subs	r3, r2, r3
 8002460:	2b64      	cmp	r3, #100	; 0x64
 8002462:	d901      	bls.n	8002468 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002464:	2303      	movs	r3, #3
 8002466:	e12a      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002468:	4b76      	ldr	r3, [pc, #472]	; (8002644 <HAL_RCC_OscConfig+0x4d4>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002470:	2b00      	cmp	r3, #0
 8002472:	d0f0      	beq.n	8002456 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b01      	cmp	r3, #1
 800247a:	d106      	bne.n	800248a <HAL_RCC_OscConfig+0x31a>
 800247c:	4b70      	ldr	r3, [pc, #448]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800247e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002480:	4a6f      	ldr	r2, [pc, #444]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002482:	f043 0301 	orr.w	r3, r3, #1
 8002486:	6713      	str	r3, [r2, #112]	; 0x70
 8002488:	e02d      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d10c      	bne.n	80024ac <HAL_RCC_OscConfig+0x33c>
 8002492:	4b6b      	ldr	r3, [pc, #428]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002494:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002496:	4a6a      	ldr	r2, [pc, #424]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002498:	f023 0301 	bic.w	r3, r3, #1
 800249c:	6713      	str	r3, [r2, #112]	; 0x70
 800249e:	4b68      	ldr	r3, [pc, #416]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024a2:	4a67      	ldr	r2, [pc, #412]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024a4:	f023 0304 	bic.w	r3, r3, #4
 80024a8:	6713      	str	r3, [r2, #112]	; 0x70
 80024aa:	e01c      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	2b05      	cmp	r3, #5
 80024b2:	d10c      	bne.n	80024ce <HAL_RCC_OscConfig+0x35e>
 80024b4:	4b62      	ldr	r3, [pc, #392]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024b8:	4a61      	ldr	r2, [pc, #388]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024ba:	f043 0304 	orr.w	r3, r3, #4
 80024be:	6713      	str	r3, [r2, #112]	; 0x70
 80024c0:	4b5f      	ldr	r3, [pc, #380]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024c4:	4a5e      	ldr	r2, [pc, #376]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024c6:	f043 0301 	orr.w	r3, r3, #1
 80024ca:	6713      	str	r3, [r2, #112]	; 0x70
 80024cc:	e00b      	b.n	80024e6 <HAL_RCC_OscConfig+0x376>
 80024ce:	4b5c      	ldr	r3, [pc, #368]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d2:	4a5b      	ldr	r2, [pc, #364]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024d4:	f023 0301 	bic.w	r3, r3, #1
 80024d8:	6713      	str	r3, [r2, #112]	; 0x70
 80024da:	4b59      	ldr	r3, [pc, #356]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024de:	4a58      	ldr	r2, [pc, #352]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80024e0:	f023 0304 	bic.w	r3, r3, #4
 80024e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d015      	beq.n	800251a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ee:	f7fe fbbf 	bl	8000c70 <HAL_GetTick>
 80024f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024f4:	e00a      	b.n	800250c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024f6:	f7fe fbbb 	bl	8000c70 <HAL_GetTick>
 80024fa:	4602      	mov	r2, r0
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	1ad3      	subs	r3, r2, r3
 8002500:	f241 3288 	movw	r2, #5000	; 0x1388
 8002504:	4293      	cmp	r3, r2
 8002506:	d901      	bls.n	800250c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e0d8      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800250c:	4b4c      	ldr	r3, [pc, #304]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f003 0302 	and.w	r3, r3, #2
 8002514:	2b00      	cmp	r3, #0
 8002516:	d0ee      	beq.n	80024f6 <HAL_RCC_OscConfig+0x386>
 8002518:	e014      	b.n	8002544 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251a:	f7fe fba9 	bl	8000c70 <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002520:	e00a      	b.n	8002538 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002522:	f7fe fba5 	bl	8000c70 <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0c2      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002538:	4b41      	ldr	r3, [pc, #260]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800253a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ee      	bne.n	8002522 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002544:	7dfb      	ldrb	r3, [r7, #23]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d105      	bne.n	8002556 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800254a:	4b3d      	ldr	r3, [pc, #244]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a3c      	ldr	r2, [pc, #240]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002550:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	699b      	ldr	r3, [r3, #24]
 800255a:	2b00      	cmp	r3, #0
 800255c:	f000 80ae 	beq.w	80026bc <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002560:	4b37      	ldr	r3, [pc, #220]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002562:	689b      	ldr	r3, [r3, #8]
 8002564:	f003 030c 	and.w	r3, r3, #12
 8002568:	2b08      	cmp	r3, #8
 800256a:	d06d      	beq.n	8002648 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b02      	cmp	r3, #2
 8002572:	d14b      	bne.n	800260c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002574:	4b32      	ldr	r3, [pc, #200]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a31      	ldr	r2, [pc, #196]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800257a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800257e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002580:	f7fe fb76 	bl	8000c70 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002588:	f7fe fb72 	bl	8000c70 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e091      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800259a:	4b29      	ldr	r3, [pc, #164]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d1f0      	bne.n	8002588 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69da      	ldr	r2, [r3, #28]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6a1b      	ldr	r3, [r3, #32]
 80025ae:	431a      	orrs	r2, r3
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025b4:	019b      	lsls	r3, r3, #6
 80025b6:	431a      	orrs	r2, r3
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	085b      	lsrs	r3, r3, #1
 80025be:	3b01      	subs	r3, #1
 80025c0:	041b      	lsls	r3, r3, #16
 80025c2:	431a      	orrs	r2, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	061b      	lsls	r3, r3, #24
 80025ca:	431a      	orrs	r2, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d0:	071b      	lsls	r3, r3, #28
 80025d2:	491b      	ldr	r1, [pc, #108]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025d8:	4b19      	ldr	r3, [pc, #100]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a18      	ldr	r2, [pc, #96]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 80025de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80025e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025e4:	f7fe fb44 	bl	8000c70 <HAL_GetTick>
 80025e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ea:	e008      	b.n	80025fe <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ec:	f7fe fb40 	bl	8000c70 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	693b      	ldr	r3, [r7, #16]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d901      	bls.n	80025fe <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e05f      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025fe:	4b10      	ldr	r3, [pc, #64]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d0f0      	beq.n	80025ec <HAL_RCC_OscConfig+0x47c>
 800260a:	e057      	b.n	80026bc <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800260c:	4b0c      	ldr	r3, [pc, #48]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	4a0b      	ldr	r2, [pc, #44]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002612:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002616:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fb2a 	bl	8000c70 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002620:	f7fe fb26 	bl	8000c70 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b02      	cmp	r3, #2
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e045      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002632:	4b03      	ldr	r3, [pc, #12]	; (8002640 <HAL_RCC_OscConfig+0x4d0>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d1f0      	bne.n	8002620 <HAL_RCC_OscConfig+0x4b0>
 800263e:	e03d      	b.n	80026bc <HAL_RCC_OscConfig+0x54c>
 8002640:	40023800 	.word	0x40023800
 8002644:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002648:	4b1f      	ldr	r3, [pc, #124]	; (80026c8 <HAL_RCC_OscConfig+0x558>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b01      	cmp	r3, #1
 8002654:	d030      	beq.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002660:	429a      	cmp	r2, r3
 8002662:	d129      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800266e:	429a      	cmp	r2, r3
 8002670:	d122      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002678:	4013      	ands	r3, r2
 800267a:	687a      	ldr	r2, [r7, #4]
 800267c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800267e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002680:	4293      	cmp	r3, r2
 8002682:	d119      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	3b01      	subs	r3, #1
 8002692:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002694:	429a      	cmp	r2, r3
 8002696:	d10f      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026a2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d107      	bne.n	80026b8 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b2:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d001      	beq.n	80026bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e000      	b.n	80026be <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80026bc:	2300      	movs	r3, #0
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023800 	.word	0x40023800

080026cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b084      	sub	sp, #16
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
 80026d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80026d6:	2300      	movs	r3, #0
 80026d8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80026e0:	2301      	movs	r3, #1
 80026e2:	e0d0      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026e4:	4b6a      	ldr	r3, [pc, #424]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 030f 	and.w	r3, r3, #15
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	429a      	cmp	r2, r3
 80026f0:	d910      	bls.n	8002714 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026f2:	4b67      	ldr	r3, [pc, #412]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f023 020f 	bic.w	r2, r3, #15
 80026fa:	4965      	ldr	r1, [pc, #404]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	4313      	orrs	r3, r2
 8002700:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002702:	4b63      	ldr	r3, [pc, #396]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	429a      	cmp	r2, r3
 800270e:	d001      	beq.n	8002714 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e0b8      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f003 0304 	and.w	r3, r3, #4
 8002728:	2b00      	cmp	r3, #0
 800272a:	d005      	beq.n	8002738 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800272c:	4b59      	ldr	r3, [pc, #356]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800272e:	689b      	ldr	r3, [r3, #8]
 8002730:	4a58      	ldr	r2, [pc, #352]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002732:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002736:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f003 0308 	and.w	r3, r3, #8
 8002740:	2b00      	cmp	r3, #0
 8002742:	d005      	beq.n	8002750 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002744:	4b53      	ldr	r3, [pc, #332]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	4a52      	ldr	r2, [pc, #328]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800274a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800274e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002750:	4b50      	ldr	r3, [pc, #320]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	494d      	ldr	r1, [pc, #308]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800275e:	4313      	orrs	r3, r2
 8002760:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	2b00      	cmp	r3, #0
 800276c:	d040      	beq.n	80027f0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d107      	bne.n	8002786 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002776:	4b47      	ldr	r3, [pc, #284]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d115      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e07f      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b02      	cmp	r3, #2
 800278c:	d107      	bne.n	800279e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800278e:	4b41      	ldr	r3, [pc, #260]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d109      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e073      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800279e:	4b3d      	ldr	r3, [pc, #244]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d101      	bne.n	80027ae <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e06b      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027ae:	4b39      	ldr	r3, [pc, #228]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	f023 0203 	bic.w	r2, r3, #3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	4936      	ldr	r1, [pc, #216]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c0:	f7fe fa56 	bl	8000c70 <HAL_GetTick>
 80027c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027c6:	e00a      	b.n	80027de <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027c8:	f7fe fa52 	bl	8000c70 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d901      	bls.n	80027de <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e053      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027de:	4b2d      	ldr	r3, [pc, #180]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f003 020c 	and.w	r2, r3, #12
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	685b      	ldr	r3, [r3, #4]
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d1eb      	bne.n	80027c8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f0:	4b27      	ldr	r3, [pc, #156]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 030f 	and.w	r3, r3, #15
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d210      	bcs.n	8002820 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b24      	ldr	r3, [pc, #144]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f023 020f 	bic.w	r2, r3, #15
 8002806:	4922      	ldr	r1, [pc, #136]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	4313      	orrs	r3, r2
 800280c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800280e:	4b20      	ldr	r3, [pc, #128]	; (8002890 <HAL_RCC_ClockConfig+0x1c4>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 030f 	and.w	r3, r3, #15
 8002816:	683a      	ldr	r2, [r7, #0]
 8002818:	429a      	cmp	r2, r3
 800281a:	d001      	beq.n	8002820 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800281c:	2301      	movs	r3, #1
 800281e:	e032      	b.n	8002886 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0304 	and.w	r3, r3, #4
 8002828:	2b00      	cmp	r3, #0
 800282a:	d008      	beq.n	800283e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800282c:	4b19      	ldr	r3, [pc, #100]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	4916      	ldr	r1, [pc, #88]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800283a:	4313      	orrs	r3, r2
 800283c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f003 0308 	and.w	r3, r3, #8
 8002846:	2b00      	cmp	r3, #0
 8002848:	d009      	beq.n	800285e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800284a:	4b12      	ldr	r3, [pc, #72]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	490e      	ldr	r1, [pc, #56]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 800285a:	4313      	orrs	r3, r2
 800285c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800285e:	f000 f821 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 8002862:	4602      	mov	r2, r0
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	091b      	lsrs	r3, r3, #4
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	490a      	ldr	r1, [pc, #40]	; (8002898 <HAL_RCC_ClockConfig+0x1cc>)
 8002870:	5ccb      	ldrb	r3, [r1, r3]
 8002872:	fa22 f303 	lsr.w	r3, r2, r3
 8002876:	4a09      	ldr	r2, [pc, #36]	; (800289c <HAL_RCC_ClockConfig+0x1d0>)
 8002878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800287a:	4b09      	ldr	r3, [pc, #36]	; (80028a0 <HAL_RCC_ClockConfig+0x1d4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4618      	mov	r0, r3
 8002880:	f7fe f9b2 	bl	8000be8 <HAL_InitTick>

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	40023c00 	.word	0x40023c00
 8002894:	40023800 	.word	0x40023800
 8002898:	08003d30 	.word	0x08003d30
 800289c:	20000004 	.word	0x20000004
 80028a0:	20000008 	.word	0x20000008

080028a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028a8:	b090      	sub	sp, #64	; 0x40
 80028aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028ac:	2300      	movs	r3, #0
 80028ae:	637b      	str	r3, [r7, #52]	; 0x34
 80028b0:	2300      	movs	r3, #0
 80028b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028b4:	2300      	movs	r3, #0
 80028b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 80028b8:	2300      	movs	r3, #0
 80028ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028bc:	4b59      	ldr	r3, [pc, #356]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	f003 030c 	and.w	r3, r3, #12
 80028c4:	2b08      	cmp	r3, #8
 80028c6:	d00d      	beq.n	80028e4 <HAL_RCC_GetSysClockFreq+0x40>
 80028c8:	2b08      	cmp	r3, #8
 80028ca:	f200 80a1 	bhi.w	8002a10 <HAL_RCC_GetSysClockFreq+0x16c>
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d002      	beq.n	80028d8 <HAL_RCC_GetSysClockFreq+0x34>
 80028d2:	2b04      	cmp	r3, #4
 80028d4:	d003      	beq.n	80028de <HAL_RCC_GetSysClockFreq+0x3a>
 80028d6:	e09b      	b.n	8002a10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80028d8:	4b53      	ldr	r3, [pc, #332]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x184>)
 80028da:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028dc:	e09b      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80028de:	4b53      	ldr	r3, [pc, #332]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 80028e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80028e2:	e098      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80028e4:	4b4f      	ldr	r3, [pc, #316]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80028ec:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80028ee:	4b4d      	ldr	r3, [pc, #308]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d028      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028fa:	4b4a      	ldr	r3, [pc, #296]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	099b      	lsrs	r3, r3, #6
 8002900:	2200      	movs	r2, #0
 8002902:	623b      	str	r3, [r7, #32]
 8002904:	627a      	str	r2, [r7, #36]	; 0x24
 8002906:	6a3b      	ldr	r3, [r7, #32]
 8002908:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800290c:	2100      	movs	r1, #0
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 8002910:	fb03 f201 	mul.w	r2, r3, r1
 8002914:	2300      	movs	r3, #0
 8002916:	fb00 f303 	mul.w	r3, r0, r3
 800291a:	4413      	add	r3, r2
 800291c:	4a43      	ldr	r2, [pc, #268]	; (8002a2c <HAL_RCC_GetSysClockFreq+0x188>)
 800291e:	fba0 1202 	umull	r1, r2, r0, r2
 8002922:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002924:	460a      	mov	r2, r1
 8002926:	62ba      	str	r2, [r7, #40]	; 0x28
 8002928:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800292a:	4413      	add	r3, r2
 800292c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800292e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002930:	2200      	movs	r2, #0
 8002932:	61bb      	str	r3, [r7, #24]
 8002934:	61fa      	str	r2, [r7, #28]
 8002936:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800293a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800293e:	f7fd fc7b 	bl	8000238 <__aeabi_uldivmod>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4613      	mov	r3, r2
 8002948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800294a:	e053      	b.n	80029f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294c:	4b35      	ldr	r3, [pc, #212]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	099b      	lsrs	r3, r3, #6
 8002952:	2200      	movs	r2, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	617a      	str	r2, [r7, #20]
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800295e:	f04f 0b00 	mov.w	fp, #0
 8002962:	4652      	mov	r2, sl
 8002964:	465b      	mov	r3, fp
 8002966:	f04f 0000 	mov.w	r0, #0
 800296a:	f04f 0100 	mov.w	r1, #0
 800296e:	0159      	lsls	r1, r3, #5
 8002970:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002974:	0150      	lsls	r0, r2, #5
 8002976:	4602      	mov	r2, r0
 8002978:	460b      	mov	r3, r1
 800297a:	ebb2 080a 	subs.w	r8, r2, sl
 800297e:	eb63 090b 	sbc.w	r9, r3, fp
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800298e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002992:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002996:	ebb2 0408 	subs.w	r4, r2, r8
 800299a:	eb63 0509 	sbc.w	r5, r3, r9
 800299e:	f04f 0200 	mov.w	r2, #0
 80029a2:	f04f 0300 	mov.w	r3, #0
 80029a6:	00eb      	lsls	r3, r5, #3
 80029a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80029ac:	00e2      	lsls	r2, r4, #3
 80029ae:	4614      	mov	r4, r2
 80029b0:	461d      	mov	r5, r3
 80029b2:	eb14 030a 	adds.w	r3, r4, sl
 80029b6:	603b      	str	r3, [r7, #0]
 80029b8:	eb45 030b 	adc.w	r3, r5, fp
 80029bc:	607b      	str	r3, [r7, #4]
 80029be:	f04f 0200 	mov.w	r2, #0
 80029c2:	f04f 0300 	mov.w	r3, #0
 80029c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80029ca:	4629      	mov	r1, r5
 80029cc:	028b      	lsls	r3, r1, #10
 80029ce:	4621      	mov	r1, r4
 80029d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80029d4:	4621      	mov	r1, r4
 80029d6:	028a      	lsls	r2, r1, #10
 80029d8:	4610      	mov	r0, r2
 80029da:	4619      	mov	r1, r3
 80029dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029de:	2200      	movs	r2, #0
 80029e0:	60bb      	str	r3, [r7, #8]
 80029e2:	60fa      	str	r2, [r7, #12]
 80029e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029e8:	f7fd fc26 	bl	8000238 <__aeabi_uldivmod>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4613      	mov	r3, r2
 80029f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80029f4:	4b0b      	ldr	r3, [pc, #44]	; (8002a24 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	0c1b      	lsrs	r3, r3, #16
 80029fa:	f003 0303 	and.w	r3, r3, #3
 80029fe:	3301      	adds	r3, #1
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002a04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a0e:	e002      	b.n	8002a16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a10:	4b05      	ldr	r3, [pc, #20]	; (8002a28 <HAL_RCC_GetSysClockFreq+0x184>)
 8002a12:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002a14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3740      	adds	r7, #64	; 0x40
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002a22:	bf00      	nop
 8002a24:	40023800 	.word	0x40023800
 8002a28:	00f42400 	.word	0x00f42400
 8002a2c:	017d7840 	.word	0x017d7840

08002a30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20000004 	.word	0x20000004

08002a48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002a4c:	f7ff fff0 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a50:	4602      	mov	r2, r0
 8002a52:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	0a9b      	lsrs	r3, r3, #10
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a5e:	5ccb      	ldrb	r3, [r1, r3]
 8002a60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40023800 	.word	0x40023800
 8002a6c:	08003d40 	.word	0x08003d40

08002a70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002a74:	f7ff ffdc 	bl	8002a30 <HAL_RCC_GetHCLKFreq>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	4b05      	ldr	r3, [pc, #20]	; (8002a90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	0b5b      	lsrs	r3, r3, #13
 8002a80:	f003 0307 	and.w	r3, r3, #7
 8002a84:	4903      	ldr	r1, [pc, #12]	; (8002a94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a86:	5ccb      	ldrb	r3, [r1, r3]
 8002a88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40023800 	.word	0x40023800
 8002a94:	08003d40 	.word	0x08003d40

08002a98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002aac:	2300      	movs	r3, #0
 8002aae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0301 	and.w	r3, r3, #1
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d012      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ac0:	4b69      	ldr	r3, [pc, #420]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	4a68      	ldr	r2, [pc, #416]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ac6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002aca:	6093      	str	r3, [r2, #8]
 8002acc:	4b66      	ldr	r3, [pc, #408]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ace:	689a      	ldr	r2, [r3, #8]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ad4:	4964      	ldr	r1, [pc, #400]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d017      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002af2:	4b5d      	ldr	r3, [pc, #372]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002af4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002af8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b00:	4959      	ldr	r1, [pc, #356]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b02:	4313      	orrs	r3, r2
 8002b04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b10:	d101      	bne.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b12:	2301      	movs	r3, #1
 8002b14:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d017      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b2e:	4b4e      	ldr	r3, [pc, #312]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	494a      	ldr	r1, [pc, #296]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b4c:	d101      	bne.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d101      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d001      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0320 	and.w	r3, r3, #32
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	f000 808b 	beq.w	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002b7c:	4b3a      	ldr	r3, [pc, #232]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b80:	4a39      	ldr	r2, [pc, #228]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b86:	6413      	str	r3, [r2, #64]	; 0x40
 8002b88:	4b37      	ldr	r3, [pc, #220]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002b94:	4b35      	ldr	r3, [pc, #212]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4a34      	ldr	r2, [pc, #208]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b9e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ba0:	f7fe f866 	bl	8000c70 <HAL_GetTick>
 8002ba4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ba8:	f7fe f862 	bl	8000c70 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	; 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e38f      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002bba:	4b2c      	ldr	r3, [pc, #176]	; (8002c6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d035      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bda:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bde:	693a      	ldr	r2, [r7, #16]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d02e      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002be4:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002be8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002bee:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf2:	4a1d      	ldr	r2, [pc, #116]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a1a      	ldr	r2, [pc, #104]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c04:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c06:	4a18      	ldr	r2, [pc, #96]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d114      	bne.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c18:	f7fe f82a 	bl	8000c70 <HAL_GetTick>
 8002c1c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c1e:	e00a      	b.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c20:	f7fe f826 	bl	8000c70 <HAL_GetTick>
 8002c24:	4602      	mov	r2, r0
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	1ad3      	subs	r3, r2, r3
 8002c2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c2e:	4293      	cmp	r3, r2
 8002c30:	d901      	bls.n	8002c36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	e351      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c36:	4b0c      	ldr	r3, [pc, #48]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ee      	beq.n	8002c20 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002c4e:	d111      	bne.n	8002c74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002c50:	4b05      	ldr	r3, [pc, #20]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	689b      	ldr	r3, [r3, #8]
 8002c54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002c5c:	4b04      	ldr	r3, [pc, #16]	; (8002c70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002c5e:	400b      	ands	r3, r1
 8002c60:	4901      	ldr	r1, [pc, #4]	; (8002c68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c62:	4313      	orrs	r3, r2
 8002c64:	608b      	str	r3, [r1, #8]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002c68:	40023800 	.word	0x40023800
 8002c6c:	40007000 	.word	0x40007000
 8002c70:	0ffffcff 	.word	0x0ffffcff
 8002c74:	4bac      	ldr	r3, [pc, #688]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	4aab      	ldr	r2, [pc, #684]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002c7e:	6093      	str	r3, [r2, #8]
 8002c80:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002c8c:	49a6      	ldr	r1, [pc, #664]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d010      	beq.n	8002cc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002c9e:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ca4:	4aa0      	ldr	r2, [pc, #640]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ca6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002caa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002cae:	4b9e      	ldr	r3, [pc, #632]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cb0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb8:	499b      	ldr	r1, [pc, #620]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00a      	beq.n	8002ce2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002ccc:	4b96      	ldr	r3, [pc, #600]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002cda:	4993      	ldr	r1, [pc, #588]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d00a      	beq.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002cee:	4b8e      	ldr	r3, [pc, #568]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002cfc:	498a      	ldr	r1, [pc, #552]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d00a      	beq.n	8002d26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d10:	4b85      	ldr	r3, [pc, #532]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d1e:	4982      	ldr	r1, [pc, #520]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d20:	4313      	orrs	r3, r2
 8002d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d00a      	beq.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002d32:	4b7d      	ldr	r3, [pc, #500]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d40:	4979      	ldr	r1, [pc, #484]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d00a      	beq.n	8002d6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d54:	4b74      	ldr	r3, [pc, #464]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d5a:	f023 0203 	bic.w	r2, r3, #3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d62:	4971      	ldr	r1, [pc, #452]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d76:	4b6c      	ldr	r3, [pc, #432]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d7c:	f023 020c 	bic.w	r2, r3, #12
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d84:	4968      	ldr	r1, [pc, #416]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d86:	4313      	orrs	r3, r2
 8002d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00a      	beq.n	8002dae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002d98:	4b63      	ldr	r3, [pc, #396]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002da6:	4960      	ldr	r1, [pc, #384]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d00a      	beq.n	8002dd0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002dba:	4b5b      	ldr	r3, [pc, #364]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002dc8:	4957      	ldr	r1, [pc, #348]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d00a      	beq.n	8002df2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ddc:	4b52      	ldr	r3, [pc, #328]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dea:	494f      	ldr	r1, [pc, #316]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dec:	4313      	orrs	r3, r2
 8002dee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d00a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002dfe:	4b4a      	ldr	r3, [pc, #296]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e0c:	4946      	ldr	r1, [pc, #280]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e20:	4b41      	ldr	r3, [pc, #260]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e2e:	493e      	ldr	r1, [pc, #248]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00a      	beq.n	8002e58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002e42:	4b39      	ldr	r3, [pc, #228]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	4935      	ldr	r1, [pc, #212]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d00a      	beq.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002e64:	4b30      	ldr	r3, [pc, #192]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e72:	492d      	ldr	r1, [pc, #180]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e74:	4313      	orrs	r3, r2
 8002e76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d011      	beq.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002e86:	4b28      	ldr	r3, [pc, #160]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e94:	4924      	ldr	r1, [pc, #144]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e96:	4313      	orrs	r3, r2
 8002e98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ea0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	f003 0308 	and.w	r3, r3, #8
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ec6:	4b18      	ldr	r3, [pc, #96]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ecc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed4:	4914      	ldr	r1, [pc, #80]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00b      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002ee8:	4b0f      	ldr	r3, [pc, #60]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ef8:	490b      	ldr	r1, [pc, #44]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002efa:	4313      	orrs	r3, r2
 8002efc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d00f      	beq.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002f0c:	4b06      	ldr	r3, [pc, #24]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f12:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002f1c:	4902      	ldr	r1, [pc, #8]	; (8002f28 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f24:	e002      	b.n	8002f2c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002f26:	bf00      	nop
 8002f28:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d00b      	beq.n	8002f50 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002f38:	4b8a      	ldr	r3, [pc, #552]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f3e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f48:	4986      	ldr	r1, [pc, #536]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f4a:	4313      	orrs	r3, r2
 8002f4c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d00b      	beq.n	8002f74 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002f5c:	4b81      	ldr	r3, [pc, #516]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f5e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f62:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f6c:	497d      	ldr	r1, [pc, #500]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d006      	beq.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	f000 80d6 	beq.w	8003134 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f88:	4b76      	ldr	r3, [pc, #472]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a75      	ldr	r2, [pc, #468]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002f8e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f92:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f94:	f7fd fe6c 	bl	8000c70 <HAL_GetTick>
 8002f98:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f9c:	f7fd fe68 	bl	8000c70 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b64      	cmp	r3, #100	; 0x64
 8002fa8:	d901      	bls.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e195      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fae:	4b6d      	ldr	r3, [pc, #436]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d021      	beq.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d11d      	bne.n	800300a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fce:	4b65      	ldr	r3, [pc, #404]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd4:	0c1b      	lsrs	r3, r3, #16
 8002fd6:	f003 0303 	and.w	r3, r3, #3
 8002fda:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fdc:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002fde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe2:	0e1b      	lsrs	r3, r3, #24
 8002fe4:	f003 030f 	and.w	r3, r3, #15
 8002fe8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	019a      	lsls	r2, r3, #6
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	041b      	lsls	r3, r3, #16
 8002ff4:	431a      	orrs	r2, r3
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	061b      	lsls	r3, r3, #24
 8002ffa:	431a      	orrs	r2, r3
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	689b      	ldr	r3, [r3, #8]
 8003000:	071b      	lsls	r3, r3, #28
 8003002:	4958      	ldr	r1, [pc, #352]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003004:	4313      	orrs	r3, r2
 8003006:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d004      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003028:	2b00      	cmp	r3, #0
 800302a:	d02e      	beq.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003030:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003034:	d129      	bne.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003036:	4b4b      	ldr	r3, [pc, #300]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003038:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303c:	0c1b      	lsrs	r3, r3, #16
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003044:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003046:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304a:	0f1b      	lsrs	r3, r3, #28
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	019a      	lsls	r2, r3, #6
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	041b      	lsls	r3, r3, #16
 800305c:	431a      	orrs	r2, r3
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	061b      	lsls	r3, r3, #24
 8003064:	431a      	orrs	r2, r3
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	071b      	lsls	r3, r3, #28
 800306a:	493e      	ldr	r1, [pc, #248]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800306c:	4313      	orrs	r3, r2
 800306e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003072:	4b3c      	ldr	r3, [pc, #240]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003074:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003078:	f023 021f 	bic.w	r2, r3, #31
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003080:	3b01      	subs	r3, #1
 8003082:	4938      	ldr	r1, [pc, #224]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003084:	4313      	orrs	r3, r2
 8003086:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d01d      	beq.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003096:	4b33      	ldr	r3, [pc, #204]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003098:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309c:	0e1b      	lsrs	r3, r3, #24
 800309e:	f003 030f 	and.w	r3, r3, #15
 80030a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a4:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030aa:	0f1b      	lsrs	r3, r3, #28
 80030ac:	f003 0307 	and.w	r3, r3, #7
 80030b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	019a      	lsls	r2, r3, #6
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	691b      	ldr	r3, [r3, #16]
 80030bc:	041b      	lsls	r3, r3, #16
 80030be:	431a      	orrs	r2, r3
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	061b      	lsls	r3, r3, #24
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	071b      	lsls	r3, r3, #28
 80030ca:	4926      	ldr	r1, [pc, #152]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d011      	beq.n	8003102 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	019a      	lsls	r2, r3, #6
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	691b      	ldr	r3, [r3, #16]
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	68db      	ldr	r3, [r3, #12]
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	431a      	orrs	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	071b      	lsls	r3, r3, #28
 80030fa:	491a      	ldr	r1, [pc, #104]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030fc:	4313      	orrs	r3, r2
 80030fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003102:	4b18      	ldr	r3, [pc, #96]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a17      	ldr	r2, [pc, #92]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800310e:	f7fd fdaf 	bl	8000c70 <HAL_GetTick>
 8003112:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003114:	e008      	b.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003116:	f7fd fdab 	bl	8000c70 <HAL_GetTick>
 800311a:	4602      	mov	r2, r0
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	1ad3      	subs	r3, r2, r3
 8003120:	2b64      	cmp	r3, #100	; 0x64
 8003122:	d901      	bls.n	8003128 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003124:	2303      	movs	r3, #3
 8003126:	e0d8      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003128:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003130:	2b00      	cmp	r3, #0
 8003132:	d0f0      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003134:	69bb      	ldr	r3, [r7, #24]
 8003136:	2b01      	cmp	r3, #1
 8003138:	f040 80ce 	bne.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800313c:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003146:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003148:	f7fd fd92 	bl	8000c70 <HAL_GetTick>
 800314c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800314e:	e00b      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003150:	f7fd fd8e 	bl	8000c70 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	697b      	ldr	r3, [r7, #20]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b64      	cmp	r3, #100	; 0x64
 800315c:	d904      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800315e:	2303      	movs	r3, #3
 8003160:	e0bb      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003162:	bf00      	nop
 8003164:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003168:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d0ec      	beq.n	8003150 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d12a      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031ac:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	019a      	lsls	r2, r3, #6
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	4944      	ldr	r1, [pc, #272]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	493d      	ldr	r1, [pc, #244]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d022      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003208:	d11d      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0e1b      	lsrs	r3, r3, #24
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4929      	ldr	r1, [pc, #164]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4917      	ldr	r1, [pc, #92]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4911      	ldr	r1, [pc, #68]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fd fcde 	bl	8000c70 <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b8:	f7fd fcda 	bl	8000c70 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e007      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d6:	d1ef      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e040      	b.n	800337c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d106      	bne.n	8003310 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800330a:	6878      	ldr	r0, [r7, #4]
 800330c:	f7fd fbd6 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2224      	movs	r2, #36	; 0x24
 8003314:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 0201 	bic.w	r2, r2, #1
 8003324:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8b0 	bl	800348c <UART_SetConfig>
 800332c:	4603      	mov	r3, r0
 800332e:	2b01      	cmp	r3, #1
 8003330:	d101      	bne.n	8003336 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	e022      	b.n	800337c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fb08 	bl	8003954 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	685a      	ldr	r2, [r3, #4]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003352:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689a      	ldr	r2, [r3, #8]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003362:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	681a      	ldr	r2, [r3, #0]
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f042 0201 	orr.w	r2, r2, #1
 8003372:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f000 fb8f 	bl	8003a98 <UART_CheckIdleState>
 800337a:	4603      	mov	r3, r0
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b08a      	sub	sp, #40	; 0x28
 8003388:	af02      	add	r7, sp, #8
 800338a:	60f8      	str	r0, [r7, #12]
 800338c:	60b9      	str	r1, [r7, #8]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4613      	mov	r3, r2
 8003392:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003398:	2b20      	cmp	r3, #32
 800339a:	d171      	bne.n	8003480 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_UART_Transmit+0x24>
 80033a2:	88fb      	ldrh	r3, [r7, #6]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d101      	bne.n	80033ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80033a8:	2301      	movs	r3, #1
 80033aa:	e06a      	b.n	8003482 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	2200      	movs	r2, #0
 80033b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2221      	movs	r2, #33	; 0x21
 80033b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033ba:	f7fd fc59 	bl	8000c70 <HAL_GetTick>
 80033be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	88fa      	ldrh	r2, [r7, #6]
 80033c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	88fa      	ldrh	r2, [r7, #6]
 80033cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d8:	d108      	bne.n	80033ec <HAL_UART_Transmit+0x68>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d104      	bne.n	80033ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80033e2:	2300      	movs	r3, #0
 80033e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80033e6:	68bb      	ldr	r3, [r7, #8]
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	e003      	b.n	80033f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033f0:	2300      	movs	r3, #0
 80033f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80033f4:	e02c      	b.n	8003450 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	9300      	str	r3, [sp, #0]
 80033fa:	697b      	ldr	r3, [r7, #20]
 80033fc:	2200      	movs	r2, #0
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	68f8      	ldr	r0, [r7, #12]
 8003402:	f000 fb96 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003406:	4603      	mov	r3, r0
 8003408:	2b00      	cmp	r3, #0
 800340a:	d001      	beq.n	8003410 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800340c:	2303      	movs	r3, #3
 800340e:	e038      	b.n	8003482 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003410:	69fb      	ldr	r3, [r7, #28]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d10b      	bne.n	800342e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003416:	69bb      	ldr	r3, [r7, #24]
 8003418:	881b      	ldrh	r3, [r3, #0]
 800341a:	461a      	mov	r2, r3
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003424:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	3302      	adds	r3, #2
 800342a:	61bb      	str	r3, [r7, #24]
 800342c:	e007      	b.n	800343e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	781a      	ldrb	r2, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003438:	69fb      	ldr	r3, [r7, #28]
 800343a:	3301      	adds	r3, #1
 800343c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003444:	b29b      	uxth	r3, r3
 8003446:	3b01      	subs	r3, #1
 8003448:	b29a      	uxth	r2, r3
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003456:	b29b      	uxth	r3, r3
 8003458:	2b00      	cmp	r3, #0
 800345a:	d1cc      	bne.n	80033f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	9300      	str	r3, [sp, #0]
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2200      	movs	r2, #0
 8003464:	2140      	movs	r1, #64	; 0x40
 8003466:	68f8      	ldr	r0, [r7, #12]
 8003468:	f000 fb63 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d001      	beq.n	8003476 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003472:	2303      	movs	r3, #3
 8003474:	e005      	b.n	8003482 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800347c:	2300      	movs	r3, #0
 800347e:	e000      	b.n	8003482 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003480:	2302      	movs	r3, #2
  }
}
 8003482:	4618      	mov	r0, r3
 8003484:	3720      	adds	r7, #32
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
	...

0800348c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b088      	sub	sp, #32
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003494:	2300      	movs	r3, #0
 8003496:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689a      	ldr	r2, [r3, #8]
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	691b      	ldr	r3, [r3, #16]
 80034a0:	431a      	orrs	r2, r3
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	4313      	orrs	r3, r2
 80034ae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4ba6      	ldr	r3, [pc, #664]	; (8003750 <UART_SetConfig+0x2c4>)
 80034b8:	4013      	ands	r3, r2
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	6812      	ldr	r2, [r2, #0]
 80034be:	6979      	ldr	r1, [r7, #20]
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	68da      	ldr	r2, [r3, #12]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	430a      	orrs	r2, r1
 80034d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	699b      	ldr	r3, [r3, #24]
 80034de:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a1b      	ldr	r3, [r3, #32]
 80034e4:	697a      	ldr	r2, [r7, #20]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	697a      	ldr	r2, [r7, #20]
 80034fa:	430a      	orrs	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a94      	ldr	r2, [pc, #592]	; (8003754 <UART_SetConfig+0x2c8>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d120      	bne.n	800354a <UART_SetConfig+0xbe>
 8003508:	4b93      	ldr	r3, [pc, #588]	; (8003758 <UART_SetConfig+0x2cc>)
 800350a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b03      	cmp	r3, #3
 8003514:	d816      	bhi.n	8003544 <UART_SetConfig+0xb8>
 8003516:	a201      	add	r2, pc, #4	; (adr r2, 800351c <UART_SetConfig+0x90>)
 8003518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800351c:	0800352d 	.word	0x0800352d
 8003520:	08003539 	.word	0x08003539
 8003524:	08003533 	.word	0x08003533
 8003528:	0800353f 	.word	0x0800353f
 800352c:	2301      	movs	r3, #1
 800352e:	77fb      	strb	r3, [r7, #31]
 8003530:	e150      	b.n	80037d4 <UART_SetConfig+0x348>
 8003532:	2302      	movs	r3, #2
 8003534:	77fb      	strb	r3, [r7, #31]
 8003536:	e14d      	b.n	80037d4 <UART_SetConfig+0x348>
 8003538:	2304      	movs	r3, #4
 800353a:	77fb      	strb	r3, [r7, #31]
 800353c:	e14a      	b.n	80037d4 <UART_SetConfig+0x348>
 800353e:	2308      	movs	r3, #8
 8003540:	77fb      	strb	r3, [r7, #31]
 8003542:	e147      	b.n	80037d4 <UART_SetConfig+0x348>
 8003544:	2310      	movs	r3, #16
 8003546:	77fb      	strb	r3, [r7, #31]
 8003548:	e144      	b.n	80037d4 <UART_SetConfig+0x348>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	4a83      	ldr	r2, [pc, #524]	; (800375c <UART_SetConfig+0x2d0>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d132      	bne.n	80035ba <UART_SetConfig+0x12e>
 8003554:	4b80      	ldr	r3, [pc, #512]	; (8003758 <UART_SetConfig+0x2cc>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800355a:	f003 030c 	and.w	r3, r3, #12
 800355e:	2b0c      	cmp	r3, #12
 8003560:	d828      	bhi.n	80035b4 <UART_SetConfig+0x128>
 8003562:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <UART_SetConfig+0xdc>)
 8003564:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035b5 	.word	0x080035b5
 8003570:	080035b5 	.word	0x080035b5
 8003574:	080035b5 	.word	0x080035b5
 8003578:	080035a9 	.word	0x080035a9
 800357c:	080035b5 	.word	0x080035b5
 8003580:	080035b5 	.word	0x080035b5
 8003584:	080035b5 	.word	0x080035b5
 8003588:	080035a3 	.word	0x080035a3
 800358c:	080035b5 	.word	0x080035b5
 8003590:	080035b5 	.word	0x080035b5
 8003594:	080035b5 	.word	0x080035b5
 8003598:	080035af 	.word	0x080035af
 800359c:	2300      	movs	r3, #0
 800359e:	77fb      	strb	r3, [r7, #31]
 80035a0:	e118      	b.n	80037d4 <UART_SetConfig+0x348>
 80035a2:	2302      	movs	r3, #2
 80035a4:	77fb      	strb	r3, [r7, #31]
 80035a6:	e115      	b.n	80037d4 <UART_SetConfig+0x348>
 80035a8:	2304      	movs	r3, #4
 80035aa:	77fb      	strb	r3, [r7, #31]
 80035ac:	e112      	b.n	80037d4 <UART_SetConfig+0x348>
 80035ae:	2308      	movs	r3, #8
 80035b0:	77fb      	strb	r3, [r7, #31]
 80035b2:	e10f      	b.n	80037d4 <UART_SetConfig+0x348>
 80035b4:	2310      	movs	r3, #16
 80035b6:	77fb      	strb	r3, [r7, #31]
 80035b8:	e10c      	b.n	80037d4 <UART_SetConfig+0x348>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a68      	ldr	r2, [pc, #416]	; (8003760 <UART_SetConfig+0x2d4>)
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d120      	bne.n	8003606 <UART_SetConfig+0x17a>
 80035c4:	4b64      	ldr	r3, [pc, #400]	; (8003758 <UART_SetConfig+0x2cc>)
 80035c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035ca:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035ce:	2b30      	cmp	r3, #48	; 0x30
 80035d0:	d013      	beq.n	80035fa <UART_SetConfig+0x16e>
 80035d2:	2b30      	cmp	r3, #48	; 0x30
 80035d4:	d814      	bhi.n	8003600 <UART_SetConfig+0x174>
 80035d6:	2b20      	cmp	r3, #32
 80035d8:	d009      	beq.n	80035ee <UART_SetConfig+0x162>
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d810      	bhi.n	8003600 <UART_SetConfig+0x174>
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d002      	beq.n	80035e8 <UART_SetConfig+0x15c>
 80035e2:	2b10      	cmp	r3, #16
 80035e4:	d006      	beq.n	80035f4 <UART_SetConfig+0x168>
 80035e6:	e00b      	b.n	8003600 <UART_SetConfig+0x174>
 80035e8:	2300      	movs	r3, #0
 80035ea:	77fb      	strb	r3, [r7, #31]
 80035ec:	e0f2      	b.n	80037d4 <UART_SetConfig+0x348>
 80035ee:	2302      	movs	r3, #2
 80035f0:	77fb      	strb	r3, [r7, #31]
 80035f2:	e0ef      	b.n	80037d4 <UART_SetConfig+0x348>
 80035f4:	2304      	movs	r3, #4
 80035f6:	77fb      	strb	r3, [r7, #31]
 80035f8:	e0ec      	b.n	80037d4 <UART_SetConfig+0x348>
 80035fa:	2308      	movs	r3, #8
 80035fc:	77fb      	strb	r3, [r7, #31]
 80035fe:	e0e9      	b.n	80037d4 <UART_SetConfig+0x348>
 8003600:	2310      	movs	r3, #16
 8003602:	77fb      	strb	r3, [r7, #31]
 8003604:	e0e6      	b.n	80037d4 <UART_SetConfig+0x348>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a56      	ldr	r2, [pc, #344]	; (8003764 <UART_SetConfig+0x2d8>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d120      	bne.n	8003652 <UART_SetConfig+0x1c6>
 8003610:	4b51      	ldr	r3, [pc, #324]	; (8003758 <UART_SetConfig+0x2cc>)
 8003612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003616:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800361a:	2bc0      	cmp	r3, #192	; 0xc0
 800361c:	d013      	beq.n	8003646 <UART_SetConfig+0x1ba>
 800361e:	2bc0      	cmp	r3, #192	; 0xc0
 8003620:	d814      	bhi.n	800364c <UART_SetConfig+0x1c0>
 8003622:	2b80      	cmp	r3, #128	; 0x80
 8003624:	d009      	beq.n	800363a <UART_SetConfig+0x1ae>
 8003626:	2b80      	cmp	r3, #128	; 0x80
 8003628:	d810      	bhi.n	800364c <UART_SetConfig+0x1c0>
 800362a:	2b00      	cmp	r3, #0
 800362c:	d002      	beq.n	8003634 <UART_SetConfig+0x1a8>
 800362e:	2b40      	cmp	r3, #64	; 0x40
 8003630:	d006      	beq.n	8003640 <UART_SetConfig+0x1b4>
 8003632:	e00b      	b.n	800364c <UART_SetConfig+0x1c0>
 8003634:	2300      	movs	r3, #0
 8003636:	77fb      	strb	r3, [r7, #31]
 8003638:	e0cc      	b.n	80037d4 <UART_SetConfig+0x348>
 800363a:	2302      	movs	r3, #2
 800363c:	77fb      	strb	r3, [r7, #31]
 800363e:	e0c9      	b.n	80037d4 <UART_SetConfig+0x348>
 8003640:	2304      	movs	r3, #4
 8003642:	77fb      	strb	r3, [r7, #31]
 8003644:	e0c6      	b.n	80037d4 <UART_SetConfig+0x348>
 8003646:	2308      	movs	r3, #8
 8003648:	77fb      	strb	r3, [r7, #31]
 800364a:	e0c3      	b.n	80037d4 <UART_SetConfig+0x348>
 800364c:	2310      	movs	r3, #16
 800364e:	77fb      	strb	r3, [r7, #31]
 8003650:	e0c0      	b.n	80037d4 <UART_SetConfig+0x348>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	4a44      	ldr	r2, [pc, #272]	; (8003768 <UART_SetConfig+0x2dc>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d125      	bne.n	80036a8 <UART_SetConfig+0x21c>
 800365c:	4b3e      	ldr	r3, [pc, #248]	; (8003758 <UART_SetConfig+0x2cc>)
 800365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003662:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003666:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800366a:	d017      	beq.n	800369c <UART_SetConfig+0x210>
 800366c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003670:	d817      	bhi.n	80036a2 <UART_SetConfig+0x216>
 8003672:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003676:	d00b      	beq.n	8003690 <UART_SetConfig+0x204>
 8003678:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367c:	d811      	bhi.n	80036a2 <UART_SetConfig+0x216>
 800367e:	2b00      	cmp	r3, #0
 8003680:	d003      	beq.n	800368a <UART_SetConfig+0x1fe>
 8003682:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003686:	d006      	beq.n	8003696 <UART_SetConfig+0x20a>
 8003688:	e00b      	b.n	80036a2 <UART_SetConfig+0x216>
 800368a:	2300      	movs	r3, #0
 800368c:	77fb      	strb	r3, [r7, #31]
 800368e:	e0a1      	b.n	80037d4 <UART_SetConfig+0x348>
 8003690:	2302      	movs	r3, #2
 8003692:	77fb      	strb	r3, [r7, #31]
 8003694:	e09e      	b.n	80037d4 <UART_SetConfig+0x348>
 8003696:	2304      	movs	r3, #4
 8003698:	77fb      	strb	r3, [r7, #31]
 800369a:	e09b      	b.n	80037d4 <UART_SetConfig+0x348>
 800369c:	2308      	movs	r3, #8
 800369e:	77fb      	strb	r3, [r7, #31]
 80036a0:	e098      	b.n	80037d4 <UART_SetConfig+0x348>
 80036a2:	2310      	movs	r3, #16
 80036a4:	77fb      	strb	r3, [r7, #31]
 80036a6:	e095      	b.n	80037d4 <UART_SetConfig+0x348>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a2f      	ldr	r2, [pc, #188]	; (800376c <UART_SetConfig+0x2e0>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d125      	bne.n	80036fe <UART_SetConfig+0x272>
 80036b2:	4b29      	ldr	r3, [pc, #164]	; (8003758 <UART_SetConfig+0x2cc>)
 80036b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036c0:	d017      	beq.n	80036f2 <UART_SetConfig+0x266>
 80036c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036c6:	d817      	bhi.n	80036f8 <UART_SetConfig+0x26c>
 80036c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036cc:	d00b      	beq.n	80036e6 <UART_SetConfig+0x25a>
 80036ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d2:	d811      	bhi.n	80036f8 <UART_SetConfig+0x26c>
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d003      	beq.n	80036e0 <UART_SetConfig+0x254>
 80036d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036dc:	d006      	beq.n	80036ec <UART_SetConfig+0x260>
 80036de:	e00b      	b.n	80036f8 <UART_SetConfig+0x26c>
 80036e0:	2301      	movs	r3, #1
 80036e2:	77fb      	strb	r3, [r7, #31]
 80036e4:	e076      	b.n	80037d4 <UART_SetConfig+0x348>
 80036e6:	2302      	movs	r3, #2
 80036e8:	77fb      	strb	r3, [r7, #31]
 80036ea:	e073      	b.n	80037d4 <UART_SetConfig+0x348>
 80036ec:	2304      	movs	r3, #4
 80036ee:	77fb      	strb	r3, [r7, #31]
 80036f0:	e070      	b.n	80037d4 <UART_SetConfig+0x348>
 80036f2:	2308      	movs	r3, #8
 80036f4:	77fb      	strb	r3, [r7, #31]
 80036f6:	e06d      	b.n	80037d4 <UART_SetConfig+0x348>
 80036f8:	2310      	movs	r3, #16
 80036fa:	77fb      	strb	r3, [r7, #31]
 80036fc:	e06a      	b.n	80037d4 <UART_SetConfig+0x348>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4a1b      	ldr	r2, [pc, #108]	; (8003770 <UART_SetConfig+0x2e4>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d138      	bne.n	800377a <UART_SetConfig+0x2ee>
 8003708:	4b13      	ldr	r3, [pc, #76]	; (8003758 <UART_SetConfig+0x2cc>)
 800370a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800370e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003712:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003716:	d017      	beq.n	8003748 <UART_SetConfig+0x2bc>
 8003718:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800371c:	d82a      	bhi.n	8003774 <UART_SetConfig+0x2e8>
 800371e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003722:	d00b      	beq.n	800373c <UART_SetConfig+0x2b0>
 8003724:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003728:	d824      	bhi.n	8003774 <UART_SetConfig+0x2e8>
 800372a:	2b00      	cmp	r3, #0
 800372c:	d003      	beq.n	8003736 <UART_SetConfig+0x2aa>
 800372e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003732:	d006      	beq.n	8003742 <UART_SetConfig+0x2b6>
 8003734:	e01e      	b.n	8003774 <UART_SetConfig+0x2e8>
 8003736:	2300      	movs	r3, #0
 8003738:	77fb      	strb	r3, [r7, #31]
 800373a:	e04b      	b.n	80037d4 <UART_SetConfig+0x348>
 800373c:	2302      	movs	r3, #2
 800373e:	77fb      	strb	r3, [r7, #31]
 8003740:	e048      	b.n	80037d4 <UART_SetConfig+0x348>
 8003742:	2304      	movs	r3, #4
 8003744:	77fb      	strb	r3, [r7, #31]
 8003746:	e045      	b.n	80037d4 <UART_SetConfig+0x348>
 8003748:	2308      	movs	r3, #8
 800374a:	77fb      	strb	r3, [r7, #31]
 800374c:	e042      	b.n	80037d4 <UART_SetConfig+0x348>
 800374e:	bf00      	nop
 8003750:	efff69f3 	.word	0xefff69f3
 8003754:	40011000 	.word	0x40011000
 8003758:	40023800 	.word	0x40023800
 800375c:	40004400 	.word	0x40004400
 8003760:	40004800 	.word	0x40004800
 8003764:	40004c00 	.word	0x40004c00
 8003768:	40005000 	.word	0x40005000
 800376c:	40011400 	.word	0x40011400
 8003770:	40007800 	.word	0x40007800
 8003774:	2310      	movs	r3, #16
 8003776:	77fb      	strb	r3, [r7, #31]
 8003778:	e02c      	b.n	80037d4 <UART_SetConfig+0x348>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a72      	ldr	r2, [pc, #456]	; (8003948 <UART_SetConfig+0x4bc>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d125      	bne.n	80037d0 <UART_SetConfig+0x344>
 8003784:	4b71      	ldr	r3, [pc, #452]	; (800394c <UART_SetConfig+0x4c0>)
 8003786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800378a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800378e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003792:	d017      	beq.n	80037c4 <UART_SetConfig+0x338>
 8003794:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003798:	d817      	bhi.n	80037ca <UART_SetConfig+0x33e>
 800379a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800379e:	d00b      	beq.n	80037b8 <UART_SetConfig+0x32c>
 80037a0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037a4:	d811      	bhi.n	80037ca <UART_SetConfig+0x33e>
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d003      	beq.n	80037b2 <UART_SetConfig+0x326>
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ae:	d006      	beq.n	80037be <UART_SetConfig+0x332>
 80037b0:	e00b      	b.n	80037ca <UART_SetConfig+0x33e>
 80037b2:	2300      	movs	r3, #0
 80037b4:	77fb      	strb	r3, [r7, #31]
 80037b6:	e00d      	b.n	80037d4 <UART_SetConfig+0x348>
 80037b8:	2302      	movs	r3, #2
 80037ba:	77fb      	strb	r3, [r7, #31]
 80037bc:	e00a      	b.n	80037d4 <UART_SetConfig+0x348>
 80037be:	2304      	movs	r3, #4
 80037c0:	77fb      	strb	r3, [r7, #31]
 80037c2:	e007      	b.n	80037d4 <UART_SetConfig+0x348>
 80037c4:	2308      	movs	r3, #8
 80037c6:	77fb      	strb	r3, [r7, #31]
 80037c8:	e004      	b.n	80037d4 <UART_SetConfig+0x348>
 80037ca:	2310      	movs	r3, #16
 80037cc:	77fb      	strb	r3, [r7, #31]
 80037ce:	e001      	b.n	80037d4 <UART_SetConfig+0x348>
 80037d0:	2310      	movs	r3, #16
 80037d2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	69db      	ldr	r3, [r3, #28]
 80037d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037dc:	d15b      	bne.n	8003896 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80037de:	7ffb      	ldrb	r3, [r7, #31]
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d828      	bhi.n	8003836 <UART_SetConfig+0x3aa>
 80037e4:	a201      	add	r2, pc, #4	; (adr r2, 80037ec <UART_SetConfig+0x360>)
 80037e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037ea:	bf00      	nop
 80037ec:	08003811 	.word	0x08003811
 80037f0:	08003819 	.word	0x08003819
 80037f4:	08003821 	.word	0x08003821
 80037f8:	08003837 	.word	0x08003837
 80037fc:	08003827 	.word	0x08003827
 8003800:	08003837 	.word	0x08003837
 8003804:	08003837 	.word	0x08003837
 8003808:	08003837 	.word	0x08003837
 800380c:	0800382f 	.word	0x0800382f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003810:	f7ff f91a 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 8003814:	61b8      	str	r0, [r7, #24]
        break;
 8003816:	e013      	b.n	8003840 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003818:	f7ff f92a 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 800381c:	61b8      	str	r0, [r7, #24]
        break;
 800381e:	e00f      	b.n	8003840 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003820:	4b4b      	ldr	r3, [pc, #300]	; (8003950 <UART_SetConfig+0x4c4>)
 8003822:	61bb      	str	r3, [r7, #24]
        break;
 8003824:	e00c      	b.n	8003840 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003826:	f7ff f83d 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 800382a:	61b8      	str	r0, [r7, #24]
        break;
 800382c:	e008      	b.n	8003840 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800382e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003832:	61bb      	str	r3, [r7, #24]
        break;
 8003834:	e004      	b.n	8003840 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003836:	2300      	movs	r3, #0
 8003838:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	77bb      	strb	r3, [r7, #30]
        break;
 800383e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d074      	beq.n	8003930 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	005a      	lsls	r2, r3, #1
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	085b      	lsrs	r3, r3, #1
 8003850:	441a      	add	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	fbb2 f3f3 	udiv	r3, r2, r3
 800385a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	2b0f      	cmp	r3, #15
 8003860:	d916      	bls.n	8003890 <UART_SetConfig+0x404>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003868:	d212      	bcs.n	8003890 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	b29b      	uxth	r3, r3
 800386e:	f023 030f 	bic.w	r3, r3, #15
 8003872:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003874:	693b      	ldr	r3, [r7, #16]
 8003876:	085b      	lsrs	r3, r3, #1
 8003878:	b29b      	uxth	r3, r3
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	b29a      	uxth	r2, r3
 8003880:	89fb      	ldrh	r3, [r7, #14]
 8003882:	4313      	orrs	r3, r2
 8003884:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	89fa      	ldrh	r2, [r7, #14]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	e04f      	b.n	8003930 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	77bb      	strb	r3, [r7, #30]
 8003894:	e04c      	b.n	8003930 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003896:	7ffb      	ldrb	r3, [r7, #31]
 8003898:	2b08      	cmp	r3, #8
 800389a:	d828      	bhi.n	80038ee <UART_SetConfig+0x462>
 800389c:	a201      	add	r2, pc, #4	; (adr r2, 80038a4 <UART_SetConfig+0x418>)
 800389e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038a2:	bf00      	nop
 80038a4:	080038c9 	.word	0x080038c9
 80038a8:	080038d1 	.word	0x080038d1
 80038ac:	080038d9 	.word	0x080038d9
 80038b0:	080038ef 	.word	0x080038ef
 80038b4:	080038df 	.word	0x080038df
 80038b8:	080038ef 	.word	0x080038ef
 80038bc:	080038ef 	.word	0x080038ef
 80038c0:	080038ef 	.word	0x080038ef
 80038c4:	080038e7 	.word	0x080038e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038c8:	f7ff f8be 	bl	8002a48 <HAL_RCC_GetPCLK1Freq>
 80038cc:	61b8      	str	r0, [r7, #24]
        break;
 80038ce:	e013      	b.n	80038f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80038d0:	f7ff f8ce 	bl	8002a70 <HAL_RCC_GetPCLK2Freq>
 80038d4:	61b8      	str	r0, [r7, #24]
        break;
 80038d6:	e00f      	b.n	80038f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038d8:	4b1d      	ldr	r3, [pc, #116]	; (8003950 <UART_SetConfig+0x4c4>)
 80038da:	61bb      	str	r3, [r7, #24]
        break;
 80038dc:	e00c      	b.n	80038f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038de:	f7fe ffe1 	bl	80028a4 <HAL_RCC_GetSysClockFreq>
 80038e2:	61b8      	str	r0, [r7, #24]
        break;
 80038e4:	e008      	b.n	80038f8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ea:	61bb      	str	r3, [r7, #24]
        break;
 80038ec:	e004      	b.n	80038f8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	77bb      	strb	r3, [r7, #30]
        break;
 80038f6:	bf00      	nop
    }

    if (pclk != 0U)
 80038f8:	69bb      	ldr	r3, [r7, #24]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d018      	beq.n	8003930 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	085a      	lsrs	r2, r3, #1
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	441a      	add	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003910:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003912:	693b      	ldr	r3, [r7, #16]
 8003914:	2b0f      	cmp	r3, #15
 8003916:	d909      	bls.n	800392c <UART_SetConfig+0x4a0>
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800391e:	d205      	bcs.n	800392c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003920:	693b      	ldr	r3, [r7, #16]
 8003922:	b29a      	uxth	r2, r3
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	60da      	str	r2, [r3, #12]
 800392a:	e001      	b.n	8003930 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800392c:	2301      	movs	r3, #1
 800392e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	2200      	movs	r2, #0
 800393a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800393c:	7fbb      	ldrb	r3, [r7, #30]
}
 800393e:	4618      	mov	r0, r3
 8003940:	3720      	adds	r7, #32
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40007c00 	.word	0x40007c00
 800394c:	40023800 	.word	0x40023800
 8003950:	00f42400 	.word	0x00f42400

08003954 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003960:	f003 0301 	and.w	r3, r3, #1
 8003964:	2b00      	cmp	r3, #0
 8003966:	d00a      	beq.n	800397e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	430a      	orrs	r2, r1
 800397c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003982:	f003 0302 	and.w	r3, r3, #2
 8003986:	2b00      	cmp	r3, #0
 8003988:	d00a      	beq.n	80039a0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	430a      	orrs	r2, r1
 800399e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	f003 0304 	and.w	r3, r3, #4
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d00a      	beq.n	80039c2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	430a      	orrs	r2, r1
 80039c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f003 0308 	and.w	r3, r3, #8
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d00a      	beq.n	80039e4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	430a      	orrs	r2, r1
 80039e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039e8:	f003 0310 	and.w	r3, r3, #16
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d00a      	beq.n	8003a06 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0a:	f003 0320 	and.w	r3, r3, #32
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00a      	beq.n	8003a28 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d01a      	beq.n	8003a6a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	430a      	orrs	r2, r1
 8003a48:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a4e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a52:	d10a      	bne.n	8003a6a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	430a      	orrs	r2, r1
 8003a68:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d00a      	beq.n	8003a8c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	430a      	orrs	r2, r1
 8003a8a:	605a      	str	r2, [r3, #4]
  }
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b086      	sub	sp, #24
 8003a9c:	af02      	add	r7, sp, #8
 8003a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003aa8:	f7fd f8e2 	bl	8000c70 <HAL_GetTick>
 8003aac:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f003 0308 	and.w	r3, r3, #8
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	d10e      	bne.n	8003ada <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003abc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ac0:	9300      	str	r3, [sp, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f831 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d001      	beq.n	8003ada <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e027      	b.n	8003b2a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f003 0304 	and.w	r3, r3, #4
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d10e      	bne.n	8003b06 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ae8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003aec:	9300      	str	r3, [sp, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f81b 	bl	8003b32 <UART_WaitOnFlagUntilTimeout>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b02:	2303      	movs	r3, #3
 8003b04:	e011      	b.n	8003b2a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2220      	movs	r2, #32
 8003b0a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3710      	adds	r7, #16
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}

08003b32 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b32:	b580      	push	{r7, lr}
 8003b34:	b09c      	sub	sp, #112	; 0x70
 8003b36:	af00      	add	r7, sp, #0
 8003b38:	60f8      	str	r0, [r7, #12]
 8003b3a:	60b9      	str	r1, [r7, #8]
 8003b3c:	603b      	str	r3, [r7, #0]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b42:	e0a7      	b.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b44:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	f000 80a3 	beq.w	8003c94 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b4e:	f7fd f88f 	bl	8000c70 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d302      	bcc.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x32>
 8003b5e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d13f      	bne.n	8003be4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6c:	e853 3f00 	ldrex	r3, [r3]
 8003b70:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003b72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b74:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003b78:	667b      	str	r3, [r7, #100]	; 0x64
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	461a      	mov	r2, r3
 8003b80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b82:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b84:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b86:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003b88:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003b8a:	e841 2300 	strex	r3, r2, [r1]
 8003b8e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003b90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d1e6      	bne.n	8003b64 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	3308      	adds	r3, #8
 8003b9c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ba0:	e853 3f00 	ldrex	r3, [r3]
 8003ba4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ba8:	f023 0301 	bic.w	r3, r3, #1
 8003bac:	663b      	str	r3, [r7, #96]	; 0x60
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	3308      	adds	r3, #8
 8003bb4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003bb6:	64ba      	str	r2, [r7, #72]	; 0x48
 8003bb8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003bbc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003bbe:	e841 2300 	strex	r3, r2, [r1]
 8003bc2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003bc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d1e5      	bne.n	8003b96 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8003be0:	2303      	movs	r3, #3
 8003be2:	e068      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d050      	beq.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	69db      	ldr	r3, [r3, #28]
 8003bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003bfc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c00:	d148      	bne.n	8003c94 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c0a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c14:	e853 3f00 	ldrex	r3, [r3]
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	461a      	mov	r2, r3
 8003c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2a:	637b      	str	r3, [r7, #52]	; 0x34
 8003c2c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c32:	e841 2300 	strex	r3, r2, [r1]
 8003c36:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1e6      	bne.n	8003c0c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	3308      	adds	r3, #8
 8003c44:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	e853 3f00 	ldrex	r3, [r3]
 8003c4c:	613b      	str	r3, [r7, #16]
   return(result);
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	f023 0301 	bic.w	r3, r3, #1
 8003c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	3308      	adds	r3, #8
 8003c5c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003c5e:	623a      	str	r2, [r7, #32]
 8003c60:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c62:	69f9      	ldr	r1, [r7, #28]
 8003c64:	6a3a      	ldr	r2, [r7, #32]
 8003c66:	e841 2300 	strex	r3, r2, [r1]
 8003c6a:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c6c:	69bb      	ldr	r3, [r7, #24]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d1e5      	bne.n	8003c3e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2220      	movs	r2, #32
 8003c76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2220      	movs	r2, #32
 8003c84:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003c90:	2303      	movs	r3, #3
 8003c92:	e010      	b.n	8003cb6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	68ba      	ldr	r2, [r7, #8]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	bf0c      	ite	eq
 8003ca4:	2301      	moveq	r3, #1
 8003ca6:	2300      	movne	r3, #0
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	461a      	mov	r2, r3
 8003cac:	79fb      	ldrb	r3, [r7, #7]
 8003cae:	429a      	cmp	r2, r3
 8003cb0:	f43f af48 	beq.w	8003b44 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3770      	adds	r7, #112	; 0x70
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}

08003cbe <memset>:
 8003cbe:	4402      	add	r2, r0
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d100      	bne.n	8003cc8 <memset+0xa>
 8003cc6:	4770      	bx	lr
 8003cc8:	f803 1b01 	strb.w	r1, [r3], #1
 8003ccc:	e7f9      	b.n	8003cc2 <memset+0x4>
	...

08003cd0 <__libc_init_array>:
 8003cd0:	b570      	push	{r4, r5, r6, lr}
 8003cd2:	4d0d      	ldr	r5, [pc, #52]	; (8003d08 <__libc_init_array+0x38>)
 8003cd4:	4c0d      	ldr	r4, [pc, #52]	; (8003d0c <__libc_init_array+0x3c>)
 8003cd6:	1b64      	subs	r4, r4, r5
 8003cd8:	10a4      	asrs	r4, r4, #2
 8003cda:	2600      	movs	r6, #0
 8003cdc:	42a6      	cmp	r6, r4
 8003cde:	d109      	bne.n	8003cf4 <__libc_init_array+0x24>
 8003ce0:	4d0b      	ldr	r5, [pc, #44]	; (8003d10 <__libc_init_array+0x40>)
 8003ce2:	4c0c      	ldr	r4, [pc, #48]	; (8003d14 <__libc_init_array+0x44>)
 8003ce4:	f000 f818 	bl	8003d18 <_init>
 8003ce8:	1b64      	subs	r4, r4, r5
 8003cea:	10a4      	asrs	r4, r4, #2
 8003cec:	2600      	movs	r6, #0
 8003cee:	42a6      	cmp	r6, r4
 8003cf0:	d105      	bne.n	8003cfe <__libc_init_array+0x2e>
 8003cf2:	bd70      	pop	{r4, r5, r6, pc}
 8003cf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003cf8:	4798      	blx	r3
 8003cfa:	3601      	adds	r6, #1
 8003cfc:	e7ee      	b.n	8003cdc <__libc_init_array+0xc>
 8003cfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d02:	4798      	blx	r3
 8003d04:	3601      	adds	r6, #1
 8003d06:	e7f2      	b.n	8003cee <__libc_init_array+0x1e>
 8003d08:	08003d58 	.word	0x08003d58
 8003d0c:	08003d58 	.word	0x08003d58
 8003d10:	08003d58 	.word	0x08003d58
 8003d14:	08003d5c 	.word	0x08003d5c

08003d18 <_init>:
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	bf00      	nop
 8003d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d1e:	bc08      	pop	{r3}
 8003d20:	469e      	mov	lr, r3
 8003d22:	4770      	bx	lr

08003d24 <_fini>:
 8003d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d26:	bf00      	nop
 8003d28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d2a:	bc08      	pop	{r3}
 8003d2c:	469e      	mov	lr, r3
 8003d2e:	4770      	bx	lr
