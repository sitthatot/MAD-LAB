
Lab5.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ab4  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c4  08006cb8  08006cb8  00016cb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800707c  0800707c  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800707c  0800707c  0001707c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007084  08007084  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003e8  200001d4  08007260  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005bc  08007260  000205bc  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020202  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c746  00000000  00000000  00020245  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000229b  00000000  00000000  0002c98b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  0002ec28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000738  00000000  00000000  0002f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000289f9  00000000  00000000  0002fcf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e601  00000000  00000000  000586e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f814a  00000000  00000000  00066cea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000343c  00000000  00000000  0015ee34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00162270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08006c9c 	.word	0x08006c9c

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08006c9c 	.word	0x08006c9c

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005f2:	463b      	mov	r3, r7
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fe:	4b21      	ldr	r3, [pc, #132]	; (8000684 <MX_ADC1_Init+0x98>)
 8000600:	4a21      	ldr	r2, [pc, #132]	; (8000688 <MX_ADC1_Init+0x9c>)
 8000602:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000604:	4b1f      	ldr	r3, [pc, #124]	; (8000684 <MX_ADC1_Init+0x98>)
 8000606:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800060a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800060c:	4b1d      	ldr	r3, [pc, #116]	; (8000684 <MX_ADC1_Init+0x98>)
 800060e:	2200      	movs	r2, #0
 8000610:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000612:	4b1c      	ldr	r3, [pc, #112]	; (8000684 <MX_ADC1_Init+0x98>)
 8000614:	2200      	movs	r2, #0
 8000616:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000618:	4b1a      	ldr	r3, [pc, #104]	; (8000684 <MX_ADC1_Init+0x98>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061e:	4b19      	ldr	r3, [pc, #100]	; (8000684 <MX_ADC1_Init+0x98>)
 8000620:	2200      	movs	r2, #0
 8000622:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000626:	4b17      	ldr	r3, [pc, #92]	; (8000684 <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800062c:	4b15      	ldr	r3, [pc, #84]	; (8000684 <MX_ADC1_Init+0x98>)
 800062e:	4a17      	ldr	r2, [pc, #92]	; (800068c <MX_ADC1_Init+0xa0>)
 8000630:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000632:	4b14      	ldr	r3, [pc, #80]	; (8000684 <MX_ADC1_Init+0x98>)
 8000634:	2200      	movs	r2, #0
 8000636:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000638:	4b12      	ldr	r3, [pc, #72]	; (8000684 <MX_ADC1_Init+0x98>)
 800063a:	2201      	movs	r2, #1
 800063c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063e:	4b11      	ldr	r3, [pc, #68]	; (8000684 <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800064c:	480d      	ldr	r0, [pc, #52]	; (8000684 <MX_ADC1_Init+0x98>)
 800064e:	f000 fe03 	bl	8001258 <HAL_ADC_Init>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000658:	f000 fb8e 	bl	8000d78 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800065c:	230a      	movs	r3, #10
 800065e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000660:	2301      	movs	r3, #1
 8000662:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000664:	2300      	movs	r3, #0
 8000666:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000668:	463b      	mov	r3, r7
 800066a:	4619      	mov	r1, r3
 800066c:	4805      	ldr	r0, [pc, #20]	; (8000684 <MX_ADC1_Init+0x98>)
 800066e:	f000 ff9d 	bl	80015ac <HAL_ADC_ConfigChannel>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000678:	f000 fb7e 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}
 8000684:	200001f0 	.word	0x200001f0
 8000688:	40012000 	.word	0x40012000
 800068c:	0f000001 	.word	0x0f000001

08000690 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08a      	sub	sp, #40	; 0x28
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000698:	f107 0314 	add.w	r3, r7, #20
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	4a31      	ldr	r2, [pc, #196]	; (8000774 <HAL_ADC_MspInit+0xe4>)
 80006ae:	4293      	cmp	r3, r2
 80006b0:	d15c      	bne.n	800076c <HAL_ADC_MspInit+0xdc>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006b2:	4b31      	ldr	r3, [pc, #196]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b6:	4a30      	ldr	r2, [pc, #192]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006bc:	6453      	str	r3, [r2, #68]	; 0x44
 80006be:	4b2e      	ldr	r3, [pc, #184]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c6:	613b      	str	r3, [r7, #16]
 80006c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ca:	4b2b      	ldr	r3, [pc, #172]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ce:	4a2a      	ldr	r2, [pc, #168]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006d0:	f043 0304 	orr.w	r3, r3, #4
 80006d4:	6313      	str	r3, [r2, #48]	; 0x30
 80006d6:	4b28      	ldr	r3, [pc, #160]	; (8000778 <HAL_ADC_MspInit+0xe8>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	f003 0304 	and.w	r3, r3, #4
 80006de:	60fb      	str	r3, [r7, #12]
 80006e0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006e2:	2301      	movs	r3, #1
 80006e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e6:	2303      	movs	r3, #3
 80006e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ea:	2300      	movs	r3, #0
 80006ec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006ee:	f107 0314 	add.w	r3, r7, #20
 80006f2:	4619      	mov	r1, r3
 80006f4:	4821      	ldr	r0, [pc, #132]	; (800077c <HAL_ADC_MspInit+0xec>)
 80006f6:	f001 fda5 	bl	8002244 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80006fa:	4b21      	ldr	r3, [pc, #132]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 80006fc:	4a21      	ldr	r2, [pc, #132]	; (8000784 <HAL_ADC_MspInit+0xf4>)
 80006fe:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000700:	4b1f      	ldr	r3, [pc, #124]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000702:	2200      	movs	r2, #0
 8000704:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000706:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000708:	2200      	movs	r2, #0
 800070a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800070c:	4b1c      	ldr	r3, [pc, #112]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 800070e:	2200      	movs	r2, #0
 8000710:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000712:	4b1b      	ldr	r3, [pc, #108]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000714:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000718:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800071a:	4b19      	ldr	r3, [pc, #100]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 800071c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000720:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000722:	4b17      	ldr	r3, [pc, #92]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000724:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000728:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800072a:	4b15      	ldr	r3, [pc, #84]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 800072c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000730:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000732:	4b13      	ldr	r3, [pc, #76]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000738:	4b11      	ldr	r3, [pc, #68]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 800073a:	2204      	movs	r2, #4
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800073e:	4b10      	ldr	r3, [pc, #64]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000740:	2203      	movs	r2, #3
 8000742:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8000744:	4b0e      	ldr	r3, [pc, #56]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000746:	2200      	movs	r2, #0
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800074a:	4b0d      	ldr	r3, [pc, #52]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 800074c:	2200      	movs	r2, #0
 800074e:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000750:	480b      	ldr	r0, [pc, #44]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000752:	f001 fa8d 	bl	8001c70 <HAL_DMA_Init>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d001      	beq.n	8000760 <HAL_ADC_MspInit+0xd0>
    {
      Error_Handler();
 800075c:	f000 fb0c 	bl	8000d78 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	4a07      	ldr	r2, [pc, #28]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000764:	639a      	str	r2, [r3, #56]	; 0x38
 8000766:	4a06      	ldr	r2, [pc, #24]	; (8000780 <HAL_ADC_MspInit+0xf0>)
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40012000 	.word	0x40012000
 8000778:	40023800 	.word	0x40023800
 800077c:	40020800 	.word	0x40020800
 8000780:	20000238 	.word	0x20000238
 8000784:	40026410 	.word	0x40026410

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <MX_DMA_Init+0x38>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a0b      	ldr	r2, [pc, #44]	; (80007c0 <MX_DMA_Init+0x38>)
 8000794:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <MX_DMA_Init+0x38>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 1, 0);
 80007a6:	2200      	movs	r2, #0
 80007a8:	2101      	movs	r1, #1
 80007aa:	2038      	movs	r0, #56	; 0x38
 80007ac:	f001 fa29 	bl	8001c02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007b0:	2038      	movs	r0, #56	; 0x38
 80007b2:	f001 fa42 	bl	8001c3a <HAL_NVIC_EnableIRQ>

}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08a      	sub	sp, #40	; 0x28
 80007c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
 80007d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007da:	4b2f      	ldr	r3, [pc, #188]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a2e      	ldr	r2, [pc, #184]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b2c      	ldr	r3, [pc, #176]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	613b      	str	r3, [r7, #16]
 80007f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f2:	4b29      	ldr	r3, [pc, #164]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a28      	ldr	r2, [pc, #160]	; (8000898 <MX_GPIO_Init+0xd4>)
 80007f8:	f043 0320 	orr.w	r3, r3, #32
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0320 	and.w	r3, r3, #32
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800080a:	4b23      	ldr	r3, [pc, #140]	; (8000898 <MX_GPIO_Init+0xd4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	4a22      	ldr	r2, [pc, #136]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000810:	f043 0310 	orr.w	r3, r3, #16
 8000814:	6313      	str	r3, [r2, #48]	; 0x30
 8000816:	4b20      	ldr	r3, [pc, #128]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	f003 0310 	and.w	r3, r3, #16
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	4b1d      	ldr	r3, [pc, #116]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	4a1c      	ldr	r2, [pc, #112]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000828:	f043 0308 	orr.w	r3, r3, #8
 800082c:	6313      	str	r3, [r2, #48]	; 0x30
 800082e:	4b1a      	ldr	r3, [pc, #104]	; (8000898 <MX_GPIO_Init+0xd4>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000832:	f003 0308 	and.w	r3, r3, #8
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_14, GPIO_PIN_RESET);
 800083a:	2200      	movs	r2, #0
 800083c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000840:	4816      	ldr	r0, [pc, #88]	; (800089c <MX_GPIO_Init+0xd8>)
 8000842:	f001 feab 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8000846:	2200      	movs	r2, #0
 8000848:	f44f 5128 	mov.w	r1, #10752	; 0x2a00
 800084c:	4814      	ldr	r0, [pc, #80]	; (80008a0 <MX_GPIO_Init+0xdc>)
 800084e:	f001 fea5 	bl	800259c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000852:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000858:	2301      	movs	r3, #1
 800085a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000860:	2300      	movs	r3, #0
 8000862:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	4619      	mov	r1, r3
 800086a:	480c      	ldr	r0, [pc, #48]	; (800089c <MX_GPIO_Init+0xd8>)
 800086c:	f001 fcea 	bl	8002244 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE9 PE11 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_13;
 8000870:	f44f 5328 	mov.w	r3, #10752	; 0x2a00
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000876:	2301      	movs	r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087a:	2300      	movs	r3, #0
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087e:	2300      	movs	r3, #0
 8000880:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000882:	f107 0314 	add.w	r3, r7, #20
 8000886:	4619      	mov	r1, r3
 8000888:	4805      	ldr	r0, [pc, #20]	; (80008a0 <MX_GPIO_Init+0xdc>)
 800088a:	f001 fcdb 	bl	8002244 <HAL_GPIO_Init>

}
 800088e:	bf00      	nop
 8000890:	3728      	adds	r7, #40	; 0x28
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40023800 	.word	0x40023800
 800089c:	40021400 	.word	0x40021400
 80008a0:	40021000 	.word	0x40021000

080008a4 <displayHEX>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void displayHEX(uint32_t myNumber){
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]

	sprintf(toHex,"0x%08X",myNumber);
 80008ac:	687a      	ldr	r2, [r7, #4]
 80008ae:	4904      	ldr	r1, [pc, #16]	; (80008c0 <displayHEX+0x1c>)
 80008b0:	4804      	ldr	r0, [pc, #16]	; (80008c4 <displayHEX+0x20>)
 80008b2:	f004 f91f 	bl	8004af4 <siprintf>
};
 80008b6:	bf00      	nop
 80008b8:	3708      	adds	r7, #8
 80008ba:	46bd      	mov	sp, r7
 80008bc:	bd80      	pop	{r7, pc}
 80008be:	bf00      	nop
 80008c0:	08006cb8 	.word	0x08006cb8
 80008c4:	2000029c 	.word	0x2000029c

080008c8 <FindVin>:

void FindVin(uint32_t num){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b082      	sub	sp, #8
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
	vin = (3.6f*num)/4096.0f;
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	ee07 3a90 	vmov	s15, r3
 80008d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80008da:	ed9f 7a0d 	vldr	s14, [pc, #52]	; 8000910 <FindVin+0x48>
 80008de:	ee27 7a87 	vmul.f32	s14, s15, s14
 80008e2:	eddf 6a0c 	vldr	s13, [pc, #48]	; 8000914 <FindVin+0x4c>
 80008e6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <FindVin+0x50>)
 80008ec:	edc3 7a00 	vstr	s15, [r3]
	sprintf(vin_str,"%.2f",vin);
 80008f0:	4b09      	ldr	r3, [pc, #36]	; (8000918 <FindVin+0x50>)
 80008f2:	edd3 7a00 	vldr	s15, [r3]
 80008f6:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80008fa:	ec53 2b17 	vmov	r2, r3, d7
 80008fe:	4907      	ldr	r1, [pc, #28]	; (800091c <FindVin+0x54>)
 8000900:	4807      	ldr	r0, [pc, #28]	; (8000920 <FindVin+0x58>)
 8000902:	f004 f8f7 	bl	8004af4 <siprintf>
}
 8000906:	bf00      	nop
 8000908:	3708      	adds	r7, #8
 800090a:	46bd      	mov	sp, r7
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	40666666 	.word	0x40666666
 8000914:	45800000 	.word	0x45800000
 8000918:	20000364 	.word	0x20000364
 800091c:	08006cc0 	.word	0x08006cc0
 8000920:	20000300 	.word	0x20000300

08000924 <average_8>:

int average_8(int x)
{
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	static int samples[8];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <average_8+0x54>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a12      	ldr	r2, [pc, #72]	; (800097c <average_8+0x58>)
 8000932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000936:	687a      	ldr	r2, [r7, #4]
 8000938:	1ad2      	subs	r2, r2, r3
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <average_8+0x5c>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	4413      	add	r3, r2
 8000940:	4a0f      	ldr	r2, [pc, #60]	; (8000980 <average_8+0x5c>)
 8000942:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 8000944:	4b0c      	ldr	r3, [pc, #48]	; (8000978 <average_8+0x54>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	490c      	ldr	r1, [pc, #48]	; (800097c <average_8+0x58>)
 800094a:	687a      	ldr	r2, [r7, #4]
 800094c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i==7 ? 0 : i+1);
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <average_8+0x54>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	2b07      	cmp	r3, #7
 8000956:	d003      	beq.n	8000960 <average_8+0x3c>
 8000958:	4b07      	ldr	r3, [pc, #28]	; (8000978 <average_8+0x54>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	3301      	adds	r3, #1
 800095e:	e000      	b.n	8000962 <average_8+0x3e>
 8000960:	2300      	movs	r3, #0
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <average_8+0x54>)
 8000964:	6013      	str	r3, [r2, #0]

	return total>>3;
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <average_8+0x5c>)
 8000968:	681b      	ldr	r3, [r3, #0]
 800096a:	10db      	asrs	r3, r3, #3
}
 800096c:	4618      	mov	r0, r3
 800096e:	370c      	adds	r7, #12
 8000970:	46bd      	mov	sp, r7
 8000972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000976:	4770      	bx	lr
 8000978:	20000370 	.word	0x20000370
 800097c:	20000374 	.word	0x20000374
 8000980:	20000394 	.word	0x20000394

08000984 <average_16>:

int average_16(int x)
{
 8000984:	b480      	push	{r7}
 8000986:	b083      	sub	sp, #12
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	static int samples[16];
	static int i = 0;
	static int total = 0;

	total += x - samples[i];
 800098c:	4b12      	ldr	r3, [pc, #72]	; (80009d8 <average_16+0x54>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a12      	ldr	r2, [pc, #72]	; (80009dc <average_16+0x58>)
 8000992:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000996:	687a      	ldr	r2, [r7, #4]
 8000998:	1ad2      	subs	r2, r2, r3
 800099a:	4b11      	ldr	r3, [pc, #68]	; (80009e0 <average_16+0x5c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	4413      	add	r3, r2
 80009a0:	4a0f      	ldr	r2, [pc, #60]	; (80009e0 <average_16+0x5c>)
 80009a2:	6013      	str	r3, [r2, #0]
	samples[i] = x;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <average_16+0x54>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <average_16+0x58>)
 80009aa:	687a      	ldr	r2, [r7, #4]
 80009ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	i = (i==15 ? 0 : i+1);
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <average_16+0x54>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	2b0f      	cmp	r3, #15
 80009b6:	d003      	beq.n	80009c0 <average_16+0x3c>
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <average_16+0x54>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	e000      	b.n	80009c2 <average_16+0x3e>
 80009c0:	2300      	movs	r3, #0
 80009c2:	4a05      	ldr	r2, [pc, #20]	; (80009d8 <average_16+0x54>)
 80009c4:	6013      	str	r3, [r2, #0]

	return total>>4;
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <average_16+0x5c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	111b      	asrs	r3, r3, #4
}
 80009cc:	4618      	mov	r0, r3
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	20000398 	.word	0x20000398
 80009dc:	2000039c 	.word	0x2000039c
 80009e0:	200003dc 	.word	0x200003dc

080009e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b088      	sub	sp, #32
 80009e8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ea:	f000 fbb4 	bl	8001156 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ee:	f000 f967 	bl	8000cc0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009f2:	f7ff fee7 	bl	80007c4 <MX_GPIO_Init>
  MX_DMA_Init();
 80009f6:	f7ff fec7 	bl	8000788 <MX_DMA_Init>
  MX_ADC1_Init();
 80009fa:	f7ff fdf7 	bl	80005ec <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80009fe:	f000 faf1 	bl	8000fe4 <MX_USART3_UART_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  HAL_ADC_Start(&hadc1);
 8000a02:	48a3      	ldr	r0, [pc, #652]	; (8000c90 <main+0x2ac>)
 8000a04:	f000 fc6c 	bl	80012e0 <HAL_ADC_Start>
  while (1)
  {
	  while(HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 8000a08:	bf00      	nop
 8000a0a:	2164      	movs	r1, #100	; 0x64
 8000a0c:	48a0      	ldr	r0, [pc, #640]	; (8000c90 <main+0x2ac>)
 8000a0e:	f000 fd35 	bl	800147c <HAL_ADC_PollForConversion>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1f8      	bne.n	8000a0a <main+0x26>
	  adc_val = HAL_ADC_GetValue(&hadc1);
 8000a18:	489d      	ldr	r0, [pc, #628]	; (8000c90 <main+0x2ac>)
 8000a1a:	f000 fdba 	bl	8001592 <HAL_ADC_GetValue>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	4a9c      	ldr	r2, [pc, #624]	; (8000c94 <main+0x2b0>)
 8000a22:	6013      	str	r3, [r2, #0]
	  //while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET){}
	  //HAL_UART_Transmit(&huart3, (uint8_t*) &toHex, strlen(toHex),1000);

	  //displayHEX(hex1);

	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET){} //เช็�?ว่า Transmission complete รึยัง
 8000a24:	bf00      	nop
 8000a26:	4b9c      	ldr	r3, [pc, #624]	; (8000c98 <main+0x2b4>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	69db      	ldr	r3, [r3, #28]
 8000a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a30:	2b40      	cmp	r3, #64	; 0x40
 8000a32:	d1f8      	bne.n	8000a26 <main+0x42>
	  FindVin(adc_val);
 8000a34:	4b97      	ldr	r3, [pc, #604]	; (8000c94 <main+0x2b0>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4618      	mov	r0, r3
 8000a3a:	f7ff ff45 	bl	80008c8 <FindVin>
	  adc_avg_8 = average_8(adc_val);
 8000a3e:	4b95      	ldr	r3, [pc, #596]	; (8000c94 <main+0x2b0>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f7ff ff6e 	bl	8000924 <average_8>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	4a94      	ldr	r2, [pc, #592]	; (8000c9c <main+0x2b8>)
 8000a4c:	6013      	str	r3, [r2, #0]
	  adc_avg_16 = average_16(adc_val);
 8000a4e:	4b91      	ldr	r3, [pc, #580]	; (8000c94 <main+0x2b0>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	4618      	mov	r0, r3
 8000a54:	f7ff ff96 	bl	8000984 <average_16>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4a91      	ldr	r2, [pc, #580]	; (8000ca0 <main+0x2bc>)
 8000a5c:	6013      	str	r3, [r2, #0]
	  displayHEX(adc_avg_8);
 8000a5e:	4b8f      	ldr	r3, [pc, #572]	; (8000c9c <main+0x2b8>)
 8000a60:	681b      	ldr	r3, [r3, #0]
 8000a62:	4618      	mov	r0, r3
 8000a64:	f7ff ff1e 	bl	80008a4 <displayHEX>

	  char text[] = "ADC1_CH10 ";
 8000a68:	4a8e      	ldr	r2, [pc, #568]	; (8000ca4 <main+0x2c0>)
 8000a6a:	f107 0314 	add.w	r3, r7, #20
 8000a6e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a70:	c303      	stmia	r3!, {r0, r1}
 8000a72:	801a      	strh	r2, [r3, #0]
 8000a74:	3302      	adds	r3, #2
 8000a76:	0c12      	lsrs	r2, r2, #16
 8000a78:	701a      	strb	r2, [r3, #0]
	  char volt[] = "   Vin = ";
 8000a7a:	4a8b      	ldr	r2, [pc, #556]	; (8000ca8 <main+0x2c4>)
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a82:	c303      	stmia	r3!, {r0, r1}
 8000a84:	801a      	strh	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*) &text, strlen(text),1000);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f7ff fc28 	bl	80002e0 <strlen>
 8000a90:	4603      	mov	r3, r0
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	f107 0114 	add.w	r1, r7, #20
 8000a98:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a9c:	487e      	ldr	r0, [pc, #504]	; (8000c98 <main+0x2b4>)
 8000a9e:	f002 fea1 	bl	80037e4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &toHex, strlen(toHex),1000);
 8000aa2:	4882      	ldr	r0, [pc, #520]	; (8000cac <main+0x2c8>)
 8000aa4:	f7ff fc1c 	bl	80002e0 <strlen>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	b29a      	uxth	r2, r3
 8000aac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab0:	497e      	ldr	r1, [pc, #504]	; (8000cac <main+0x2c8>)
 8000ab2:	4879      	ldr	r0, [pc, #484]	; (8000c98 <main+0x2b4>)
 8000ab4:	f002 fe96 	bl	80037e4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &volt, strlen(volt),1000);
 8000ab8:	f107 0308 	add.w	r3, r7, #8
 8000abc:	4618      	mov	r0, r3
 8000abe:	f7ff fc0f 	bl	80002e0 <strlen>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	b29a      	uxth	r2, r3
 8000ac6:	f107 0108 	add.w	r1, r7, #8
 8000aca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ace:	4872      	ldr	r0, [pc, #456]	; (8000c98 <main+0x2b4>)
 8000ad0:	f002 fe88 	bl	80037e4 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &vin_str, strlen(vin_str),1000);
 8000ad4:	4876      	ldr	r0, [pc, #472]	; (8000cb0 <main+0x2cc>)
 8000ad6:	f7ff fc03 	bl	80002e0 <strlen>
 8000ada:	4603      	mov	r3, r0
 8000adc:	b29a      	uxth	r2, r3
 8000ade:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ae2:	4973      	ldr	r1, [pc, #460]	; (8000cb0 <main+0x2cc>)
 8000ae4:	486c      	ldr	r0, [pc, #432]	; (8000c98 <main+0x2b4>)
 8000ae6:	f002 fe7d 	bl	80037e4 <HAL_UART_Transmit>
	  char new[] = " V \r\n ";
 8000aea:	4a72      	ldr	r2, [pc, #456]	; (8000cb4 <main+0x2d0>)
 8000aec:	463b      	mov	r3, r7
 8000aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	8019      	strh	r1, [r3, #0]
 8000af8:	3302      	adds	r3, #2
 8000afa:	0c0a      	lsrs	r2, r1, #16
 8000afc:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Transmit(&huart3, (uint8_t*) &new, strlen(new),1000);
 8000afe:	463b      	mov	r3, r7
 8000b00:	4618      	mov	r0, r3
 8000b02:	f7ff fbed 	bl	80002e0 <strlen>
 8000b06:	4603      	mov	r3, r0
 8000b08:	b29a      	uxth	r2, r3
 8000b0a:	4639      	mov	r1, r7
 8000b0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b10:	4861      	ldr	r0, [pc, #388]	; (8000c98 <main+0x2b4>)
 8000b12:	f002 fe67 	bl	80037e4 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 8000b16:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000b1a:	f000 fb79 	bl	8001210 <HAL_Delay>

	  if(adc_avg_16>=0 && adc_avg_16<=818)
 8000b1e:	4b60      	ldr	r3, [pc, #384]	; (8000ca0 <main+0x2bc>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	db1e      	blt.n	8000b64 <main+0x180>
 8000b26:	4b5e      	ldr	r3, [pc, #376]	; (8000ca0 <main+0x2bc>)
 8000b28:	681b      	ldr	r3, [r3, #0]
 8000b2a:	f240 3232 	movw	r2, #818	; 0x332
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	dc18      	bgt.n	8000b64 <main+0x180>
	  {
		  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_RESET);
 8000b32:	2200      	movs	r2, #0
 8000b34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b38:	485f      	ldr	r0, [pc, #380]	; (8000cb8 <main+0x2d4>)
 8000b3a:	f001 fd2f 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b44:	485c      	ldr	r0, [pc, #368]	; (8000cb8 <main+0x2d4>)
 8000b46:	f001 fd29 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_RESET);
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b50:	485a      	ldr	r0, [pc, #360]	; (8000cbc <main+0x2d8>)
 8000b52:	f001 fd23 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b5c:	4856      	ldr	r0, [pc, #344]	; (8000cb8 <main+0x2d4>)
 8000b5e:	f001 fd1d 	bl	800259c <HAL_GPIO_WritePin>
 8000b62:	e093      	b.n	8000c8c <main+0x2a8>
	  }

	  else if(adc_avg_16>=819 && adc_avg_16<=1636)
 8000b64:	4b4e      	ldr	r3, [pc, #312]	; (8000ca0 <main+0x2bc>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f240 3232 	movw	r2, #818	; 0x332
 8000b6c:	4293      	cmp	r3, r2
 8000b6e:	dd1e      	ble.n	8000bae <main+0x1ca>
 8000b70:	4b4b      	ldr	r3, [pc, #300]	; (8000ca0 <main+0x2bc>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	f240 6264 	movw	r2, #1636	; 0x664
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	dc18      	bgt.n	8000bae <main+0x1ca>
	 {
	  		  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000b7c:	2201      	movs	r2, #1
 8000b7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b82:	484d      	ldr	r0, [pc, #308]	; (8000cb8 <main+0x2d4>)
 8000b84:	f001 fd0a 	bl	800259c <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_RESET);
 8000b88:	2200      	movs	r2, #0
 8000b8a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b8e:	484a      	ldr	r0, [pc, #296]	; (8000cb8 <main+0x2d4>)
 8000b90:	f001 fd04 	bl	800259c <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_RESET);
 8000b94:	2200      	movs	r2, #0
 8000b96:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b9a:	4848      	ldr	r0, [pc, #288]	; (8000cbc <main+0x2d8>)
 8000b9c:	f001 fcfe 	bl	800259c <HAL_GPIO_WritePin>
	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ba6:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <main+0x2d4>)
 8000ba8:	f001 fcf8 	bl	800259c <HAL_GPIO_WritePin>
 8000bac:	e06e      	b.n	8000c8c <main+0x2a8>
	  	  }
	  else if(adc_avg_16>=1637 && adc_avg_16<=2455)
 8000bae:	4b3c      	ldr	r3, [pc, #240]	; (8000ca0 <main+0x2bc>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f240 6264 	movw	r2, #1636	; 0x664
 8000bb6:	4293      	cmp	r3, r2
 8000bb8:	dd1e      	ble.n	8000bf8 <main+0x214>
 8000bba:	4b39      	ldr	r3, [pc, #228]	; (8000ca0 <main+0x2bc>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f640 1297 	movw	r2, #2455	; 0x997
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	dc18      	bgt.n	8000bf8 <main+0x214>
	  	  {
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bcc:	483a      	ldr	r0, [pc, #232]	; (8000cb8 <main+0x2d4>)
 8000bce:	f001 fce5 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000bd2:	2201      	movs	r2, #1
 8000bd4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bd8:	4837      	ldr	r0, [pc, #220]	; (8000cb8 <main+0x2d4>)
 8000bda:	f001 fcdf 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be4:	4835      	ldr	r0, [pc, #212]	; (8000cbc <main+0x2d8>)
 8000be6:	f001 fcd9 	bl	800259c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 8000bea:	2200      	movs	r2, #0
 8000bec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bf0:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <main+0x2d4>)
 8000bf2:	f001 fcd3 	bl	800259c <HAL_GPIO_WritePin>
 8000bf6:	e049      	b.n	8000c8c <main+0x2a8>
	  	  }

	  else if(adc_avg_16>=2456 && adc_avg_16<=3274)
 8000bf8:	4b29      	ldr	r3, [pc, #164]	; (8000ca0 <main+0x2bc>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f640 1297 	movw	r2, #2455	; 0x997
 8000c00:	4293      	cmp	r3, r2
 8000c02:	dd1e      	ble.n	8000c42 <main+0x25e>
 8000c04:	4b26      	ldr	r3, [pc, #152]	; (8000ca0 <main+0x2bc>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f640 42ca 	movw	r2, #3274	; 0xcca
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	dc18      	bgt.n	8000c42 <main+0x25e>
	  	  	  {
	  	  		  	HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c16:	4828      	ldr	r0, [pc, #160]	; (8000cb8 <main+0x2d4>)
 8000c18:	f001 fcc0 	bl	800259c <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c22:	4825      	ldr	r0, [pc, #148]	; (8000cb8 <main+0x2d4>)
 8000c24:	f001 fcba 	bl	800259c <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_SET);
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c2e:	4823      	ldr	r0, [pc, #140]	; (8000cbc <main+0x2d8>)
 8000c30:	f001 fcb4 	bl	800259c <HAL_GPIO_WritePin>
	  	  			HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_RESET);
 8000c34:	2200      	movs	r2, #0
 8000c36:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c3a:	481f      	ldr	r0, [pc, #124]	; (8000cb8 <main+0x2d4>)
 8000c3c:	f001 fcae 	bl	800259c <HAL_GPIO_WritePin>
 8000c40:	e024      	b.n	8000c8c <main+0x2a8>
	  	  	  }

	  else if(adc_avg_16>=3275 && adc_avg_16<=4095)
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <main+0x2bc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f640 42ca 	movw	r2, #3274	; 0xcca
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	f77f aedc 	ble.w	8000a08 <main+0x24>
 8000c50:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <main+0x2bc>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000c58:	f6bf aed6 	bge.w	8000a08 <main+0x24>
	  	  	  	  {
	  	  	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_9,GPIO_PIN_SET);
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c62:	4815      	ldr	r0, [pc, #84]	; (8000cb8 <main+0x2d4>)
 8000c64:	f001 fc9a 	bl	800259c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_11,GPIO_PIN_SET);
 8000c68:	2201      	movs	r2, #1
 8000c6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c6e:	4812      	ldr	r0, [pc, #72]	; (8000cb8 <main+0x2d4>)
 8000c70:	f001 fc94 	bl	800259c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(GPIOF,GPIO_PIN_14,GPIO_PIN_SET);
 8000c74:	2201      	movs	r2, #1
 8000c76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c7a:	4810      	ldr	r0, [pc, #64]	; (8000cbc <main+0x2d8>)
 8000c7c:	f001 fc8e 	bl	800259c <HAL_GPIO_WritePin>
	  	  	  		HAL_GPIO_WritePin(GPIOE,GPIO_PIN_13,GPIO_PIN_SET);
 8000c80:	2201      	movs	r2, #1
 8000c82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c86:	480c      	ldr	r0, [pc, #48]	; (8000cb8 <main+0x2d4>)
 8000c88:	f001 fc88 	bl	800259c <HAL_GPIO_WritePin>
  {
 8000c8c:	e6bc      	b.n	8000a08 <main+0x24>
 8000c8e:	bf00      	nop
 8000c90:	200001f0 	.word	0x200001f0
 8000c94:	20000298 	.word	0x20000298
 8000c98:	200003e4 	.word	0x200003e4
 8000c9c:	20000368 	.word	0x20000368
 8000ca0:	2000036c 	.word	0x2000036c
 8000ca4:	08006cc8 	.word	0x08006cc8
 8000ca8:	08006cd4 	.word	0x08006cd4
 8000cac:	2000029c 	.word	0x2000029c
 8000cb0:	20000300 	.word	0x20000300
 8000cb4:	08006ce0 	.word	0x08006ce0
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40021400 	.word	0x40021400

08000cc0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b094      	sub	sp, #80	; 0x50
 8000cc4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cc6:	f107 031c 	add.w	r3, r7, #28
 8000cca:	2234      	movs	r2, #52	; 0x34
 8000ccc:	2100      	movs	r1, #0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f003 ff73 	bl	8004bba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cd4:	f107 0308 	add.w	r3, r7, #8
 8000cd8:	2200      	movs	r2, #0
 8000cda:	601a      	str	r2, [r3, #0]
 8000cdc:	605a      	str	r2, [r3, #4]
 8000cde:	609a      	str	r2, [r3, #8]
 8000ce0:	60da      	str	r2, [r3, #12]
 8000ce2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce4:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <SystemClock_Config+0xb0>)
 8000ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ce8:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <SystemClock_Config+0xb0>)
 8000cea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cee:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <SystemClock_Config+0xb0>)
 8000cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cf8:	607b      	str	r3, [r7, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000cfc:	4b1d      	ldr	r3, [pc, #116]	; (8000d74 <SystemClock_Config+0xb4>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d04:	4a1b      	ldr	r2, [pc, #108]	; (8000d74 <SystemClock_Config+0xb4>)
 8000d06:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d0a:	6013      	str	r3, [r2, #0]
 8000d0c:	4b19      	ldr	r3, [pc, #100]	; (8000d74 <SystemClock_Config+0xb4>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d14:	603b      	str	r3, [r7, #0]
 8000d16:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d1c:	2301      	movs	r3, #1
 8000d1e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d20:	2310      	movs	r3, #16
 8000d22:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d24:	2300      	movs	r3, #0
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f001 fc4f 	bl	80025d0 <HAL_RCC_OscConfig>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8000d38:	f000 f81e 	bl	8000d78 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3c:	230f      	movs	r3, #15
 8000d3e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d40:	2300      	movs	r3, #0
 8000d42:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d44:	2300      	movs	r3, #0
 8000d46:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d50:	f107 0308 	add.w	r3, r7, #8
 8000d54:	2100      	movs	r1, #0
 8000d56:	4618      	mov	r0, r3
 8000d58:	f001 fee8 	bl	8002b2c <HAL_RCC_ClockConfig>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000d62:	f000 f809 	bl	8000d78 <Error_Handler>
  }
}
 8000d66:	bf00      	nop
 8000d68:	3750      	adds	r7, #80	; 0x50
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40007000 	.word	0x40007000

08000d78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d7c:	b672      	cpsid	i
}
 8000d7e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d80:	e7fe      	b.n	8000d80 <Error_Handler+0x8>
	...

08000d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d8a:	4b0f      	ldr	r3, [pc, #60]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8e:	4a0e      	ldr	r2, [pc, #56]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d94:	6413      	str	r3, [r2, #64]	; 0x40
 8000d96:	4b0c      	ldr	r3, [pc, #48]	; (8000dc8 <HAL_MspInit+0x44>)
 8000d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9e:	607b      	str	r3, [r7, #4]
 8000da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da6:	4a08      	ldr	r2, [pc, #32]	; (8000dc8 <HAL_MspInit+0x44>)
 8000da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dac:	6453      	str	r3, [r2, #68]	; 0x44
 8000dae:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_MspInit+0x44>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db6:	603b      	str	r3, [r7, #0]
 8000db8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 8000dba:	2005      	movs	r0, #5
 8000dbc:	f000 ff16 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	40023800 	.word	0x40023800

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dd0:	e7fe      	b.n	8000dd0 <NMI_Handler+0x4>

08000dd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd2:	b480      	push	{r7}
 8000dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd6:	e7fe      	b.n	8000dd6 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <MemManage_Handler+0x4>

08000dde <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dde:	b480      	push	{r7}
 8000de0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de2:	e7fe      	b.n	8000de2 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dea:	b480      	push	{r7}
 8000dec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	46bd      	mov	sp, r7
 8000df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df6:	4770      	bx	lr

08000df8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfc:	bf00      	nop
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e06:	b480      	push	{r7}
 8000e08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e18:	f000 f9da 	bl	80011d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1c:	bf00      	nop
 8000e1e:	bd80      	pop	{r7, pc}

08000e20 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000e24:	4802      	ldr	r0, [pc, #8]	; (8000e30 <DMA2_Stream0_IRQHandler+0x10>)
 8000e26:	f000 ffd1 	bl	8001dcc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000e2a:	bf00      	nop
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	20000238 	.word	0x20000238

08000e34 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0
  return 1;
 8000e38:	2301      	movs	r3, #1
}
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr

08000e44 <_kill>:

int _kill(int pid, int sig)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e4e:	f003 ff07 	bl	8004c60 <__errno>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2216      	movs	r2, #22
 8000e56:	601a      	str	r2, [r3, #0]
  return -1;
 8000e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	3708      	adds	r7, #8
 8000e60:	46bd      	mov	sp, r7
 8000e62:	bd80      	pop	{r7, pc}

08000e64 <_exit>:

void _exit (int status)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e70:	6878      	ldr	r0, [r7, #4]
 8000e72:	f7ff ffe7 	bl	8000e44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e76:	e7fe      	b.n	8000e76 <_exit+0x12>

08000e78 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	60f8      	str	r0, [r7, #12]
 8000e80:	60b9      	str	r1, [r7, #8]
 8000e82:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
 8000e88:	e00a      	b.n	8000ea0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e8a:	f3af 8000 	nop.w
 8000e8e:	4601      	mov	r1, r0
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	1c5a      	adds	r2, r3, #1
 8000e94:	60ba      	str	r2, [r7, #8]
 8000e96:	b2ca      	uxtb	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e9a:	697b      	ldr	r3, [r7, #20]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	617b      	str	r3, [r7, #20]
 8000ea0:	697a      	ldr	r2, [r7, #20]
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	dbf0      	blt.n	8000e8a <_read+0x12>
  }

  return len;
 8000ea8:	687b      	ldr	r3, [r7, #4]
}
 8000eaa:	4618      	mov	r0, r3
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}

08000eb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eb2:	b580      	push	{r7, lr}
 8000eb4:	b086      	sub	sp, #24
 8000eb6:	af00      	add	r7, sp, #0
 8000eb8:	60f8      	str	r0, [r7, #12]
 8000eba:	60b9      	str	r1, [r7, #8]
 8000ebc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
 8000ec2:	e009      	b.n	8000ed8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	1c5a      	adds	r2, r3, #1
 8000ec8:	60ba      	str	r2, [r7, #8]
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	3301      	adds	r3, #1
 8000ed6:	617b      	str	r3, [r7, #20]
 8000ed8:	697a      	ldr	r2, [r7, #20]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	dbf1      	blt.n	8000ec4 <_write+0x12>
  }
  return len;
 8000ee0:	687b      	ldr	r3, [r7, #4]
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <_close>:

int _close(int file)
{
 8000eea:	b480      	push	{r7}
 8000eec:	b083      	sub	sp, #12
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ef6:	4618      	mov	r0, r3
 8000ef8:	370c      	adds	r7, #12
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f02:	b480      	push	{r7}
 8000f04:	b083      	sub	sp, #12
 8000f06:	af00      	add	r7, sp, #0
 8000f08:	6078      	str	r0, [r7, #4]
 8000f0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f12:	605a      	str	r2, [r3, #4]
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	370c      	adds	r7, #12
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr

08000f22 <_isatty>:

int _isatty(int file)
{
 8000f22:	b480      	push	{r7}
 8000f24:	b083      	sub	sp, #12
 8000f26:	af00      	add	r7, sp, #0
 8000f28:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	370c      	adds	r7, #12
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr

08000f38 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	60f8      	str	r0, [r7, #12]
 8000f40:	60b9      	str	r1, [r7, #8]
 8000f42:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f44:	2300      	movs	r3, #0
}
 8000f46:	4618      	mov	r0, r3
 8000f48:	3714      	adds	r7, #20
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr
	...

08000f54 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f5c:	4a14      	ldr	r2, [pc, #80]	; (8000fb0 <_sbrk+0x5c>)
 8000f5e:	4b15      	ldr	r3, [pc, #84]	; (8000fb4 <_sbrk+0x60>)
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f68:	4b13      	ldr	r3, [pc, #76]	; (8000fb8 <_sbrk+0x64>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d102      	bne.n	8000f76 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f70:	4b11      	ldr	r3, [pc, #68]	; (8000fb8 <_sbrk+0x64>)
 8000f72:	4a12      	ldr	r2, [pc, #72]	; (8000fbc <_sbrk+0x68>)
 8000f74:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <_sbrk+0x64>)
 8000f78:	681a      	ldr	r2, [r3, #0]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4413      	add	r3, r2
 8000f7e:	693a      	ldr	r2, [r7, #16]
 8000f80:	429a      	cmp	r2, r3
 8000f82:	d207      	bcs.n	8000f94 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f84:	f003 fe6c 	bl	8004c60 <__errno>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	220c      	movs	r2, #12
 8000f8c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f92:	e009      	b.n	8000fa8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <_sbrk+0x64>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <_sbrk+0x64>)
 8000f9c:	681a      	ldr	r2, [r3, #0]
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4413      	add	r3, r2
 8000fa2:	4a05      	ldr	r2, [pc, #20]	; (8000fb8 <_sbrk+0x64>)
 8000fa4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fa6:	68fb      	ldr	r3, [r7, #12]
}
 8000fa8:	4618      	mov	r0, r3
 8000faa:	3718      	adds	r7, #24
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	20080000 	.word	0x20080000
 8000fb4:	00000400 	.word	0x00000400
 8000fb8:	200003e0 	.word	0x200003e0
 8000fbc:	200005c0 	.word	0x200005c0

08000fc0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fc4:	4b06      	ldr	r3, [pc, #24]	; (8000fe0 <SystemInit+0x20>)
 8000fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fca:	4a05      	ldr	r2, [pc, #20]	; (8000fe0 <SystemInit+0x20>)
 8000fcc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fd0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	e000ed00 	.word	0xe000ed00

08000fe4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000fe8:	4b14      	ldr	r3, [pc, #80]	; (800103c <MX_USART3_UART_Init+0x58>)
 8000fea:	4a15      	ldr	r2, [pc, #84]	; (8001040 <MX_USART3_UART_Init+0x5c>)
 8000fec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000fee:	4b13      	ldr	r3, [pc, #76]	; (800103c <MX_USART3_UART_Init+0x58>)
 8000ff0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ff4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	4b11      	ldr	r3, [pc, #68]	; (800103c <MX_USART3_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ffc:	4b0f      	ldr	r3, [pc, #60]	; (800103c <MX_USART3_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001002:	4b0e      	ldr	r3, [pc, #56]	; (800103c <MX_USART3_UART_Init+0x58>)
 8001004:	2200      	movs	r2, #0
 8001006:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001008:	4b0c      	ldr	r3, [pc, #48]	; (800103c <MX_USART3_UART_Init+0x58>)
 800100a:	220c      	movs	r2, #12
 800100c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800100e:	4b0b      	ldr	r3, [pc, #44]	; (800103c <MX_USART3_UART_Init+0x58>)
 8001010:	2200      	movs	r2, #0
 8001012:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001014:	4b09      	ldr	r3, [pc, #36]	; (800103c <MX_USART3_UART_Init+0x58>)
 8001016:	2200      	movs	r2, #0
 8001018:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800101a:	4b08      	ldr	r3, [pc, #32]	; (800103c <MX_USART3_UART_Init+0x58>)
 800101c:	2200      	movs	r2, #0
 800101e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001020:	4b06      	ldr	r3, [pc, #24]	; (800103c <MX_USART3_UART_Init+0x58>)
 8001022:	2200      	movs	r2, #0
 8001024:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001026:	4805      	ldr	r0, [pc, #20]	; (800103c <MX_USART3_UART_Init+0x58>)
 8001028:	f002 fb8e 	bl	8003748 <HAL_UART_Init>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001032:	f7ff fea1 	bl	8000d78 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	200003e4 	.word	0x200003e4
 8001040:	40004800 	.word	0x40004800

08001044 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b0ae      	sub	sp, #184	; 0xb8
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800104c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001050:	2200      	movs	r2, #0
 8001052:	601a      	str	r2, [r3, #0]
 8001054:	605a      	str	r2, [r3, #4]
 8001056:	609a      	str	r2, [r3, #8]
 8001058:	60da      	str	r2, [r3, #12]
 800105a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2290      	movs	r2, #144	; 0x90
 8001062:	2100      	movs	r1, #0
 8001064:	4618      	mov	r0, r3
 8001066:	f003 fda8 	bl	8004bba <memset>
  if(uartHandle->Instance==USART3)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a22      	ldr	r2, [pc, #136]	; (80010f8 <HAL_UART_MspInit+0xb4>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d13c      	bne.n	80010ee <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001078:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800107a:	2300      	movs	r3, #0
 800107c:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107e:	f107 0314 	add.w	r3, r7, #20
 8001082:	4618      	mov	r0, r3
 8001084:	f001 ff38 	bl	8002ef8 <HAL_RCCEx_PeriphCLKConfig>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800108e:	f7ff fe73 	bl	8000d78 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001092:	4b1a      	ldr	r3, [pc, #104]	; (80010fc <HAL_UART_MspInit+0xb8>)
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	4a19      	ldr	r2, [pc, #100]	; (80010fc <HAL_UART_MspInit+0xb8>)
 8001098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800109c:	6413      	str	r3, [r2, #64]	; 0x40
 800109e:	4b17      	ldr	r3, [pc, #92]	; (80010fc <HAL_UART_MspInit+0xb8>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010a6:	613b      	str	r3, [r7, #16]
 80010a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80010aa:	4b14      	ldr	r3, [pc, #80]	; (80010fc <HAL_UART_MspInit+0xb8>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ae:	4a13      	ldr	r2, [pc, #76]	; (80010fc <HAL_UART_MspInit+0xb8>)
 80010b0:	f043 0308 	orr.w	r3, r3, #8
 80010b4:	6313      	str	r3, [r2, #48]	; 0x30
 80010b6:	4b11      	ldr	r3, [pc, #68]	; (80010fc <HAL_UART_MspInit+0xb8>)
 80010b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ba:	f003 0308 	and.w	r3, r3, #8
 80010be:	60fb      	str	r3, [r7, #12]
 80010c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80010c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80010c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ca:	2302      	movs	r3, #2
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80010dc:	2307      	movs	r3, #7
 80010de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e6:	4619      	mov	r1, r3
 80010e8:	4805      	ldr	r0, [pc, #20]	; (8001100 <HAL_UART_MspInit+0xbc>)
 80010ea:	f001 f8ab 	bl	8002244 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80010ee:	bf00      	nop
 80010f0:	37b8      	adds	r7, #184	; 0xb8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40004800 	.word	0x40004800
 80010fc:	40023800 	.word	0x40023800
 8001100:	40020c00 	.word	0x40020c00

08001104 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001104:	f8df d034 	ldr.w	sp, [pc, #52]	; 800113c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001108:	480d      	ldr	r0, [pc, #52]	; (8001140 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800110a:	490e      	ldr	r1, [pc, #56]	; (8001144 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800110c:	4a0e      	ldr	r2, [pc, #56]	; (8001148 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800110e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001110:	e002      	b.n	8001118 <LoopCopyDataInit>

08001112 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001112:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001114:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001116:	3304      	adds	r3, #4

08001118 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001118:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800111a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800111c:	d3f9      	bcc.n	8001112 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800111e:	4a0b      	ldr	r2, [pc, #44]	; (800114c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001120:	4c0b      	ldr	r4, [pc, #44]	; (8001150 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001122:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001124:	e001      	b.n	800112a <LoopFillZerobss>

08001126 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001126:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001128:	3204      	adds	r2, #4

0800112a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800112a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800112c:	d3fb      	bcc.n	8001126 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800112e:	f7ff ff47 	bl	8000fc0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001132:	f003 fd9b 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001136:	f7ff fc55 	bl	80009e4 <main>
  bx  lr    
 800113a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800113c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001140:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001144:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001148:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 800114c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001150:	200005bc 	.word	0x200005bc

08001154 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001154:	e7fe      	b.n	8001154 <ADC_IRQHandler>

08001156 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001156:	b580      	push	{r7, lr}
 8001158:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800115a:	2003      	movs	r0, #3
 800115c:	f000 fd46 	bl	8001bec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001160:	2000      	movs	r0, #0
 8001162:	f000 f805 	bl	8001170 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001166:	f7ff fe0d 	bl	8000d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800116a:	2300      	movs	r3, #0
}
 800116c:	4618      	mov	r0, r3
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001178:	4b12      	ldr	r3, [pc, #72]	; (80011c4 <HAL_InitTick+0x54>)
 800117a:	681a      	ldr	r2, [r3, #0]
 800117c:	4b12      	ldr	r3, [pc, #72]	; (80011c8 <HAL_InitTick+0x58>)
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	4619      	mov	r1, r3
 8001182:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001186:	fbb3 f3f1 	udiv	r3, r3, r1
 800118a:	fbb2 f3f3 	udiv	r3, r2, r3
 800118e:	4618      	mov	r0, r3
 8001190:	f000 fd61 	bl	8001c56 <HAL_SYSTICK_Config>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e00e      	b.n	80011bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2b0f      	cmp	r3, #15
 80011a2:	d80a      	bhi.n	80011ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011a4:	2200      	movs	r2, #0
 80011a6:	6879      	ldr	r1, [r7, #4]
 80011a8:	f04f 30ff 	mov.w	r0, #4294967295
 80011ac:	f000 fd29 	bl	8001c02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011b0:	4a06      	ldr	r2, [pc, #24]	; (80011cc <HAL_InitTick+0x5c>)
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011b6:	2300      	movs	r3, #0
 80011b8:	e000      	b.n	80011bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	20000000 	.word	0x20000000
 80011c8:	20000008 	.word	0x20000008
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011d4:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HAL_IncTick+0x20>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	461a      	mov	r2, r3
 80011da:	4b06      	ldr	r3, [pc, #24]	; (80011f4 <HAL_IncTick+0x24>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4413      	add	r3, r2
 80011e0:	4a04      	ldr	r2, [pc, #16]	; (80011f4 <HAL_IncTick+0x24>)
 80011e2:	6013      	str	r3, [r2, #0]
}
 80011e4:	bf00      	nop
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	20000008 	.word	0x20000008
 80011f4:	2000046c 	.word	0x2000046c

080011f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011f8:	b480      	push	{r7}
 80011fa:	af00      	add	r7, sp, #0
  return uwTick;
 80011fc:	4b03      	ldr	r3, [pc, #12]	; (800120c <HAL_GetTick+0x14>)
 80011fe:	681b      	ldr	r3, [r3, #0]
}
 8001200:	4618      	mov	r0, r3
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	2000046c 	.word	0x2000046c

08001210 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001218:	f7ff ffee 	bl	80011f8 <HAL_GetTick>
 800121c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001228:	d005      	beq.n	8001236 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800122a:	4b0a      	ldr	r3, [pc, #40]	; (8001254 <HAL_Delay+0x44>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	461a      	mov	r2, r3
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4413      	add	r3, r2
 8001234:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001236:	bf00      	nop
 8001238:	f7ff ffde 	bl	80011f8 <HAL_GetTick>
 800123c:	4602      	mov	r2, r0
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	68fa      	ldr	r2, [r7, #12]
 8001244:	429a      	cmp	r2, r3
 8001246:	d8f7      	bhi.n	8001238 <HAL_Delay+0x28>
  {
  }
}
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000008 	.word	0x20000008

08001258 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d101      	bne.n	800126e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e031      	b.n	80012d2 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001276:	6878      	ldr	r0, [r7, #4]
 8001278:	f7ff fa0a 	bl	8000690 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800128e:	f003 0310 	and.w	r3, r3, #16
 8001292:	2b00      	cmp	r3, #0
 8001294:	d116      	bne.n	80012c4 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800129a:	4b10      	ldr	r3, [pc, #64]	; (80012dc <HAL_ADC_Init+0x84>)
 800129c:	4013      	ands	r3, r2
 800129e:	f043 0202 	orr.w	r2, r3, #2
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80012a6:	6878      	ldr	r0, [r7, #4]
 80012a8:	f000 fad6 	bl	8001858 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2200      	movs	r2, #0
 80012b0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f023 0303 	bic.w	r3, r3, #3
 80012ba:	f043 0201 	orr.w	r2, r3, #1
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	641a      	str	r2, [r3, #64]	; 0x40
 80012c2:	e001      	b.n	80012c8 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2200      	movs	r2, #0
 80012cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80012d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012d2:	4618      	mov	r0, r3
 80012d4:	3710      	adds	r7, #16
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	ffffeefd 	.word	0xffffeefd

080012e0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80012e8:	2300      	movs	r3, #0
 80012ea:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80012f2:	2b01      	cmp	r3, #1
 80012f4:	d101      	bne.n	80012fa <HAL_ADC_Start+0x1a>
 80012f6:	2302      	movs	r3, #2
 80012f8:	e0ad      	b.n	8001456 <HAL_ADC_Start+0x176>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2201      	movs	r2, #1
 80012fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0301 	and.w	r3, r3, #1
 800130c:	2b01      	cmp	r3, #1
 800130e:	d018      	beq.n	8001342 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	689a      	ldr	r2, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f042 0201 	orr.w	r2, r2, #1
 800131e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001320:	4b50      	ldr	r3, [pc, #320]	; (8001464 <HAL_ADC_Start+0x184>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a50      	ldr	r2, [pc, #320]	; (8001468 <HAL_ADC_Start+0x188>)
 8001326:	fba2 2303 	umull	r2, r3, r2, r3
 800132a:	0c9a      	lsrs	r2, r3, #18
 800132c:	4613      	mov	r3, r2
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	4413      	add	r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001334:	e002      	b.n	800133c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3b01      	subs	r3, #1
 800133a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f9      	bne.n	8001336 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 0301 	and.w	r3, r3, #1
 800134c:	2b01      	cmp	r3, #1
 800134e:	d175      	bne.n	800143c <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001354:	4b45      	ldr	r3, [pc, #276]	; (800146c <HAL_ADC_Start+0x18c>)
 8001356:	4013      	ands	r3, r2
 8001358:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001372:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001376:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001382:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138a:	d106      	bne.n	800139a <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001390:	f023 0206 	bic.w	r2, r3, #6
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	645a      	str	r2, [r3, #68]	; 0x44
 8001398:	e002      	b.n	80013a0 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	2200      	movs	r2, #0
 800139e:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2200      	movs	r2, #0
 80013a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80013b0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80013b2:	4b2f      	ldr	r3, [pc, #188]	; (8001470 <HAL_ADC_Start+0x190>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f003 031f 	and.w	r3, r3, #31
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d10f      	bne.n	80013de <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d143      	bne.n	8001454 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013da:	609a      	str	r2, [r3, #8]
 80013dc:	e03a      	b.n	8001454 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4a24      	ldr	r2, [pc, #144]	; (8001474 <HAL_ADC_Start+0x194>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d10e      	bne.n	8001406 <HAL_ADC_Start+0x126>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d107      	bne.n	8001406 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001404:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001406:	4b1a      	ldr	r3, [pc, #104]	; (8001470 <HAL_ADC_Start+0x190>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f003 0310 	and.w	r3, r3, #16
 800140e:	2b00      	cmp	r3, #0
 8001410:	d120      	bne.n	8001454 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	4a18      	ldr	r2, [pc, #96]	; (8001478 <HAL_ADC_Start+0x198>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d11b      	bne.n	8001454 <HAL_ADC_Start+0x174>
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d114      	bne.n	8001454 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	689a      	ldr	r2, [r3, #8]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	e00b      	b.n	8001454 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001440:	f043 0210 	orr.w	r2, r3, #16
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144c:	f043 0201 	orr.w	r2, r3, #1
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3714      	adds	r7, #20
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20000000 	.word	0x20000000
 8001468:	431bde83 	.word	0x431bde83
 800146c:	fffff8fe 	.word	0xfffff8fe
 8001470:	40012300 	.word	0x40012300
 8001474:	40012000 	.word	0x40012000
 8001478:	40012200 	.word	0x40012200

0800147c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b084      	sub	sp, #16
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001486:	2300      	movs	r3, #0
 8001488:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001498:	d113      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80014a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014a8:	d10b      	bne.n	80014c2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ae:	f043 0220 	orr.w	r2, r3, #32
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e063      	b.n	800158a <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80014c2:	f7ff fe99 	bl	80011f8 <HAL_GetTick>
 80014c6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014c8:	e021      	b.n	800150e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014d0:	d01d      	beq.n	800150e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d007      	beq.n	80014e8 <HAL_ADC_PollForConversion+0x6c>
 80014d8:	f7ff fe8e 	bl	80011f8 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	683a      	ldr	r2, [r7, #0]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d212      	bcs.n	800150e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d00b      	beq.n	800150e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f043 0204 	orr.w	r2, r3, #4
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2200      	movs	r2, #0
 8001506:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800150a:	2303      	movs	r3, #3
 800150c:	e03d      	b.n	800158a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f003 0302 	and.w	r3, r3, #2
 8001518:	2b02      	cmp	r3, #2
 800151a:	d1d6      	bne.n	80014ca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f06f 0212 	mvn.w	r2, #18
 8001524:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800153c:	2b00      	cmp	r3, #0
 800153e:	d123      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001544:	2b00      	cmp	r3, #0
 8001546:	d11f      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800154e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001552:	2b00      	cmp	r3, #0
 8001554:	d006      	beq.n	8001564 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001560:	2b00      	cmp	r3, #0
 8001562:	d111      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001568:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001592:	b480      	push	{r7}
 8001594:	b083      	sub	sp, #12
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015ac:	b480      	push	{r7}
 80015ae:	b085      	sub	sp, #20
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]
 80015b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015c0:	2b01      	cmp	r3, #1
 80015c2:	d101      	bne.n	80015c8 <HAL_ADC_ConfigChannel+0x1c>
 80015c4:	2302      	movs	r3, #2
 80015c6:	e136      	b.n	8001836 <HAL_ADC_ConfigChannel+0x28a>
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2201      	movs	r2, #1
 80015cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d93a      	bls.n	800164e <HAL_ADC_ConfigChannel+0xa2>
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015e0:	d035      	beq.n	800164e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	68d9      	ldr	r1, [r3, #12]
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	b29b      	uxth	r3, r3
 80015ee:	461a      	mov	r2, r3
 80015f0:	4613      	mov	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	4413      	add	r3, r2
 80015f6:	3b1e      	subs	r3, #30
 80015f8:	2207      	movs	r2, #7
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a8d      	ldr	r2, [pc, #564]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d10a      	bne.n	8001628 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	68d9      	ldr	r1, [r3, #12]
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	061a      	lsls	r2, r3, #24
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001626:	e035      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68d9      	ldr	r1, [r3, #12]
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	689a      	ldr	r2, [r3, #8]
 8001632:	683b      	ldr	r3, [r7, #0]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	b29b      	uxth	r3, r3
 8001638:	4618      	mov	r0, r3
 800163a:	4603      	mov	r3, r0
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	4403      	add	r3, r0
 8001640:	3b1e      	subs	r3, #30
 8001642:	409a      	lsls	r2, r3
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	430a      	orrs	r2, r1
 800164a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800164c:	e022      	b.n	8001694 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6919      	ldr	r1, [r3, #16]
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	b29b      	uxth	r3, r3
 800165a:	461a      	mov	r2, r3
 800165c:	4613      	mov	r3, r2
 800165e:	005b      	lsls	r3, r3, #1
 8001660:	4413      	add	r3, r2
 8001662:	2207      	movs	r2, #7
 8001664:	fa02 f303 	lsl.w	r3, r2, r3
 8001668:	43da      	mvns	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	400a      	ands	r2, r1
 8001670:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6919      	ldr	r1, [r3, #16]
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	689a      	ldr	r2, [r3, #8]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	b29b      	uxth	r3, r3
 8001682:	4618      	mov	r0, r3
 8001684:	4603      	mov	r3, r0
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	4403      	add	r3, r0
 800168a:	409a      	lsls	r2, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	430a      	orrs	r2, r1
 8001692:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	2b06      	cmp	r3, #6
 800169a:	d824      	bhi.n	80016e6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685a      	ldr	r2, [r3, #4]
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	3b05      	subs	r3, #5
 80016ae:	221f      	movs	r2, #31
 80016b0:	fa02 f303 	lsl.w	r3, r2, r3
 80016b4:	43da      	mvns	r2, r3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	400a      	ands	r2, r1
 80016bc:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	4618      	mov	r0, r3
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685a      	ldr	r2, [r3, #4]
 80016d0:	4613      	mov	r3, r2
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	4413      	add	r3, r2
 80016d6:	3b05      	subs	r3, #5
 80016d8:	fa00 f203 	lsl.w	r2, r0, r3
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	430a      	orrs	r2, r1
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
 80016e4:	e04c      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b0c      	cmp	r3, #12
 80016ec:	d824      	bhi.n	8001738 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685a      	ldr	r2, [r3, #4]
 80016f8:	4613      	mov	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	4413      	add	r3, r2
 80016fe:	3b23      	subs	r3, #35	; 0x23
 8001700:	221f      	movs	r2, #31
 8001702:	fa02 f303 	lsl.w	r3, r2, r3
 8001706:	43da      	mvns	r2, r3
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	400a      	ands	r2, r1
 800170e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	b29b      	uxth	r3, r3
 800171c:	4618      	mov	r0, r3
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	685a      	ldr	r2, [r3, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	009b      	lsls	r3, r3, #2
 8001726:	4413      	add	r3, r2
 8001728:	3b23      	subs	r3, #35	; 0x23
 800172a:	fa00 f203 	lsl.w	r2, r0, r3
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	430a      	orrs	r2, r1
 8001734:	631a      	str	r2, [r3, #48]	; 0x30
 8001736:	e023      	b.n	8001780 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	3b41      	subs	r3, #65	; 0x41
 800174a:	221f      	movs	r2, #31
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	43da      	mvns	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	400a      	ands	r2, r1
 8001758:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	b29b      	uxth	r3, r3
 8001766:	4618      	mov	r0, r3
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	3b41      	subs	r3, #65	; 0x41
 8001774:	fa00 f203 	lsl.w	r2, r0, r3
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	430a      	orrs	r2, r1
 800177e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a30      	ldr	r2, [pc, #192]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d10a      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1f4>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001792:	d105      	bne.n	80017a0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001794:	4b2d      	ldr	r3, [pc, #180]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	4a2c      	ldr	r2, [pc, #176]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 800179a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800179e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a28      	ldr	r2, [pc, #160]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d10f      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2b12      	cmp	r3, #18
 80017b0:	d10b      	bne.n	80017ca <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80017b2:	4b26      	ldr	r3, [pc, #152]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a25      	ldr	r2, [pc, #148]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017b8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80017bc:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80017be:	4b23      	ldr	r3, [pc, #140]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017c0:	685b      	ldr	r3, [r3, #4]
 80017c2:	4a22      	ldr	r2, [pc, #136]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017c8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a1e      	ldr	r2, [pc, #120]	; (8001848 <HAL_ADC_ConfigChannel+0x29c>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d12b      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 80017da:	4293      	cmp	r3, r2
 80017dc:	d003      	beq.n	80017e6 <HAL_ADC_ConfigChannel+0x23a>
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2b11      	cmp	r3, #17
 80017e4:	d122      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80017e6:	4b19      	ldr	r3, [pc, #100]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	4a18      	ldr	r2, [pc, #96]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017ec:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80017f0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80017f2:	4b16      	ldr	r3, [pc, #88]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	4a15      	ldr	r2, [pc, #84]	; (800184c <HAL_ADC_ConfigChannel+0x2a0>)
 80017f8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017fc:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a10      	ldr	r2, [pc, #64]	; (8001844 <HAL_ADC_ConfigChannel+0x298>)
 8001804:	4293      	cmp	r3, r2
 8001806:	d111      	bne.n	800182c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001808:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_ADC_ConfigChannel+0x2a4>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a11      	ldr	r2, [pc, #68]	; (8001854 <HAL_ADC_ConfigChannel+0x2a8>)
 800180e:	fba2 2303 	umull	r2, r3, r2, r3
 8001812:	0c9a      	lsrs	r2, r3, #18
 8001814:	4613      	mov	r3, r2
 8001816:	009b      	lsls	r3, r3, #2
 8001818:	4413      	add	r3, r2
 800181a:	005b      	lsls	r3, r3, #1
 800181c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800181e:	e002      	b.n	8001826 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	3b01      	subs	r3, #1
 8001824:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f9      	bne.n	8001820 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	3714      	adds	r7, #20
 800183a:	46bd      	mov	sp, r7
 800183c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001840:	4770      	bx	lr
 8001842:	bf00      	nop
 8001844:	10000012 	.word	0x10000012
 8001848:	40012000 	.word	0x40012000
 800184c:	40012300 	.word	0x40012300
 8001850:	20000000 	.word	0x20000000
 8001854:	431bde83 	.word	0x431bde83

08001858 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001858:	b480      	push	{r7}
 800185a:	b083      	sub	sp, #12
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001860:	4b78      	ldr	r3, [pc, #480]	; (8001a44 <ADC_Init+0x1ec>)
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	4a77      	ldr	r2, [pc, #476]	; (8001a44 <ADC_Init+0x1ec>)
 8001866:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800186a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800186c:	4b75      	ldr	r3, [pc, #468]	; (8001a44 <ADC_Init+0x1ec>)
 800186e:	685a      	ldr	r2, [r3, #4]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	4973      	ldr	r1, [pc, #460]	; (8001a44 <ADC_Init+0x1ec>)
 8001876:	4313      	orrs	r3, r2
 8001878:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	685a      	ldr	r2, [r3, #4]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001888:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	6859      	ldr	r1, [r3, #4]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	691b      	ldr	r3, [r3, #16]
 8001894:	021a      	lsls	r2, r3, #8
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	430a      	orrs	r2, r1
 800189c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	685a      	ldr	r2, [r3, #4]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80018ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	689a      	ldr	r2, [r3, #8]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	430a      	orrs	r2, r1
 80018be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	689a      	ldr	r2, [r3, #8]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80018ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6899      	ldr	r1, [r3, #8]
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68da      	ldr	r2, [r3, #12]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	430a      	orrs	r2, r1
 80018e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018e6:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <ADC_Init+0x1f0>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d022      	beq.n	8001932 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	689a      	ldr	r2, [r3, #8]
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6899      	ldr	r1, [r3, #8]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	430a      	orrs	r2, r1
 800190c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	689a      	ldr	r2, [r3, #8]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800191c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	6899      	ldr	r1, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	430a      	orrs	r2, r1
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	e00f      	b.n	8001952 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	689a      	ldr	r2, [r3, #8]
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001940:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001950:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	689a      	ldr	r2, [r3, #8]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f022 0202 	bic.w	r2, r2, #2
 8001960:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	6899      	ldr	r1, [r3, #8]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	699b      	ldr	r3, [r3, #24]
 800196c:	005a      	lsls	r2, r3, #1
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	430a      	orrs	r2, r1
 8001974:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	f893 3020 	ldrb.w	r3, [r3, #32]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d01b      	beq.n	80019b8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	685a      	ldr	r2, [r3, #4]
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800198e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	685a      	ldr	r2, [r3, #4]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800199e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	6859      	ldr	r1, [r3, #4]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019aa:	3b01      	subs	r3, #1
 80019ac:	035a      	lsls	r2, r3, #13
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	430a      	orrs	r2, r1
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	e007      	b.n	80019c8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	685a      	ldr	r2, [r3, #4]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80019c6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80019d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	69db      	ldr	r3, [r3, #28]
 80019e2:	3b01      	subs	r3, #1
 80019e4:	051a      	lsls	r2, r3, #20
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	430a      	orrs	r2, r1
 80019ec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	689a      	ldr	r2, [r3, #8]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019fc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	6899      	ldr	r1, [r3, #8]
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a0a:	025a      	lsls	r2, r3, #9
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	430a      	orrs	r2, r1
 8001a12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	689a      	ldr	r2, [r3, #8]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	6899      	ldr	r1, [r3, #8]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	695b      	ldr	r3, [r3, #20]
 8001a2e:	029a      	lsls	r2, r3, #10
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	609a      	str	r2, [r3, #8]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40012300 	.word	0x40012300
 8001a48:	0f000001 	.word	0x0f000001

08001a4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a5e:	68db      	ldr	r3, [r3, #12]
 8001a60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a62:	68ba      	ldr	r2, [r7, #8]
 8001a64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a68:	4013      	ands	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <__NVIC_SetPriorityGrouping+0x40>)
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	60d3      	str	r3, [r2, #12]
}
 8001a80:	bf00      	nop
 8001a82:	3714      	adds	r7, #20
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	e000ed00 	.word	0xe000ed00
 8001a90:	05fa0000 	.word	0x05fa0000

08001a94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a94:	b480      	push	{r7}
 8001a96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a98:	4b04      	ldr	r3, [pc, #16]	; (8001aac <__NVIC_GetPriorityGrouping+0x18>)
 8001a9a:	68db      	ldr	r3, [r3, #12]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f003 0307 	and.w	r3, r3, #7
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aaa:	4770      	bx	lr
 8001aac:	e000ed00 	.word	0xe000ed00

08001ab0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	db0b      	blt.n	8001ada <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	f003 021f 	and.w	r2, r3, #31
 8001ac8:	4907      	ldr	r1, [pc, #28]	; (8001ae8 <__NVIC_EnableIRQ+0x38>)
 8001aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ace:	095b      	lsrs	r3, r3, #5
 8001ad0:	2001      	movs	r0, #1
 8001ad2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ada:	bf00      	nop
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	e000e100 	.word	0xe000e100

08001aec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	4603      	mov	r3, r0
 8001af4:	6039      	str	r1, [r7, #0]
 8001af6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	db0a      	blt.n	8001b16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	b2da      	uxtb	r2, r3
 8001b04:	490c      	ldr	r1, [pc, #48]	; (8001b38 <__NVIC_SetPriority+0x4c>)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	0112      	lsls	r2, r2, #4
 8001b0c:	b2d2      	uxtb	r2, r2
 8001b0e:	440b      	add	r3, r1
 8001b10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b14:	e00a      	b.n	8001b2c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	b2da      	uxtb	r2, r3
 8001b1a:	4908      	ldr	r1, [pc, #32]	; (8001b3c <__NVIC_SetPriority+0x50>)
 8001b1c:	79fb      	ldrb	r3, [r7, #7]
 8001b1e:	f003 030f 	and.w	r3, r3, #15
 8001b22:	3b04      	subs	r3, #4
 8001b24:	0112      	lsls	r2, r2, #4
 8001b26:	b2d2      	uxtb	r2, r2
 8001b28:	440b      	add	r3, r1
 8001b2a:	761a      	strb	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr
 8001b38:	e000e100 	.word	0xe000e100
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b089      	sub	sp, #36	; 0x24
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	60f8      	str	r0, [r7, #12]
 8001b48:	60b9      	str	r1, [r7, #8]
 8001b4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	f1c3 0307 	rsb	r3, r3, #7
 8001b5a:	2b04      	cmp	r3, #4
 8001b5c:	bf28      	it	cs
 8001b5e:	2304      	movcs	r3, #4
 8001b60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	3304      	adds	r3, #4
 8001b66:	2b06      	cmp	r3, #6
 8001b68:	d902      	bls.n	8001b70 <NVIC_EncodePriority+0x30>
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	3b03      	subs	r3, #3
 8001b6e:	e000      	b.n	8001b72 <NVIC_EncodePriority+0x32>
 8001b70:	2300      	movs	r3, #0
 8001b72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b74:	f04f 32ff 	mov.w	r2, #4294967295
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7e:	43da      	mvns	r2, r3
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	401a      	ands	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b88:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b92:	43d9      	mvns	r1, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b98:	4313      	orrs	r3, r2
         );
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3724      	adds	r7, #36	; 0x24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b082      	sub	sp, #8
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3b01      	subs	r3, #1
 8001bb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bb8:	d301      	bcc.n	8001bbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e00f      	b.n	8001bde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bbe:	4a0a      	ldr	r2, [pc, #40]	; (8001be8 <SysTick_Config+0x40>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bc6:	210f      	movs	r1, #15
 8001bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bcc:	f7ff ff8e 	bl	8001aec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <SysTick_Config+0x40>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bd6:	4b04      	ldr	r3, [pc, #16]	; (8001be8 <SysTick_Config+0x40>)
 8001bd8:	2207      	movs	r2, #7
 8001bda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}
 8001be6:	bf00      	nop
 8001be8:	e000e010 	.word	0xe000e010

08001bec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ff29 	bl	8001a4c <__NVIC_SetPriorityGrouping>
}
 8001bfa:	bf00      	nop
 8001bfc:	3708      	adds	r7, #8
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bd80      	pop	{r7, pc}

08001c02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	af00      	add	r7, sp, #0
 8001c08:	4603      	mov	r3, r0
 8001c0a:	60b9      	str	r1, [r7, #8]
 8001c0c:	607a      	str	r2, [r7, #4]
 8001c0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff3e 	bl	8001a94 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff8e 	bl	8001b40 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5d 	bl	8001aec <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff31 	bl	8001ab0 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa2 	bl	8001ba8 <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
	...

08001c70 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c7c:	f7ff fabc 	bl	80011f8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e099      	b.n	8001dc0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	681a      	ldr	r2, [r3, #0]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f022 0201 	bic.w	r2, r2, #1
 8001caa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cac:	e00f      	b.n	8001cce <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001cae:	f7ff faa3 	bl	80011f8 <HAL_GetTick>
 8001cb2:	4602      	mov	r2, r0
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	1ad3      	subs	r3, r2, r3
 8001cb8:	2b05      	cmp	r3, #5
 8001cba:	d908      	bls.n	8001cce <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2220      	movs	r2, #32
 8001cc0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e078      	b.n	8001dc0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	; (8001dc8 <HAL_DMA_Init+0x158>)
 8001ce8:	4013      	ands	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	691b      	ldr	r3, [r3, #16]
 8001d00:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001d06:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	699b      	ldr	r3, [r3, #24]
 8001d0c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001d12:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6a1b      	ldr	r3, [r3, #32]
 8001d18:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	2b04      	cmp	r3, #4
 8001d26:	d107      	bne.n	8001d38 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d30:	4313      	orrs	r3, r2
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	697a      	ldr	r2, [r7, #20]
 8001d3e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	695b      	ldr	r3, [r3, #20]
 8001d46:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d48:	697b      	ldr	r3, [r7, #20]
 8001d4a:	f023 0307 	bic.w	r3, r3, #7
 8001d4e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	4313      	orrs	r3, r2
 8001d58:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d5e:	2b04      	cmp	r3, #4
 8001d60:	d117      	bne.n	8001d92 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d66:	697a      	ldr	r2, [r7, #20]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00e      	beq.n	8001d92 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d74:	6878      	ldr	r0, [r7, #4]
 8001d76:	f000 f9e9 	bl	800214c <DMA_CheckFifoParam>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d008      	beq.n	8001d92 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2240      	movs	r2, #64	; 0x40
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e016      	b.n	8001dc0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	697a      	ldr	r2, [r7, #20]
 8001d98:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f000 f9a0 	bl	80020e0 <DMA_CalcBaseAndBitshift>
 8001da0:	4603      	mov	r3, r0
 8001da2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	223f      	movs	r2, #63	; 0x3f
 8001daa:	409a      	lsls	r2, r3
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2201      	movs	r2, #1
 8001dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}
 8001dc8:	e010803f 	.word	0xe010803f

08001dcc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8001dd8:	4b8e      	ldr	r3, [pc, #568]	; (8002014 <HAL_DMA_IRQHandler+0x248>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4a8e      	ldr	r2, [pc, #568]	; (8002018 <HAL_DMA_IRQHandler+0x24c>)
 8001dde:	fba2 2303 	umull	r2, r3, r2, r3
 8001de2:	0a9b      	lsrs	r3, r3, #10
 8001de4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2208      	movs	r2, #8
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d01a      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0304 	and.w	r3, r3, #4
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d013      	beq.n	8001e38 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f022 0204 	bic.w	r2, r2, #4
 8001e1e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2208      	movs	r2, #8
 8001e26:	409a      	lsls	r2, r3
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e30:	f043 0201 	orr.w	r2, r3, #1
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3c:	2201      	movs	r2, #1
 8001e3e:	409a      	lsls	r2, r3
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	4013      	ands	r3, r2
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d012      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d00b      	beq.n	8001e6e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f043 0202 	orr.w	r2, r3, #2
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e72:	2204      	movs	r2, #4
 8001e74:	409a      	lsls	r2, r3
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d012      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0302 	and.w	r3, r3, #2
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d00b      	beq.n	8001ea4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2204      	movs	r2, #4
 8001e92:	409a      	lsls	r2, r3
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e9c:	f043 0204 	orr.w	r2, r3, #4
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	2210      	movs	r2, #16
 8001eaa:	409a      	lsls	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d043      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 0308 	and.w	r3, r3, #8
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d03c      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2210      	movs	r2, #16
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d018      	beq.n	8001f0e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d024      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
 8001efa:	e01f      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d01b      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	4798      	blx	r3
 8001f0c:	e016      	b.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d107      	bne.n	8001f2c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f022 0208 	bic.w	r2, r2, #8
 8001f2a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d003      	beq.n	8001f3c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f40:	2220      	movs	r2, #32
 8001f42:	409a      	lsls	r2, r3
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	f000 808f 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 0310 	and.w	r3, r3, #16
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	f000 8087 	beq.w	800206c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f62:	2220      	movs	r2, #32
 8001f64:	409a      	lsls	r2, r3
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b05      	cmp	r3, #5
 8001f74:	d136      	bne.n	8001fe4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	681a      	ldr	r2, [r3, #0]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0216 	bic.w	r2, r2, #22
 8001f84:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	695a      	ldr	r2, [r3, #20]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f94:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d103      	bne.n	8001fa6 <HAL_DMA_IRQHandler+0x1da>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d007      	beq.n	8001fb6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	681a      	ldr	r2, [r3, #0]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	f022 0208 	bic.w	r2, r2, #8
 8001fb4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fba:	223f      	movs	r2, #63	; 0x3f
 8001fbc:	409a      	lsls	r2, r3
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07e      	beq.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	4798      	blx	r3
        }
        return;
 8001fe2:	e079      	b.n	80020d8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d01d      	beq.n	800202e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d10d      	bne.n	800201c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002004:	2b00      	cmp	r3, #0
 8002006:	d031      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	4798      	blx	r3
 8002010:	e02c      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
 8002012:	bf00      	nop
 8002014:	20000000 	.word	0x20000000
 8002018:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	2b00      	cmp	r3, #0
 8002022:	d023      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	6878      	ldr	r0, [r7, #4]
 800202a:	4798      	blx	r3
 800202c:	e01e      	b.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002038:	2b00      	cmp	r3, #0
 800203a:	d10f      	bne.n	800205c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0210 	bic.w	r2, r2, #16
 800204a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002060:	2b00      	cmp	r3, #0
 8002062:	d003      	beq.n	800206c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002070:	2b00      	cmp	r3, #0
 8002072:	d032      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d022      	beq.n	80020c6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2205      	movs	r2, #5
 8002084:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0201 	bic.w	r2, r2, #1
 8002096:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002098:	68bb      	ldr	r3, [r7, #8]
 800209a:	3301      	adds	r3, #1
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	697a      	ldr	r2, [r7, #20]
 80020a0:	429a      	cmp	r2, r3
 80020a2:	d307      	bcc.n	80020b4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0301 	and.w	r3, r3, #1
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f2      	bne.n	8002098 <HAL_DMA_IRQHandler+0x2cc>
 80020b2:	e000      	b.n	80020b6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80020b4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	2200      	movs	r2, #0
 80020c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d005      	beq.n	80020da <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	4798      	blx	r3
 80020d6:	e000      	b.n	80020da <HAL_DMA_IRQHandler+0x30e>
        return;
 80020d8:	bf00      	nop
    }
  }
}
 80020da:	3718      	adds	r7, #24
 80020dc:	46bd      	mov	sp, r7
 80020de:	bd80      	pop	{r7, pc}

080020e0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	3b10      	subs	r3, #16
 80020f0:	4a13      	ldr	r2, [pc, #76]	; (8002140 <DMA_CalcBaseAndBitshift+0x60>)
 80020f2:	fba2 2303 	umull	r2, r3, r2, r3
 80020f6:	091b      	lsrs	r3, r3, #4
 80020f8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80020fa:	4a12      	ldr	r2, [pc, #72]	; (8002144 <DMA_CalcBaseAndBitshift+0x64>)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	4413      	add	r3, r2
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	2b03      	cmp	r3, #3
 800210c:	d908      	bls.n	8002120 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	461a      	mov	r2, r3
 8002114:	4b0c      	ldr	r3, [pc, #48]	; (8002148 <DMA_CalcBaseAndBitshift+0x68>)
 8002116:	4013      	ands	r3, r2
 8002118:	1d1a      	adds	r2, r3, #4
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	659a      	str	r2, [r3, #88]	; 0x58
 800211e:	e006      	b.n	800212e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	461a      	mov	r2, r3
 8002126:	4b08      	ldr	r3, [pc, #32]	; (8002148 <DMA_CalcBaseAndBitshift+0x68>)
 8002128:	4013      	ands	r3, r2
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002132:	4618      	mov	r0, r3
 8002134:	3714      	adds	r7, #20
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	aaaaaaab 	.word	0xaaaaaaab
 8002144:	08006d00 	.word	0x08006d00
 8002148:	fffffc00 	.word	0xfffffc00

0800214c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b085      	sub	sp, #20
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002154:	2300      	movs	r3, #0
 8002156:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800215c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	2b00      	cmp	r3, #0
 8002164:	d11f      	bne.n	80021a6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d856      	bhi.n	800221a <DMA_CheckFifoParam+0xce>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <DMA_CheckFifoParam+0x28>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	08002185 	.word	0x08002185
 8002178:	08002197 	.word	0x08002197
 800217c:	08002185 	.word	0x08002185
 8002180:	0800221b 	.word	0x0800221b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002188:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d046      	beq.n	800221e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002194:	e043      	b.n	800221e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800219a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800219e:	d140      	bne.n	8002222 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021a4:	e03d      	b.n	8002222 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	699b      	ldr	r3, [r3, #24]
 80021aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ae:	d121      	bne.n	80021f4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d837      	bhi.n	8002226 <DMA_CheckFifoParam+0xda>
 80021b6:	a201      	add	r2, pc, #4	; (adr r2, 80021bc <DMA_CheckFifoParam+0x70>)
 80021b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021bc:	080021cd 	.word	0x080021cd
 80021c0:	080021d3 	.word	0x080021d3
 80021c4:	080021cd 	.word	0x080021cd
 80021c8:	080021e5 	.word	0x080021e5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      break;
 80021d0:	e030      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d025      	beq.n	800222a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80021de:	2301      	movs	r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e2:	e022      	b.n	800222a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021ec:	d11f      	bne.n	800222e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80021ee:	2301      	movs	r3, #1
 80021f0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80021f2:	e01c      	b.n	800222e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d903      	bls.n	8002202 <DMA_CheckFifoParam+0xb6>
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	2b03      	cmp	r3, #3
 80021fe:	d003      	beq.n	8002208 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002200:	e018      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	73fb      	strb	r3, [r7, #15]
      break;
 8002206:	e015      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800220c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00e      	beq.n	8002232 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002214:	2301      	movs	r3, #1
 8002216:	73fb      	strb	r3, [r7, #15]
      break;
 8002218:	e00b      	b.n	8002232 <DMA_CheckFifoParam+0xe6>
      break;
 800221a:	bf00      	nop
 800221c:	e00a      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 800221e:	bf00      	nop
 8002220:	e008      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002222:	bf00      	nop
 8002224:	e006      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002226:	bf00      	nop
 8002228:	e004      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 800222a:	bf00      	nop
 800222c:	e002      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;   
 800222e:	bf00      	nop
 8002230:	e000      	b.n	8002234 <DMA_CheckFifoParam+0xe8>
      break;
 8002232:	bf00      	nop
    }
  } 
  
  return status; 
 8002234:	7bfb      	ldrb	r3, [r7, #15]
}
 8002236:	4618      	mov	r0, r3
 8002238:	3714      	adds	r7, #20
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop

08002244 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002244:	b480      	push	{r7}
 8002246:	b089      	sub	sp, #36	; 0x24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
 800224c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800224e:	2300      	movs	r3, #0
 8002250:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002252:	2300      	movs	r3, #0
 8002254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800225a:	2300      	movs	r3, #0
 800225c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800225e:	2300      	movs	r3, #0
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e175      	b.n	8002550 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	4013      	ands	r3, r2
 8002276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	429a      	cmp	r2, r3
 800227e:	f040 8164 	bne.w	800254a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002282:	683b      	ldr	r3, [r7, #0]
 8002284:	685b      	ldr	r3, [r3, #4]
 8002286:	f003 0303 	and.w	r3, r3, #3
 800228a:	2b01      	cmp	r3, #1
 800228c:	d005      	beq.n	800229a <HAL_GPIO_Init+0x56>
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b02      	cmp	r3, #2
 8002298:	d130      	bne.n	80022fc <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	689b      	ldr	r3, [r3, #8]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	005b      	lsls	r3, r3, #1
 80022a4:	2203      	movs	r2, #3
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	68da      	ldr	r2, [r3, #12]
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	fa02 f303 	lsl.w	r3, r2, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4313      	orrs	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	69ba      	ldr	r2, [r7, #24]
 80022c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022d0:	2201      	movs	r2, #1
 80022d2:	69fb      	ldr	r3, [r7, #28]
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	f003 0201 	and.w	r2, r3, #1
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	fa02 f303 	lsl.w	r3, r2, r3
 80022f0:	69ba      	ldr	r2, [r7, #24]
 80022f2:	4313      	orrs	r3, r2
 80022f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	69ba      	ldr	r2, [r7, #24]
 80022fa:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 0303 	and.w	r3, r3, #3
 8002304:	2b03      	cmp	r3, #3
 8002306:	d017      	beq.n	8002338 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68db      	ldr	r3, [r3, #12]
 800230c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	005b      	lsls	r3, r3, #1
 8002312:	2203      	movs	r2, #3
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	69fb      	ldr	r3, [r7, #28]
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	fa02 f303 	lsl.w	r3, r2, r3
 800232c:	69ba      	ldr	r2, [r7, #24]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	69ba      	ldr	r2, [r7, #24]
 8002336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0303 	and.w	r3, r3, #3
 8002340:	2b02      	cmp	r3, #2
 8002342:	d123      	bne.n	800238c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	08da      	lsrs	r2, r3, #3
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	3208      	adds	r2, #8
 800234c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002350:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	220f      	movs	r2, #15
 800235c:	fa02 f303 	lsl.w	r3, r2, r3
 8002360:	43db      	mvns	r3, r3
 8002362:	69ba      	ldr	r2, [r7, #24]
 8002364:	4013      	ands	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	691a      	ldr	r2, [r3, #16]
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	f003 0307 	and.w	r3, r3, #7
 8002372:	009b      	lsls	r3, r3, #2
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4313      	orrs	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	08da      	lsrs	r2, r3, #3
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	3208      	adds	r2, #8
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	2203      	movs	r2, #3
 8002398:	fa02 f303 	lsl.w	r3, r2, r3
 800239c:	43db      	mvns	r3, r3
 800239e:	69ba      	ldr	r2, [r7, #24]
 80023a0:	4013      	ands	r3, r2
 80023a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80023a4:	683b      	ldr	r3, [r7, #0]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f003 0203 	and.w	r2, r3, #3
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4313      	orrs	r3, r2
 80023b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	69ba      	ldr	r2, [r7, #24]
 80023be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	f000 80be 	beq.w	800254a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ce:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_GPIO_Init+0x324>)
 80023d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d2:	4a65      	ldr	r2, [pc, #404]	; (8002568 <HAL_GPIO_Init+0x324>)
 80023d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023d8:	6453      	str	r3, [r2, #68]	; 0x44
 80023da:	4b63      	ldr	r3, [pc, #396]	; (8002568 <HAL_GPIO_Init+0x324>)
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023e2:	60fb      	str	r3, [r7, #12]
 80023e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80023e6:	4a61      	ldr	r2, [pc, #388]	; (800256c <HAL_GPIO_Init+0x328>)
 80023e8:	69fb      	ldr	r3, [r7, #28]
 80023ea:	089b      	lsrs	r3, r3, #2
 80023ec:	3302      	adds	r3, #2
 80023ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80023f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	f003 0303 	and.w	r3, r3, #3
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	220f      	movs	r2, #15
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43db      	mvns	r3, r3
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	4013      	ands	r3, r2
 8002408:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4a58      	ldr	r2, [pc, #352]	; (8002570 <HAL_GPIO_Init+0x32c>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d037      	beq.n	8002482 <HAL_GPIO_Init+0x23e>
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	4a57      	ldr	r2, [pc, #348]	; (8002574 <HAL_GPIO_Init+0x330>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d031      	beq.n	800247e <HAL_GPIO_Init+0x23a>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a56      	ldr	r2, [pc, #344]	; (8002578 <HAL_GPIO_Init+0x334>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d02b      	beq.n	800247a <HAL_GPIO_Init+0x236>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a55      	ldr	r2, [pc, #340]	; (800257c <HAL_GPIO_Init+0x338>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d025      	beq.n	8002476 <HAL_GPIO_Init+0x232>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a54      	ldr	r2, [pc, #336]	; (8002580 <HAL_GPIO_Init+0x33c>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d01f      	beq.n	8002472 <HAL_GPIO_Init+0x22e>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a53      	ldr	r2, [pc, #332]	; (8002584 <HAL_GPIO_Init+0x340>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d019      	beq.n	800246e <HAL_GPIO_Init+0x22a>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a52      	ldr	r2, [pc, #328]	; (8002588 <HAL_GPIO_Init+0x344>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d013      	beq.n	800246a <HAL_GPIO_Init+0x226>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a51      	ldr	r2, [pc, #324]	; (800258c <HAL_GPIO_Init+0x348>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d00d      	beq.n	8002466 <HAL_GPIO_Init+0x222>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a50      	ldr	r2, [pc, #320]	; (8002590 <HAL_GPIO_Init+0x34c>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d007      	beq.n	8002462 <HAL_GPIO_Init+0x21e>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a4f      	ldr	r2, [pc, #316]	; (8002594 <HAL_GPIO_Init+0x350>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d101      	bne.n	800245e <HAL_GPIO_Init+0x21a>
 800245a:	2309      	movs	r3, #9
 800245c:	e012      	b.n	8002484 <HAL_GPIO_Init+0x240>
 800245e:	230a      	movs	r3, #10
 8002460:	e010      	b.n	8002484 <HAL_GPIO_Init+0x240>
 8002462:	2308      	movs	r3, #8
 8002464:	e00e      	b.n	8002484 <HAL_GPIO_Init+0x240>
 8002466:	2307      	movs	r3, #7
 8002468:	e00c      	b.n	8002484 <HAL_GPIO_Init+0x240>
 800246a:	2306      	movs	r3, #6
 800246c:	e00a      	b.n	8002484 <HAL_GPIO_Init+0x240>
 800246e:	2305      	movs	r3, #5
 8002470:	e008      	b.n	8002484 <HAL_GPIO_Init+0x240>
 8002472:	2304      	movs	r3, #4
 8002474:	e006      	b.n	8002484 <HAL_GPIO_Init+0x240>
 8002476:	2303      	movs	r3, #3
 8002478:	e004      	b.n	8002484 <HAL_GPIO_Init+0x240>
 800247a:	2302      	movs	r3, #2
 800247c:	e002      	b.n	8002484 <HAL_GPIO_Init+0x240>
 800247e:	2301      	movs	r3, #1
 8002480:	e000      	b.n	8002484 <HAL_GPIO_Init+0x240>
 8002482:	2300      	movs	r3, #0
 8002484:	69fa      	ldr	r2, [r7, #28]
 8002486:	f002 0203 	and.w	r2, r2, #3
 800248a:	0092      	lsls	r2, r2, #2
 800248c:	4093      	lsls	r3, r2
 800248e:	69ba      	ldr	r2, [r7, #24]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002494:	4935      	ldr	r1, [pc, #212]	; (800256c <HAL_GPIO_Init+0x328>)
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024a2:	4b3d      	ldr	r3, [pc, #244]	; (8002598 <HAL_GPIO_Init+0x354>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	43db      	mvns	r3, r3
 80024ac:	69ba      	ldr	r2, [r7, #24]
 80024ae:	4013      	ands	r3, r2
 80024b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024c6:	4a34      	ldr	r2, [pc, #208]	; (8002598 <HAL_GPIO_Init+0x354>)
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024cc:	4b32      	ldr	r3, [pc, #200]	; (8002598 <HAL_GPIO_Init+0x354>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	43db      	mvns	r3, r3
 80024d6:	69ba      	ldr	r2, [r7, #24]
 80024d8:	4013      	ands	r3, r2
 80024da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d003      	beq.n	80024f0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	4313      	orrs	r3, r2
 80024ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024f0:	4a29      	ldr	r2, [pc, #164]	; (8002598 <HAL_GPIO_Init+0x354>)
 80024f2:	69bb      	ldr	r3, [r7, #24]
 80024f4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024f6:	4b28      	ldr	r3, [pc, #160]	; (8002598 <HAL_GPIO_Init+0x354>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4313      	orrs	r3, r2
 8002518:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800251a:	4a1f      	ldr	r2, [pc, #124]	; (8002598 <HAL_GPIO_Init+0x354>)
 800251c:	69bb      	ldr	r3, [r7, #24]
 800251e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002520:	4b1d      	ldr	r3, [pc, #116]	; (8002598 <HAL_GPIO_Init+0x354>)
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	43db      	mvns	r3, r3
 800252a:	69ba      	ldr	r2, [r7, #24]
 800252c:	4013      	ands	r3, r2
 800252e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002530:	683b      	ldr	r3, [r7, #0]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002538:	2b00      	cmp	r3, #0
 800253a:	d003      	beq.n	8002544 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4313      	orrs	r3, r2
 8002542:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002544:	4a14      	ldr	r2, [pc, #80]	; (8002598 <HAL_GPIO_Init+0x354>)
 8002546:	69bb      	ldr	r3, [r7, #24]
 8002548:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	3301      	adds	r3, #1
 800254e:	61fb      	str	r3, [r7, #28]
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	2b0f      	cmp	r3, #15
 8002554:	f67f ae86 	bls.w	8002264 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002558:	bf00      	nop
 800255a:	bf00      	nop
 800255c:	3724      	adds	r7, #36	; 0x24
 800255e:	46bd      	mov	sp, r7
 8002560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002564:	4770      	bx	lr
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	40013800 	.word	0x40013800
 8002570:	40020000 	.word	0x40020000
 8002574:	40020400 	.word	0x40020400
 8002578:	40020800 	.word	0x40020800
 800257c:	40020c00 	.word	0x40020c00
 8002580:	40021000 	.word	0x40021000
 8002584:	40021400 	.word	0x40021400
 8002588:	40021800 	.word	0x40021800
 800258c:	40021c00 	.word	0x40021c00
 8002590:	40022000 	.word	0x40022000
 8002594:	40022400 	.word	0x40022400
 8002598:	40013c00 	.word	0x40013c00

0800259c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800259c:	b480      	push	{r7}
 800259e:	b083      	sub	sp, #12
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	807b      	strh	r3, [r7, #2]
 80025a8:	4613      	mov	r3, r2
 80025aa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025ac:	787b      	ldrb	r3, [r7, #1]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b2:	887a      	ldrh	r2, [r7, #2]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80025b8:	e003      	b.n	80025c2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80025ba:	887b      	ldrh	r3, [r7, #2]
 80025bc:	041a      	lsls	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	619a      	str	r2, [r3, #24]
}
 80025c2:	bf00      	nop
 80025c4:	370c      	adds	r7, #12
 80025c6:	46bd      	mov	sp, r7
 80025c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025cc:	4770      	bx	lr
	...

080025d0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b086      	sub	sp, #24
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80025d8:	2300      	movs	r3, #0
 80025da:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d101      	bne.n	80025e6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e29b      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 0301 	and.w	r3, r3, #1
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f000 8087 	beq.w	8002702 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025f4:	4b96      	ldr	r3, [pc, #600]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f003 030c 	and.w	r3, r3, #12
 80025fc:	2b04      	cmp	r3, #4
 80025fe:	d00c      	beq.n	800261a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002600:	4b93      	ldr	r3, [pc, #588]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	d112      	bne.n	8002632 <HAL_RCC_OscConfig+0x62>
 800260c:	4b90      	ldr	r3, [pc, #576]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002618:	d10b      	bne.n	8002632 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261a:	4b8d      	ldr	r3, [pc, #564]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002622:	2b00      	cmp	r3, #0
 8002624:	d06c      	beq.n	8002700 <HAL_RCC_OscConfig+0x130>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d168      	bne.n	8002700 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800262e:	2301      	movs	r3, #1
 8002630:	e275      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800263a:	d106      	bne.n	800264a <HAL_RCC_OscConfig+0x7a>
 800263c:	4b84      	ldr	r3, [pc, #528]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a83      	ldr	r2, [pc, #524]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002642:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002646:	6013      	str	r3, [r2, #0]
 8002648:	e02e      	b.n	80026a8 <HAL_RCC_OscConfig+0xd8>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10c      	bne.n	800266c <HAL_RCC_OscConfig+0x9c>
 8002652:	4b7f      	ldr	r3, [pc, #508]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4a7e      	ldr	r2, [pc, #504]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800265c:	6013      	str	r3, [r2, #0]
 800265e:	4b7c      	ldr	r3, [pc, #496]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a7b      	ldr	r2, [pc, #492]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002664:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002668:	6013      	str	r3, [r2, #0]
 800266a:	e01d      	b.n	80026a8 <HAL_RCC_OscConfig+0xd8>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002674:	d10c      	bne.n	8002690 <HAL_RCC_OscConfig+0xc0>
 8002676:	4b76      	ldr	r3, [pc, #472]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a75      	ldr	r2, [pc, #468]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800267c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002680:	6013      	str	r3, [r2, #0]
 8002682:	4b73      	ldr	r3, [pc, #460]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a72      	ldr	r2, [pc, #456]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800268c:	6013      	str	r3, [r2, #0]
 800268e:	e00b      	b.n	80026a8 <HAL_RCC_OscConfig+0xd8>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a6e      	ldr	r2, [pc, #440]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002696:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800269a:	6013      	str	r3, [r2, #0]
 800269c:	4b6c      	ldr	r3, [pc, #432]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a6b      	ldr	r2, [pc, #428]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d013      	beq.n	80026d8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b0:	f7fe fda2 	bl	80011f8 <HAL_GetTick>
 80026b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026b8:	f7fe fd9e 	bl	80011f8 <HAL_GetTick>
 80026bc:	4602      	mov	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b64      	cmp	r3, #100	; 0x64
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e229      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026ca:	4b61      	ldr	r3, [pc, #388]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0xe8>
 80026d6:	e014      	b.n	8002702 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7fe fd8e 	bl	80011f8 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e0:	f7fe fd8a 	bl	80011f8 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b64      	cmp	r3, #100	; 0x64
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e215      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80026f2:	4b57      	ldr	r3, [pc, #348]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1f0      	bne.n	80026e0 <HAL_RCC_OscConfig+0x110>
 80026fe:	e000      	b.n	8002702 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f003 0302 	and.w	r3, r3, #2
 800270a:	2b00      	cmp	r3, #0
 800270c:	d069      	beq.n	80027e2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800270e:	4b50      	ldr	r3, [pc, #320]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 030c 	and.w	r3, r3, #12
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00b      	beq.n	8002732 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800271a:	4b4d      	ldr	r3, [pc, #308]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f003 030c 	and.w	r3, r3, #12
 8002722:	2b08      	cmp	r3, #8
 8002724:	d11c      	bne.n	8002760 <HAL_RCC_OscConfig+0x190>
 8002726:	4b4a      	ldr	r3, [pc, #296]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002732:	4b47      	ldr	r3, [pc, #284]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0302 	and.w	r3, r3, #2
 800273a:	2b00      	cmp	r3, #0
 800273c:	d005      	beq.n	800274a <HAL_RCC_OscConfig+0x17a>
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d001      	beq.n	800274a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002746:	2301      	movs	r3, #1
 8002748:	e1e9      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274a:	4b41      	ldr	r3, [pc, #260]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	00db      	lsls	r3, r3, #3
 8002758:	493d      	ldr	r1, [pc, #244]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800275a:	4313      	orrs	r3, r2
 800275c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800275e:	e040      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	2b00      	cmp	r3, #0
 8002766:	d023      	beq.n	80027b0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002768:	4b39      	ldr	r3, [pc, #228]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a38      	ldr	r2, [pc, #224]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800276e:	f043 0301 	orr.w	r3, r3, #1
 8002772:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002774:	f7fe fd40 	bl	80011f8 <HAL_GetTick>
 8002778:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800277a:	e008      	b.n	800278e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800277c:	f7fe fd3c 	bl	80011f8 <HAL_GetTick>
 8002780:	4602      	mov	r2, r0
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	1ad3      	subs	r3, r2, r3
 8002786:	2b02      	cmp	r3, #2
 8002788:	d901      	bls.n	800278e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800278a:	2303      	movs	r3, #3
 800278c:	e1c7      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	4b30      	ldr	r3, [pc, #192]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d0f0      	beq.n	800277c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800279a:	4b2d      	ldr	r3, [pc, #180]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	691b      	ldr	r3, [r3, #16]
 80027a6:	00db      	lsls	r3, r3, #3
 80027a8:	4929      	ldr	r1, [pc, #164]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027aa:	4313      	orrs	r3, r2
 80027ac:	600b      	str	r3, [r1, #0]
 80027ae:	e018      	b.n	80027e2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027b0:	4b27      	ldr	r3, [pc, #156]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a26      	ldr	r2, [pc, #152]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027b6:	f023 0301 	bic.w	r3, r3, #1
 80027ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027bc:	f7fe fd1c 	bl	80011f8 <HAL_GetTick>
 80027c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027c2:	e008      	b.n	80027d6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c4:	f7fe fd18 	bl	80011f8 <HAL_GetTick>
 80027c8:	4602      	mov	r2, r0
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	1ad3      	subs	r3, r2, r3
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	d901      	bls.n	80027d6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e1a3      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f0      	bne.n	80027c4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f003 0308 	and.w	r3, r3, #8
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d038      	beq.n	8002860 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	695b      	ldr	r3, [r3, #20]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d019      	beq.n	800282a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027f6:	4b16      	ldr	r3, [pc, #88]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027f8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027fa:	4a15      	ldr	r2, [pc, #84]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002802:	f7fe fcf9 	bl	80011f8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800280a:	f7fe fcf5 	bl	80011f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e180      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800281c:	4b0c      	ldr	r3, [pc, #48]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800281e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x23a>
 8002828:	e01a      	b.n	8002860 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800282a:	4b09      	ldr	r3, [pc, #36]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 800282c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800282e:	4a08      	ldr	r2, [pc, #32]	; (8002850 <HAL_RCC_OscConfig+0x280>)
 8002830:	f023 0301 	bic.w	r3, r3, #1
 8002834:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002836:	f7fe fcdf 	bl	80011f8 <HAL_GetTick>
 800283a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800283c:	e00a      	b.n	8002854 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283e:	f7fe fcdb 	bl	80011f8 <HAL_GetTick>
 8002842:	4602      	mov	r2, r0
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1ad3      	subs	r3, r2, r3
 8002848:	2b02      	cmp	r3, #2
 800284a:	d903      	bls.n	8002854 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800284c:	2303      	movs	r3, #3
 800284e:	e166      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
 8002850:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002854:	4b92      	ldr	r3, [pc, #584]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002856:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002858:	f003 0302 	and.w	r3, r3, #2
 800285c:	2b00      	cmp	r3, #0
 800285e:	d1ee      	bne.n	800283e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0304 	and.w	r3, r3, #4
 8002868:	2b00      	cmp	r3, #0
 800286a:	f000 80a4 	beq.w	80029b6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800286e:	4b8c      	ldr	r3, [pc, #560]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002876:	2b00      	cmp	r3, #0
 8002878:	d10d      	bne.n	8002896 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800287a:	4b89      	ldr	r3, [pc, #548]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 800287c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287e:	4a88      	ldr	r2, [pc, #544]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002884:	6413      	str	r3, [r2, #64]	; 0x40
 8002886:	4b86      	ldr	r3, [pc, #536]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800288e:	60bb      	str	r3, [r7, #8]
 8002890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002892:	2301      	movs	r3, #1
 8002894:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002896:	4b83      	ldr	r3, [pc, #524]	; (8002aa4 <HAL_RCC_OscConfig+0x4d4>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d118      	bne.n	80028d4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80028a2:	4b80      	ldr	r3, [pc, #512]	; (8002aa4 <HAL_RCC_OscConfig+0x4d4>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4a7f      	ldr	r2, [pc, #508]	; (8002aa4 <HAL_RCC_OscConfig+0x4d4>)
 80028a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ae:	f7fe fca3 	bl	80011f8 <HAL_GetTick>
 80028b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b4:	e008      	b.n	80028c8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b6:	f7fe fc9f 	bl	80011f8 <HAL_GetTick>
 80028ba:	4602      	mov	r2, r0
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	1ad3      	subs	r3, r2, r3
 80028c0:	2b64      	cmp	r3, #100	; 0x64
 80028c2:	d901      	bls.n	80028c8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80028c4:	2303      	movs	r3, #3
 80028c6:	e12a      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c8:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x4d4>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d0f0      	beq.n	80028b6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d106      	bne.n	80028ea <HAL_RCC_OscConfig+0x31a>
 80028dc:	4b70      	ldr	r3, [pc, #448]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80028de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e0:	4a6f      	ldr	r2, [pc, #444]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	6713      	str	r3, [r2, #112]	; 0x70
 80028e8:	e02d      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d10c      	bne.n	800290c <HAL_RCC_OscConfig+0x33c>
 80028f2:	4b6b      	ldr	r3, [pc, #428]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80028f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028f6:	4a6a      	ldr	r2, [pc, #424]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80028f8:	f023 0301 	bic.w	r3, r3, #1
 80028fc:	6713      	str	r3, [r2, #112]	; 0x70
 80028fe:	4b68      	ldr	r3, [pc, #416]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002902:	4a67      	ldr	r2, [pc, #412]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002904:	f023 0304 	bic.w	r3, r3, #4
 8002908:	6713      	str	r3, [r2, #112]	; 0x70
 800290a:	e01c      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	2b05      	cmp	r3, #5
 8002912:	d10c      	bne.n	800292e <HAL_RCC_OscConfig+0x35e>
 8002914:	4b62      	ldr	r3, [pc, #392]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002916:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002918:	4a61      	ldr	r2, [pc, #388]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 800291a:	f043 0304 	orr.w	r3, r3, #4
 800291e:	6713      	str	r3, [r2, #112]	; 0x70
 8002920:	4b5f      	ldr	r3, [pc, #380]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002922:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002924:	4a5e      	ldr	r2, [pc, #376]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002926:	f043 0301 	orr.w	r3, r3, #1
 800292a:	6713      	str	r3, [r2, #112]	; 0x70
 800292c:	e00b      	b.n	8002946 <HAL_RCC_OscConfig+0x376>
 800292e:	4b5c      	ldr	r3, [pc, #368]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002930:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002932:	4a5b      	ldr	r2, [pc, #364]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	6713      	str	r3, [r2, #112]	; 0x70
 800293a:	4b59      	ldr	r3, [pc, #356]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 800293c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800293e:	4a58      	ldr	r2, [pc, #352]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002940:	f023 0304 	bic.w	r3, r3, #4
 8002944:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d015      	beq.n	800297a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800294e:	f7fe fc53 	bl	80011f8 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002954:	e00a      	b.n	800296c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002956:	f7fe fc4f 	bl	80011f8 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	f241 3288 	movw	r2, #5000	; 0x1388
 8002964:	4293      	cmp	r3, r2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e0d8      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800296c:	4b4c      	ldr	r3, [pc, #304]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 800296e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d0ee      	beq.n	8002956 <HAL_RCC_OscConfig+0x386>
 8002978:	e014      	b.n	80029a4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7fe fc3d 	bl	80011f8 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002980:	e00a      	b.n	8002998 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002982:	f7fe fc39 	bl	80011f8 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002990:	4293      	cmp	r3, r2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0c2      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002998:	4b41      	ldr	r3, [pc, #260]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 800299a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d1ee      	bne.n	8002982 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029a4:	7dfb      	ldrb	r3, [r7, #23]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d105      	bne.n	80029b6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029aa:	4b3d      	ldr	r3, [pc, #244]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ae:	4a3c      	ldr	r2, [pc, #240]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029b4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	f000 80ae 	beq.w	8002b1c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029c0:	4b37      	ldr	r3, [pc, #220]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d06d      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	699b      	ldr	r3, [r3, #24]
 80029d0:	2b02      	cmp	r3, #2
 80029d2:	d14b      	bne.n	8002a6c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029d4:	4b32      	ldr	r3, [pc, #200]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a31      	ldr	r2, [pc, #196]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029e0:	f7fe fc0a 	bl	80011f8 <HAL_GetTick>
 80029e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029e6:	e008      	b.n	80029fa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029e8:	f7fe fc06 	bl	80011f8 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e091      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	4b29      	ldr	r3, [pc, #164]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d1f0      	bne.n	80029e8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	69da      	ldr	r2, [r3, #28]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6a1b      	ldr	r3, [r3, #32]
 8002a0e:	431a      	orrs	r2, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a14:	019b      	lsls	r3, r3, #6
 8002a16:	431a      	orrs	r2, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1c:	085b      	lsrs	r3, r3, #1
 8002a1e:	3b01      	subs	r3, #1
 8002a20:	041b      	lsls	r3, r3, #16
 8002a22:	431a      	orrs	r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	061b      	lsls	r3, r3, #24
 8002a2a:	431a      	orrs	r2, r3
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a30:	071b      	lsls	r3, r3, #28
 8002a32:	491b      	ldr	r1, [pc, #108]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a38:	4b19      	ldr	r3, [pc, #100]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a18      	ldr	r2, [pc, #96]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a44:	f7fe fbd8 	bl	80011f8 <HAL_GetTick>
 8002a48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a4a:	e008      	b.n	8002a5e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a4c:	f7fe fbd4 	bl	80011f8 <HAL_GetTick>
 8002a50:	4602      	mov	r2, r0
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	2b02      	cmp	r3, #2
 8002a58:	d901      	bls.n	8002a5e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002a5a:	2303      	movs	r3, #3
 8002a5c:	e05f      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d0f0      	beq.n	8002a4c <HAL_RCC_OscConfig+0x47c>
 8002a6a:	e057      	b.n	8002b1c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a6c:	4b0c      	ldr	r3, [pc, #48]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a0b      	ldr	r2, [pc, #44]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a78:	f7fe fbbe 	bl	80011f8 <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a80:	f7fe fbba 	bl	80011f8 <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e045      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a92:	4b03      	ldr	r3, [pc, #12]	; (8002aa0 <HAL_RCC_OscConfig+0x4d0>)
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d1f0      	bne.n	8002a80 <HAL_RCC_OscConfig+0x4b0>
 8002a9e:	e03d      	b.n	8002b1c <HAL_RCC_OscConfig+0x54c>
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002aa8:	4b1f      	ldr	r3, [pc, #124]	; (8002b28 <HAL_RCC_OscConfig+0x558>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d030      	beq.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac0:	429a      	cmp	r2, r3
 8002ac2:	d129      	bne.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d122      	bne.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ad8:	4013      	ands	r3, r2
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ade:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002ae0:	4293      	cmp	r3, r2
 8002ae2:	d119      	bne.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002aee:	085b      	lsrs	r3, r3, #1
 8002af0:	3b01      	subs	r3, #1
 8002af2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d10f      	bne.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b02:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002b04:	429a      	cmp	r2, r3
 8002b06:	d107      	bne.n	8002b18 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002b14:	429a      	cmp	r2, r3
 8002b16:	d001      	beq.n	8002b1c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e000      	b.n	8002b1e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8002b1c:	2300      	movs	r3, #0
}
 8002b1e:	4618      	mov	r0, r3
 8002b20:	3718      	adds	r7, #24
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800

08002b2c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b084      	sub	sp, #16
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
 8002b34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002b36:	2300      	movs	r3, #0
 8002b38:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d101      	bne.n	8002b44 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e0d0      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002b44:	4b6a      	ldr	r3, [pc, #424]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 030f 	and.w	r3, r3, #15
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	429a      	cmp	r2, r3
 8002b50:	d910      	bls.n	8002b74 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b52:	4b67      	ldr	r3, [pc, #412]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f023 020f 	bic.w	r2, r3, #15
 8002b5a:	4965      	ldr	r1, [pc, #404]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	4313      	orrs	r3, r2
 8002b60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b62:	4b63      	ldr	r3, [pc, #396]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f003 030f 	and.w	r3, r3, #15
 8002b6a:	683a      	ldr	r2, [r7, #0]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d001      	beq.n	8002b74 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e0b8      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0302 	and.w	r3, r3, #2
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d020      	beq.n	8002bc2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d005      	beq.n	8002b98 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b8c:	4b59      	ldr	r3, [pc, #356]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b8e:	689b      	ldr	r3, [r3, #8]
 8002b90:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002b92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b96:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 0308 	and.w	r3, r3, #8
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d005      	beq.n	8002bb0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba4:	4b53      	ldr	r3, [pc, #332]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	4a52      	ldr	r2, [pc, #328]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002baa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002bae:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bb0:	4b50      	ldr	r3, [pc, #320]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bb2:	689b      	ldr	r3, [r3, #8]
 8002bb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	494d      	ldr	r1, [pc, #308]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f003 0301 	and.w	r3, r3, #1
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d040      	beq.n	8002c50 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d107      	bne.n	8002be6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	4b47      	ldr	r3, [pc, #284]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d115      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	e07f      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d107      	bne.n	8002bfe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bee:	4b41      	ldr	r3, [pc, #260]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d109      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e073      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bfe:	4b3d      	ldr	r3, [pc, #244]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e06b      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c0e:	4b39      	ldr	r3, [pc, #228]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	f023 0203 	bic.w	r2, r3, #3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	4936      	ldr	r1, [pc, #216]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c20:	f7fe faea 	bl	80011f8 <HAL_GetTick>
 8002c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c26:	e00a      	b.n	8002c3e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c28:	f7fe fae6 	bl	80011f8 <HAL_GetTick>
 8002c2c:	4602      	mov	r2, r0
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d901      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002c3a:	2303      	movs	r3, #3
 8002c3c:	e053      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c3e:	4b2d      	ldr	r3, [pc, #180]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	f003 020c 	and.w	r2, r3, #12
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d1eb      	bne.n	8002c28 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002c50:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 030f 	and.w	r3, r3, #15
 8002c58:	683a      	ldr	r2, [r7, #0]
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d210      	bcs.n	8002c80 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c5e:	4b24      	ldr	r3, [pc, #144]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f023 020f 	bic.w	r2, r3, #15
 8002c66:	4922      	ldr	r1, [pc, #136]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6e:	4b20      	ldr	r3, [pc, #128]	; (8002cf0 <HAL_RCC_ClockConfig+0x1c4>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f003 030f 	and.w	r3, r3, #15
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e032      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f003 0304 	and.w	r3, r3, #4
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d008      	beq.n	8002c9e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c8c:	4b19      	ldr	r3, [pc, #100]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c8e:	689b      	ldr	r3, [r3, #8]
 8002c90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	4916      	ldr	r1, [pc, #88]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 0308 	and.w	r3, r3, #8
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d009      	beq.n	8002cbe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002caa:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cac:	689b      	ldr	r3, [r3, #8]
 8002cae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	691b      	ldr	r3, [r3, #16]
 8002cb6:	00db      	lsls	r3, r3, #3
 8002cb8:	490e      	ldr	r1, [pc, #56]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002cbe:	f000 f821 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8002cc2:	4602      	mov	r2, r0
 8002cc4:	4b0b      	ldr	r3, [pc, #44]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c8>)
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	091b      	lsrs	r3, r3, #4
 8002cca:	f003 030f 	and.w	r3, r3, #15
 8002cce:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <HAL_RCC_ClockConfig+0x1cc>)
 8002cd0:	5ccb      	ldrb	r3, [r1, r3]
 8002cd2:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd6:	4a09      	ldr	r2, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1d0>)
 8002cd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <HAL_RCC_ClockConfig+0x1d4>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fe fa46 	bl	8001170 <HAL_InitTick>

  return HAL_OK;
 8002ce4:	2300      	movs	r3, #0
}
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	3710      	adds	r7, #16
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	40023c00 	.word	0x40023c00
 8002cf4:	40023800 	.word	0x40023800
 8002cf8:	08006ce8 	.word	0x08006ce8
 8002cfc:	20000000 	.word	0x20000000
 8002d00:	20000004 	.word	0x20000004

08002d04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d08:	b090      	sub	sp, #64	; 0x40
 8002d0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	637b      	str	r3, [r7, #52]	; 0x34
 8002d10:	2300      	movs	r3, #0
 8002d12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d14:	2300      	movs	r3, #0
 8002d16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f003 030c 	and.w	r3, r3, #12
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	d00d      	beq.n	8002d44 <HAL_RCC_GetSysClockFreq+0x40>
 8002d28:	2b08      	cmp	r3, #8
 8002d2a:	f200 80a1 	bhi.w	8002e70 <HAL_RCC_GetSysClockFreq+0x16c>
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d002      	beq.n	8002d38 <HAL_RCC_GetSysClockFreq+0x34>
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d003      	beq.n	8002d3e <HAL_RCC_GetSysClockFreq+0x3a>
 8002d36:	e09b      	b.n	8002e70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d38:	4b53      	ldr	r3, [pc, #332]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002d3a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d3c:	e09b      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3e:	4b53      	ldr	r3, [pc, #332]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002d42:	e098      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d44:	4b4f      	ldr	r3, [pc, #316]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d46:	685b      	ldr	r3, [r3, #4]
 8002d48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d4c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002d4e:	4b4d      	ldr	r3, [pc, #308]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d50:	685b      	ldr	r3, [r3, #4]
 8002d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d028      	beq.n	8002dac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d5a:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	099b      	lsrs	r3, r3, #6
 8002d60:	2200      	movs	r2, #0
 8002d62:	623b      	str	r3, [r7, #32]
 8002d64:	627a      	str	r2, [r7, #36]	; 0x24
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002d6c:	2100      	movs	r1, #0
 8002d6e:	4b47      	ldr	r3, [pc, #284]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d70:	fb03 f201 	mul.w	r2, r3, r1
 8002d74:	2300      	movs	r3, #0
 8002d76:	fb00 f303 	mul.w	r3, r0, r3
 8002d7a:	4413      	add	r3, r2
 8002d7c:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_RCC_GetSysClockFreq+0x188>)
 8002d7e:	fba0 1202 	umull	r1, r2, r0, r2
 8002d82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d84:	460a      	mov	r2, r1
 8002d86:	62ba      	str	r2, [r7, #40]	; 0x28
 8002d88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8a:	4413      	add	r3, r2
 8002d8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d90:	2200      	movs	r2, #0
 8002d92:	61bb      	str	r3, [r7, #24]
 8002d94:	61fa      	str	r2, [r7, #28]
 8002d96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002d9e:	f7fd faa7 	bl	80002f0 <__aeabi_uldivmod>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4613      	mov	r3, r2
 8002da8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002daa:	e053      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dac:	4b35      	ldr	r3, [pc, #212]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	099b      	lsrs	r3, r3, #6
 8002db2:	2200      	movs	r2, #0
 8002db4:	613b      	str	r3, [r7, #16]
 8002db6:	617a      	str	r2, [r7, #20]
 8002db8:	693b      	ldr	r3, [r7, #16]
 8002dba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002dbe:	f04f 0b00 	mov.w	fp, #0
 8002dc2:	4652      	mov	r2, sl
 8002dc4:	465b      	mov	r3, fp
 8002dc6:	f04f 0000 	mov.w	r0, #0
 8002dca:	f04f 0100 	mov.w	r1, #0
 8002dce:	0159      	lsls	r1, r3, #5
 8002dd0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002dd4:	0150      	lsls	r0, r2, #5
 8002dd6:	4602      	mov	r2, r0
 8002dd8:	460b      	mov	r3, r1
 8002dda:	ebb2 080a 	subs.w	r8, r2, sl
 8002dde:	eb63 090b 	sbc.w	r9, r3, fp
 8002de2:	f04f 0200 	mov.w	r2, #0
 8002de6:	f04f 0300 	mov.w	r3, #0
 8002dea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002dee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002df2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002df6:	ebb2 0408 	subs.w	r4, r2, r8
 8002dfa:	eb63 0509 	sbc.w	r5, r3, r9
 8002dfe:	f04f 0200 	mov.w	r2, #0
 8002e02:	f04f 0300 	mov.w	r3, #0
 8002e06:	00eb      	lsls	r3, r5, #3
 8002e08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e0c:	00e2      	lsls	r2, r4, #3
 8002e0e:	4614      	mov	r4, r2
 8002e10:	461d      	mov	r5, r3
 8002e12:	eb14 030a 	adds.w	r3, r4, sl
 8002e16:	603b      	str	r3, [r7, #0]
 8002e18:	eb45 030b 	adc.w	r3, r5, fp
 8002e1c:	607b      	str	r3, [r7, #4]
 8002e1e:	f04f 0200 	mov.w	r2, #0
 8002e22:	f04f 0300 	mov.w	r3, #0
 8002e26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e2a:	4629      	mov	r1, r5
 8002e2c:	028b      	lsls	r3, r1, #10
 8002e2e:	4621      	mov	r1, r4
 8002e30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e34:	4621      	mov	r1, r4
 8002e36:	028a      	lsls	r2, r1, #10
 8002e38:	4610      	mov	r0, r2
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e3e:	2200      	movs	r2, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	60fa      	str	r2, [r7, #12]
 8002e44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002e48:	f7fd fa52 	bl	80002f0 <__aeabi_uldivmod>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4613      	mov	r3, r2
 8002e52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_GetSysClockFreq+0x180>)
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	0c1b      	lsrs	r3, r3, #16
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	3301      	adds	r3, #1
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 8002e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e6e:	e002      	b.n	8002e76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e70:	4b05      	ldr	r3, [pc, #20]	; (8002e88 <HAL_RCC_GetSysClockFreq+0x184>)
 8002e72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8002e74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3740      	adds	r7, #64	; 0x40
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e82:	bf00      	nop
 8002e84:	40023800 	.word	0x40023800
 8002e88:	00f42400 	.word	0x00f42400
 8002e8c:	017d7840 	.word	0x017d7840

08002e90 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e90:	b480      	push	{r7}
 8002e92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e94:	4b03      	ldr	r3, [pc, #12]	; (8002ea4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e96:	681b      	ldr	r3, [r3, #0]
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	20000000 	.word	0x20000000

08002ea8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002eac:	f7ff fff0 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	4b05      	ldr	r3, [pc, #20]	; (8002ec8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	0a9b      	lsrs	r3, r3, #10
 8002eb8:	f003 0307 	and.w	r3, r3, #7
 8002ebc:	4903      	ldr	r1, [pc, #12]	; (8002ecc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ebe:	5ccb      	ldrb	r3, [r1, r3]
 8002ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	08006cf8 	.word	0x08006cf8

08002ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ed4:	f7ff ffdc 	bl	8002e90 <HAL_RCC_GetHCLKFreq>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	4b05      	ldr	r3, [pc, #20]	; (8002ef0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	0b5b      	lsrs	r3, r3, #13
 8002ee0:	f003 0307 	and.w	r3, r3, #7
 8002ee4:	4903      	ldr	r1, [pc, #12]	; (8002ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002ee6:	5ccb      	ldrb	r3, [r1, r3]
 8002ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	bd80      	pop	{r7, pc}
 8002ef0:	40023800 	.word	0x40023800
 8002ef4:	08006cf8 	.word	0x08006cf8

08002ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b088      	sub	sp, #32
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002f00:	2300      	movs	r3, #0
 8002f02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002f04:	2300      	movs	r3, #0
 8002f06:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002f10:	2300      	movs	r3, #0
 8002f12:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0301 	and.w	r3, r3, #1
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d012      	beq.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002f20:	4b69      	ldr	r3, [pc, #420]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	4a68      	ldr	r2, [pc, #416]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f26:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002f2a:	6093      	str	r3, [r2, #8]
 8002f2c:	4b66      	ldr	r3, [pc, #408]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f34:	4964      	ldr	r1, [pc, #400]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f36:	4313      	orrs	r3, r2
 8002f38:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d101      	bne.n	8002f46 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002f42:	2301      	movs	r3, #1
 8002f44:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d017      	beq.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002f52:	4b5d      	ldr	r3, [pc, #372]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f58:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f60:	4959      	ldr	r1, [pc, #356]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f62:	4313      	orrs	r3, r2
 8002f64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f6c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f70:	d101      	bne.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002f72:	2301      	movs	r3, #1
 8002f74:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d101      	bne.n	8002f82 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d017      	beq.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002f8e:	4b4e      	ldr	r3, [pc, #312]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002f94:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9c:	494a      	ldr	r1, [pc, #296]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fac:	d101      	bne.n	8002fb2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d101      	bne.n	8002fbe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0320 	and.w	r3, r3, #32
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	f000 808b 	beq.w	80030f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002fdc:	4b3a      	ldr	r3, [pc, #232]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe0:	4a39      	ldr	r2, [pc, #228]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fe2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe8:	4b37      	ldr	r3, [pc, #220]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ff0:	60bb      	str	r3, [r7, #8]
 8002ff2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002ff4:	4b35      	ldr	r3, [pc, #212]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a34      	ldr	r2, [pc, #208]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ffe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003000:	f7fe f8fa 	bl	80011f8 <HAL_GetTick>
 8003004:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003006:	e008      	b.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003008:	f7fe f8f6 	bl	80011f8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b64      	cmp	r3, #100	; 0x64
 8003014:	d901      	bls.n	800301a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e38f      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800301a:	4b2c      	ldr	r3, [pc, #176]	; (80030cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d0f0      	beq.n	8003008 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003026:	4b28      	ldr	r3, [pc, #160]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800302a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800302e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003030:	693b      	ldr	r3, [r7, #16]
 8003032:	2b00      	cmp	r3, #0
 8003034:	d035      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	429a      	cmp	r2, r3
 8003042:	d02e      	beq.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003044:	4b20      	ldr	r3, [pc, #128]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800304c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800304e:	4b1e      	ldr	r3, [pc, #120]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a1d      	ldr	r2, [pc, #116]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800305a:	4b1b      	ldr	r3, [pc, #108]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a1a      	ldr	r2, [pc, #104]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003060:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003064:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003066:	4a18      	ldr	r2, [pc, #96]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800306c:	4b16      	ldr	r3, [pc, #88]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800306e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b01      	cmp	r3, #1
 8003076:	d114      	bne.n	80030a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003078:	f7fe f8be 	bl	80011f8 <HAL_GetTick>
 800307c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fe f8ba 	bl	80011f8 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e351      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003096:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003098:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d0ee      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80030ae:	d111      	bne.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80030b0:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80030bc:	4b04      	ldr	r3, [pc, #16]	; (80030d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80030be:	400b      	ands	r3, r1
 80030c0:	4901      	ldr	r1, [pc, #4]	; (80030c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	608b      	str	r3, [r1, #8]
 80030c6:	e00b      	b.n	80030e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80030c8:	40023800 	.word	0x40023800
 80030cc:	40007000 	.word	0x40007000
 80030d0:	0ffffcff 	.word	0x0ffffcff
 80030d4:	4bac      	ldr	r3, [pc, #688]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	4aab      	ldr	r2, [pc, #684]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80030de:	6093      	str	r3, [r2, #8]
 80030e0:	4ba9      	ldr	r3, [pc, #676]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ec:	49a6      	ldr	r1, [pc, #664]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0310 	and.w	r3, r3, #16
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d010      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80030fe:	4ba2      	ldr	r3, [pc, #648]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003100:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003104:	4aa0      	ldr	r2, [pc, #640]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003106:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800310a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800310e:	4b9e      	ldr	r3, [pc, #632]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003110:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003118:	499b      	ldr	r1, [pc, #620]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800311a:	4313      	orrs	r3, r2
 800311c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d00a      	beq.n	8003142 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800312c:	4b96      	ldr	r3, [pc, #600]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800312e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003132:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800313a:	4993      	ldr	r1, [pc, #588]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d00a      	beq.n	8003164 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800314e:	4b8e      	ldr	r3, [pc, #568]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003154:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800315c:	498a      	ldr	r1, [pc, #552]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800315e:	4313      	orrs	r3, r2
 8003160:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	2b00      	cmp	r3, #0
 800316e:	d00a      	beq.n	8003186 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003170:	4b85      	ldr	r3, [pc, #532]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003172:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003176:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800317e:	4982      	ldr	r1, [pc, #520]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003180:	4313      	orrs	r3, r2
 8003182:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003192:	4b7d      	ldr	r3, [pc, #500]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003194:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003198:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031a0:	4979      	ldr	r1, [pc, #484]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80031b4:	4b74      	ldr	r3, [pc, #464]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031ba:	f023 0203 	bic.w	r2, r3, #3
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031c2:	4971      	ldr	r1, [pc, #452]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d00a      	beq.n	80031ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031dc:	f023 020c 	bic.w	r2, r3, #12
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80031e4:	4968      	ldr	r1, [pc, #416]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031e6:	4313      	orrs	r3, r2
 80031e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00a      	beq.n	800320e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80031f8:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80031fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80031fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003206:	4960      	ldr	r1, [pc, #384]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003208:	4313      	orrs	r3, r2
 800320a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	2b00      	cmp	r3, #0
 8003218:	d00a      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800321a:	4b5b      	ldr	r3, [pc, #364]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800321c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003220:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003228:	4957      	ldr	r1, [pc, #348]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800322a:	4313      	orrs	r3, r2
 800322c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003238:	2b00      	cmp	r3, #0
 800323a:	d00a      	beq.n	8003252 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800323c:	4b52      	ldr	r3, [pc, #328]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800323e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003242:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324a:	494f      	ldr	r1, [pc, #316]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800324c:	4313      	orrs	r3, r2
 800324e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003260:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003264:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800326c:	4946      	ldr	r1, [pc, #280]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800326e:	4313      	orrs	r3, r2
 8003270:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00a      	beq.n	8003296 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003280:	4b41      	ldr	r3, [pc, #260]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003282:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003286:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800328e:	493e      	ldr	r1, [pc, #248]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003290:	4313      	orrs	r3, r2
 8003292:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d00a      	beq.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80032a2:	4b39      	ldr	r3, [pc, #228]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	4935      	ldr	r1, [pc, #212]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032b2:	4313      	orrs	r3, r2
 80032b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d00a      	beq.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80032d2:	492d      	ldr	r1, [pc, #180]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d011      	beq.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80032e6:	4b28      	ldr	r3, [pc, #160]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032ec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032f4:	4924      	ldr	r1, [pc, #144]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80032f6:	4313      	orrs	r3, r2
 80032f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003304:	d101      	bne.n	800330a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003306:	2301      	movs	r3, #1
 8003308:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0308 	and.w	r3, r3, #8
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003316:	2301      	movs	r3, #1
 8003318:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800332c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	4914      	ldr	r1, [pc, #80]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00b      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003348:	4b0f      	ldr	r3, [pc, #60]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800334a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800334e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003358:	490b      	ldr	r1, [pc, #44]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800335a:	4313      	orrs	r3, r2
 800335c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003368:	2b00      	cmp	r3, #0
 800336a:	d00f      	beq.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800336c:	4b06      	ldr	r3, [pc, #24]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800336e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003372:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800337c:	4902      	ldr	r1, [pc, #8]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003384:	e002      	b.n	800338c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003386:	bf00      	nop
 8003388:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00b      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003398:	4b8a      	ldr	r3, [pc, #552]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800339a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800339e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80033a8:	4986      	ldr	r1, [pc, #536]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00b      	beq.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80033bc:	4b81      	ldr	r3, [pc, #516]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033be:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033cc:	497d      	ldr	r1, [pc, #500]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d006      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80d6 	beq.w	8003594 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80033e8:	4b76      	ldr	r3, [pc, #472]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a75      	ldr	r2, [pc, #468]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80033ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80033f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033f4:	f7fd ff00 	bl	80011f8 <HAL_GetTick>
 80033f8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80033fc:	f7fd fefc 	bl	80011f8 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	; 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e195      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d1f0      	bne.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d021      	beq.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800342a:	2b00      	cmp	r3, #0
 800342c:	d11d      	bne.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800342e:	4b65      	ldr	r3, [pc, #404]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003430:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003434:	0c1b      	lsrs	r3, r3, #16
 8003436:	f003 0303 	and.w	r3, r3, #3
 800343a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800343c:	4b61      	ldr	r3, [pc, #388]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800343e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003442:	0e1b      	lsrs	r3, r3, #24
 8003444:	f003 030f 	and.w	r3, r3, #15
 8003448:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	019a      	lsls	r2, r3, #6
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	041b      	lsls	r3, r3, #16
 8003454:	431a      	orrs	r2, r3
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	061b      	lsls	r3, r3, #24
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	071b      	lsls	r3, r3, #28
 8003462:	4958      	ldr	r1, [pc, #352]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003464:	4313      	orrs	r3, r2
 8003466:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d004      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800347a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800347e:	d00a      	beq.n	8003496 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003488:	2b00      	cmp	r3, #0
 800348a:	d02e      	beq.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003494:	d129      	bne.n	80034ea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003496:	4b4b      	ldr	r3, [pc, #300]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003498:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800349c:	0c1b      	lsrs	r3, r3, #16
 800349e:	f003 0303 	and.w	r3, r3, #3
 80034a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80034a4:	4b47      	ldr	r3, [pc, #284]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034aa:	0f1b      	lsrs	r3, r3, #28
 80034ac:	f003 0307 	and.w	r3, r3, #7
 80034b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	019a      	lsls	r2, r3, #6
 80034b8:	693b      	ldr	r3, [r7, #16]
 80034ba:	041b      	lsls	r3, r3, #16
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	071b      	lsls	r3, r3, #28
 80034ca:	493e      	ldr	r1, [pc, #248]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034cc:	4313      	orrs	r3, r2
 80034ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80034d2:	4b3c      	ldr	r3, [pc, #240]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80034d8:	f023 021f 	bic.w	r2, r3, #31
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	3b01      	subs	r3, #1
 80034e2:	4938      	ldr	r1, [pc, #224]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d01d      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80034f6:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80034f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80034fc:	0e1b      	lsrs	r3, r3, #24
 80034fe:	f003 030f 	and.w	r3, r3, #15
 8003502:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003504:	4b2f      	ldr	r3, [pc, #188]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003506:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800350a:	0f1b      	lsrs	r3, r3, #28
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	019a      	lsls	r2, r3, #6
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	691b      	ldr	r3, [r3, #16]
 800351c:	041b      	lsls	r3, r3, #16
 800351e:	431a      	orrs	r2, r3
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	061b      	lsls	r3, r3, #24
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	071b      	lsls	r3, r3, #28
 800352a:	4926      	ldr	r1, [pc, #152]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353a:	2b00      	cmp	r3, #0
 800353c:	d011      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	019a      	lsls	r2, r3, #6
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	691b      	ldr	r3, [r3, #16]
 8003548:	041b      	lsls	r3, r3, #16
 800354a:	431a      	orrs	r2, r3
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	68db      	ldr	r3, [r3, #12]
 8003550:	061b      	lsls	r3, r3, #24
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	071b      	lsls	r3, r3, #28
 800355a:	491a      	ldr	r1, [pc, #104]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800355c:	4313      	orrs	r3, r2
 800355e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003562:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a17      	ldr	r2, [pc, #92]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003568:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800356c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800356e:	f7fd fe43 	bl	80011f8 <HAL_GetTick>
 8003572:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003576:	f7fd fe3f 	bl	80011f8 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b64      	cmp	r3, #100	; 0x64
 8003582:	d901      	bls.n	8003588 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e0d8      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003588:	4b0e      	ldr	r3, [pc, #56]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b01      	cmp	r3, #1
 8003598:	f040 80ce 	bne.w	8003738 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800359c:	4b09      	ldr	r3, [pc, #36]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	4a08      	ldr	r2, [pc, #32]	; (80035c4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80035a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80035a8:	f7fd fe26 	bl	80011f8 <HAL_GetTick>
 80035ac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035ae:	e00b      	b.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80035b0:	f7fd fe22 	bl	80011f8 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d904      	bls.n	80035c8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e0bb      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
 80035c2:	bf00      	nop
 80035c4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80035c8:	4b5e      	ldr	r3, [pc, #376]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80035d4:	d0ec      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d003      	beq.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d009      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d02e      	beq.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d12a      	bne.n	8003654 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80035fe:	4b51      	ldr	r3, [pc, #324]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003600:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003604:	0c1b      	lsrs	r3, r3, #16
 8003606:	f003 0303 	and.w	r3, r3, #3
 800360a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800360c:	4b4d      	ldr	r3, [pc, #308]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800360e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003612:	0f1b      	lsrs	r3, r3, #28
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	019a      	lsls	r2, r3, #6
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	431a      	orrs	r2, r3
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	061b      	lsls	r3, r3, #24
 800362c:	431a      	orrs	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	071b      	lsls	r3, r3, #28
 8003632:	4944      	ldr	r1, [pc, #272]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003634:	4313      	orrs	r3, r2
 8003636:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800363a:	4b42      	ldr	r3, [pc, #264]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800363c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003640:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	493d      	ldr	r1, [pc, #244]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800364e:	4313      	orrs	r3, r2
 8003650:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d022      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003668:	d11d      	bne.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800366a:	4b36      	ldr	r3, [pc, #216]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800366c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003670:	0e1b      	lsrs	r3, r3, #24
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003678:	4b32      	ldr	r3, [pc, #200]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800367a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800367e:	0f1b      	lsrs	r3, r3, #28
 8003680:	f003 0307 	and.w	r3, r3, #7
 8003684:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695b      	ldr	r3, [r3, #20]
 800368a:	019a      	lsls	r2, r3, #6
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	041b      	lsls	r3, r3, #16
 8003692:	431a      	orrs	r2, r3
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	061b      	lsls	r3, r3, #24
 8003698:	431a      	orrs	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	071b      	lsls	r3, r3, #28
 800369e:	4929      	ldr	r1, [pc, #164]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036a0:	4313      	orrs	r3, r2
 80036a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 0308 	and.w	r3, r3, #8
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d028      	beq.n	8003704 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80036b2:	4b24      	ldr	r3, [pc, #144]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b8:	0e1b      	lsrs	r3, r3, #24
 80036ba:	f003 030f 	and.w	r3, r3, #15
 80036be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80036c0:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036c6:	0c1b      	lsrs	r3, r3, #16
 80036c8:	f003 0303 	and.w	r3, r3, #3
 80036cc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	019a      	lsls	r2, r3, #6
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	041b      	lsls	r3, r3, #16
 80036d8:	431a      	orrs	r2, r3
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	061b      	lsls	r3, r3, #24
 80036de:	431a      	orrs	r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	071b      	lsls	r3, r3, #28
 80036e6:	4917      	ldr	r1, [pc, #92]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80036ee:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80036f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	4911      	ldr	r1, [pc, #68]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003704:	4b0f      	ldr	r3, [pc, #60]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800370a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800370e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003710:	f7fd fd72 	bl	80011f8 <HAL_GetTick>
 8003714:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003716:	e008      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003718:	f7fd fd6e 	bl	80011f8 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	; 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e007      	b.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800372a:	4b06      	ldr	r3, [pc, #24]	; (8003744 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003732:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003736:	d1ef      	bne.n	8003718 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3720      	adds	r7, #32
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d101      	bne.n	800375a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e040      	b.n	80037dc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800375e:	2b00      	cmp	r3, #0
 8003760:	d106      	bne.n	8003770 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f7fd fc6a 	bl	8001044 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2224      	movs	r2, #36	; 0x24
 8003774:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	681a      	ldr	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f022 0201 	bic.w	r2, r2, #1
 8003784:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 f8b0 	bl	80038ec <UART_SetConfig>
 800378c:	4603      	mov	r3, r0
 800378e:	2b01      	cmp	r3, #1
 8003790:	d101      	bne.n	8003796 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e022      	b.n	80037dc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b00      	cmp	r3, #0
 800379c:	d002      	beq.n	80037a4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	f000 fb08 	bl	8003db4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037b2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689a      	ldr	r2, [r3, #8]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037c2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	681a      	ldr	r2, [r3, #0]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f042 0201 	orr.w	r2, r2, #1
 80037d2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 fb8f 	bl	8003ef8 <UART_CheckIdleState>
 80037da:	4603      	mov	r3, r0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3708      	adds	r7, #8
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037e4:	b580      	push	{r7, lr}
 80037e6:	b08a      	sub	sp, #40	; 0x28
 80037e8:	af02      	add	r7, sp, #8
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	603b      	str	r3, [r7, #0]
 80037f0:	4613      	mov	r3, r2
 80037f2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d171      	bne.n	80038e0 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <HAL_UART_Transmit+0x24>
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e06a      	b.n	80038e2 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2200      	movs	r2, #0
 8003810:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	2221      	movs	r2, #33	; 0x21
 8003818:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800381a:	f7fd fced 	bl	80011f8 <HAL_GetTick>
 800381e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	88fa      	ldrh	r2, [r7, #6]
 800382c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003838:	d108      	bne.n	800384c <HAL_UART_Transmit+0x68>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	691b      	ldr	r3, [r3, #16]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d104      	bne.n	800384c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003842:	2300      	movs	r3, #0
 8003844:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	61bb      	str	r3, [r7, #24]
 800384a:	e003      	b.n	8003854 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003850:	2300      	movs	r3, #0
 8003852:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003854:	e02c      	b.n	80038b0 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003856:	683b      	ldr	r3, [r7, #0]
 8003858:	9300      	str	r3, [sp, #0]
 800385a:	697b      	ldr	r3, [r7, #20]
 800385c:	2200      	movs	r2, #0
 800385e:	2180      	movs	r1, #128	; 0x80
 8003860:	68f8      	ldr	r0, [r7, #12]
 8003862:	f000 fb96 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 8003866:	4603      	mov	r3, r0
 8003868:	2b00      	cmp	r3, #0
 800386a:	d001      	beq.n	8003870 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800386c:	2303      	movs	r3, #3
 800386e:	e038      	b.n	80038e2 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d10b      	bne.n	800388e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003876:	69bb      	ldr	r3, [r7, #24]
 8003878:	881b      	ldrh	r3, [r3, #0]
 800387a:	461a      	mov	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003884:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003886:	69bb      	ldr	r3, [r7, #24]
 8003888:	3302      	adds	r3, #2
 800388a:	61bb      	str	r3, [r7, #24]
 800388c:	e007      	b.n	800389e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	781a      	ldrb	r2, [r3, #0]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	3301      	adds	r3, #1
 800389c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	3b01      	subs	r3, #1
 80038a8:	b29a      	uxth	r2, r3
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d1cc      	bne.n	8003856 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	9300      	str	r3, [sp, #0]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	2200      	movs	r2, #0
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fb63 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80038d2:	2303      	movs	r3, #3
 80038d4:	e005      	b.n	80038e2 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	e000      	b.n	80038e2 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 80038e0:	2302      	movs	r3, #2
  }
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3720      	adds	r7, #32
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
	...

080038ec <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038f4:	2300      	movs	r3, #0
 80038f6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689a      	ldr	r2, [r3, #8]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	431a      	orrs	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	69db      	ldr	r3, [r3, #28]
 800390c:	4313      	orrs	r3, r2
 800390e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	4ba6      	ldr	r3, [pc, #664]	; (8003bb0 <UART_SetConfig+0x2c4>)
 8003918:	4013      	ands	r3, r2
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	6812      	ldr	r2, [r2, #0]
 800391e:	6979      	ldr	r1, [r7, #20]
 8003920:	430b      	orrs	r3, r1
 8003922:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68da      	ldr	r2, [r3, #12]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	430a      	orrs	r2, r1
 8003938:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	699b      	ldr	r3, [r3, #24]
 800393e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a1b      	ldr	r3, [r3, #32]
 8003944:	697a      	ldr	r2, [r7, #20]
 8003946:	4313      	orrs	r3, r2
 8003948:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4a94      	ldr	r2, [pc, #592]	; (8003bb4 <UART_SetConfig+0x2c8>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d120      	bne.n	80039aa <UART_SetConfig+0xbe>
 8003968:	4b93      	ldr	r3, [pc, #588]	; (8003bb8 <UART_SetConfig+0x2cc>)
 800396a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396e:	f003 0303 	and.w	r3, r3, #3
 8003972:	2b03      	cmp	r3, #3
 8003974:	d816      	bhi.n	80039a4 <UART_SetConfig+0xb8>
 8003976:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0x90>)
 8003978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397c:	0800398d 	.word	0x0800398d
 8003980:	08003999 	.word	0x08003999
 8003984:	08003993 	.word	0x08003993
 8003988:	0800399f 	.word	0x0800399f
 800398c:	2301      	movs	r3, #1
 800398e:	77fb      	strb	r3, [r7, #31]
 8003990:	e150      	b.n	8003c34 <UART_SetConfig+0x348>
 8003992:	2302      	movs	r3, #2
 8003994:	77fb      	strb	r3, [r7, #31]
 8003996:	e14d      	b.n	8003c34 <UART_SetConfig+0x348>
 8003998:	2304      	movs	r3, #4
 800399a:	77fb      	strb	r3, [r7, #31]
 800399c:	e14a      	b.n	8003c34 <UART_SetConfig+0x348>
 800399e:	2308      	movs	r3, #8
 80039a0:	77fb      	strb	r3, [r7, #31]
 80039a2:	e147      	b.n	8003c34 <UART_SetConfig+0x348>
 80039a4:	2310      	movs	r3, #16
 80039a6:	77fb      	strb	r3, [r7, #31]
 80039a8:	e144      	b.n	8003c34 <UART_SetConfig+0x348>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4a83      	ldr	r2, [pc, #524]	; (8003bbc <UART_SetConfig+0x2d0>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d132      	bne.n	8003a1a <UART_SetConfig+0x12e>
 80039b4:	4b80      	ldr	r3, [pc, #512]	; (8003bb8 <UART_SetConfig+0x2cc>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ba:	f003 030c 	and.w	r3, r3, #12
 80039be:	2b0c      	cmp	r3, #12
 80039c0:	d828      	bhi.n	8003a14 <UART_SetConfig+0x128>
 80039c2:	a201      	add	r2, pc, #4	; (adr r2, 80039c8 <UART_SetConfig+0xdc>)
 80039c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039c8:	080039fd 	.word	0x080039fd
 80039cc:	08003a15 	.word	0x08003a15
 80039d0:	08003a15 	.word	0x08003a15
 80039d4:	08003a15 	.word	0x08003a15
 80039d8:	08003a09 	.word	0x08003a09
 80039dc:	08003a15 	.word	0x08003a15
 80039e0:	08003a15 	.word	0x08003a15
 80039e4:	08003a15 	.word	0x08003a15
 80039e8:	08003a03 	.word	0x08003a03
 80039ec:	08003a15 	.word	0x08003a15
 80039f0:	08003a15 	.word	0x08003a15
 80039f4:	08003a15 	.word	0x08003a15
 80039f8:	08003a0f 	.word	0x08003a0f
 80039fc:	2300      	movs	r3, #0
 80039fe:	77fb      	strb	r3, [r7, #31]
 8003a00:	e118      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a02:	2302      	movs	r3, #2
 8003a04:	77fb      	strb	r3, [r7, #31]
 8003a06:	e115      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a08:	2304      	movs	r3, #4
 8003a0a:	77fb      	strb	r3, [r7, #31]
 8003a0c:	e112      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a0e:	2308      	movs	r3, #8
 8003a10:	77fb      	strb	r3, [r7, #31]
 8003a12:	e10f      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a14:	2310      	movs	r3, #16
 8003a16:	77fb      	strb	r3, [r7, #31]
 8003a18:	e10c      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a68      	ldr	r2, [pc, #416]	; (8003bc0 <UART_SetConfig+0x2d4>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d120      	bne.n	8003a66 <UART_SetConfig+0x17a>
 8003a24:	4b64      	ldr	r3, [pc, #400]	; (8003bb8 <UART_SetConfig+0x2cc>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a2a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a2e:	2b30      	cmp	r3, #48	; 0x30
 8003a30:	d013      	beq.n	8003a5a <UART_SetConfig+0x16e>
 8003a32:	2b30      	cmp	r3, #48	; 0x30
 8003a34:	d814      	bhi.n	8003a60 <UART_SetConfig+0x174>
 8003a36:	2b20      	cmp	r3, #32
 8003a38:	d009      	beq.n	8003a4e <UART_SetConfig+0x162>
 8003a3a:	2b20      	cmp	r3, #32
 8003a3c:	d810      	bhi.n	8003a60 <UART_SetConfig+0x174>
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d002      	beq.n	8003a48 <UART_SetConfig+0x15c>
 8003a42:	2b10      	cmp	r3, #16
 8003a44:	d006      	beq.n	8003a54 <UART_SetConfig+0x168>
 8003a46:	e00b      	b.n	8003a60 <UART_SetConfig+0x174>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e0f2      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a4e:	2302      	movs	r3, #2
 8003a50:	77fb      	strb	r3, [r7, #31]
 8003a52:	e0ef      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a54:	2304      	movs	r3, #4
 8003a56:	77fb      	strb	r3, [r7, #31]
 8003a58:	e0ec      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a5a:	2308      	movs	r3, #8
 8003a5c:	77fb      	strb	r3, [r7, #31]
 8003a5e:	e0e9      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a60:	2310      	movs	r3, #16
 8003a62:	77fb      	strb	r3, [r7, #31]
 8003a64:	e0e6      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a56      	ldr	r2, [pc, #344]	; (8003bc4 <UART_SetConfig+0x2d8>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d120      	bne.n	8003ab2 <UART_SetConfig+0x1c6>
 8003a70:	4b51      	ldr	r3, [pc, #324]	; (8003bb8 <UART_SetConfig+0x2cc>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a7a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a7c:	d013      	beq.n	8003aa6 <UART_SetConfig+0x1ba>
 8003a7e:	2bc0      	cmp	r3, #192	; 0xc0
 8003a80:	d814      	bhi.n	8003aac <UART_SetConfig+0x1c0>
 8003a82:	2b80      	cmp	r3, #128	; 0x80
 8003a84:	d009      	beq.n	8003a9a <UART_SetConfig+0x1ae>
 8003a86:	2b80      	cmp	r3, #128	; 0x80
 8003a88:	d810      	bhi.n	8003aac <UART_SetConfig+0x1c0>
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <UART_SetConfig+0x1a8>
 8003a8e:	2b40      	cmp	r3, #64	; 0x40
 8003a90:	d006      	beq.n	8003aa0 <UART_SetConfig+0x1b4>
 8003a92:	e00b      	b.n	8003aac <UART_SetConfig+0x1c0>
 8003a94:	2300      	movs	r3, #0
 8003a96:	77fb      	strb	r3, [r7, #31]
 8003a98:	e0cc      	b.n	8003c34 <UART_SetConfig+0x348>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	77fb      	strb	r3, [r7, #31]
 8003a9e:	e0c9      	b.n	8003c34 <UART_SetConfig+0x348>
 8003aa0:	2304      	movs	r3, #4
 8003aa2:	77fb      	strb	r3, [r7, #31]
 8003aa4:	e0c6      	b.n	8003c34 <UART_SetConfig+0x348>
 8003aa6:	2308      	movs	r3, #8
 8003aa8:	77fb      	strb	r3, [r7, #31]
 8003aaa:	e0c3      	b.n	8003c34 <UART_SetConfig+0x348>
 8003aac:	2310      	movs	r3, #16
 8003aae:	77fb      	strb	r3, [r7, #31]
 8003ab0:	e0c0      	b.n	8003c34 <UART_SetConfig+0x348>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	4a44      	ldr	r2, [pc, #272]	; (8003bc8 <UART_SetConfig+0x2dc>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d125      	bne.n	8003b08 <UART_SetConfig+0x21c>
 8003abc:	4b3e      	ldr	r3, [pc, #248]	; (8003bb8 <UART_SetConfig+0x2cc>)
 8003abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ac2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ac6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aca:	d017      	beq.n	8003afc <UART_SetConfig+0x210>
 8003acc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ad0:	d817      	bhi.n	8003b02 <UART_SetConfig+0x216>
 8003ad2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ad6:	d00b      	beq.n	8003af0 <UART_SetConfig+0x204>
 8003ad8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003adc:	d811      	bhi.n	8003b02 <UART_SetConfig+0x216>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <UART_SetConfig+0x1fe>
 8003ae2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ae6:	d006      	beq.n	8003af6 <UART_SetConfig+0x20a>
 8003ae8:	e00b      	b.n	8003b02 <UART_SetConfig+0x216>
 8003aea:	2300      	movs	r3, #0
 8003aec:	77fb      	strb	r3, [r7, #31]
 8003aee:	e0a1      	b.n	8003c34 <UART_SetConfig+0x348>
 8003af0:	2302      	movs	r3, #2
 8003af2:	77fb      	strb	r3, [r7, #31]
 8003af4:	e09e      	b.n	8003c34 <UART_SetConfig+0x348>
 8003af6:	2304      	movs	r3, #4
 8003af8:	77fb      	strb	r3, [r7, #31]
 8003afa:	e09b      	b.n	8003c34 <UART_SetConfig+0x348>
 8003afc:	2308      	movs	r3, #8
 8003afe:	77fb      	strb	r3, [r7, #31]
 8003b00:	e098      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b02:	2310      	movs	r3, #16
 8003b04:	77fb      	strb	r3, [r7, #31]
 8003b06:	e095      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a2f      	ldr	r2, [pc, #188]	; (8003bcc <UART_SetConfig+0x2e0>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d125      	bne.n	8003b5e <UART_SetConfig+0x272>
 8003b12:	4b29      	ldr	r3, [pc, #164]	; (8003bb8 <UART_SetConfig+0x2cc>)
 8003b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b18:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b1c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b20:	d017      	beq.n	8003b52 <UART_SetConfig+0x266>
 8003b22:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b26:	d817      	bhi.n	8003b58 <UART_SetConfig+0x26c>
 8003b28:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b2c:	d00b      	beq.n	8003b46 <UART_SetConfig+0x25a>
 8003b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b32:	d811      	bhi.n	8003b58 <UART_SetConfig+0x26c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <UART_SetConfig+0x254>
 8003b38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b3c:	d006      	beq.n	8003b4c <UART_SetConfig+0x260>
 8003b3e:	e00b      	b.n	8003b58 <UART_SetConfig+0x26c>
 8003b40:	2301      	movs	r3, #1
 8003b42:	77fb      	strb	r3, [r7, #31]
 8003b44:	e076      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b46:	2302      	movs	r3, #2
 8003b48:	77fb      	strb	r3, [r7, #31]
 8003b4a:	e073      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b4c:	2304      	movs	r3, #4
 8003b4e:	77fb      	strb	r3, [r7, #31]
 8003b50:	e070      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b52:	2308      	movs	r3, #8
 8003b54:	77fb      	strb	r3, [r7, #31]
 8003b56:	e06d      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	77fb      	strb	r3, [r7, #31]
 8003b5c:	e06a      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1b      	ldr	r2, [pc, #108]	; (8003bd0 <UART_SetConfig+0x2e4>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d138      	bne.n	8003bda <UART_SetConfig+0x2ee>
 8003b68:	4b13      	ldr	r3, [pc, #76]	; (8003bb8 <UART_SetConfig+0x2cc>)
 8003b6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b6e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003b72:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b76:	d017      	beq.n	8003ba8 <UART_SetConfig+0x2bc>
 8003b78:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003b7c:	d82a      	bhi.n	8003bd4 <UART_SetConfig+0x2e8>
 8003b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b82:	d00b      	beq.n	8003b9c <UART_SetConfig+0x2b0>
 8003b84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b88:	d824      	bhi.n	8003bd4 <UART_SetConfig+0x2e8>
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <UART_SetConfig+0x2aa>
 8003b8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b92:	d006      	beq.n	8003ba2 <UART_SetConfig+0x2b6>
 8003b94:	e01e      	b.n	8003bd4 <UART_SetConfig+0x2e8>
 8003b96:	2300      	movs	r3, #0
 8003b98:	77fb      	strb	r3, [r7, #31]
 8003b9a:	e04b      	b.n	8003c34 <UART_SetConfig+0x348>
 8003b9c:	2302      	movs	r3, #2
 8003b9e:	77fb      	strb	r3, [r7, #31]
 8003ba0:	e048      	b.n	8003c34 <UART_SetConfig+0x348>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	77fb      	strb	r3, [r7, #31]
 8003ba6:	e045      	b.n	8003c34 <UART_SetConfig+0x348>
 8003ba8:	2308      	movs	r3, #8
 8003baa:	77fb      	strb	r3, [r7, #31]
 8003bac:	e042      	b.n	8003c34 <UART_SetConfig+0x348>
 8003bae:	bf00      	nop
 8003bb0:	efff69f3 	.word	0xefff69f3
 8003bb4:	40011000 	.word	0x40011000
 8003bb8:	40023800 	.word	0x40023800
 8003bbc:	40004400 	.word	0x40004400
 8003bc0:	40004800 	.word	0x40004800
 8003bc4:	40004c00 	.word	0x40004c00
 8003bc8:	40005000 	.word	0x40005000
 8003bcc:	40011400 	.word	0x40011400
 8003bd0:	40007800 	.word	0x40007800
 8003bd4:	2310      	movs	r3, #16
 8003bd6:	77fb      	strb	r3, [r7, #31]
 8003bd8:	e02c      	b.n	8003c34 <UART_SetConfig+0x348>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a72      	ldr	r2, [pc, #456]	; (8003da8 <UART_SetConfig+0x4bc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d125      	bne.n	8003c30 <UART_SetConfig+0x344>
 8003be4:	4b71      	ldr	r3, [pc, #452]	; (8003dac <UART_SetConfig+0x4c0>)
 8003be6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003bee:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bf2:	d017      	beq.n	8003c24 <UART_SetConfig+0x338>
 8003bf4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003bf8:	d817      	bhi.n	8003c2a <UART_SetConfig+0x33e>
 8003bfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bfe:	d00b      	beq.n	8003c18 <UART_SetConfig+0x32c>
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	d811      	bhi.n	8003c2a <UART_SetConfig+0x33e>
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d003      	beq.n	8003c12 <UART_SetConfig+0x326>
 8003c0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c0e:	d006      	beq.n	8003c1e <UART_SetConfig+0x332>
 8003c10:	e00b      	b.n	8003c2a <UART_SetConfig+0x33e>
 8003c12:	2300      	movs	r3, #0
 8003c14:	77fb      	strb	r3, [r7, #31]
 8003c16:	e00d      	b.n	8003c34 <UART_SetConfig+0x348>
 8003c18:	2302      	movs	r3, #2
 8003c1a:	77fb      	strb	r3, [r7, #31]
 8003c1c:	e00a      	b.n	8003c34 <UART_SetConfig+0x348>
 8003c1e:	2304      	movs	r3, #4
 8003c20:	77fb      	strb	r3, [r7, #31]
 8003c22:	e007      	b.n	8003c34 <UART_SetConfig+0x348>
 8003c24:	2308      	movs	r3, #8
 8003c26:	77fb      	strb	r3, [r7, #31]
 8003c28:	e004      	b.n	8003c34 <UART_SetConfig+0x348>
 8003c2a:	2310      	movs	r3, #16
 8003c2c:	77fb      	strb	r3, [r7, #31]
 8003c2e:	e001      	b.n	8003c34 <UART_SetConfig+0x348>
 8003c30:	2310      	movs	r3, #16
 8003c32:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	69db      	ldr	r3, [r3, #28]
 8003c38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c3c:	d15b      	bne.n	8003cf6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8003c3e:	7ffb      	ldrb	r3, [r7, #31]
 8003c40:	2b08      	cmp	r3, #8
 8003c42:	d828      	bhi.n	8003c96 <UART_SetConfig+0x3aa>
 8003c44:	a201      	add	r2, pc, #4	; (adr r2, 8003c4c <UART_SetConfig+0x360>)
 8003c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c4a:	bf00      	nop
 8003c4c:	08003c71 	.word	0x08003c71
 8003c50:	08003c79 	.word	0x08003c79
 8003c54:	08003c81 	.word	0x08003c81
 8003c58:	08003c97 	.word	0x08003c97
 8003c5c:	08003c87 	.word	0x08003c87
 8003c60:	08003c97 	.word	0x08003c97
 8003c64:	08003c97 	.word	0x08003c97
 8003c68:	08003c97 	.word	0x08003c97
 8003c6c:	08003c8f 	.word	0x08003c8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c70:	f7ff f91a 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8003c74:	61b8      	str	r0, [r7, #24]
        break;
 8003c76:	e013      	b.n	8003ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c78:	f7ff f92a 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003c7c:	61b8      	str	r0, [r7, #24]
        break;
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c80:	4b4b      	ldr	r3, [pc, #300]	; (8003db0 <UART_SetConfig+0x4c4>)
 8003c82:	61bb      	str	r3, [r7, #24]
        break;
 8003c84:	e00c      	b.n	8003ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c86:	f7ff f83d 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8003c8a:	61b8      	str	r0, [r7, #24]
        break;
 8003c8c:	e008      	b.n	8003ca0 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c92:	61bb      	str	r3, [r7, #24]
        break;
 8003c94:	e004      	b.n	8003ca0 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c9e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d074      	beq.n	8003d90 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca6:	69bb      	ldr	r3, [r7, #24]
 8003ca8:	005a      	lsls	r2, r3, #1
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	685b      	ldr	r3, [r3, #4]
 8003cae:	085b      	lsrs	r3, r3, #1
 8003cb0:	441a      	add	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cba:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	d916      	bls.n	8003cf0 <UART_SetConfig+0x404>
 8003cc2:	693b      	ldr	r3, [r7, #16]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc8:	d212      	bcs.n	8003cf0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	f023 030f 	bic.w	r3, r3, #15
 8003cd2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	085b      	lsrs	r3, r3, #1
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	89fb      	ldrh	r3, [r7, #14]
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	89fa      	ldrh	r2, [r7, #14]
 8003cec:	60da      	str	r2, [r3, #12]
 8003cee:	e04f      	b.n	8003d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	77bb      	strb	r3, [r7, #30]
 8003cf4:	e04c      	b.n	8003d90 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf6:	7ffb      	ldrb	r3, [r7, #31]
 8003cf8:	2b08      	cmp	r3, #8
 8003cfa:	d828      	bhi.n	8003d4e <UART_SetConfig+0x462>
 8003cfc:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x418>)
 8003cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d02:	bf00      	nop
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7ff f8be 	bl	8002ea8 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	61b8      	str	r0, [r7, #24]
        break;
 8003d2e:	e013      	b.n	8003d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7ff f8ce 	bl	8002ed0 <HAL_RCC_GetPCLK2Freq>
 8003d34:	61b8      	str	r0, [r7, #24]
        break;
 8003d36:	e00f      	b.n	8003d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b1d      	ldr	r3, [pc, #116]	; (8003db0 <UART_SetConfig+0x4c4>)
 8003d3a:	61bb      	str	r3, [r7, #24]
        break;
 8003d3c:	e00c      	b.n	8003d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe ffe1 	bl	8002d04 <HAL_RCC_GetSysClockFreq>
 8003d42:	61b8      	str	r0, [r7, #24]
        break;
 8003d44:	e008      	b.n	8003d58 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4a:	61bb      	str	r3, [r7, #24]
        break;
 8003d4c:	e004      	b.n	8003d58 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	77bb      	strb	r3, [r7, #30]
        break;
 8003d56:	bf00      	nop
    }

    if (pclk != 0U)
 8003d58:	69bb      	ldr	r3, [r7, #24]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d018      	beq.n	8003d90 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	685b      	ldr	r3, [r3, #4]
 8003d62:	085a      	lsrs	r2, r3, #1
 8003d64:	69bb      	ldr	r3, [r7, #24]
 8003d66:	441a      	add	r2, r3
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d70:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b0f      	cmp	r3, #15
 8003d76:	d909      	bls.n	8003d8c <UART_SetConfig+0x4a0>
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d7e:	d205      	bcs.n	8003d8c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	b29a      	uxth	r2, r3
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	60da      	str	r2, [r3, #12]
 8003d8a:	e001      	b.n	8003d90 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003d9c:	7fbb      	ldrb	r3, [r7, #30]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3720      	adds	r7, #32
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
 8003da6:	bf00      	nop
 8003da8:	40007c00 	.word	0x40007c00
 8003dac:	40023800 	.word	0x40023800
 8003db0:	00f42400 	.word	0x00f42400

08003db4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d00a      	beq.n	8003dde <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0302 	and.w	r3, r3, #2
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e04:	f003 0304 	and.w	r3, r3, #4
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d00a      	beq.n	8003e22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	430a      	orrs	r2, r1
 8003e20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	f003 0308 	and.w	r3, r3, #8
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d00a      	beq.n	8003e44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	430a      	orrs	r2, r1
 8003e42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	f003 0310 	and.w	r3, r3, #16
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d00a      	beq.n	8003e66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	430a      	orrs	r2, r1
 8003e64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6a:	f003 0320 	and.w	r3, r3, #32
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00a      	beq.n	8003e88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	430a      	orrs	r2, r1
 8003e86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d01a      	beq.n	8003eca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb2:	d10a      	bne.n	8003eca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00a      	beq.n	8003eec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }
}
 8003eec:	bf00      	nop
 8003eee:	370c      	adds	r7, #12
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr

08003ef8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af02      	add	r7, sp, #8
 8003efe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f08:	f7fd f976 	bl	80011f8 <HAL_GetTick>
 8003f0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b08      	cmp	r3, #8
 8003f1a:	d10e      	bne.n	8003f3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f20:	9300      	str	r3, [sp, #0]
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f000 f831 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 8003f30:	4603      	mov	r3, r0
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d001      	beq.n	8003f3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e027      	b.n	8003f8a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b04      	cmp	r3, #4
 8003f46:	d10e      	bne.n	8003f66 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f48:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 f81b 	bl	8003f92 <UART_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f62:	2303      	movs	r3, #3
 8003f64:	e011      	b.n	8003f8a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2200      	movs	r2, #0
 8003f84:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3710      	adds	r7, #16
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b09c      	sub	sp, #112	; 0x70
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fa2:	e0a7      	b.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fa4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003faa:	f000 80a3 	beq.w	80040f4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fae:	f7fd f923 	bl	80011f8 <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003fba:	429a      	cmp	r2, r3
 8003fbc:	d302      	bcc.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x32>
 8003fbe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d13f      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fd4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fd8:	667b      	str	r3, [r7, #100]	; 0x64
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	461a      	mov	r2, r3
 8003fe0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fe2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fe4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003fe8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003ff0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e6      	bne.n	8003fc4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	3308      	adds	r3, #8
 8003ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004000:	e853 3f00 	ldrex	r3, [r3]
 8004004:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004006:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004008:	f023 0301 	bic.w	r3, r3, #1
 800400c:	663b      	str	r3, [r7, #96]	; 0x60
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	3308      	adds	r3, #8
 8004014:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004016:	64ba      	str	r2, [r7, #72]	; 0x48
 8004018:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800401a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800401c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800401e:	e841 2300 	strex	r3, r2, [r1]
 8004022:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e5      	bne.n	8003ff6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2220      	movs	r2, #32
 800402e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2220      	movs	r2, #32
 8004034:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004040:	2303      	movs	r3, #3
 8004042:	e068      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0304 	and.w	r3, r3, #4
 800404e:	2b00      	cmp	r3, #0
 8004050:	d050      	beq.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	69db      	ldr	r3, [r3, #28]
 8004058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800405c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004060:	d148      	bne.n	80040f4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800406a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004074:	e853 3f00 	ldrex	r3, [r3]
 8004078:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800407a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800407c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004080:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	461a      	mov	r2, r3
 8004088:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800408a:	637b      	str	r3, [r7, #52]	; 0x34
 800408c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800408e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004090:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004092:	e841 2300 	strex	r3, r2, [r1]
 8004096:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004098:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1e6      	bne.n	800406c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	3308      	adds	r3, #8
 80040a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	e853 3f00 	ldrex	r3, [r3]
 80040ac:	613b      	str	r3, [r7, #16]
   return(result);
 80040ae:	693b      	ldr	r3, [r7, #16]
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	3308      	adds	r3, #8
 80040bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040be:	623a      	str	r2, [r7, #32]
 80040c0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c2:	69f9      	ldr	r1, [r7, #28]
 80040c4:	6a3a      	ldr	r2, [r7, #32]
 80040c6:	e841 2300 	strex	r3, r2, [r1]
 80040ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d1e5      	bne.n	800409e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2220      	movs	r2, #32
 80040dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2220      	movs	r2, #32
 80040e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80040f0:	2303      	movs	r3, #3
 80040f2:	e010      	b.n	8004116 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	69da      	ldr	r2, [r3, #28]
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	4013      	ands	r3, r2
 80040fe:	68ba      	ldr	r2, [r7, #8]
 8004100:	429a      	cmp	r2, r3
 8004102:	bf0c      	ite	eq
 8004104:	2301      	moveq	r3, #1
 8004106:	2300      	movne	r3, #0
 8004108:	b2db      	uxtb	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	79fb      	ldrb	r3, [r7, #7]
 800410e:	429a      	cmp	r2, r3
 8004110:	f43f af48 	beq.w	8003fa4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004114:	2300      	movs	r3, #0
}
 8004116:	4618      	mov	r0, r3
 8004118:	3770      	adds	r7, #112	; 0x70
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <__cvt>:
 800411e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004120:	ed2d 8b02 	vpush	{d8}
 8004124:	eeb0 8b40 	vmov.f64	d8, d0
 8004128:	b085      	sub	sp, #20
 800412a:	4617      	mov	r7, r2
 800412c:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800412e:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8004130:	ee18 2a90 	vmov	r2, s17
 8004134:	f025 0520 	bic.w	r5, r5, #32
 8004138:	2a00      	cmp	r2, #0
 800413a:	bfb6      	itet	lt
 800413c:	222d      	movlt	r2, #45	; 0x2d
 800413e:	2200      	movge	r2, #0
 8004140:	eeb1 8b40 	vneglt.f64	d8, d0
 8004144:	2d46      	cmp	r5, #70	; 0x46
 8004146:	460c      	mov	r4, r1
 8004148:	701a      	strb	r2, [r3, #0]
 800414a:	d004      	beq.n	8004156 <__cvt+0x38>
 800414c:	2d45      	cmp	r5, #69	; 0x45
 800414e:	d100      	bne.n	8004152 <__cvt+0x34>
 8004150:	3401      	adds	r4, #1
 8004152:	2102      	movs	r1, #2
 8004154:	e000      	b.n	8004158 <__cvt+0x3a>
 8004156:	2103      	movs	r1, #3
 8004158:	ab03      	add	r3, sp, #12
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	ab02      	add	r3, sp, #8
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	4622      	mov	r2, r4
 8004162:	4633      	mov	r3, r6
 8004164:	eeb0 0b48 	vmov.f64	d0, d8
 8004168:	f000 fe2e 	bl	8004dc8 <_dtoa_r>
 800416c:	2d47      	cmp	r5, #71	; 0x47
 800416e:	d101      	bne.n	8004174 <__cvt+0x56>
 8004170:	07fb      	lsls	r3, r7, #31
 8004172:	d51a      	bpl.n	80041aa <__cvt+0x8c>
 8004174:	2d46      	cmp	r5, #70	; 0x46
 8004176:	eb00 0204 	add.w	r2, r0, r4
 800417a:	d10c      	bne.n	8004196 <__cvt+0x78>
 800417c:	7803      	ldrb	r3, [r0, #0]
 800417e:	2b30      	cmp	r3, #48	; 0x30
 8004180:	d107      	bne.n	8004192 <__cvt+0x74>
 8004182:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800418a:	bf1c      	itt	ne
 800418c:	f1c4 0401 	rsbne	r4, r4, #1
 8004190:	6034      	strne	r4, [r6, #0]
 8004192:	6833      	ldr	r3, [r6, #0]
 8004194:	441a      	add	r2, r3
 8004196:	eeb5 8b40 	vcmp.f64	d8, #0.0
 800419a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419e:	bf08      	it	eq
 80041a0:	9203      	streq	r2, [sp, #12]
 80041a2:	2130      	movs	r1, #48	; 0x30
 80041a4:	9b03      	ldr	r3, [sp, #12]
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d307      	bcc.n	80041ba <__cvt+0x9c>
 80041aa:	9b03      	ldr	r3, [sp, #12]
 80041ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80041ae:	1a1b      	subs	r3, r3, r0
 80041b0:	6013      	str	r3, [r2, #0]
 80041b2:	b005      	add	sp, #20
 80041b4:	ecbd 8b02 	vpop	{d8}
 80041b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041ba:	1c5c      	adds	r4, r3, #1
 80041bc:	9403      	str	r4, [sp, #12]
 80041be:	7019      	strb	r1, [r3, #0]
 80041c0:	e7f0      	b.n	80041a4 <__cvt+0x86>

080041c2 <__exponent>:
 80041c2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041c4:	4603      	mov	r3, r0
 80041c6:	2900      	cmp	r1, #0
 80041c8:	bfb8      	it	lt
 80041ca:	4249      	neglt	r1, r1
 80041cc:	f803 2b02 	strb.w	r2, [r3], #2
 80041d0:	bfb4      	ite	lt
 80041d2:	222d      	movlt	r2, #45	; 0x2d
 80041d4:	222b      	movge	r2, #43	; 0x2b
 80041d6:	2909      	cmp	r1, #9
 80041d8:	7042      	strb	r2, [r0, #1]
 80041da:	dd2a      	ble.n	8004232 <__exponent+0x70>
 80041dc:	f10d 0207 	add.w	r2, sp, #7
 80041e0:	4617      	mov	r7, r2
 80041e2:	260a      	movs	r6, #10
 80041e4:	4694      	mov	ip, r2
 80041e6:	fb91 f5f6 	sdiv	r5, r1, r6
 80041ea:	fb06 1415 	mls	r4, r6, r5, r1
 80041ee:	3430      	adds	r4, #48	; 0x30
 80041f0:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80041f4:	460c      	mov	r4, r1
 80041f6:	2c63      	cmp	r4, #99	; 0x63
 80041f8:	f102 32ff 	add.w	r2, r2, #4294967295
 80041fc:	4629      	mov	r1, r5
 80041fe:	dcf1      	bgt.n	80041e4 <__exponent+0x22>
 8004200:	3130      	adds	r1, #48	; 0x30
 8004202:	f1ac 0402 	sub.w	r4, ip, #2
 8004206:	f802 1c01 	strb.w	r1, [r2, #-1]
 800420a:	1c41      	adds	r1, r0, #1
 800420c:	4622      	mov	r2, r4
 800420e:	42ba      	cmp	r2, r7
 8004210:	d30a      	bcc.n	8004228 <__exponent+0x66>
 8004212:	f10d 0209 	add.w	r2, sp, #9
 8004216:	eba2 020c 	sub.w	r2, r2, ip
 800421a:	42bc      	cmp	r4, r7
 800421c:	bf88      	it	hi
 800421e:	2200      	movhi	r2, #0
 8004220:	4413      	add	r3, r2
 8004222:	1a18      	subs	r0, r3, r0
 8004224:	b003      	add	sp, #12
 8004226:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004228:	f812 5b01 	ldrb.w	r5, [r2], #1
 800422c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004230:	e7ed      	b.n	800420e <__exponent+0x4c>
 8004232:	2330      	movs	r3, #48	; 0x30
 8004234:	3130      	adds	r1, #48	; 0x30
 8004236:	7083      	strb	r3, [r0, #2]
 8004238:	70c1      	strb	r1, [r0, #3]
 800423a:	1d03      	adds	r3, r0, #4
 800423c:	e7f1      	b.n	8004222 <__exponent+0x60>
	...

08004240 <_printf_float>:
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	b08b      	sub	sp, #44	; 0x2c
 8004246:	460c      	mov	r4, r1
 8004248:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 800424c:	4616      	mov	r6, r2
 800424e:	461f      	mov	r7, r3
 8004250:	4605      	mov	r5, r0
 8004252:	f000 fcbb 	bl	8004bcc <_localeconv_r>
 8004256:	f8d0 b000 	ldr.w	fp, [r0]
 800425a:	4658      	mov	r0, fp
 800425c:	f7fc f840 	bl	80002e0 <strlen>
 8004260:	2300      	movs	r3, #0
 8004262:	9308      	str	r3, [sp, #32]
 8004264:	f8d8 3000 	ldr.w	r3, [r8]
 8004268:	f894 9018 	ldrb.w	r9, [r4, #24]
 800426c:	6822      	ldr	r2, [r4, #0]
 800426e:	3307      	adds	r3, #7
 8004270:	f023 0307 	bic.w	r3, r3, #7
 8004274:	f103 0108 	add.w	r1, r3, #8
 8004278:	f8c8 1000 	str.w	r1, [r8]
 800427c:	ed93 0b00 	vldr	d0, [r3]
 8004280:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80044e0 <_printf_float+0x2a0>
 8004284:	eeb0 7bc0 	vabs.f64	d7, d0
 8004288:	eeb4 7b46 	vcmp.f64	d7, d6
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8004294:	4682      	mov	sl, r0
 8004296:	dd24      	ble.n	80042e2 <_printf_float+0xa2>
 8004298:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 800429c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a0:	d502      	bpl.n	80042a8 <_printf_float+0x68>
 80042a2:	232d      	movs	r3, #45	; 0x2d
 80042a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80042a8:	498f      	ldr	r1, [pc, #572]	; (80044e8 <_printf_float+0x2a8>)
 80042aa:	4b90      	ldr	r3, [pc, #576]	; (80044ec <_printf_float+0x2ac>)
 80042ac:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80042b0:	bf94      	ite	ls
 80042b2:	4688      	movls	r8, r1
 80042b4:	4698      	movhi	r8, r3
 80042b6:	2303      	movs	r3, #3
 80042b8:	6123      	str	r3, [r4, #16]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	2300      	movs	r3, #0
 80042c0:	6022      	str	r2, [r4, #0]
 80042c2:	9304      	str	r3, [sp, #16]
 80042c4:	9700      	str	r7, [sp, #0]
 80042c6:	4633      	mov	r3, r6
 80042c8:	aa09      	add	r2, sp, #36	; 0x24
 80042ca:	4621      	mov	r1, r4
 80042cc:	4628      	mov	r0, r5
 80042ce:	f000 f9d1 	bl	8004674 <_printf_common>
 80042d2:	3001      	adds	r0, #1
 80042d4:	f040 808a 	bne.w	80043ec <_printf_float+0x1ac>
 80042d8:	f04f 30ff 	mov.w	r0, #4294967295
 80042dc:	b00b      	add	sp, #44	; 0x2c
 80042de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042e2:	eeb4 0b40 	vcmp.f64	d0, d0
 80042e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042ea:	d709      	bvc.n	8004300 <_printf_float+0xc0>
 80042ec:	ee10 3a90 	vmov	r3, s1
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	bfbc      	itt	lt
 80042f4:	232d      	movlt	r3, #45	; 0x2d
 80042f6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80042fa:	497d      	ldr	r1, [pc, #500]	; (80044f0 <_printf_float+0x2b0>)
 80042fc:	4b7d      	ldr	r3, [pc, #500]	; (80044f4 <_printf_float+0x2b4>)
 80042fe:	e7d5      	b.n	80042ac <_printf_float+0x6c>
 8004300:	6863      	ldr	r3, [r4, #4]
 8004302:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004306:	9104      	str	r1, [sp, #16]
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	d13c      	bne.n	8004386 <_printf_float+0x146>
 800430c:	2306      	movs	r3, #6
 800430e:	6063      	str	r3, [r4, #4]
 8004310:	2300      	movs	r3, #0
 8004312:	9303      	str	r3, [sp, #12]
 8004314:	ab08      	add	r3, sp, #32
 8004316:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800431a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800431e:	ab07      	add	r3, sp, #28
 8004320:	6861      	ldr	r1, [r4, #4]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	f10d 031b 	add.w	r3, sp, #27
 800432a:	4628      	mov	r0, r5
 800432c:	f7ff fef7 	bl	800411e <__cvt>
 8004330:	9b04      	ldr	r3, [sp, #16]
 8004332:	9907      	ldr	r1, [sp, #28]
 8004334:	2b47      	cmp	r3, #71	; 0x47
 8004336:	4680      	mov	r8, r0
 8004338:	d108      	bne.n	800434c <_printf_float+0x10c>
 800433a:	1cc8      	adds	r0, r1, #3
 800433c:	db02      	blt.n	8004344 <_printf_float+0x104>
 800433e:	6863      	ldr	r3, [r4, #4]
 8004340:	4299      	cmp	r1, r3
 8004342:	dd41      	ble.n	80043c8 <_printf_float+0x188>
 8004344:	f1a9 0902 	sub.w	r9, r9, #2
 8004348:	fa5f f989 	uxtb.w	r9, r9
 800434c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004350:	d820      	bhi.n	8004394 <_printf_float+0x154>
 8004352:	3901      	subs	r1, #1
 8004354:	464a      	mov	r2, r9
 8004356:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800435a:	9107      	str	r1, [sp, #28]
 800435c:	f7ff ff31 	bl	80041c2 <__exponent>
 8004360:	9a08      	ldr	r2, [sp, #32]
 8004362:	9004      	str	r0, [sp, #16]
 8004364:	1813      	adds	r3, r2, r0
 8004366:	2a01      	cmp	r2, #1
 8004368:	6123      	str	r3, [r4, #16]
 800436a:	dc02      	bgt.n	8004372 <_printf_float+0x132>
 800436c:	6822      	ldr	r2, [r4, #0]
 800436e:	07d2      	lsls	r2, r2, #31
 8004370:	d501      	bpl.n	8004376 <_printf_float+0x136>
 8004372:	3301      	adds	r3, #1
 8004374:	6123      	str	r3, [r4, #16]
 8004376:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d0a2      	beq.n	80042c4 <_printf_float+0x84>
 800437e:	232d      	movs	r3, #45	; 0x2d
 8004380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004384:	e79e      	b.n	80042c4 <_printf_float+0x84>
 8004386:	9904      	ldr	r1, [sp, #16]
 8004388:	2947      	cmp	r1, #71	; 0x47
 800438a:	d1c1      	bne.n	8004310 <_printf_float+0xd0>
 800438c:	2b00      	cmp	r3, #0
 800438e:	d1bf      	bne.n	8004310 <_printf_float+0xd0>
 8004390:	2301      	movs	r3, #1
 8004392:	e7bc      	b.n	800430e <_printf_float+0xce>
 8004394:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8004398:	d118      	bne.n	80043cc <_printf_float+0x18c>
 800439a:	2900      	cmp	r1, #0
 800439c:	6863      	ldr	r3, [r4, #4]
 800439e:	dd0b      	ble.n	80043b8 <_printf_float+0x178>
 80043a0:	6121      	str	r1, [r4, #16]
 80043a2:	b913      	cbnz	r3, 80043aa <_printf_float+0x16a>
 80043a4:	6822      	ldr	r2, [r4, #0]
 80043a6:	07d0      	lsls	r0, r2, #31
 80043a8:	d502      	bpl.n	80043b0 <_printf_float+0x170>
 80043aa:	3301      	adds	r3, #1
 80043ac:	440b      	add	r3, r1
 80043ae:	6123      	str	r3, [r4, #16]
 80043b0:	2300      	movs	r3, #0
 80043b2:	65a1      	str	r1, [r4, #88]	; 0x58
 80043b4:	9304      	str	r3, [sp, #16]
 80043b6:	e7de      	b.n	8004376 <_printf_float+0x136>
 80043b8:	b913      	cbnz	r3, 80043c0 <_printf_float+0x180>
 80043ba:	6822      	ldr	r2, [r4, #0]
 80043bc:	07d2      	lsls	r2, r2, #31
 80043be:	d501      	bpl.n	80043c4 <_printf_float+0x184>
 80043c0:	3302      	adds	r3, #2
 80043c2:	e7f4      	b.n	80043ae <_printf_float+0x16e>
 80043c4:	2301      	movs	r3, #1
 80043c6:	e7f2      	b.n	80043ae <_printf_float+0x16e>
 80043c8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80043cc:	9b08      	ldr	r3, [sp, #32]
 80043ce:	4299      	cmp	r1, r3
 80043d0:	db05      	blt.n	80043de <_printf_float+0x19e>
 80043d2:	6823      	ldr	r3, [r4, #0]
 80043d4:	6121      	str	r1, [r4, #16]
 80043d6:	07d8      	lsls	r0, r3, #31
 80043d8:	d5ea      	bpl.n	80043b0 <_printf_float+0x170>
 80043da:	1c4b      	adds	r3, r1, #1
 80043dc:	e7e7      	b.n	80043ae <_printf_float+0x16e>
 80043de:	2900      	cmp	r1, #0
 80043e0:	bfd4      	ite	le
 80043e2:	f1c1 0202 	rsble	r2, r1, #2
 80043e6:	2201      	movgt	r2, #1
 80043e8:	4413      	add	r3, r2
 80043ea:	e7e0      	b.n	80043ae <_printf_float+0x16e>
 80043ec:	6823      	ldr	r3, [r4, #0]
 80043ee:	055a      	lsls	r2, r3, #21
 80043f0:	d407      	bmi.n	8004402 <_printf_float+0x1c2>
 80043f2:	6923      	ldr	r3, [r4, #16]
 80043f4:	4642      	mov	r2, r8
 80043f6:	4631      	mov	r1, r6
 80043f8:	4628      	mov	r0, r5
 80043fa:	47b8      	blx	r7
 80043fc:	3001      	adds	r0, #1
 80043fe:	d12a      	bne.n	8004456 <_printf_float+0x216>
 8004400:	e76a      	b.n	80042d8 <_printf_float+0x98>
 8004402:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004406:	f240 80e0 	bls.w	80045ca <_printf_float+0x38a>
 800440a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800440e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8004412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004416:	d133      	bne.n	8004480 <_printf_float+0x240>
 8004418:	4a37      	ldr	r2, [pc, #220]	; (80044f8 <_printf_float+0x2b8>)
 800441a:	2301      	movs	r3, #1
 800441c:	4631      	mov	r1, r6
 800441e:	4628      	mov	r0, r5
 8004420:	47b8      	blx	r7
 8004422:	3001      	adds	r0, #1
 8004424:	f43f af58 	beq.w	80042d8 <_printf_float+0x98>
 8004428:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800442c:	429a      	cmp	r2, r3
 800442e:	db02      	blt.n	8004436 <_printf_float+0x1f6>
 8004430:	6823      	ldr	r3, [r4, #0]
 8004432:	07d8      	lsls	r0, r3, #31
 8004434:	d50f      	bpl.n	8004456 <_printf_float+0x216>
 8004436:	4653      	mov	r3, sl
 8004438:	465a      	mov	r2, fp
 800443a:	4631      	mov	r1, r6
 800443c:	4628      	mov	r0, r5
 800443e:	47b8      	blx	r7
 8004440:	3001      	adds	r0, #1
 8004442:	f43f af49 	beq.w	80042d8 <_printf_float+0x98>
 8004446:	f04f 0800 	mov.w	r8, #0
 800444a:	f104 091a 	add.w	r9, r4, #26
 800444e:	9b08      	ldr	r3, [sp, #32]
 8004450:	3b01      	subs	r3, #1
 8004452:	4543      	cmp	r3, r8
 8004454:	dc09      	bgt.n	800446a <_printf_float+0x22a>
 8004456:	6823      	ldr	r3, [r4, #0]
 8004458:	079b      	lsls	r3, r3, #30
 800445a:	f100 8106 	bmi.w	800466a <_printf_float+0x42a>
 800445e:	68e0      	ldr	r0, [r4, #12]
 8004460:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004462:	4298      	cmp	r0, r3
 8004464:	bfb8      	it	lt
 8004466:	4618      	movlt	r0, r3
 8004468:	e738      	b.n	80042dc <_printf_float+0x9c>
 800446a:	2301      	movs	r3, #1
 800446c:	464a      	mov	r2, r9
 800446e:	4631      	mov	r1, r6
 8004470:	4628      	mov	r0, r5
 8004472:	47b8      	blx	r7
 8004474:	3001      	adds	r0, #1
 8004476:	f43f af2f 	beq.w	80042d8 <_printf_float+0x98>
 800447a:	f108 0801 	add.w	r8, r8, #1
 800447e:	e7e6      	b.n	800444e <_printf_float+0x20e>
 8004480:	9b07      	ldr	r3, [sp, #28]
 8004482:	2b00      	cmp	r3, #0
 8004484:	dc3a      	bgt.n	80044fc <_printf_float+0x2bc>
 8004486:	4a1c      	ldr	r2, [pc, #112]	; (80044f8 <_printf_float+0x2b8>)
 8004488:	2301      	movs	r3, #1
 800448a:	4631      	mov	r1, r6
 800448c:	4628      	mov	r0, r5
 800448e:	47b8      	blx	r7
 8004490:	3001      	adds	r0, #1
 8004492:	f43f af21 	beq.w	80042d8 <_printf_float+0x98>
 8004496:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 800449a:	4313      	orrs	r3, r2
 800449c:	d102      	bne.n	80044a4 <_printf_float+0x264>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	07d9      	lsls	r1, r3, #31
 80044a2:	d5d8      	bpl.n	8004456 <_printf_float+0x216>
 80044a4:	4653      	mov	r3, sl
 80044a6:	465a      	mov	r2, fp
 80044a8:	4631      	mov	r1, r6
 80044aa:	4628      	mov	r0, r5
 80044ac:	47b8      	blx	r7
 80044ae:	3001      	adds	r0, #1
 80044b0:	f43f af12 	beq.w	80042d8 <_printf_float+0x98>
 80044b4:	f04f 0900 	mov.w	r9, #0
 80044b8:	f104 0a1a 	add.w	sl, r4, #26
 80044bc:	9b07      	ldr	r3, [sp, #28]
 80044be:	425b      	negs	r3, r3
 80044c0:	454b      	cmp	r3, r9
 80044c2:	dc01      	bgt.n	80044c8 <_printf_float+0x288>
 80044c4:	9b08      	ldr	r3, [sp, #32]
 80044c6:	e795      	b.n	80043f4 <_printf_float+0x1b4>
 80044c8:	2301      	movs	r3, #1
 80044ca:	4652      	mov	r2, sl
 80044cc:	4631      	mov	r1, r6
 80044ce:	4628      	mov	r0, r5
 80044d0:	47b8      	blx	r7
 80044d2:	3001      	adds	r0, #1
 80044d4:	f43f af00 	beq.w	80042d8 <_printf_float+0x98>
 80044d8:	f109 0901 	add.w	r9, r9, #1
 80044dc:	e7ee      	b.n	80044bc <_printf_float+0x27c>
 80044de:	bf00      	nop
 80044e0:	ffffffff 	.word	0xffffffff
 80044e4:	7fefffff 	.word	0x7fefffff
 80044e8:	08006d08 	.word	0x08006d08
 80044ec:	08006d0c 	.word	0x08006d0c
 80044f0:	08006d10 	.word	0x08006d10
 80044f4:	08006d14 	.word	0x08006d14
 80044f8:	08006d18 	.word	0x08006d18
 80044fc:	9a08      	ldr	r2, [sp, #32]
 80044fe:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004500:	429a      	cmp	r2, r3
 8004502:	bfa8      	it	ge
 8004504:	461a      	movge	r2, r3
 8004506:	2a00      	cmp	r2, #0
 8004508:	4691      	mov	r9, r2
 800450a:	dc38      	bgt.n	800457e <_printf_float+0x33e>
 800450c:	2300      	movs	r3, #0
 800450e:	9305      	str	r3, [sp, #20]
 8004510:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004514:	f104 021a 	add.w	r2, r4, #26
 8004518:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800451a:	9905      	ldr	r1, [sp, #20]
 800451c:	9304      	str	r3, [sp, #16]
 800451e:	eba3 0309 	sub.w	r3, r3, r9
 8004522:	428b      	cmp	r3, r1
 8004524:	dc33      	bgt.n	800458e <_printf_float+0x34e>
 8004526:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800452a:	429a      	cmp	r2, r3
 800452c:	db3c      	blt.n	80045a8 <_printf_float+0x368>
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	07da      	lsls	r2, r3, #31
 8004532:	d439      	bmi.n	80045a8 <_printf_float+0x368>
 8004534:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8004538:	eba2 0903 	sub.w	r9, r2, r3
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	1ad2      	subs	r2, r2, r3
 8004540:	4591      	cmp	r9, r2
 8004542:	bfa8      	it	ge
 8004544:	4691      	movge	r9, r2
 8004546:	f1b9 0f00 	cmp.w	r9, #0
 800454a:	dc35      	bgt.n	80045b8 <_printf_float+0x378>
 800454c:	f04f 0800 	mov.w	r8, #0
 8004550:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004554:	f104 0a1a 	add.w	sl, r4, #26
 8004558:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	eba3 0309 	sub.w	r3, r3, r9
 8004562:	4543      	cmp	r3, r8
 8004564:	f77f af77 	ble.w	8004456 <_printf_float+0x216>
 8004568:	2301      	movs	r3, #1
 800456a:	4652      	mov	r2, sl
 800456c:	4631      	mov	r1, r6
 800456e:	4628      	mov	r0, r5
 8004570:	47b8      	blx	r7
 8004572:	3001      	adds	r0, #1
 8004574:	f43f aeb0 	beq.w	80042d8 <_printf_float+0x98>
 8004578:	f108 0801 	add.w	r8, r8, #1
 800457c:	e7ec      	b.n	8004558 <_printf_float+0x318>
 800457e:	4613      	mov	r3, r2
 8004580:	4631      	mov	r1, r6
 8004582:	4642      	mov	r2, r8
 8004584:	4628      	mov	r0, r5
 8004586:	47b8      	blx	r7
 8004588:	3001      	adds	r0, #1
 800458a:	d1bf      	bne.n	800450c <_printf_float+0x2cc>
 800458c:	e6a4      	b.n	80042d8 <_printf_float+0x98>
 800458e:	2301      	movs	r3, #1
 8004590:	4631      	mov	r1, r6
 8004592:	4628      	mov	r0, r5
 8004594:	9204      	str	r2, [sp, #16]
 8004596:	47b8      	blx	r7
 8004598:	3001      	adds	r0, #1
 800459a:	f43f ae9d 	beq.w	80042d8 <_printf_float+0x98>
 800459e:	9b05      	ldr	r3, [sp, #20]
 80045a0:	9a04      	ldr	r2, [sp, #16]
 80045a2:	3301      	adds	r3, #1
 80045a4:	9305      	str	r3, [sp, #20]
 80045a6:	e7b7      	b.n	8004518 <_printf_float+0x2d8>
 80045a8:	4653      	mov	r3, sl
 80045aa:	465a      	mov	r2, fp
 80045ac:	4631      	mov	r1, r6
 80045ae:	4628      	mov	r0, r5
 80045b0:	47b8      	blx	r7
 80045b2:	3001      	adds	r0, #1
 80045b4:	d1be      	bne.n	8004534 <_printf_float+0x2f4>
 80045b6:	e68f      	b.n	80042d8 <_printf_float+0x98>
 80045b8:	9a04      	ldr	r2, [sp, #16]
 80045ba:	464b      	mov	r3, r9
 80045bc:	4442      	add	r2, r8
 80045be:	4631      	mov	r1, r6
 80045c0:	4628      	mov	r0, r5
 80045c2:	47b8      	blx	r7
 80045c4:	3001      	adds	r0, #1
 80045c6:	d1c1      	bne.n	800454c <_printf_float+0x30c>
 80045c8:	e686      	b.n	80042d8 <_printf_float+0x98>
 80045ca:	9a08      	ldr	r2, [sp, #32]
 80045cc:	2a01      	cmp	r2, #1
 80045ce:	dc01      	bgt.n	80045d4 <_printf_float+0x394>
 80045d0:	07db      	lsls	r3, r3, #31
 80045d2:	d537      	bpl.n	8004644 <_printf_float+0x404>
 80045d4:	2301      	movs	r3, #1
 80045d6:	4642      	mov	r2, r8
 80045d8:	4631      	mov	r1, r6
 80045da:	4628      	mov	r0, r5
 80045dc:	47b8      	blx	r7
 80045de:	3001      	adds	r0, #1
 80045e0:	f43f ae7a 	beq.w	80042d8 <_printf_float+0x98>
 80045e4:	4653      	mov	r3, sl
 80045e6:	465a      	mov	r2, fp
 80045e8:	4631      	mov	r1, r6
 80045ea:	4628      	mov	r0, r5
 80045ec:	47b8      	blx	r7
 80045ee:	3001      	adds	r0, #1
 80045f0:	f43f ae72 	beq.w	80042d8 <_printf_float+0x98>
 80045f4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80045f8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80045fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004600:	9b08      	ldr	r3, [sp, #32]
 8004602:	d01a      	beq.n	800463a <_printf_float+0x3fa>
 8004604:	3b01      	subs	r3, #1
 8004606:	f108 0201 	add.w	r2, r8, #1
 800460a:	4631      	mov	r1, r6
 800460c:	4628      	mov	r0, r5
 800460e:	47b8      	blx	r7
 8004610:	3001      	adds	r0, #1
 8004612:	d10e      	bne.n	8004632 <_printf_float+0x3f2>
 8004614:	e660      	b.n	80042d8 <_printf_float+0x98>
 8004616:	2301      	movs	r3, #1
 8004618:	464a      	mov	r2, r9
 800461a:	4631      	mov	r1, r6
 800461c:	4628      	mov	r0, r5
 800461e:	47b8      	blx	r7
 8004620:	3001      	adds	r0, #1
 8004622:	f43f ae59 	beq.w	80042d8 <_printf_float+0x98>
 8004626:	f108 0801 	add.w	r8, r8, #1
 800462a:	9b08      	ldr	r3, [sp, #32]
 800462c:	3b01      	subs	r3, #1
 800462e:	4543      	cmp	r3, r8
 8004630:	dcf1      	bgt.n	8004616 <_printf_float+0x3d6>
 8004632:	9b04      	ldr	r3, [sp, #16]
 8004634:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004638:	e6dd      	b.n	80043f6 <_printf_float+0x1b6>
 800463a:	f04f 0800 	mov.w	r8, #0
 800463e:	f104 091a 	add.w	r9, r4, #26
 8004642:	e7f2      	b.n	800462a <_printf_float+0x3ea>
 8004644:	2301      	movs	r3, #1
 8004646:	4642      	mov	r2, r8
 8004648:	e7df      	b.n	800460a <_printf_float+0x3ca>
 800464a:	2301      	movs	r3, #1
 800464c:	464a      	mov	r2, r9
 800464e:	4631      	mov	r1, r6
 8004650:	4628      	mov	r0, r5
 8004652:	47b8      	blx	r7
 8004654:	3001      	adds	r0, #1
 8004656:	f43f ae3f 	beq.w	80042d8 <_printf_float+0x98>
 800465a:	f108 0801 	add.w	r8, r8, #1
 800465e:	68e3      	ldr	r3, [r4, #12]
 8004660:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004662:	1a5b      	subs	r3, r3, r1
 8004664:	4543      	cmp	r3, r8
 8004666:	dcf0      	bgt.n	800464a <_printf_float+0x40a>
 8004668:	e6f9      	b.n	800445e <_printf_float+0x21e>
 800466a:	f04f 0800 	mov.w	r8, #0
 800466e:	f104 0919 	add.w	r9, r4, #25
 8004672:	e7f4      	b.n	800465e <_printf_float+0x41e>

08004674 <_printf_common>:
 8004674:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004678:	4616      	mov	r6, r2
 800467a:	4699      	mov	r9, r3
 800467c:	688a      	ldr	r2, [r1, #8]
 800467e:	690b      	ldr	r3, [r1, #16]
 8004680:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004684:	4293      	cmp	r3, r2
 8004686:	bfb8      	it	lt
 8004688:	4613      	movlt	r3, r2
 800468a:	6033      	str	r3, [r6, #0]
 800468c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004690:	4607      	mov	r7, r0
 8004692:	460c      	mov	r4, r1
 8004694:	b10a      	cbz	r2, 800469a <_printf_common+0x26>
 8004696:	3301      	adds	r3, #1
 8004698:	6033      	str	r3, [r6, #0]
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	0699      	lsls	r1, r3, #26
 800469e:	bf42      	ittt	mi
 80046a0:	6833      	ldrmi	r3, [r6, #0]
 80046a2:	3302      	addmi	r3, #2
 80046a4:	6033      	strmi	r3, [r6, #0]
 80046a6:	6825      	ldr	r5, [r4, #0]
 80046a8:	f015 0506 	ands.w	r5, r5, #6
 80046ac:	d106      	bne.n	80046bc <_printf_common+0x48>
 80046ae:	f104 0a19 	add.w	sl, r4, #25
 80046b2:	68e3      	ldr	r3, [r4, #12]
 80046b4:	6832      	ldr	r2, [r6, #0]
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	42ab      	cmp	r3, r5
 80046ba:	dc26      	bgt.n	800470a <_printf_common+0x96>
 80046bc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80046c0:	1e13      	subs	r3, r2, #0
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	bf18      	it	ne
 80046c6:	2301      	movne	r3, #1
 80046c8:	0692      	lsls	r2, r2, #26
 80046ca:	d42b      	bmi.n	8004724 <_printf_common+0xb0>
 80046cc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80046d0:	4649      	mov	r1, r9
 80046d2:	4638      	mov	r0, r7
 80046d4:	47c0      	blx	r8
 80046d6:	3001      	adds	r0, #1
 80046d8:	d01e      	beq.n	8004718 <_printf_common+0xa4>
 80046da:	6823      	ldr	r3, [r4, #0]
 80046dc:	6922      	ldr	r2, [r4, #16]
 80046de:	f003 0306 	and.w	r3, r3, #6
 80046e2:	2b04      	cmp	r3, #4
 80046e4:	bf02      	ittt	eq
 80046e6:	68e5      	ldreq	r5, [r4, #12]
 80046e8:	6833      	ldreq	r3, [r6, #0]
 80046ea:	1aed      	subeq	r5, r5, r3
 80046ec:	68a3      	ldr	r3, [r4, #8]
 80046ee:	bf0c      	ite	eq
 80046f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80046f4:	2500      	movne	r5, #0
 80046f6:	4293      	cmp	r3, r2
 80046f8:	bfc4      	itt	gt
 80046fa:	1a9b      	subgt	r3, r3, r2
 80046fc:	18ed      	addgt	r5, r5, r3
 80046fe:	2600      	movs	r6, #0
 8004700:	341a      	adds	r4, #26
 8004702:	42b5      	cmp	r5, r6
 8004704:	d11a      	bne.n	800473c <_printf_common+0xc8>
 8004706:	2000      	movs	r0, #0
 8004708:	e008      	b.n	800471c <_printf_common+0xa8>
 800470a:	2301      	movs	r3, #1
 800470c:	4652      	mov	r2, sl
 800470e:	4649      	mov	r1, r9
 8004710:	4638      	mov	r0, r7
 8004712:	47c0      	blx	r8
 8004714:	3001      	adds	r0, #1
 8004716:	d103      	bne.n	8004720 <_printf_common+0xac>
 8004718:	f04f 30ff 	mov.w	r0, #4294967295
 800471c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004720:	3501      	adds	r5, #1
 8004722:	e7c6      	b.n	80046b2 <_printf_common+0x3e>
 8004724:	18e1      	adds	r1, r4, r3
 8004726:	1c5a      	adds	r2, r3, #1
 8004728:	2030      	movs	r0, #48	; 0x30
 800472a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800472e:	4422      	add	r2, r4
 8004730:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004734:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004738:	3302      	adds	r3, #2
 800473a:	e7c7      	b.n	80046cc <_printf_common+0x58>
 800473c:	2301      	movs	r3, #1
 800473e:	4622      	mov	r2, r4
 8004740:	4649      	mov	r1, r9
 8004742:	4638      	mov	r0, r7
 8004744:	47c0      	blx	r8
 8004746:	3001      	adds	r0, #1
 8004748:	d0e6      	beq.n	8004718 <_printf_common+0xa4>
 800474a:	3601      	adds	r6, #1
 800474c:	e7d9      	b.n	8004702 <_printf_common+0x8e>
	...

08004750 <_printf_i>:
 8004750:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004754:	7e0f      	ldrb	r7, [r1, #24]
 8004756:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004758:	2f78      	cmp	r7, #120	; 0x78
 800475a:	4691      	mov	r9, r2
 800475c:	4680      	mov	r8, r0
 800475e:	460c      	mov	r4, r1
 8004760:	469a      	mov	sl, r3
 8004762:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004766:	d807      	bhi.n	8004778 <_printf_i+0x28>
 8004768:	2f62      	cmp	r7, #98	; 0x62
 800476a:	d80a      	bhi.n	8004782 <_printf_i+0x32>
 800476c:	2f00      	cmp	r7, #0
 800476e:	f000 80d4 	beq.w	800491a <_printf_i+0x1ca>
 8004772:	2f58      	cmp	r7, #88	; 0x58
 8004774:	f000 80c0 	beq.w	80048f8 <_printf_i+0x1a8>
 8004778:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800477c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004780:	e03a      	b.n	80047f8 <_printf_i+0xa8>
 8004782:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004786:	2b15      	cmp	r3, #21
 8004788:	d8f6      	bhi.n	8004778 <_printf_i+0x28>
 800478a:	a101      	add	r1, pc, #4	; (adr r1, 8004790 <_printf_i+0x40>)
 800478c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004790:	080047e9 	.word	0x080047e9
 8004794:	080047fd 	.word	0x080047fd
 8004798:	08004779 	.word	0x08004779
 800479c:	08004779 	.word	0x08004779
 80047a0:	08004779 	.word	0x08004779
 80047a4:	08004779 	.word	0x08004779
 80047a8:	080047fd 	.word	0x080047fd
 80047ac:	08004779 	.word	0x08004779
 80047b0:	08004779 	.word	0x08004779
 80047b4:	08004779 	.word	0x08004779
 80047b8:	08004779 	.word	0x08004779
 80047bc:	08004901 	.word	0x08004901
 80047c0:	08004829 	.word	0x08004829
 80047c4:	080048bb 	.word	0x080048bb
 80047c8:	08004779 	.word	0x08004779
 80047cc:	08004779 	.word	0x08004779
 80047d0:	08004923 	.word	0x08004923
 80047d4:	08004779 	.word	0x08004779
 80047d8:	08004829 	.word	0x08004829
 80047dc:	08004779 	.word	0x08004779
 80047e0:	08004779 	.word	0x08004779
 80047e4:	080048c3 	.word	0x080048c3
 80047e8:	682b      	ldr	r3, [r5, #0]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	602a      	str	r2, [r5, #0]
 80047f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047f4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047f8:	2301      	movs	r3, #1
 80047fa:	e09f      	b.n	800493c <_printf_i+0x1ec>
 80047fc:	6820      	ldr	r0, [r4, #0]
 80047fe:	682b      	ldr	r3, [r5, #0]
 8004800:	0607      	lsls	r7, r0, #24
 8004802:	f103 0104 	add.w	r1, r3, #4
 8004806:	6029      	str	r1, [r5, #0]
 8004808:	d501      	bpl.n	800480e <_printf_i+0xbe>
 800480a:	681e      	ldr	r6, [r3, #0]
 800480c:	e003      	b.n	8004816 <_printf_i+0xc6>
 800480e:	0646      	lsls	r6, r0, #25
 8004810:	d5fb      	bpl.n	800480a <_printf_i+0xba>
 8004812:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004816:	2e00      	cmp	r6, #0
 8004818:	da03      	bge.n	8004822 <_printf_i+0xd2>
 800481a:	232d      	movs	r3, #45	; 0x2d
 800481c:	4276      	negs	r6, r6
 800481e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004822:	485a      	ldr	r0, [pc, #360]	; (800498c <_printf_i+0x23c>)
 8004824:	230a      	movs	r3, #10
 8004826:	e012      	b.n	800484e <_printf_i+0xfe>
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	6820      	ldr	r0, [r4, #0]
 800482c:	1d19      	adds	r1, r3, #4
 800482e:	6029      	str	r1, [r5, #0]
 8004830:	0605      	lsls	r5, r0, #24
 8004832:	d501      	bpl.n	8004838 <_printf_i+0xe8>
 8004834:	681e      	ldr	r6, [r3, #0]
 8004836:	e002      	b.n	800483e <_printf_i+0xee>
 8004838:	0641      	lsls	r1, r0, #25
 800483a:	d5fb      	bpl.n	8004834 <_printf_i+0xe4>
 800483c:	881e      	ldrh	r6, [r3, #0]
 800483e:	4853      	ldr	r0, [pc, #332]	; (800498c <_printf_i+0x23c>)
 8004840:	2f6f      	cmp	r7, #111	; 0x6f
 8004842:	bf0c      	ite	eq
 8004844:	2308      	moveq	r3, #8
 8004846:	230a      	movne	r3, #10
 8004848:	2100      	movs	r1, #0
 800484a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800484e:	6865      	ldr	r5, [r4, #4]
 8004850:	60a5      	str	r5, [r4, #8]
 8004852:	2d00      	cmp	r5, #0
 8004854:	bfa2      	ittt	ge
 8004856:	6821      	ldrge	r1, [r4, #0]
 8004858:	f021 0104 	bicge.w	r1, r1, #4
 800485c:	6021      	strge	r1, [r4, #0]
 800485e:	b90e      	cbnz	r6, 8004864 <_printf_i+0x114>
 8004860:	2d00      	cmp	r5, #0
 8004862:	d04b      	beq.n	80048fc <_printf_i+0x1ac>
 8004864:	4615      	mov	r5, r2
 8004866:	fbb6 f1f3 	udiv	r1, r6, r3
 800486a:	fb03 6711 	mls	r7, r3, r1, r6
 800486e:	5dc7      	ldrb	r7, [r0, r7]
 8004870:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004874:	4637      	mov	r7, r6
 8004876:	42bb      	cmp	r3, r7
 8004878:	460e      	mov	r6, r1
 800487a:	d9f4      	bls.n	8004866 <_printf_i+0x116>
 800487c:	2b08      	cmp	r3, #8
 800487e:	d10b      	bne.n	8004898 <_printf_i+0x148>
 8004880:	6823      	ldr	r3, [r4, #0]
 8004882:	07de      	lsls	r6, r3, #31
 8004884:	d508      	bpl.n	8004898 <_printf_i+0x148>
 8004886:	6923      	ldr	r3, [r4, #16]
 8004888:	6861      	ldr	r1, [r4, #4]
 800488a:	4299      	cmp	r1, r3
 800488c:	bfde      	ittt	le
 800488e:	2330      	movle	r3, #48	; 0x30
 8004890:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004894:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004898:	1b52      	subs	r2, r2, r5
 800489a:	6122      	str	r2, [r4, #16]
 800489c:	f8cd a000 	str.w	sl, [sp]
 80048a0:	464b      	mov	r3, r9
 80048a2:	aa03      	add	r2, sp, #12
 80048a4:	4621      	mov	r1, r4
 80048a6:	4640      	mov	r0, r8
 80048a8:	f7ff fee4 	bl	8004674 <_printf_common>
 80048ac:	3001      	adds	r0, #1
 80048ae:	d14a      	bne.n	8004946 <_printf_i+0x1f6>
 80048b0:	f04f 30ff 	mov.w	r0, #4294967295
 80048b4:	b004      	add	sp, #16
 80048b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048ba:	6823      	ldr	r3, [r4, #0]
 80048bc:	f043 0320 	orr.w	r3, r3, #32
 80048c0:	6023      	str	r3, [r4, #0]
 80048c2:	4833      	ldr	r0, [pc, #204]	; (8004990 <_printf_i+0x240>)
 80048c4:	2778      	movs	r7, #120	; 0x78
 80048c6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80048ca:	6823      	ldr	r3, [r4, #0]
 80048cc:	6829      	ldr	r1, [r5, #0]
 80048ce:	061f      	lsls	r7, r3, #24
 80048d0:	f851 6b04 	ldr.w	r6, [r1], #4
 80048d4:	d402      	bmi.n	80048dc <_printf_i+0x18c>
 80048d6:	065f      	lsls	r7, r3, #25
 80048d8:	bf48      	it	mi
 80048da:	b2b6      	uxthmi	r6, r6
 80048dc:	07df      	lsls	r7, r3, #31
 80048de:	bf48      	it	mi
 80048e0:	f043 0320 	orrmi.w	r3, r3, #32
 80048e4:	6029      	str	r1, [r5, #0]
 80048e6:	bf48      	it	mi
 80048e8:	6023      	strmi	r3, [r4, #0]
 80048ea:	b91e      	cbnz	r6, 80048f4 <_printf_i+0x1a4>
 80048ec:	6823      	ldr	r3, [r4, #0]
 80048ee:	f023 0320 	bic.w	r3, r3, #32
 80048f2:	6023      	str	r3, [r4, #0]
 80048f4:	2310      	movs	r3, #16
 80048f6:	e7a7      	b.n	8004848 <_printf_i+0xf8>
 80048f8:	4824      	ldr	r0, [pc, #144]	; (800498c <_printf_i+0x23c>)
 80048fa:	e7e4      	b.n	80048c6 <_printf_i+0x176>
 80048fc:	4615      	mov	r5, r2
 80048fe:	e7bd      	b.n	800487c <_printf_i+0x12c>
 8004900:	682b      	ldr	r3, [r5, #0]
 8004902:	6826      	ldr	r6, [r4, #0]
 8004904:	6961      	ldr	r1, [r4, #20]
 8004906:	1d18      	adds	r0, r3, #4
 8004908:	6028      	str	r0, [r5, #0]
 800490a:	0635      	lsls	r5, r6, #24
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	d501      	bpl.n	8004914 <_printf_i+0x1c4>
 8004910:	6019      	str	r1, [r3, #0]
 8004912:	e002      	b.n	800491a <_printf_i+0x1ca>
 8004914:	0670      	lsls	r0, r6, #25
 8004916:	d5fb      	bpl.n	8004910 <_printf_i+0x1c0>
 8004918:	8019      	strh	r1, [r3, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	6123      	str	r3, [r4, #16]
 800491e:	4615      	mov	r5, r2
 8004920:	e7bc      	b.n	800489c <_printf_i+0x14c>
 8004922:	682b      	ldr	r3, [r5, #0]
 8004924:	1d1a      	adds	r2, r3, #4
 8004926:	602a      	str	r2, [r5, #0]
 8004928:	681d      	ldr	r5, [r3, #0]
 800492a:	6862      	ldr	r2, [r4, #4]
 800492c:	2100      	movs	r1, #0
 800492e:	4628      	mov	r0, r5
 8004930:	f7fb fc86 	bl	8000240 <memchr>
 8004934:	b108      	cbz	r0, 800493a <_printf_i+0x1ea>
 8004936:	1b40      	subs	r0, r0, r5
 8004938:	6060      	str	r0, [r4, #4]
 800493a:	6863      	ldr	r3, [r4, #4]
 800493c:	6123      	str	r3, [r4, #16]
 800493e:	2300      	movs	r3, #0
 8004940:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004944:	e7aa      	b.n	800489c <_printf_i+0x14c>
 8004946:	6923      	ldr	r3, [r4, #16]
 8004948:	462a      	mov	r2, r5
 800494a:	4649      	mov	r1, r9
 800494c:	4640      	mov	r0, r8
 800494e:	47d0      	blx	sl
 8004950:	3001      	adds	r0, #1
 8004952:	d0ad      	beq.n	80048b0 <_printf_i+0x160>
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	079b      	lsls	r3, r3, #30
 8004958:	d413      	bmi.n	8004982 <_printf_i+0x232>
 800495a:	68e0      	ldr	r0, [r4, #12]
 800495c:	9b03      	ldr	r3, [sp, #12]
 800495e:	4298      	cmp	r0, r3
 8004960:	bfb8      	it	lt
 8004962:	4618      	movlt	r0, r3
 8004964:	e7a6      	b.n	80048b4 <_printf_i+0x164>
 8004966:	2301      	movs	r3, #1
 8004968:	4632      	mov	r2, r6
 800496a:	4649      	mov	r1, r9
 800496c:	4640      	mov	r0, r8
 800496e:	47d0      	blx	sl
 8004970:	3001      	adds	r0, #1
 8004972:	d09d      	beq.n	80048b0 <_printf_i+0x160>
 8004974:	3501      	adds	r5, #1
 8004976:	68e3      	ldr	r3, [r4, #12]
 8004978:	9903      	ldr	r1, [sp, #12]
 800497a:	1a5b      	subs	r3, r3, r1
 800497c:	42ab      	cmp	r3, r5
 800497e:	dcf2      	bgt.n	8004966 <_printf_i+0x216>
 8004980:	e7eb      	b.n	800495a <_printf_i+0x20a>
 8004982:	2500      	movs	r5, #0
 8004984:	f104 0619 	add.w	r6, r4, #25
 8004988:	e7f5      	b.n	8004976 <_printf_i+0x226>
 800498a:	bf00      	nop
 800498c:	08006d1a 	.word	0x08006d1a
 8004990:	08006d2b 	.word	0x08006d2b

08004994 <std>:
 8004994:	2300      	movs	r3, #0
 8004996:	b510      	push	{r4, lr}
 8004998:	4604      	mov	r4, r0
 800499a:	e9c0 3300 	strd	r3, r3, [r0]
 800499e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80049a2:	6083      	str	r3, [r0, #8]
 80049a4:	8181      	strh	r1, [r0, #12]
 80049a6:	6643      	str	r3, [r0, #100]	; 0x64
 80049a8:	81c2      	strh	r2, [r0, #14]
 80049aa:	6183      	str	r3, [r0, #24]
 80049ac:	4619      	mov	r1, r3
 80049ae:	2208      	movs	r2, #8
 80049b0:	305c      	adds	r0, #92	; 0x5c
 80049b2:	f000 f902 	bl	8004bba <memset>
 80049b6:	4b05      	ldr	r3, [pc, #20]	; (80049cc <std+0x38>)
 80049b8:	6263      	str	r3, [r4, #36]	; 0x24
 80049ba:	4b05      	ldr	r3, [pc, #20]	; (80049d0 <std+0x3c>)
 80049bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80049be:	4b05      	ldr	r3, [pc, #20]	; (80049d4 <std+0x40>)
 80049c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80049c2:	4b05      	ldr	r3, [pc, #20]	; (80049d8 <std+0x44>)
 80049c4:	6224      	str	r4, [r4, #32]
 80049c6:	6323      	str	r3, [r4, #48]	; 0x30
 80049c8:	bd10      	pop	{r4, pc}
 80049ca:	bf00      	nop
 80049cc:	08004b35 	.word	0x08004b35
 80049d0:	08004b57 	.word	0x08004b57
 80049d4:	08004b8f 	.word	0x08004b8f
 80049d8:	08004bb3 	.word	0x08004bb3

080049dc <stdio_exit_handler>:
 80049dc:	4a02      	ldr	r2, [pc, #8]	; (80049e8 <stdio_exit_handler+0xc>)
 80049de:	4903      	ldr	r1, [pc, #12]	; (80049ec <stdio_exit_handler+0x10>)
 80049e0:	4803      	ldr	r0, [pc, #12]	; (80049f0 <stdio_exit_handler+0x14>)
 80049e2:	f000 b869 	b.w	8004ab8 <_fwalk_sglue>
 80049e6:	bf00      	nop
 80049e8:	2000000c 	.word	0x2000000c
 80049ec:	08006555 	.word	0x08006555
 80049f0:	20000018 	.word	0x20000018

080049f4 <cleanup_stdio>:
 80049f4:	6841      	ldr	r1, [r0, #4]
 80049f6:	4b0c      	ldr	r3, [pc, #48]	; (8004a28 <cleanup_stdio+0x34>)
 80049f8:	4299      	cmp	r1, r3
 80049fa:	b510      	push	{r4, lr}
 80049fc:	4604      	mov	r4, r0
 80049fe:	d001      	beq.n	8004a04 <cleanup_stdio+0x10>
 8004a00:	f001 fda8 	bl	8006554 <_fflush_r>
 8004a04:	68a1      	ldr	r1, [r4, #8]
 8004a06:	4b09      	ldr	r3, [pc, #36]	; (8004a2c <cleanup_stdio+0x38>)
 8004a08:	4299      	cmp	r1, r3
 8004a0a:	d002      	beq.n	8004a12 <cleanup_stdio+0x1e>
 8004a0c:	4620      	mov	r0, r4
 8004a0e:	f001 fda1 	bl	8006554 <_fflush_r>
 8004a12:	68e1      	ldr	r1, [r4, #12]
 8004a14:	4b06      	ldr	r3, [pc, #24]	; (8004a30 <cleanup_stdio+0x3c>)
 8004a16:	4299      	cmp	r1, r3
 8004a18:	d004      	beq.n	8004a24 <cleanup_stdio+0x30>
 8004a1a:	4620      	mov	r0, r4
 8004a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a20:	f001 bd98 	b.w	8006554 <_fflush_r>
 8004a24:	bd10      	pop	{r4, pc}
 8004a26:	bf00      	nop
 8004a28:	20000470 	.word	0x20000470
 8004a2c:	200004d8 	.word	0x200004d8
 8004a30:	20000540 	.word	0x20000540

08004a34 <global_stdio_init.part.0>:
 8004a34:	b510      	push	{r4, lr}
 8004a36:	4b0b      	ldr	r3, [pc, #44]	; (8004a64 <global_stdio_init.part.0+0x30>)
 8004a38:	4c0b      	ldr	r4, [pc, #44]	; (8004a68 <global_stdio_init.part.0+0x34>)
 8004a3a:	4a0c      	ldr	r2, [pc, #48]	; (8004a6c <global_stdio_init.part.0+0x38>)
 8004a3c:	601a      	str	r2, [r3, #0]
 8004a3e:	4620      	mov	r0, r4
 8004a40:	2200      	movs	r2, #0
 8004a42:	2104      	movs	r1, #4
 8004a44:	f7ff ffa6 	bl	8004994 <std>
 8004a48:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	2109      	movs	r1, #9
 8004a50:	f7ff ffa0 	bl	8004994 <std>
 8004a54:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004a58:	2202      	movs	r2, #2
 8004a5a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a5e:	2112      	movs	r1, #18
 8004a60:	f7ff bf98 	b.w	8004994 <std>
 8004a64:	200005a8 	.word	0x200005a8
 8004a68:	20000470 	.word	0x20000470
 8004a6c:	080049dd 	.word	0x080049dd

08004a70 <__sfp_lock_acquire>:
 8004a70:	4801      	ldr	r0, [pc, #4]	; (8004a78 <__sfp_lock_acquire+0x8>)
 8004a72:	f000 b91f 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004a76:	bf00      	nop
 8004a78:	200005b1 	.word	0x200005b1

08004a7c <__sfp_lock_release>:
 8004a7c:	4801      	ldr	r0, [pc, #4]	; (8004a84 <__sfp_lock_release+0x8>)
 8004a7e:	f000 b91a 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004a82:	bf00      	nop
 8004a84:	200005b1 	.word	0x200005b1

08004a88 <__sinit>:
 8004a88:	b510      	push	{r4, lr}
 8004a8a:	4604      	mov	r4, r0
 8004a8c:	f7ff fff0 	bl	8004a70 <__sfp_lock_acquire>
 8004a90:	6a23      	ldr	r3, [r4, #32]
 8004a92:	b11b      	cbz	r3, 8004a9c <__sinit+0x14>
 8004a94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a98:	f7ff bff0 	b.w	8004a7c <__sfp_lock_release>
 8004a9c:	4b04      	ldr	r3, [pc, #16]	; (8004ab0 <__sinit+0x28>)
 8004a9e:	6223      	str	r3, [r4, #32]
 8004aa0:	4b04      	ldr	r3, [pc, #16]	; (8004ab4 <__sinit+0x2c>)
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d1f5      	bne.n	8004a94 <__sinit+0xc>
 8004aa8:	f7ff ffc4 	bl	8004a34 <global_stdio_init.part.0>
 8004aac:	e7f2      	b.n	8004a94 <__sinit+0xc>
 8004aae:	bf00      	nop
 8004ab0:	080049f5 	.word	0x080049f5
 8004ab4:	200005a8 	.word	0x200005a8

08004ab8 <_fwalk_sglue>:
 8004ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004abc:	4607      	mov	r7, r0
 8004abe:	4688      	mov	r8, r1
 8004ac0:	4614      	mov	r4, r2
 8004ac2:	2600      	movs	r6, #0
 8004ac4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004ac8:	f1b9 0901 	subs.w	r9, r9, #1
 8004acc:	d505      	bpl.n	8004ada <_fwalk_sglue+0x22>
 8004ace:	6824      	ldr	r4, [r4, #0]
 8004ad0:	2c00      	cmp	r4, #0
 8004ad2:	d1f7      	bne.n	8004ac4 <_fwalk_sglue+0xc>
 8004ad4:	4630      	mov	r0, r6
 8004ad6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004ada:	89ab      	ldrh	r3, [r5, #12]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d907      	bls.n	8004af0 <_fwalk_sglue+0x38>
 8004ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	d003      	beq.n	8004af0 <_fwalk_sglue+0x38>
 8004ae8:	4629      	mov	r1, r5
 8004aea:	4638      	mov	r0, r7
 8004aec:	47c0      	blx	r8
 8004aee:	4306      	orrs	r6, r0
 8004af0:	3568      	adds	r5, #104	; 0x68
 8004af2:	e7e9      	b.n	8004ac8 <_fwalk_sglue+0x10>

08004af4 <siprintf>:
 8004af4:	b40e      	push	{r1, r2, r3}
 8004af6:	b500      	push	{lr}
 8004af8:	b09c      	sub	sp, #112	; 0x70
 8004afa:	ab1d      	add	r3, sp, #116	; 0x74
 8004afc:	9002      	str	r0, [sp, #8]
 8004afe:	9006      	str	r0, [sp, #24]
 8004b00:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004b04:	4809      	ldr	r0, [pc, #36]	; (8004b2c <siprintf+0x38>)
 8004b06:	9107      	str	r1, [sp, #28]
 8004b08:	9104      	str	r1, [sp, #16]
 8004b0a:	4909      	ldr	r1, [pc, #36]	; (8004b30 <siprintf+0x3c>)
 8004b0c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004b10:	9105      	str	r1, [sp, #20]
 8004b12:	6800      	ldr	r0, [r0, #0]
 8004b14:	9301      	str	r3, [sp, #4]
 8004b16:	a902      	add	r1, sp, #8
 8004b18:	f001 fb98 	bl	800624c <_svfiprintf_r>
 8004b1c:	9b02      	ldr	r3, [sp, #8]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	701a      	strb	r2, [r3, #0]
 8004b22:	b01c      	add	sp, #112	; 0x70
 8004b24:	f85d eb04 	ldr.w	lr, [sp], #4
 8004b28:	b003      	add	sp, #12
 8004b2a:	4770      	bx	lr
 8004b2c:	20000064 	.word	0x20000064
 8004b30:	ffff0208 	.word	0xffff0208

08004b34 <__sread>:
 8004b34:	b510      	push	{r4, lr}
 8004b36:	460c      	mov	r4, r1
 8004b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b3c:	f000 f86c 	bl	8004c18 <_read_r>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	bfab      	itete	ge
 8004b44:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004b46:	89a3      	ldrhlt	r3, [r4, #12]
 8004b48:	181b      	addge	r3, r3, r0
 8004b4a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004b4e:	bfac      	ite	ge
 8004b50:	6563      	strge	r3, [r4, #84]	; 0x54
 8004b52:	81a3      	strhlt	r3, [r4, #12]
 8004b54:	bd10      	pop	{r4, pc}

08004b56 <__swrite>:
 8004b56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5a:	461f      	mov	r7, r3
 8004b5c:	898b      	ldrh	r3, [r1, #12]
 8004b5e:	05db      	lsls	r3, r3, #23
 8004b60:	4605      	mov	r5, r0
 8004b62:	460c      	mov	r4, r1
 8004b64:	4616      	mov	r6, r2
 8004b66:	d505      	bpl.n	8004b74 <__swrite+0x1e>
 8004b68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b6c:	2302      	movs	r3, #2
 8004b6e:	2200      	movs	r2, #0
 8004b70:	f000 f840 	bl	8004bf4 <_lseek_r>
 8004b74:	89a3      	ldrh	r3, [r4, #12]
 8004b76:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b7a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b7e:	81a3      	strh	r3, [r4, #12]
 8004b80:	4632      	mov	r2, r6
 8004b82:	463b      	mov	r3, r7
 8004b84:	4628      	mov	r0, r5
 8004b86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b8a:	f000 b857 	b.w	8004c3c <_write_r>

08004b8e <__sseek>:
 8004b8e:	b510      	push	{r4, lr}
 8004b90:	460c      	mov	r4, r1
 8004b92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b96:	f000 f82d 	bl	8004bf4 <_lseek_r>
 8004b9a:	1c43      	adds	r3, r0, #1
 8004b9c:	89a3      	ldrh	r3, [r4, #12]
 8004b9e:	bf15      	itete	ne
 8004ba0:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ba2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ba6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004baa:	81a3      	strheq	r3, [r4, #12]
 8004bac:	bf18      	it	ne
 8004bae:	81a3      	strhne	r3, [r4, #12]
 8004bb0:	bd10      	pop	{r4, pc}

08004bb2 <__sclose>:
 8004bb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004bb6:	f000 b80d 	b.w	8004bd4 <_close_r>

08004bba <memset>:
 8004bba:	4402      	add	r2, r0
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	4293      	cmp	r3, r2
 8004bc0:	d100      	bne.n	8004bc4 <memset+0xa>
 8004bc2:	4770      	bx	lr
 8004bc4:	f803 1b01 	strb.w	r1, [r3], #1
 8004bc8:	e7f9      	b.n	8004bbe <memset+0x4>
	...

08004bcc <_localeconv_r>:
 8004bcc:	4800      	ldr	r0, [pc, #0]	; (8004bd0 <_localeconv_r+0x4>)
 8004bce:	4770      	bx	lr
 8004bd0:	20000158 	.word	0x20000158

08004bd4 <_close_r>:
 8004bd4:	b538      	push	{r3, r4, r5, lr}
 8004bd6:	4d06      	ldr	r5, [pc, #24]	; (8004bf0 <_close_r+0x1c>)
 8004bd8:	2300      	movs	r3, #0
 8004bda:	4604      	mov	r4, r0
 8004bdc:	4608      	mov	r0, r1
 8004bde:	602b      	str	r3, [r5, #0]
 8004be0:	f7fc f983 	bl	8000eea <_close>
 8004be4:	1c43      	adds	r3, r0, #1
 8004be6:	d102      	bne.n	8004bee <_close_r+0x1a>
 8004be8:	682b      	ldr	r3, [r5, #0]
 8004bea:	b103      	cbz	r3, 8004bee <_close_r+0x1a>
 8004bec:	6023      	str	r3, [r4, #0]
 8004bee:	bd38      	pop	{r3, r4, r5, pc}
 8004bf0:	200005ac 	.word	0x200005ac

08004bf4 <_lseek_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4d07      	ldr	r5, [pc, #28]	; (8004c14 <_lseek_r+0x20>)
 8004bf8:	4604      	mov	r4, r0
 8004bfa:	4608      	mov	r0, r1
 8004bfc:	4611      	mov	r1, r2
 8004bfe:	2200      	movs	r2, #0
 8004c00:	602a      	str	r2, [r5, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fc f998 	bl	8000f38 <_lseek>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_lseek_r+0x1e>
 8004c0c:	682b      	ldr	r3, [r5, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_lseek_r+0x1e>
 8004c10:	6023      	str	r3, [r4, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	200005ac 	.word	0x200005ac

08004c18 <_read_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	4d07      	ldr	r5, [pc, #28]	; (8004c38 <_read_r+0x20>)
 8004c1c:	4604      	mov	r4, r0
 8004c1e:	4608      	mov	r0, r1
 8004c20:	4611      	mov	r1, r2
 8004c22:	2200      	movs	r2, #0
 8004c24:	602a      	str	r2, [r5, #0]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f7fc f926 	bl	8000e78 <_read>
 8004c2c:	1c43      	adds	r3, r0, #1
 8004c2e:	d102      	bne.n	8004c36 <_read_r+0x1e>
 8004c30:	682b      	ldr	r3, [r5, #0]
 8004c32:	b103      	cbz	r3, 8004c36 <_read_r+0x1e>
 8004c34:	6023      	str	r3, [r4, #0]
 8004c36:	bd38      	pop	{r3, r4, r5, pc}
 8004c38:	200005ac 	.word	0x200005ac

08004c3c <_write_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	4d07      	ldr	r5, [pc, #28]	; (8004c5c <_write_r+0x20>)
 8004c40:	4604      	mov	r4, r0
 8004c42:	4608      	mov	r0, r1
 8004c44:	4611      	mov	r1, r2
 8004c46:	2200      	movs	r2, #0
 8004c48:	602a      	str	r2, [r5, #0]
 8004c4a:	461a      	mov	r2, r3
 8004c4c:	f7fc f931 	bl	8000eb2 <_write>
 8004c50:	1c43      	adds	r3, r0, #1
 8004c52:	d102      	bne.n	8004c5a <_write_r+0x1e>
 8004c54:	682b      	ldr	r3, [r5, #0]
 8004c56:	b103      	cbz	r3, 8004c5a <_write_r+0x1e>
 8004c58:	6023      	str	r3, [r4, #0]
 8004c5a:	bd38      	pop	{r3, r4, r5, pc}
 8004c5c:	200005ac 	.word	0x200005ac

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	; (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000064 	.word	0x20000064

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	; (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	; (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	; (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	; (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f002 f80c 	bl	8006c9c <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	08007084 	.word	0x08007084
 8004ca8:	08007084 	.word	0x08007084
 8004cac:	08007084 	.word	0x08007084
 8004cb0:	08007088 	.word	0x08007088

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <quorem>:
 8004cb8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	6903      	ldr	r3, [r0, #16]
 8004cbe:	690c      	ldr	r4, [r1, #16]
 8004cc0:	42a3      	cmp	r3, r4
 8004cc2:	4607      	mov	r7, r0
 8004cc4:	db7e      	blt.n	8004dc4 <quorem+0x10c>
 8004cc6:	3c01      	subs	r4, #1
 8004cc8:	f101 0814 	add.w	r8, r1, #20
 8004ccc:	f100 0514 	add.w	r5, r0, #20
 8004cd0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004cd4:	9301      	str	r3, [sp, #4]
 8004cd6:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004cda:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004ce6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cea:	fbb2 f6f3 	udiv	r6, r2, r3
 8004cee:	d331      	bcc.n	8004d54 <quorem+0x9c>
 8004cf0:	f04f 0e00 	mov.w	lr, #0
 8004cf4:	4640      	mov	r0, r8
 8004cf6:	46ac      	mov	ip, r5
 8004cf8:	46f2      	mov	sl, lr
 8004cfa:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cfe:	b293      	uxth	r3, r2
 8004d00:	fb06 e303 	mla	r3, r6, r3, lr
 8004d04:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d08:	0c1a      	lsrs	r2, r3, #16
 8004d0a:	b29b      	uxth	r3, r3
 8004d0c:	ebaa 0303 	sub.w	r3, sl, r3
 8004d10:	f8dc a000 	ldr.w	sl, [ip]
 8004d14:	fa13 f38a 	uxtah	r3, r3, sl
 8004d18:	fb06 220e 	mla	r2, r6, lr, r2
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	9b00      	ldr	r3, [sp, #0]
 8004d20:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004d24:	b292      	uxth	r2, r2
 8004d26:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004d2a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d2e:	f8bd 3000 	ldrh.w	r3, [sp]
 8004d32:	4581      	cmp	r9, r0
 8004d34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d38:	f84c 3b04 	str.w	r3, [ip], #4
 8004d3c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d40:	d2db      	bcs.n	8004cfa <quorem+0x42>
 8004d42:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d46:	b92b      	cbnz	r3, 8004d54 <quorem+0x9c>
 8004d48:	9b01      	ldr	r3, [sp, #4]
 8004d4a:	3b04      	subs	r3, #4
 8004d4c:	429d      	cmp	r5, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	d32c      	bcc.n	8004dac <quorem+0xf4>
 8004d52:	613c      	str	r4, [r7, #16]
 8004d54:	4638      	mov	r0, r7
 8004d56:	f001 f91f 	bl	8005f98 <__mcmp>
 8004d5a:	2800      	cmp	r0, #0
 8004d5c:	db22      	blt.n	8004da4 <quorem+0xec>
 8004d5e:	3601      	adds	r6, #1
 8004d60:	4629      	mov	r1, r5
 8004d62:	2000      	movs	r0, #0
 8004d64:	f858 2b04 	ldr.w	r2, [r8], #4
 8004d68:	f8d1 c000 	ldr.w	ip, [r1]
 8004d6c:	b293      	uxth	r3, r2
 8004d6e:	1ac3      	subs	r3, r0, r3
 8004d70:	0c12      	lsrs	r2, r2, #16
 8004d72:	fa13 f38c 	uxtah	r3, r3, ip
 8004d76:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8004d7a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d84:	45c1      	cmp	r9, r8
 8004d86:	f841 3b04 	str.w	r3, [r1], #4
 8004d8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8004d8e:	d2e9      	bcs.n	8004d64 <quorem+0xac>
 8004d90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d98:	b922      	cbnz	r2, 8004da4 <quorem+0xec>
 8004d9a:	3b04      	subs	r3, #4
 8004d9c:	429d      	cmp	r5, r3
 8004d9e:	461a      	mov	r2, r3
 8004da0:	d30a      	bcc.n	8004db8 <quorem+0x100>
 8004da2:	613c      	str	r4, [r7, #16]
 8004da4:	4630      	mov	r0, r6
 8004da6:	b003      	add	sp, #12
 8004da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004dac:	6812      	ldr	r2, [r2, #0]
 8004dae:	3b04      	subs	r3, #4
 8004db0:	2a00      	cmp	r2, #0
 8004db2:	d1ce      	bne.n	8004d52 <quorem+0x9a>
 8004db4:	3c01      	subs	r4, #1
 8004db6:	e7c9      	b.n	8004d4c <quorem+0x94>
 8004db8:	6812      	ldr	r2, [r2, #0]
 8004dba:	3b04      	subs	r3, #4
 8004dbc:	2a00      	cmp	r2, #0
 8004dbe:	d1f0      	bne.n	8004da2 <quorem+0xea>
 8004dc0:	3c01      	subs	r4, #1
 8004dc2:	e7eb      	b.n	8004d9c <quorem+0xe4>
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	e7ee      	b.n	8004da6 <quorem+0xee>

08004dc8 <_dtoa_r>:
 8004dc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dcc:	ed2d 8b02 	vpush	{d8}
 8004dd0:	69c5      	ldr	r5, [r0, #28]
 8004dd2:	b091      	sub	sp, #68	; 0x44
 8004dd4:	ed8d 0b02 	vstr	d0, [sp, #8]
 8004dd8:	ec59 8b10 	vmov	r8, r9, d0
 8004ddc:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8004dde:	9106      	str	r1, [sp, #24]
 8004de0:	4606      	mov	r6, r0
 8004de2:	9208      	str	r2, [sp, #32]
 8004de4:	930c      	str	r3, [sp, #48]	; 0x30
 8004de6:	b975      	cbnz	r5, 8004e06 <_dtoa_r+0x3e>
 8004de8:	2010      	movs	r0, #16
 8004dea:	f000 fda5 	bl	8005938 <malloc>
 8004dee:	4602      	mov	r2, r0
 8004df0:	61f0      	str	r0, [r6, #28]
 8004df2:	b920      	cbnz	r0, 8004dfe <_dtoa_r+0x36>
 8004df4:	4ba6      	ldr	r3, [pc, #664]	; (8005090 <_dtoa_r+0x2c8>)
 8004df6:	21ef      	movs	r1, #239	; 0xef
 8004df8:	48a6      	ldr	r0, [pc, #664]	; (8005094 <_dtoa_r+0x2cc>)
 8004dfa:	f001 fc0b 	bl	8006614 <__assert_func>
 8004dfe:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004e02:	6005      	str	r5, [r0, #0]
 8004e04:	60c5      	str	r5, [r0, #12]
 8004e06:	69f3      	ldr	r3, [r6, #28]
 8004e08:	6819      	ldr	r1, [r3, #0]
 8004e0a:	b151      	cbz	r1, 8004e22 <_dtoa_r+0x5a>
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	604a      	str	r2, [r1, #4]
 8004e10:	2301      	movs	r3, #1
 8004e12:	4093      	lsls	r3, r2
 8004e14:	608b      	str	r3, [r1, #8]
 8004e16:	4630      	mov	r0, r6
 8004e18:	f000 fe82 	bl	8005b20 <_Bfree>
 8004e1c:	69f3      	ldr	r3, [r6, #28]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	f1b9 0300 	subs.w	r3, r9, #0
 8004e26:	bfbb      	ittet	lt
 8004e28:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004e2c:	9303      	strlt	r3, [sp, #12]
 8004e2e:	2300      	movge	r3, #0
 8004e30:	2201      	movlt	r2, #1
 8004e32:	bfac      	ite	ge
 8004e34:	6023      	strge	r3, [r4, #0]
 8004e36:	6022      	strlt	r2, [r4, #0]
 8004e38:	4b97      	ldr	r3, [pc, #604]	; (8005098 <_dtoa_r+0x2d0>)
 8004e3a:	9c03      	ldr	r4, [sp, #12]
 8004e3c:	43a3      	bics	r3, r4
 8004e3e:	d11c      	bne.n	8004e7a <_dtoa_r+0xb2>
 8004e40:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e42:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8004e4c:	ea53 0308 	orrs.w	r3, r3, r8
 8004e50:	f000 84fb 	beq.w	800584a <_dtoa_r+0xa82>
 8004e54:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e56:	b963      	cbnz	r3, 8004e72 <_dtoa_r+0xaa>
 8004e58:	4b90      	ldr	r3, [pc, #576]	; (800509c <_dtoa_r+0x2d4>)
 8004e5a:	e020      	b.n	8004e9e <_dtoa_r+0xd6>
 8004e5c:	4b90      	ldr	r3, [pc, #576]	; (80050a0 <_dtoa_r+0x2d8>)
 8004e5e:	9301      	str	r3, [sp, #4]
 8004e60:	3308      	adds	r3, #8
 8004e62:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e64:	6013      	str	r3, [r2, #0]
 8004e66:	9801      	ldr	r0, [sp, #4]
 8004e68:	b011      	add	sp, #68	; 0x44
 8004e6a:	ecbd 8b02 	vpop	{d8}
 8004e6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e72:	4b8a      	ldr	r3, [pc, #552]	; (800509c <_dtoa_r+0x2d4>)
 8004e74:	9301      	str	r3, [sp, #4]
 8004e76:	3303      	adds	r3, #3
 8004e78:	e7f3      	b.n	8004e62 <_dtoa_r+0x9a>
 8004e7a:	ed9d 8b02 	vldr	d8, [sp, #8]
 8004e7e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8004e82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004e86:	d10c      	bne.n	8004ea2 <_dtoa_r+0xda>
 8004e88:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	6013      	str	r3, [r2, #0]
 8004e8e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 84d7 	beq.w	8005844 <_dtoa_r+0xa7c>
 8004e96:	4b83      	ldr	r3, [pc, #524]	; (80050a4 <_dtoa_r+0x2dc>)
 8004e98:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	3b01      	subs	r3, #1
 8004e9e:	9301      	str	r3, [sp, #4]
 8004ea0:	e7e1      	b.n	8004e66 <_dtoa_r+0x9e>
 8004ea2:	aa0e      	add	r2, sp, #56	; 0x38
 8004ea4:	a90f      	add	r1, sp, #60	; 0x3c
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	eeb0 0b48 	vmov.f64	d0, d8
 8004eac:	f001 f91a 	bl	80060e4 <__d2b>
 8004eb0:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8004eb4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004eb6:	4605      	mov	r5, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d046      	beq.n	8004f4a <_dtoa_r+0x182>
 8004ebc:	eeb0 7b48 	vmov.f64	d7, d8
 8004ec0:	ee18 1a90 	vmov	r1, s17
 8004ec4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8004ec8:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 8004ecc:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ed0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004ed4:	2000      	movs	r0, #0
 8004ed6:	ee07 1a90 	vmov	s15, r1
 8004eda:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 8004ede:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005078 <_dtoa_r+0x2b0>
 8004ee2:	ee37 7b46 	vsub.f64	d7, d7, d6
 8004ee6:	ed9f 6b66 	vldr	d6, [pc, #408]	; 8005080 <_dtoa_r+0x2b8>
 8004eea:	eea7 6b05 	vfma.f64	d6, d7, d5
 8004eee:	ed9f 5b66 	vldr	d5, [pc, #408]	; 8005088 <_dtoa_r+0x2c0>
 8004ef2:	ee07 3a90 	vmov	s15, r3
 8004ef6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8004efa:	eeb0 7b46 	vmov.f64	d7, d6
 8004efe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8004f02:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8004f06:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8004f0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f0e:	ee16 ba90 	vmov	fp, s13
 8004f12:	9009      	str	r0, [sp, #36]	; 0x24
 8004f14:	d508      	bpl.n	8004f28 <_dtoa_r+0x160>
 8004f16:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8004f1a:	eeb4 6b47 	vcmp.f64	d6, d7
 8004f1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f22:	bf18      	it	ne
 8004f24:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8004f28:	f1bb 0f16 	cmp.w	fp, #22
 8004f2c:	d82b      	bhi.n	8004f86 <_dtoa_r+0x1be>
 8004f2e:	495e      	ldr	r1, [pc, #376]	; (80050a8 <_dtoa_r+0x2e0>)
 8004f30:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8004f34:	ed91 7b00 	vldr	d7, [r1]
 8004f38:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8004f3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f40:	d501      	bpl.n	8004f46 <_dtoa_r+0x17e>
 8004f42:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004f46:	2100      	movs	r1, #0
 8004f48:	e01e      	b.n	8004f88 <_dtoa_r+0x1c0>
 8004f4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004f4c:	4413      	add	r3, r2
 8004f4e:	f203 4132 	addw	r1, r3, #1074	; 0x432
 8004f52:	2920      	cmp	r1, #32
 8004f54:	bfc1      	itttt	gt
 8004f56:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 8004f5a:	408c      	lslgt	r4, r1
 8004f5c:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 8004f60:	fa28 f101 	lsrgt.w	r1, r8, r1
 8004f64:	bfd6      	itet	le
 8004f66:	f1c1 0120 	rsble	r1, r1, #32
 8004f6a:	4321      	orrgt	r1, r4
 8004f6c:	fa08 f101 	lslle.w	r1, r8, r1
 8004f70:	ee07 1a90 	vmov	s15, r1
 8004f74:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	ee17 1a90 	vmov	r1, s15
 8004f7e:	2001      	movs	r0, #1
 8004f80:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004f84:	e7a7      	b.n	8004ed6 <_dtoa_r+0x10e>
 8004f86:	2101      	movs	r1, #1
 8004f88:	1ad2      	subs	r2, r2, r3
 8004f8a:	1e53      	subs	r3, r2, #1
 8004f8c:	9305      	str	r3, [sp, #20]
 8004f8e:	bf45      	ittet	mi
 8004f90:	f1c2 0301 	rsbmi	r3, r2, #1
 8004f94:	9304      	strmi	r3, [sp, #16]
 8004f96:	2300      	movpl	r3, #0
 8004f98:	2300      	movmi	r3, #0
 8004f9a:	bf4c      	ite	mi
 8004f9c:	9305      	strmi	r3, [sp, #20]
 8004f9e:	9304      	strpl	r3, [sp, #16]
 8004fa0:	f1bb 0f00 	cmp.w	fp, #0
 8004fa4:	910b      	str	r1, [sp, #44]	; 0x2c
 8004fa6:	db18      	blt.n	8004fda <_dtoa_r+0x212>
 8004fa8:	9b05      	ldr	r3, [sp, #20]
 8004faa:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004fae:	445b      	add	r3, fp
 8004fb0:	9305      	str	r3, [sp, #20]
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	9a06      	ldr	r2, [sp, #24]
 8004fb6:	2a09      	cmp	r2, #9
 8004fb8:	d848      	bhi.n	800504c <_dtoa_r+0x284>
 8004fba:	2a05      	cmp	r2, #5
 8004fbc:	bfc4      	itt	gt
 8004fbe:	3a04      	subgt	r2, #4
 8004fc0:	9206      	strgt	r2, [sp, #24]
 8004fc2:	9a06      	ldr	r2, [sp, #24]
 8004fc4:	f1a2 0202 	sub.w	r2, r2, #2
 8004fc8:	bfcc      	ite	gt
 8004fca:	2400      	movgt	r4, #0
 8004fcc:	2401      	movle	r4, #1
 8004fce:	2a03      	cmp	r2, #3
 8004fd0:	d847      	bhi.n	8005062 <_dtoa_r+0x29a>
 8004fd2:	e8df f002 	tbb	[pc, r2]
 8004fd6:	2d0b      	.short	0x2d0b
 8004fd8:	392b      	.short	0x392b
 8004fda:	9b04      	ldr	r3, [sp, #16]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	eba3 030b 	sub.w	r3, r3, fp
 8004fe2:	9304      	str	r3, [sp, #16]
 8004fe4:	920a      	str	r2, [sp, #40]	; 0x28
 8004fe6:	f1cb 0300 	rsb	r3, fp, #0
 8004fea:	e7e3      	b.n	8004fb4 <_dtoa_r+0x1ec>
 8004fec:	2200      	movs	r2, #0
 8004fee:	9207      	str	r2, [sp, #28]
 8004ff0:	9a08      	ldr	r2, [sp, #32]
 8004ff2:	2a00      	cmp	r2, #0
 8004ff4:	dc38      	bgt.n	8005068 <_dtoa_r+0x2a0>
 8004ff6:	f04f 0a01 	mov.w	sl, #1
 8004ffa:	46d1      	mov	r9, sl
 8004ffc:	4652      	mov	r2, sl
 8004ffe:	f8cd a020 	str.w	sl, [sp, #32]
 8005002:	69f7      	ldr	r7, [r6, #28]
 8005004:	2100      	movs	r1, #0
 8005006:	2004      	movs	r0, #4
 8005008:	f100 0c14 	add.w	ip, r0, #20
 800500c:	4594      	cmp	ip, r2
 800500e:	d930      	bls.n	8005072 <_dtoa_r+0x2aa>
 8005010:	6079      	str	r1, [r7, #4]
 8005012:	4630      	mov	r0, r6
 8005014:	930d      	str	r3, [sp, #52]	; 0x34
 8005016:	f000 fd43 	bl	8005aa0 <_Balloc>
 800501a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800501c:	9001      	str	r0, [sp, #4]
 800501e:	4602      	mov	r2, r0
 8005020:	2800      	cmp	r0, #0
 8005022:	d145      	bne.n	80050b0 <_dtoa_r+0x2e8>
 8005024:	4b21      	ldr	r3, [pc, #132]	; (80050ac <_dtoa_r+0x2e4>)
 8005026:	f240 11af 	movw	r1, #431	; 0x1af
 800502a:	e6e5      	b.n	8004df8 <_dtoa_r+0x30>
 800502c:	2201      	movs	r2, #1
 800502e:	e7de      	b.n	8004fee <_dtoa_r+0x226>
 8005030:	2200      	movs	r2, #0
 8005032:	9207      	str	r2, [sp, #28]
 8005034:	9a08      	ldr	r2, [sp, #32]
 8005036:	eb0b 0a02 	add.w	sl, fp, r2
 800503a:	f10a 0901 	add.w	r9, sl, #1
 800503e:	464a      	mov	r2, r9
 8005040:	2a01      	cmp	r2, #1
 8005042:	bfb8      	it	lt
 8005044:	2201      	movlt	r2, #1
 8005046:	e7dc      	b.n	8005002 <_dtoa_r+0x23a>
 8005048:	2201      	movs	r2, #1
 800504a:	e7f2      	b.n	8005032 <_dtoa_r+0x26a>
 800504c:	2401      	movs	r4, #1
 800504e:	2200      	movs	r2, #0
 8005050:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8005054:	f04f 3aff 	mov.w	sl, #4294967295
 8005058:	2100      	movs	r1, #0
 800505a:	46d1      	mov	r9, sl
 800505c:	2212      	movs	r2, #18
 800505e:	9108      	str	r1, [sp, #32]
 8005060:	e7cf      	b.n	8005002 <_dtoa_r+0x23a>
 8005062:	2201      	movs	r2, #1
 8005064:	9207      	str	r2, [sp, #28]
 8005066:	e7f5      	b.n	8005054 <_dtoa_r+0x28c>
 8005068:	f8dd a020 	ldr.w	sl, [sp, #32]
 800506c:	46d1      	mov	r9, sl
 800506e:	4652      	mov	r2, sl
 8005070:	e7c7      	b.n	8005002 <_dtoa_r+0x23a>
 8005072:	3101      	adds	r1, #1
 8005074:	0040      	lsls	r0, r0, #1
 8005076:	e7c7      	b.n	8005008 <_dtoa_r+0x240>
 8005078:	636f4361 	.word	0x636f4361
 800507c:	3fd287a7 	.word	0x3fd287a7
 8005080:	8b60c8b3 	.word	0x8b60c8b3
 8005084:	3fc68a28 	.word	0x3fc68a28
 8005088:	509f79fb 	.word	0x509f79fb
 800508c:	3fd34413 	.word	0x3fd34413
 8005090:	08006d49 	.word	0x08006d49
 8005094:	08006d60 	.word	0x08006d60
 8005098:	7ff00000 	.word	0x7ff00000
 800509c:	08006d45 	.word	0x08006d45
 80050a0:	08006d3c 	.word	0x08006d3c
 80050a4:	08006d19 	.word	0x08006d19
 80050a8:	08006e50 	.word	0x08006e50
 80050ac:	08006db8 	.word	0x08006db8
 80050b0:	69f2      	ldr	r2, [r6, #28]
 80050b2:	9901      	ldr	r1, [sp, #4]
 80050b4:	6011      	str	r1, [r2, #0]
 80050b6:	f1b9 0f0e 	cmp.w	r9, #14
 80050ba:	d86c      	bhi.n	8005196 <_dtoa_r+0x3ce>
 80050bc:	2c00      	cmp	r4, #0
 80050be:	d06a      	beq.n	8005196 <_dtoa_r+0x3ce>
 80050c0:	f1bb 0f00 	cmp.w	fp, #0
 80050c4:	f340 80a0 	ble.w	8005208 <_dtoa_r+0x440>
 80050c8:	4ac1      	ldr	r2, [pc, #772]	; (80053d0 <_dtoa_r+0x608>)
 80050ca:	f00b 010f 	and.w	r1, fp, #15
 80050ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80050d2:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80050d6:	ed92 7b00 	vldr	d7, [r2]
 80050da:	ea4f 122b 	mov.w	r2, fp, asr #4
 80050de:	f000 8087 	beq.w	80051f0 <_dtoa_r+0x428>
 80050e2:	49bc      	ldr	r1, [pc, #752]	; (80053d4 <_dtoa_r+0x60c>)
 80050e4:	ed91 6b08 	vldr	d6, [r1, #32]
 80050e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80050ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80050f0:	f002 020f 	and.w	r2, r2, #15
 80050f4:	2103      	movs	r1, #3
 80050f6:	48b7      	ldr	r0, [pc, #732]	; (80053d4 <_dtoa_r+0x60c>)
 80050f8:	2a00      	cmp	r2, #0
 80050fa:	d17b      	bne.n	80051f4 <_dtoa_r+0x42c>
 80050fc:	ed9d 6b02 	vldr	d6, [sp, #8]
 8005100:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8005104:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005108:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800510a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800510e:	2a00      	cmp	r2, #0
 8005110:	f000 80a0 	beq.w	8005254 <_dtoa_r+0x48c>
 8005114:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8005118:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800511c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005120:	f140 8098 	bpl.w	8005254 <_dtoa_r+0x48c>
 8005124:	f1b9 0f00 	cmp.w	r9, #0
 8005128:	f000 8094 	beq.w	8005254 <_dtoa_r+0x48c>
 800512c:	f1ba 0f00 	cmp.w	sl, #0
 8005130:	dd2f      	ble.n	8005192 <_dtoa_r+0x3ca>
 8005132:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8005136:	ee27 7b06 	vmul.f64	d7, d7, d6
 800513a:	ed8d 7b02 	vstr	d7, [sp, #8]
 800513e:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005142:	3101      	adds	r1, #1
 8005144:	4654      	mov	r4, sl
 8005146:	ed9d 6b02 	vldr	d6, [sp, #8]
 800514a:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 800514e:	ee07 1a90 	vmov	s15, r1
 8005152:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8005156:	eea7 5b06 	vfma.f64	d5, d7, d6
 800515a:	ee15 7a90 	vmov	r7, s11
 800515e:	ec51 0b15 	vmov	r0, r1, d5
 8005162:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 8005166:	2c00      	cmp	r4, #0
 8005168:	d177      	bne.n	800525a <_dtoa_r+0x492>
 800516a:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 800516e:	ee36 6b47 	vsub.f64	d6, d6, d7
 8005172:	ec41 0b17 	vmov	d7, r0, r1
 8005176:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800517a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800517e:	f300 826a 	bgt.w	8005656 <_dtoa_r+0x88e>
 8005182:	eeb1 7b47 	vneg.f64	d7, d7
 8005186:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800518a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800518e:	f100 8260 	bmi.w	8005652 <_dtoa_r+0x88a>
 8005192:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005196:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8005198:	2a00      	cmp	r2, #0
 800519a:	f2c0 811d 	blt.w	80053d8 <_dtoa_r+0x610>
 800519e:	f1bb 0f0e 	cmp.w	fp, #14
 80051a2:	f300 8119 	bgt.w	80053d8 <_dtoa_r+0x610>
 80051a6:	4b8a      	ldr	r3, [pc, #552]	; (80053d0 <_dtoa_r+0x608>)
 80051a8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80051ac:	ed93 6b00 	vldr	d6, [r3]
 80051b0:	9b08      	ldr	r3, [sp, #32]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	f280 80b7 	bge.w	8005326 <_dtoa_r+0x55e>
 80051b8:	f1b9 0f00 	cmp.w	r9, #0
 80051bc:	f300 80b3 	bgt.w	8005326 <_dtoa_r+0x55e>
 80051c0:	f040 8246 	bne.w	8005650 <_dtoa_r+0x888>
 80051c4:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80051c8:	ee26 6b07 	vmul.f64	d6, d6, d7
 80051cc:	ed9d 7b02 	vldr	d7, [sp, #8]
 80051d0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80051d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80051d8:	464c      	mov	r4, r9
 80051da:	464f      	mov	r7, r9
 80051dc:	f280 821c 	bge.w	8005618 <_dtoa_r+0x850>
 80051e0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80051e4:	2331      	movs	r3, #49	; 0x31
 80051e6:	f808 3b01 	strb.w	r3, [r8], #1
 80051ea:	f10b 0b01 	add.w	fp, fp, #1
 80051ee:	e218      	b.n	8005622 <_dtoa_r+0x85a>
 80051f0:	2102      	movs	r1, #2
 80051f2:	e780      	b.n	80050f6 <_dtoa_r+0x32e>
 80051f4:	07d4      	lsls	r4, r2, #31
 80051f6:	d504      	bpl.n	8005202 <_dtoa_r+0x43a>
 80051f8:	ed90 6b00 	vldr	d6, [r0]
 80051fc:	3101      	adds	r1, #1
 80051fe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8005202:	1052      	asrs	r2, r2, #1
 8005204:	3008      	adds	r0, #8
 8005206:	e777      	b.n	80050f8 <_dtoa_r+0x330>
 8005208:	d022      	beq.n	8005250 <_dtoa_r+0x488>
 800520a:	f1cb 0200 	rsb	r2, fp, #0
 800520e:	4970      	ldr	r1, [pc, #448]	; (80053d0 <_dtoa_r+0x608>)
 8005210:	f002 000f 	and.w	r0, r2, #15
 8005214:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8005218:	ed91 7b00 	vldr	d7, [r1]
 800521c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8005220:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005224:	486b      	ldr	r0, [pc, #428]	; (80053d4 <_dtoa_r+0x60c>)
 8005226:	1112      	asrs	r2, r2, #4
 8005228:	2400      	movs	r4, #0
 800522a:	2102      	movs	r1, #2
 800522c:	b92a      	cbnz	r2, 800523a <_dtoa_r+0x472>
 800522e:	2c00      	cmp	r4, #0
 8005230:	f43f af6a 	beq.w	8005108 <_dtoa_r+0x340>
 8005234:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005238:	e766      	b.n	8005108 <_dtoa_r+0x340>
 800523a:	07d7      	lsls	r7, r2, #31
 800523c:	d505      	bpl.n	800524a <_dtoa_r+0x482>
 800523e:	ed90 6b00 	vldr	d6, [r0]
 8005242:	3101      	adds	r1, #1
 8005244:	2401      	movs	r4, #1
 8005246:	ee27 7b06 	vmul.f64	d7, d7, d6
 800524a:	1052      	asrs	r2, r2, #1
 800524c:	3008      	adds	r0, #8
 800524e:	e7ed      	b.n	800522c <_dtoa_r+0x464>
 8005250:	2102      	movs	r1, #2
 8005252:	e759      	b.n	8005108 <_dtoa_r+0x340>
 8005254:	465a      	mov	r2, fp
 8005256:	464c      	mov	r4, r9
 8005258:	e775      	b.n	8005146 <_dtoa_r+0x37e>
 800525a:	ec41 0b17 	vmov	d7, r0, r1
 800525e:	495c      	ldr	r1, [pc, #368]	; (80053d0 <_dtoa_r+0x608>)
 8005260:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 8005264:	ed11 4b02 	vldr	d4, [r1, #-8]
 8005268:	9901      	ldr	r1, [sp, #4]
 800526a:	440c      	add	r4, r1
 800526c:	9907      	ldr	r1, [sp, #28]
 800526e:	b351      	cbz	r1, 80052c6 <_dtoa_r+0x4fe>
 8005270:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8005274:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8005278:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800527c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8005280:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8005284:	ee35 7b47 	vsub.f64	d7, d5, d7
 8005288:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800528c:	ee14 1a90 	vmov	r1, s9
 8005290:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8005294:	3130      	adds	r1, #48	; 0x30
 8005296:	ee36 6b45 	vsub.f64	d6, d6, d5
 800529a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800529e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052a2:	f808 1b01 	strb.w	r1, [r8], #1
 80052a6:	d439      	bmi.n	800531c <_dtoa_r+0x554>
 80052a8:	ee32 5b46 	vsub.f64	d5, d2, d6
 80052ac:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80052b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052b4:	d472      	bmi.n	800539c <_dtoa_r+0x5d4>
 80052b6:	45a0      	cmp	r8, r4
 80052b8:	f43f af6b 	beq.w	8005192 <_dtoa_r+0x3ca>
 80052bc:	ee27 7b03 	vmul.f64	d7, d7, d3
 80052c0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80052c4:	e7e0      	b.n	8005288 <_dtoa_r+0x4c0>
 80052c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80052ca:	ee27 7b04 	vmul.f64	d7, d7, d4
 80052ce:	4620      	mov	r0, r4
 80052d0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80052d4:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80052d8:	ee14 1a90 	vmov	r1, s9
 80052dc:	3130      	adds	r1, #48	; 0x30
 80052de:	f808 1b01 	strb.w	r1, [r8], #1
 80052e2:	45a0      	cmp	r8, r4
 80052e4:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80052e8:	ee36 6b45 	vsub.f64	d6, d6, d5
 80052ec:	d118      	bne.n	8005320 <_dtoa_r+0x558>
 80052ee:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 80052f2:	ee37 4b05 	vadd.f64	d4, d7, d5
 80052f6:	eeb4 6bc4 	vcmpe.f64	d6, d4
 80052fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fe:	dc4d      	bgt.n	800539c <_dtoa_r+0x5d4>
 8005300:	ee35 5b47 	vsub.f64	d5, d5, d7
 8005304:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8005308:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800530c:	f57f af41 	bpl.w	8005192 <_dtoa_r+0x3ca>
 8005310:	4680      	mov	r8, r0
 8005312:	3801      	subs	r0, #1
 8005314:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8005318:	2b30      	cmp	r3, #48	; 0x30
 800531a:	d0f9      	beq.n	8005310 <_dtoa_r+0x548>
 800531c:	4693      	mov	fp, r2
 800531e:	e02a      	b.n	8005376 <_dtoa_r+0x5ae>
 8005320:	ee26 6b03 	vmul.f64	d6, d6, d3
 8005324:	e7d6      	b.n	80052d4 <_dtoa_r+0x50c>
 8005326:	ed9d 7b02 	vldr	d7, [sp, #8]
 800532a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 800532e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8005332:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8005336:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 800533a:	ee15 3a10 	vmov	r3, s10
 800533e:	3330      	adds	r3, #48	; 0x30
 8005340:	f808 3b01 	strb.w	r3, [r8], #1
 8005344:	9b01      	ldr	r3, [sp, #4]
 8005346:	eba8 0303 	sub.w	r3, r8, r3
 800534a:	4599      	cmp	r9, r3
 800534c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8005350:	eea3 7b46 	vfms.f64	d7, d3, d6
 8005354:	d133      	bne.n	80053be <_dtoa_r+0x5f6>
 8005356:	ee37 7b07 	vadd.f64	d7, d7, d7
 800535a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800535e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005362:	dc1a      	bgt.n	800539a <_dtoa_r+0x5d2>
 8005364:	eeb4 7b46 	vcmp.f64	d7, d6
 8005368:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536c:	d103      	bne.n	8005376 <_dtoa_r+0x5ae>
 800536e:	ee15 3a10 	vmov	r3, s10
 8005372:	07d9      	lsls	r1, r3, #31
 8005374:	d411      	bmi.n	800539a <_dtoa_r+0x5d2>
 8005376:	4629      	mov	r1, r5
 8005378:	4630      	mov	r0, r6
 800537a:	f000 fbd1 	bl	8005b20 <_Bfree>
 800537e:	2300      	movs	r3, #0
 8005380:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005382:	f888 3000 	strb.w	r3, [r8]
 8005386:	f10b 0301 	add.w	r3, fp, #1
 800538a:	6013      	str	r3, [r2, #0]
 800538c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800538e:	2b00      	cmp	r3, #0
 8005390:	f43f ad69 	beq.w	8004e66 <_dtoa_r+0x9e>
 8005394:	f8c3 8000 	str.w	r8, [r3]
 8005398:	e565      	b.n	8004e66 <_dtoa_r+0x9e>
 800539a:	465a      	mov	r2, fp
 800539c:	4643      	mov	r3, r8
 800539e:	4698      	mov	r8, r3
 80053a0:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 80053a4:	2939      	cmp	r1, #57	; 0x39
 80053a6:	d106      	bne.n	80053b6 <_dtoa_r+0x5ee>
 80053a8:	9901      	ldr	r1, [sp, #4]
 80053aa:	4299      	cmp	r1, r3
 80053ac:	d1f7      	bne.n	800539e <_dtoa_r+0x5d6>
 80053ae:	9801      	ldr	r0, [sp, #4]
 80053b0:	2130      	movs	r1, #48	; 0x30
 80053b2:	3201      	adds	r2, #1
 80053b4:	7001      	strb	r1, [r0, #0]
 80053b6:	7819      	ldrb	r1, [r3, #0]
 80053b8:	3101      	adds	r1, #1
 80053ba:	7019      	strb	r1, [r3, #0]
 80053bc:	e7ae      	b.n	800531c <_dtoa_r+0x554>
 80053be:	ee27 7b04 	vmul.f64	d7, d7, d4
 80053c2:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80053c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053ca:	d1b2      	bne.n	8005332 <_dtoa_r+0x56a>
 80053cc:	e7d3      	b.n	8005376 <_dtoa_r+0x5ae>
 80053ce:	bf00      	nop
 80053d0:	08006e50 	.word	0x08006e50
 80053d4:	08006e28 	.word	0x08006e28
 80053d8:	9907      	ldr	r1, [sp, #28]
 80053da:	2900      	cmp	r1, #0
 80053dc:	f000 80d0 	beq.w	8005580 <_dtoa_r+0x7b8>
 80053e0:	9906      	ldr	r1, [sp, #24]
 80053e2:	2901      	cmp	r1, #1
 80053e4:	f300 80b4 	bgt.w	8005550 <_dtoa_r+0x788>
 80053e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80053ea:	2900      	cmp	r1, #0
 80053ec:	f000 80ac 	beq.w	8005548 <_dtoa_r+0x780>
 80053f0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80053f4:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80053f8:	461c      	mov	r4, r3
 80053fa:	9309      	str	r3, [sp, #36]	; 0x24
 80053fc:	9b04      	ldr	r3, [sp, #16]
 80053fe:	4413      	add	r3, r2
 8005400:	9304      	str	r3, [sp, #16]
 8005402:	9b05      	ldr	r3, [sp, #20]
 8005404:	2101      	movs	r1, #1
 8005406:	4413      	add	r3, r2
 8005408:	4630      	mov	r0, r6
 800540a:	9305      	str	r3, [sp, #20]
 800540c:	f000 fc3e 	bl	8005c8c <__i2b>
 8005410:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005412:	4607      	mov	r7, r0
 8005414:	f1b8 0f00 	cmp.w	r8, #0
 8005418:	d00d      	beq.n	8005436 <_dtoa_r+0x66e>
 800541a:	9a05      	ldr	r2, [sp, #20]
 800541c:	2a00      	cmp	r2, #0
 800541e:	dd0a      	ble.n	8005436 <_dtoa_r+0x66e>
 8005420:	4542      	cmp	r2, r8
 8005422:	9904      	ldr	r1, [sp, #16]
 8005424:	bfa8      	it	ge
 8005426:	4642      	movge	r2, r8
 8005428:	1a89      	subs	r1, r1, r2
 800542a:	9104      	str	r1, [sp, #16]
 800542c:	9905      	ldr	r1, [sp, #20]
 800542e:	eba8 0802 	sub.w	r8, r8, r2
 8005432:	1a8a      	subs	r2, r1, r2
 8005434:	9205      	str	r2, [sp, #20]
 8005436:	b303      	cbz	r3, 800547a <_dtoa_r+0x6b2>
 8005438:	9a07      	ldr	r2, [sp, #28]
 800543a:	2a00      	cmp	r2, #0
 800543c:	f000 80a5 	beq.w	800558a <_dtoa_r+0x7c2>
 8005440:	2c00      	cmp	r4, #0
 8005442:	dd13      	ble.n	800546c <_dtoa_r+0x6a4>
 8005444:	4639      	mov	r1, r7
 8005446:	4622      	mov	r2, r4
 8005448:	4630      	mov	r0, r6
 800544a:	930d      	str	r3, [sp, #52]	; 0x34
 800544c:	f000 fcde 	bl	8005e0c <__pow5mult>
 8005450:	462a      	mov	r2, r5
 8005452:	4601      	mov	r1, r0
 8005454:	4607      	mov	r7, r0
 8005456:	4630      	mov	r0, r6
 8005458:	f000 fc2e 	bl	8005cb8 <__multiply>
 800545c:	4629      	mov	r1, r5
 800545e:	9009      	str	r0, [sp, #36]	; 0x24
 8005460:	4630      	mov	r0, r6
 8005462:	f000 fb5d 	bl	8005b20 <_Bfree>
 8005466:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005468:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800546a:	4615      	mov	r5, r2
 800546c:	1b1a      	subs	r2, r3, r4
 800546e:	d004      	beq.n	800547a <_dtoa_r+0x6b2>
 8005470:	4629      	mov	r1, r5
 8005472:	4630      	mov	r0, r6
 8005474:	f000 fcca 	bl	8005e0c <__pow5mult>
 8005478:	4605      	mov	r5, r0
 800547a:	2101      	movs	r1, #1
 800547c:	4630      	mov	r0, r6
 800547e:	f000 fc05 	bl	8005c8c <__i2b>
 8005482:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005484:	2b00      	cmp	r3, #0
 8005486:	4604      	mov	r4, r0
 8005488:	f340 8081 	ble.w	800558e <_dtoa_r+0x7c6>
 800548c:	461a      	mov	r2, r3
 800548e:	4601      	mov	r1, r0
 8005490:	4630      	mov	r0, r6
 8005492:	f000 fcbb 	bl	8005e0c <__pow5mult>
 8005496:	9b06      	ldr	r3, [sp, #24]
 8005498:	2b01      	cmp	r3, #1
 800549a:	4604      	mov	r4, r0
 800549c:	dd7a      	ble.n	8005594 <_dtoa_r+0x7cc>
 800549e:	2300      	movs	r3, #0
 80054a0:	9309      	str	r3, [sp, #36]	; 0x24
 80054a2:	6922      	ldr	r2, [r4, #16]
 80054a4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 80054a8:	6910      	ldr	r0, [r2, #16]
 80054aa:	f000 fba1 	bl	8005bf0 <__hi0bits>
 80054ae:	f1c0 0020 	rsb	r0, r0, #32
 80054b2:	9b05      	ldr	r3, [sp, #20]
 80054b4:	4418      	add	r0, r3
 80054b6:	f010 001f 	ands.w	r0, r0, #31
 80054ba:	f000 8093 	beq.w	80055e4 <_dtoa_r+0x81c>
 80054be:	f1c0 0220 	rsb	r2, r0, #32
 80054c2:	2a04      	cmp	r2, #4
 80054c4:	f340 8085 	ble.w	80055d2 <_dtoa_r+0x80a>
 80054c8:	9b04      	ldr	r3, [sp, #16]
 80054ca:	f1c0 001c 	rsb	r0, r0, #28
 80054ce:	4403      	add	r3, r0
 80054d0:	9304      	str	r3, [sp, #16]
 80054d2:	9b05      	ldr	r3, [sp, #20]
 80054d4:	4480      	add	r8, r0
 80054d6:	4403      	add	r3, r0
 80054d8:	9305      	str	r3, [sp, #20]
 80054da:	9b04      	ldr	r3, [sp, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	dd05      	ble.n	80054ec <_dtoa_r+0x724>
 80054e0:	4629      	mov	r1, r5
 80054e2:	461a      	mov	r2, r3
 80054e4:	4630      	mov	r0, r6
 80054e6:	f000 fceb 	bl	8005ec0 <__lshift>
 80054ea:	4605      	mov	r5, r0
 80054ec:	9b05      	ldr	r3, [sp, #20]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	dd05      	ble.n	80054fe <_dtoa_r+0x736>
 80054f2:	4621      	mov	r1, r4
 80054f4:	461a      	mov	r2, r3
 80054f6:	4630      	mov	r0, r6
 80054f8:	f000 fce2 	bl	8005ec0 <__lshift>
 80054fc:	4604      	mov	r4, r0
 80054fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d071      	beq.n	80055e8 <_dtoa_r+0x820>
 8005504:	4621      	mov	r1, r4
 8005506:	4628      	mov	r0, r5
 8005508:	f000 fd46 	bl	8005f98 <__mcmp>
 800550c:	2800      	cmp	r0, #0
 800550e:	da6b      	bge.n	80055e8 <_dtoa_r+0x820>
 8005510:	2300      	movs	r3, #0
 8005512:	4629      	mov	r1, r5
 8005514:	220a      	movs	r2, #10
 8005516:	4630      	mov	r0, r6
 8005518:	f000 fb24 	bl	8005b64 <__multadd>
 800551c:	9b07      	ldr	r3, [sp, #28]
 800551e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005522:	4605      	mov	r5, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f000 8197 	beq.w	8005858 <_dtoa_r+0xa90>
 800552a:	4639      	mov	r1, r7
 800552c:	2300      	movs	r3, #0
 800552e:	220a      	movs	r2, #10
 8005530:	4630      	mov	r0, r6
 8005532:	f000 fb17 	bl	8005b64 <__multadd>
 8005536:	f1ba 0f00 	cmp.w	sl, #0
 800553a:	4607      	mov	r7, r0
 800553c:	f300 8093 	bgt.w	8005666 <_dtoa_r+0x89e>
 8005540:	9b06      	ldr	r3, [sp, #24]
 8005542:	2b02      	cmp	r3, #2
 8005544:	dc57      	bgt.n	80055f6 <_dtoa_r+0x82e>
 8005546:	e08e      	b.n	8005666 <_dtoa_r+0x89e>
 8005548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800554a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800554e:	e751      	b.n	80053f4 <_dtoa_r+0x62c>
 8005550:	f109 34ff 	add.w	r4, r9, #4294967295
 8005554:	42a3      	cmp	r3, r4
 8005556:	bfbf      	itttt	lt
 8005558:	1ae2      	sublt	r2, r4, r3
 800555a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800555c:	189b      	addlt	r3, r3, r2
 800555e:	930a      	strlt	r3, [sp, #40]	; 0x28
 8005560:	bfae      	itee	ge
 8005562:	1b1c      	subge	r4, r3, r4
 8005564:	4623      	movlt	r3, r4
 8005566:	2400      	movlt	r4, #0
 8005568:	f1b9 0f00 	cmp.w	r9, #0
 800556c:	bfb5      	itete	lt
 800556e:	9a04      	ldrlt	r2, [sp, #16]
 8005570:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8005574:	eba2 0809 	sublt.w	r8, r2, r9
 8005578:	464a      	movge	r2, r9
 800557a:	bfb8      	it	lt
 800557c:	2200      	movlt	r2, #0
 800557e:	e73c      	b.n	80053fa <_dtoa_r+0x632>
 8005580:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8005584:	9f07      	ldr	r7, [sp, #28]
 8005586:	461c      	mov	r4, r3
 8005588:	e744      	b.n	8005414 <_dtoa_r+0x64c>
 800558a:	461a      	mov	r2, r3
 800558c:	e770      	b.n	8005470 <_dtoa_r+0x6a8>
 800558e:	9b06      	ldr	r3, [sp, #24]
 8005590:	2b01      	cmp	r3, #1
 8005592:	dc18      	bgt.n	80055c6 <_dtoa_r+0x7fe>
 8005594:	9b02      	ldr	r3, [sp, #8]
 8005596:	b9b3      	cbnz	r3, 80055c6 <_dtoa_r+0x7fe>
 8005598:	9b03      	ldr	r3, [sp, #12]
 800559a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800559e:	b9a2      	cbnz	r2, 80055ca <_dtoa_r+0x802>
 80055a0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80055a4:	0d12      	lsrs	r2, r2, #20
 80055a6:	0512      	lsls	r2, r2, #20
 80055a8:	b18a      	cbz	r2, 80055ce <_dtoa_r+0x806>
 80055aa:	9b04      	ldr	r3, [sp, #16]
 80055ac:	3301      	adds	r3, #1
 80055ae:	9304      	str	r3, [sp, #16]
 80055b0:	9b05      	ldr	r3, [sp, #20]
 80055b2:	3301      	adds	r3, #1
 80055b4:	9305      	str	r3, [sp, #20]
 80055b6:	2301      	movs	r3, #1
 80055b8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80055bc:	2b00      	cmp	r3, #0
 80055be:	f47f af70 	bne.w	80054a2 <_dtoa_r+0x6da>
 80055c2:	2001      	movs	r0, #1
 80055c4:	e775      	b.n	80054b2 <_dtoa_r+0x6ea>
 80055c6:	2300      	movs	r3, #0
 80055c8:	e7f6      	b.n	80055b8 <_dtoa_r+0x7f0>
 80055ca:	9b02      	ldr	r3, [sp, #8]
 80055cc:	e7f4      	b.n	80055b8 <_dtoa_r+0x7f0>
 80055ce:	9209      	str	r2, [sp, #36]	; 0x24
 80055d0:	e7f3      	b.n	80055ba <_dtoa_r+0x7f2>
 80055d2:	d082      	beq.n	80054da <_dtoa_r+0x712>
 80055d4:	9b04      	ldr	r3, [sp, #16]
 80055d6:	321c      	adds	r2, #28
 80055d8:	4413      	add	r3, r2
 80055da:	9304      	str	r3, [sp, #16]
 80055dc:	9b05      	ldr	r3, [sp, #20]
 80055de:	4490      	add	r8, r2
 80055e0:	4413      	add	r3, r2
 80055e2:	e779      	b.n	80054d8 <_dtoa_r+0x710>
 80055e4:	4602      	mov	r2, r0
 80055e6:	e7f5      	b.n	80055d4 <_dtoa_r+0x80c>
 80055e8:	f1b9 0f00 	cmp.w	r9, #0
 80055ec:	dc36      	bgt.n	800565c <_dtoa_r+0x894>
 80055ee:	9b06      	ldr	r3, [sp, #24]
 80055f0:	2b02      	cmp	r3, #2
 80055f2:	dd33      	ble.n	800565c <_dtoa_r+0x894>
 80055f4:	46ca      	mov	sl, r9
 80055f6:	f1ba 0f00 	cmp.w	sl, #0
 80055fa:	d10d      	bne.n	8005618 <_dtoa_r+0x850>
 80055fc:	4621      	mov	r1, r4
 80055fe:	4653      	mov	r3, sl
 8005600:	2205      	movs	r2, #5
 8005602:	4630      	mov	r0, r6
 8005604:	f000 faae 	bl	8005b64 <__multadd>
 8005608:	4601      	mov	r1, r0
 800560a:	4604      	mov	r4, r0
 800560c:	4628      	mov	r0, r5
 800560e:	f000 fcc3 	bl	8005f98 <__mcmp>
 8005612:	2800      	cmp	r0, #0
 8005614:	f73f ade4 	bgt.w	80051e0 <_dtoa_r+0x418>
 8005618:	9b08      	ldr	r3, [sp, #32]
 800561a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800561e:	ea6f 0b03 	mvn.w	fp, r3
 8005622:	f04f 0900 	mov.w	r9, #0
 8005626:	4621      	mov	r1, r4
 8005628:	4630      	mov	r0, r6
 800562a:	f000 fa79 	bl	8005b20 <_Bfree>
 800562e:	2f00      	cmp	r7, #0
 8005630:	f43f aea1 	beq.w	8005376 <_dtoa_r+0x5ae>
 8005634:	f1b9 0f00 	cmp.w	r9, #0
 8005638:	d005      	beq.n	8005646 <_dtoa_r+0x87e>
 800563a:	45b9      	cmp	r9, r7
 800563c:	d003      	beq.n	8005646 <_dtoa_r+0x87e>
 800563e:	4649      	mov	r1, r9
 8005640:	4630      	mov	r0, r6
 8005642:	f000 fa6d 	bl	8005b20 <_Bfree>
 8005646:	4639      	mov	r1, r7
 8005648:	4630      	mov	r0, r6
 800564a:	f000 fa69 	bl	8005b20 <_Bfree>
 800564e:	e692      	b.n	8005376 <_dtoa_r+0x5ae>
 8005650:	2400      	movs	r4, #0
 8005652:	4627      	mov	r7, r4
 8005654:	e7e0      	b.n	8005618 <_dtoa_r+0x850>
 8005656:	4693      	mov	fp, r2
 8005658:	4627      	mov	r7, r4
 800565a:	e5c1      	b.n	80051e0 <_dtoa_r+0x418>
 800565c:	9b07      	ldr	r3, [sp, #28]
 800565e:	46ca      	mov	sl, r9
 8005660:	2b00      	cmp	r3, #0
 8005662:	f000 8100 	beq.w	8005866 <_dtoa_r+0xa9e>
 8005666:	f1b8 0f00 	cmp.w	r8, #0
 800566a:	dd05      	ble.n	8005678 <_dtoa_r+0x8b0>
 800566c:	4639      	mov	r1, r7
 800566e:	4642      	mov	r2, r8
 8005670:	4630      	mov	r0, r6
 8005672:	f000 fc25 	bl	8005ec0 <__lshift>
 8005676:	4607      	mov	r7, r0
 8005678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800567a:	2b00      	cmp	r3, #0
 800567c:	d05d      	beq.n	800573a <_dtoa_r+0x972>
 800567e:	6879      	ldr	r1, [r7, #4]
 8005680:	4630      	mov	r0, r6
 8005682:	f000 fa0d 	bl	8005aa0 <_Balloc>
 8005686:	4680      	mov	r8, r0
 8005688:	b928      	cbnz	r0, 8005696 <_dtoa_r+0x8ce>
 800568a:	4b82      	ldr	r3, [pc, #520]	; (8005894 <_dtoa_r+0xacc>)
 800568c:	4602      	mov	r2, r0
 800568e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005692:	f7ff bbb1 	b.w	8004df8 <_dtoa_r+0x30>
 8005696:	693a      	ldr	r2, [r7, #16]
 8005698:	3202      	adds	r2, #2
 800569a:	0092      	lsls	r2, r2, #2
 800569c:	f107 010c 	add.w	r1, r7, #12
 80056a0:	300c      	adds	r0, #12
 80056a2:	f000 ffa9 	bl	80065f8 <memcpy>
 80056a6:	2201      	movs	r2, #1
 80056a8:	4641      	mov	r1, r8
 80056aa:	4630      	mov	r0, r6
 80056ac:	f000 fc08 	bl	8005ec0 <__lshift>
 80056b0:	9b01      	ldr	r3, [sp, #4]
 80056b2:	3301      	adds	r3, #1
 80056b4:	9304      	str	r3, [sp, #16]
 80056b6:	9b01      	ldr	r3, [sp, #4]
 80056b8:	4453      	add	r3, sl
 80056ba:	9308      	str	r3, [sp, #32]
 80056bc:	9b02      	ldr	r3, [sp, #8]
 80056be:	f003 0301 	and.w	r3, r3, #1
 80056c2:	46b9      	mov	r9, r7
 80056c4:	9307      	str	r3, [sp, #28]
 80056c6:	4607      	mov	r7, r0
 80056c8:	9b04      	ldr	r3, [sp, #16]
 80056ca:	4621      	mov	r1, r4
 80056cc:	3b01      	subs	r3, #1
 80056ce:	4628      	mov	r0, r5
 80056d0:	9302      	str	r3, [sp, #8]
 80056d2:	f7ff faf1 	bl	8004cb8 <quorem>
 80056d6:	4603      	mov	r3, r0
 80056d8:	3330      	adds	r3, #48	; 0x30
 80056da:	9005      	str	r0, [sp, #20]
 80056dc:	4649      	mov	r1, r9
 80056de:	4628      	mov	r0, r5
 80056e0:	9309      	str	r3, [sp, #36]	; 0x24
 80056e2:	f000 fc59 	bl	8005f98 <__mcmp>
 80056e6:	463a      	mov	r2, r7
 80056e8:	4682      	mov	sl, r0
 80056ea:	4621      	mov	r1, r4
 80056ec:	4630      	mov	r0, r6
 80056ee:	f000 fc6f 	bl	8005fd0 <__mdiff>
 80056f2:	68c2      	ldr	r2, [r0, #12]
 80056f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056f6:	4680      	mov	r8, r0
 80056f8:	bb0a      	cbnz	r2, 800573e <_dtoa_r+0x976>
 80056fa:	4601      	mov	r1, r0
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 fc4b 	bl	8005f98 <__mcmp>
 8005702:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005704:	4602      	mov	r2, r0
 8005706:	4641      	mov	r1, r8
 8005708:	4630      	mov	r0, r6
 800570a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800570e:	f000 fa07 	bl	8005b20 <_Bfree>
 8005712:	9b06      	ldr	r3, [sp, #24]
 8005714:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005716:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800571a:	ea43 0102 	orr.w	r1, r3, r2
 800571e:	9b07      	ldr	r3, [sp, #28]
 8005720:	4319      	orrs	r1, r3
 8005722:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005724:	d10d      	bne.n	8005742 <_dtoa_r+0x97a>
 8005726:	2b39      	cmp	r3, #57	; 0x39
 8005728:	d029      	beq.n	800577e <_dtoa_r+0x9b6>
 800572a:	f1ba 0f00 	cmp.w	sl, #0
 800572e:	dd01      	ble.n	8005734 <_dtoa_r+0x96c>
 8005730:	9b05      	ldr	r3, [sp, #20]
 8005732:	3331      	adds	r3, #49	; 0x31
 8005734:	9a02      	ldr	r2, [sp, #8]
 8005736:	7013      	strb	r3, [r2, #0]
 8005738:	e775      	b.n	8005626 <_dtoa_r+0x85e>
 800573a:	4638      	mov	r0, r7
 800573c:	e7b8      	b.n	80056b0 <_dtoa_r+0x8e8>
 800573e:	2201      	movs	r2, #1
 8005740:	e7e1      	b.n	8005706 <_dtoa_r+0x93e>
 8005742:	f1ba 0f00 	cmp.w	sl, #0
 8005746:	db06      	blt.n	8005756 <_dtoa_r+0x98e>
 8005748:	9906      	ldr	r1, [sp, #24]
 800574a:	ea41 0a0a 	orr.w	sl, r1, sl
 800574e:	9907      	ldr	r1, [sp, #28]
 8005750:	ea5a 0a01 	orrs.w	sl, sl, r1
 8005754:	d120      	bne.n	8005798 <_dtoa_r+0x9d0>
 8005756:	2a00      	cmp	r2, #0
 8005758:	ddec      	ble.n	8005734 <_dtoa_r+0x96c>
 800575a:	4629      	mov	r1, r5
 800575c:	2201      	movs	r2, #1
 800575e:	4630      	mov	r0, r6
 8005760:	9304      	str	r3, [sp, #16]
 8005762:	f000 fbad 	bl	8005ec0 <__lshift>
 8005766:	4621      	mov	r1, r4
 8005768:	4605      	mov	r5, r0
 800576a:	f000 fc15 	bl	8005f98 <__mcmp>
 800576e:	2800      	cmp	r0, #0
 8005770:	9b04      	ldr	r3, [sp, #16]
 8005772:	dc02      	bgt.n	800577a <_dtoa_r+0x9b2>
 8005774:	d1de      	bne.n	8005734 <_dtoa_r+0x96c>
 8005776:	07da      	lsls	r2, r3, #31
 8005778:	d5dc      	bpl.n	8005734 <_dtoa_r+0x96c>
 800577a:	2b39      	cmp	r3, #57	; 0x39
 800577c:	d1d8      	bne.n	8005730 <_dtoa_r+0x968>
 800577e:	9a02      	ldr	r2, [sp, #8]
 8005780:	2339      	movs	r3, #57	; 0x39
 8005782:	7013      	strb	r3, [r2, #0]
 8005784:	4643      	mov	r3, r8
 8005786:	4698      	mov	r8, r3
 8005788:	3b01      	subs	r3, #1
 800578a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 800578e:	2a39      	cmp	r2, #57	; 0x39
 8005790:	d051      	beq.n	8005836 <_dtoa_r+0xa6e>
 8005792:	3201      	adds	r2, #1
 8005794:	701a      	strb	r2, [r3, #0]
 8005796:	e746      	b.n	8005626 <_dtoa_r+0x85e>
 8005798:	2a00      	cmp	r2, #0
 800579a:	dd03      	ble.n	80057a4 <_dtoa_r+0x9dc>
 800579c:	2b39      	cmp	r3, #57	; 0x39
 800579e:	d0ee      	beq.n	800577e <_dtoa_r+0x9b6>
 80057a0:	3301      	adds	r3, #1
 80057a2:	e7c7      	b.n	8005734 <_dtoa_r+0x96c>
 80057a4:	9a04      	ldr	r2, [sp, #16]
 80057a6:	9908      	ldr	r1, [sp, #32]
 80057a8:	f802 3c01 	strb.w	r3, [r2, #-1]
 80057ac:	428a      	cmp	r2, r1
 80057ae:	d02b      	beq.n	8005808 <_dtoa_r+0xa40>
 80057b0:	4629      	mov	r1, r5
 80057b2:	2300      	movs	r3, #0
 80057b4:	220a      	movs	r2, #10
 80057b6:	4630      	mov	r0, r6
 80057b8:	f000 f9d4 	bl	8005b64 <__multadd>
 80057bc:	45b9      	cmp	r9, r7
 80057be:	4605      	mov	r5, r0
 80057c0:	f04f 0300 	mov.w	r3, #0
 80057c4:	f04f 020a 	mov.w	r2, #10
 80057c8:	4649      	mov	r1, r9
 80057ca:	4630      	mov	r0, r6
 80057cc:	d107      	bne.n	80057de <_dtoa_r+0xa16>
 80057ce:	f000 f9c9 	bl	8005b64 <__multadd>
 80057d2:	4681      	mov	r9, r0
 80057d4:	4607      	mov	r7, r0
 80057d6:	9b04      	ldr	r3, [sp, #16]
 80057d8:	3301      	adds	r3, #1
 80057da:	9304      	str	r3, [sp, #16]
 80057dc:	e774      	b.n	80056c8 <_dtoa_r+0x900>
 80057de:	f000 f9c1 	bl	8005b64 <__multadd>
 80057e2:	4639      	mov	r1, r7
 80057e4:	4681      	mov	r9, r0
 80057e6:	2300      	movs	r3, #0
 80057e8:	220a      	movs	r2, #10
 80057ea:	4630      	mov	r0, r6
 80057ec:	f000 f9ba 	bl	8005b64 <__multadd>
 80057f0:	4607      	mov	r7, r0
 80057f2:	e7f0      	b.n	80057d6 <_dtoa_r+0xa0e>
 80057f4:	f1ba 0f00 	cmp.w	sl, #0
 80057f8:	9a01      	ldr	r2, [sp, #4]
 80057fa:	bfcc      	ite	gt
 80057fc:	46d0      	movgt	r8, sl
 80057fe:	f04f 0801 	movle.w	r8, #1
 8005802:	4490      	add	r8, r2
 8005804:	f04f 0900 	mov.w	r9, #0
 8005808:	4629      	mov	r1, r5
 800580a:	2201      	movs	r2, #1
 800580c:	4630      	mov	r0, r6
 800580e:	9302      	str	r3, [sp, #8]
 8005810:	f000 fb56 	bl	8005ec0 <__lshift>
 8005814:	4621      	mov	r1, r4
 8005816:	4605      	mov	r5, r0
 8005818:	f000 fbbe 	bl	8005f98 <__mcmp>
 800581c:	2800      	cmp	r0, #0
 800581e:	dcb1      	bgt.n	8005784 <_dtoa_r+0x9bc>
 8005820:	d102      	bne.n	8005828 <_dtoa_r+0xa60>
 8005822:	9b02      	ldr	r3, [sp, #8]
 8005824:	07db      	lsls	r3, r3, #31
 8005826:	d4ad      	bmi.n	8005784 <_dtoa_r+0x9bc>
 8005828:	4643      	mov	r3, r8
 800582a:	4698      	mov	r8, r3
 800582c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005830:	2a30      	cmp	r2, #48	; 0x30
 8005832:	d0fa      	beq.n	800582a <_dtoa_r+0xa62>
 8005834:	e6f7      	b.n	8005626 <_dtoa_r+0x85e>
 8005836:	9a01      	ldr	r2, [sp, #4]
 8005838:	429a      	cmp	r2, r3
 800583a:	d1a4      	bne.n	8005786 <_dtoa_r+0x9be>
 800583c:	f10b 0b01 	add.w	fp, fp, #1
 8005840:	2331      	movs	r3, #49	; 0x31
 8005842:	e778      	b.n	8005736 <_dtoa_r+0x96e>
 8005844:	4b14      	ldr	r3, [pc, #80]	; (8005898 <_dtoa_r+0xad0>)
 8005846:	f7ff bb2a 	b.w	8004e9e <_dtoa_r+0xd6>
 800584a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800584c:	2b00      	cmp	r3, #0
 800584e:	f47f ab05 	bne.w	8004e5c <_dtoa_r+0x94>
 8005852:	4b12      	ldr	r3, [pc, #72]	; (800589c <_dtoa_r+0xad4>)
 8005854:	f7ff bb23 	b.w	8004e9e <_dtoa_r+0xd6>
 8005858:	f1ba 0f00 	cmp.w	sl, #0
 800585c:	dc03      	bgt.n	8005866 <_dtoa_r+0xa9e>
 800585e:	9b06      	ldr	r3, [sp, #24]
 8005860:	2b02      	cmp	r3, #2
 8005862:	f73f aec8 	bgt.w	80055f6 <_dtoa_r+0x82e>
 8005866:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800586a:	4621      	mov	r1, r4
 800586c:	4628      	mov	r0, r5
 800586e:	f7ff fa23 	bl	8004cb8 <quorem>
 8005872:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005876:	f808 3b01 	strb.w	r3, [r8], #1
 800587a:	9a01      	ldr	r2, [sp, #4]
 800587c:	eba8 0202 	sub.w	r2, r8, r2
 8005880:	4592      	cmp	sl, r2
 8005882:	ddb7      	ble.n	80057f4 <_dtoa_r+0xa2c>
 8005884:	4629      	mov	r1, r5
 8005886:	2300      	movs	r3, #0
 8005888:	220a      	movs	r2, #10
 800588a:	4630      	mov	r0, r6
 800588c:	f000 f96a 	bl	8005b64 <__multadd>
 8005890:	4605      	mov	r5, r0
 8005892:	e7ea      	b.n	800586a <_dtoa_r+0xaa2>
 8005894:	08006db8 	.word	0x08006db8
 8005898:	08006d18 	.word	0x08006d18
 800589c:	08006d3c 	.word	0x08006d3c

080058a0 <_free_r>:
 80058a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80058a2:	2900      	cmp	r1, #0
 80058a4:	d044      	beq.n	8005930 <_free_r+0x90>
 80058a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80058aa:	9001      	str	r0, [sp, #4]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	f1a1 0404 	sub.w	r4, r1, #4
 80058b2:	bfb8      	it	lt
 80058b4:	18e4      	addlt	r4, r4, r3
 80058b6:	f000 f8e7 	bl	8005a88 <__malloc_lock>
 80058ba:	4a1e      	ldr	r2, [pc, #120]	; (8005934 <_free_r+0x94>)
 80058bc:	9801      	ldr	r0, [sp, #4]
 80058be:	6813      	ldr	r3, [r2, #0]
 80058c0:	b933      	cbnz	r3, 80058d0 <_free_r+0x30>
 80058c2:	6063      	str	r3, [r4, #4]
 80058c4:	6014      	str	r4, [r2, #0]
 80058c6:	b003      	add	sp, #12
 80058c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80058cc:	f000 b8e2 	b.w	8005a94 <__malloc_unlock>
 80058d0:	42a3      	cmp	r3, r4
 80058d2:	d908      	bls.n	80058e6 <_free_r+0x46>
 80058d4:	6825      	ldr	r5, [r4, #0]
 80058d6:	1961      	adds	r1, r4, r5
 80058d8:	428b      	cmp	r3, r1
 80058da:	bf01      	itttt	eq
 80058dc:	6819      	ldreq	r1, [r3, #0]
 80058de:	685b      	ldreq	r3, [r3, #4]
 80058e0:	1949      	addeq	r1, r1, r5
 80058e2:	6021      	streq	r1, [r4, #0]
 80058e4:	e7ed      	b.n	80058c2 <_free_r+0x22>
 80058e6:	461a      	mov	r2, r3
 80058e8:	685b      	ldr	r3, [r3, #4]
 80058ea:	b10b      	cbz	r3, 80058f0 <_free_r+0x50>
 80058ec:	42a3      	cmp	r3, r4
 80058ee:	d9fa      	bls.n	80058e6 <_free_r+0x46>
 80058f0:	6811      	ldr	r1, [r2, #0]
 80058f2:	1855      	adds	r5, r2, r1
 80058f4:	42a5      	cmp	r5, r4
 80058f6:	d10b      	bne.n	8005910 <_free_r+0x70>
 80058f8:	6824      	ldr	r4, [r4, #0]
 80058fa:	4421      	add	r1, r4
 80058fc:	1854      	adds	r4, r2, r1
 80058fe:	42a3      	cmp	r3, r4
 8005900:	6011      	str	r1, [r2, #0]
 8005902:	d1e0      	bne.n	80058c6 <_free_r+0x26>
 8005904:	681c      	ldr	r4, [r3, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	6053      	str	r3, [r2, #4]
 800590a:	440c      	add	r4, r1
 800590c:	6014      	str	r4, [r2, #0]
 800590e:	e7da      	b.n	80058c6 <_free_r+0x26>
 8005910:	d902      	bls.n	8005918 <_free_r+0x78>
 8005912:	230c      	movs	r3, #12
 8005914:	6003      	str	r3, [r0, #0]
 8005916:	e7d6      	b.n	80058c6 <_free_r+0x26>
 8005918:	6825      	ldr	r5, [r4, #0]
 800591a:	1961      	adds	r1, r4, r5
 800591c:	428b      	cmp	r3, r1
 800591e:	bf04      	itt	eq
 8005920:	6819      	ldreq	r1, [r3, #0]
 8005922:	685b      	ldreq	r3, [r3, #4]
 8005924:	6063      	str	r3, [r4, #4]
 8005926:	bf04      	itt	eq
 8005928:	1949      	addeq	r1, r1, r5
 800592a:	6021      	streq	r1, [r4, #0]
 800592c:	6054      	str	r4, [r2, #4]
 800592e:	e7ca      	b.n	80058c6 <_free_r+0x26>
 8005930:	b003      	add	sp, #12
 8005932:	bd30      	pop	{r4, r5, pc}
 8005934:	200005b4 	.word	0x200005b4

08005938 <malloc>:
 8005938:	4b02      	ldr	r3, [pc, #8]	; (8005944 <malloc+0xc>)
 800593a:	4601      	mov	r1, r0
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	f000 b823 	b.w	8005988 <_malloc_r>
 8005942:	bf00      	nop
 8005944:	20000064 	.word	0x20000064

08005948 <sbrk_aligned>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	4e0e      	ldr	r6, [pc, #56]	; (8005984 <sbrk_aligned+0x3c>)
 800594c:	460c      	mov	r4, r1
 800594e:	6831      	ldr	r1, [r6, #0]
 8005950:	4605      	mov	r5, r0
 8005952:	b911      	cbnz	r1, 800595a <sbrk_aligned+0x12>
 8005954:	f000 fe40 	bl	80065d8 <_sbrk_r>
 8005958:	6030      	str	r0, [r6, #0]
 800595a:	4621      	mov	r1, r4
 800595c:	4628      	mov	r0, r5
 800595e:	f000 fe3b 	bl	80065d8 <_sbrk_r>
 8005962:	1c43      	adds	r3, r0, #1
 8005964:	d00a      	beq.n	800597c <sbrk_aligned+0x34>
 8005966:	1cc4      	adds	r4, r0, #3
 8005968:	f024 0403 	bic.w	r4, r4, #3
 800596c:	42a0      	cmp	r0, r4
 800596e:	d007      	beq.n	8005980 <sbrk_aligned+0x38>
 8005970:	1a21      	subs	r1, r4, r0
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fe30 	bl	80065d8 <_sbrk_r>
 8005978:	3001      	adds	r0, #1
 800597a:	d101      	bne.n	8005980 <sbrk_aligned+0x38>
 800597c:	f04f 34ff 	mov.w	r4, #4294967295
 8005980:	4620      	mov	r0, r4
 8005982:	bd70      	pop	{r4, r5, r6, pc}
 8005984:	200005b8 	.word	0x200005b8

08005988 <_malloc_r>:
 8005988:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800598c:	1ccd      	adds	r5, r1, #3
 800598e:	f025 0503 	bic.w	r5, r5, #3
 8005992:	3508      	adds	r5, #8
 8005994:	2d0c      	cmp	r5, #12
 8005996:	bf38      	it	cc
 8005998:	250c      	movcc	r5, #12
 800599a:	2d00      	cmp	r5, #0
 800599c:	4607      	mov	r7, r0
 800599e:	db01      	blt.n	80059a4 <_malloc_r+0x1c>
 80059a0:	42a9      	cmp	r1, r5
 80059a2:	d905      	bls.n	80059b0 <_malloc_r+0x28>
 80059a4:	230c      	movs	r3, #12
 80059a6:	603b      	str	r3, [r7, #0]
 80059a8:	2600      	movs	r6, #0
 80059aa:	4630      	mov	r0, r6
 80059ac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059b0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005a84 <_malloc_r+0xfc>
 80059b4:	f000 f868 	bl	8005a88 <__malloc_lock>
 80059b8:	f8d8 3000 	ldr.w	r3, [r8]
 80059bc:	461c      	mov	r4, r3
 80059be:	bb5c      	cbnz	r4, 8005a18 <_malloc_r+0x90>
 80059c0:	4629      	mov	r1, r5
 80059c2:	4638      	mov	r0, r7
 80059c4:	f7ff ffc0 	bl	8005948 <sbrk_aligned>
 80059c8:	1c43      	adds	r3, r0, #1
 80059ca:	4604      	mov	r4, r0
 80059cc:	d155      	bne.n	8005a7a <_malloc_r+0xf2>
 80059ce:	f8d8 4000 	ldr.w	r4, [r8]
 80059d2:	4626      	mov	r6, r4
 80059d4:	2e00      	cmp	r6, #0
 80059d6:	d145      	bne.n	8005a64 <_malloc_r+0xdc>
 80059d8:	2c00      	cmp	r4, #0
 80059da:	d048      	beq.n	8005a6e <_malloc_r+0xe6>
 80059dc:	6823      	ldr	r3, [r4, #0]
 80059de:	4631      	mov	r1, r6
 80059e0:	4638      	mov	r0, r7
 80059e2:	eb04 0903 	add.w	r9, r4, r3
 80059e6:	f000 fdf7 	bl	80065d8 <_sbrk_r>
 80059ea:	4581      	cmp	r9, r0
 80059ec:	d13f      	bne.n	8005a6e <_malloc_r+0xe6>
 80059ee:	6821      	ldr	r1, [r4, #0]
 80059f0:	1a6d      	subs	r5, r5, r1
 80059f2:	4629      	mov	r1, r5
 80059f4:	4638      	mov	r0, r7
 80059f6:	f7ff ffa7 	bl	8005948 <sbrk_aligned>
 80059fa:	3001      	adds	r0, #1
 80059fc:	d037      	beq.n	8005a6e <_malloc_r+0xe6>
 80059fe:	6823      	ldr	r3, [r4, #0]
 8005a00:	442b      	add	r3, r5
 8005a02:	6023      	str	r3, [r4, #0]
 8005a04:	f8d8 3000 	ldr.w	r3, [r8]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d038      	beq.n	8005a7e <_malloc_r+0xf6>
 8005a0c:	685a      	ldr	r2, [r3, #4]
 8005a0e:	42a2      	cmp	r2, r4
 8005a10:	d12b      	bne.n	8005a6a <_malloc_r+0xe2>
 8005a12:	2200      	movs	r2, #0
 8005a14:	605a      	str	r2, [r3, #4]
 8005a16:	e00f      	b.n	8005a38 <_malloc_r+0xb0>
 8005a18:	6822      	ldr	r2, [r4, #0]
 8005a1a:	1b52      	subs	r2, r2, r5
 8005a1c:	d41f      	bmi.n	8005a5e <_malloc_r+0xd6>
 8005a1e:	2a0b      	cmp	r2, #11
 8005a20:	d917      	bls.n	8005a52 <_malloc_r+0xca>
 8005a22:	1961      	adds	r1, r4, r5
 8005a24:	42a3      	cmp	r3, r4
 8005a26:	6025      	str	r5, [r4, #0]
 8005a28:	bf18      	it	ne
 8005a2a:	6059      	strne	r1, [r3, #4]
 8005a2c:	6863      	ldr	r3, [r4, #4]
 8005a2e:	bf08      	it	eq
 8005a30:	f8c8 1000 	streq.w	r1, [r8]
 8005a34:	5162      	str	r2, [r4, r5]
 8005a36:	604b      	str	r3, [r1, #4]
 8005a38:	4638      	mov	r0, r7
 8005a3a:	f104 060b 	add.w	r6, r4, #11
 8005a3e:	f000 f829 	bl	8005a94 <__malloc_unlock>
 8005a42:	f026 0607 	bic.w	r6, r6, #7
 8005a46:	1d23      	adds	r3, r4, #4
 8005a48:	1af2      	subs	r2, r6, r3
 8005a4a:	d0ae      	beq.n	80059aa <_malloc_r+0x22>
 8005a4c:	1b9b      	subs	r3, r3, r6
 8005a4e:	50a3      	str	r3, [r4, r2]
 8005a50:	e7ab      	b.n	80059aa <_malloc_r+0x22>
 8005a52:	42a3      	cmp	r3, r4
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	d1dd      	bne.n	8005a14 <_malloc_r+0x8c>
 8005a58:	f8c8 2000 	str.w	r2, [r8]
 8005a5c:	e7ec      	b.n	8005a38 <_malloc_r+0xb0>
 8005a5e:	4623      	mov	r3, r4
 8005a60:	6864      	ldr	r4, [r4, #4]
 8005a62:	e7ac      	b.n	80059be <_malloc_r+0x36>
 8005a64:	4634      	mov	r4, r6
 8005a66:	6876      	ldr	r6, [r6, #4]
 8005a68:	e7b4      	b.n	80059d4 <_malloc_r+0x4c>
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	e7cc      	b.n	8005a08 <_malloc_r+0x80>
 8005a6e:	230c      	movs	r3, #12
 8005a70:	603b      	str	r3, [r7, #0]
 8005a72:	4638      	mov	r0, r7
 8005a74:	f000 f80e 	bl	8005a94 <__malloc_unlock>
 8005a78:	e797      	b.n	80059aa <_malloc_r+0x22>
 8005a7a:	6025      	str	r5, [r4, #0]
 8005a7c:	e7dc      	b.n	8005a38 <_malloc_r+0xb0>
 8005a7e:	605b      	str	r3, [r3, #4]
 8005a80:	deff      	udf	#255	; 0xff
 8005a82:	bf00      	nop
 8005a84:	200005b4 	.word	0x200005b4

08005a88 <__malloc_lock>:
 8005a88:	4801      	ldr	r0, [pc, #4]	; (8005a90 <__malloc_lock+0x8>)
 8005a8a:	f7ff b913 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8005a8e:	bf00      	nop
 8005a90:	200005b0 	.word	0x200005b0

08005a94 <__malloc_unlock>:
 8005a94:	4801      	ldr	r0, [pc, #4]	; (8005a9c <__malloc_unlock+0x8>)
 8005a96:	f7ff b90e 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8005a9a:	bf00      	nop
 8005a9c:	200005b0 	.word	0x200005b0

08005aa0 <_Balloc>:
 8005aa0:	b570      	push	{r4, r5, r6, lr}
 8005aa2:	69c6      	ldr	r6, [r0, #28]
 8005aa4:	4604      	mov	r4, r0
 8005aa6:	460d      	mov	r5, r1
 8005aa8:	b976      	cbnz	r6, 8005ac8 <_Balloc+0x28>
 8005aaa:	2010      	movs	r0, #16
 8005aac:	f7ff ff44 	bl	8005938 <malloc>
 8005ab0:	4602      	mov	r2, r0
 8005ab2:	61e0      	str	r0, [r4, #28]
 8005ab4:	b920      	cbnz	r0, 8005ac0 <_Balloc+0x20>
 8005ab6:	4b18      	ldr	r3, [pc, #96]	; (8005b18 <_Balloc+0x78>)
 8005ab8:	4818      	ldr	r0, [pc, #96]	; (8005b1c <_Balloc+0x7c>)
 8005aba:	216b      	movs	r1, #107	; 0x6b
 8005abc:	f000 fdaa 	bl	8006614 <__assert_func>
 8005ac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005ac4:	6006      	str	r6, [r0, #0]
 8005ac6:	60c6      	str	r6, [r0, #12]
 8005ac8:	69e6      	ldr	r6, [r4, #28]
 8005aca:	68f3      	ldr	r3, [r6, #12]
 8005acc:	b183      	cbz	r3, 8005af0 <_Balloc+0x50>
 8005ace:	69e3      	ldr	r3, [r4, #28]
 8005ad0:	68db      	ldr	r3, [r3, #12]
 8005ad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005ad6:	b9b8      	cbnz	r0, 8005b08 <_Balloc+0x68>
 8005ad8:	2101      	movs	r1, #1
 8005ada:	fa01 f605 	lsl.w	r6, r1, r5
 8005ade:	1d72      	adds	r2, r6, #5
 8005ae0:	0092      	lsls	r2, r2, #2
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	f000 fdb4 	bl	8006650 <_calloc_r>
 8005ae8:	b160      	cbz	r0, 8005b04 <_Balloc+0x64>
 8005aea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005aee:	e00e      	b.n	8005b0e <_Balloc+0x6e>
 8005af0:	2221      	movs	r2, #33	; 0x21
 8005af2:	2104      	movs	r1, #4
 8005af4:	4620      	mov	r0, r4
 8005af6:	f000 fdab 	bl	8006650 <_calloc_r>
 8005afa:	69e3      	ldr	r3, [r4, #28]
 8005afc:	60f0      	str	r0, [r6, #12]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d1e4      	bne.n	8005ace <_Balloc+0x2e>
 8005b04:	2000      	movs	r0, #0
 8005b06:	bd70      	pop	{r4, r5, r6, pc}
 8005b08:	6802      	ldr	r2, [r0, #0]
 8005b0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005b0e:	2300      	movs	r3, #0
 8005b10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005b14:	e7f7      	b.n	8005b06 <_Balloc+0x66>
 8005b16:	bf00      	nop
 8005b18:	08006d49 	.word	0x08006d49
 8005b1c:	08006dc9 	.word	0x08006dc9

08005b20 <_Bfree>:
 8005b20:	b570      	push	{r4, r5, r6, lr}
 8005b22:	69c6      	ldr	r6, [r0, #28]
 8005b24:	4605      	mov	r5, r0
 8005b26:	460c      	mov	r4, r1
 8005b28:	b976      	cbnz	r6, 8005b48 <_Bfree+0x28>
 8005b2a:	2010      	movs	r0, #16
 8005b2c:	f7ff ff04 	bl	8005938 <malloc>
 8005b30:	4602      	mov	r2, r0
 8005b32:	61e8      	str	r0, [r5, #28]
 8005b34:	b920      	cbnz	r0, 8005b40 <_Bfree+0x20>
 8005b36:	4b09      	ldr	r3, [pc, #36]	; (8005b5c <_Bfree+0x3c>)
 8005b38:	4809      	ldr	r0, [pc, #36]	; (8005b60 <_Bfree+0x40>)
 8005b3a:	218f      	movs	r1, #143	; 0x8f
 8005b3c:	f000 fd6a 	bl	8006614 <__assert_func>
 8005b40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005b44:	6006      	str	r6, [r0, #0]
 8005b46:	60c6      	str	r6, [r0, #12]
 8005b48:	b13c      	cbz	r4, 8005b5a <_Bfree+0x3a>
 8005b4a:	69eb      	ldr	r3, [r5, #28]
 8005b4c:	6862      	ldr	r2, [r4, #4]
 8005b4e:	68db      	ldr	r3, [r3, #12]
 8005b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005b54:	6021      	str	r1, [r4, #0]
 8005b56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005b5a:	bd70      	pop	{r4, r5, r6, pc}
 8005b5c:	08006d49 	.word	0x08006d49
 8005b60:	08006dc9 	.word	0x08006dc9

08005b64 <__multadd>:
 8005b64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b68:	690d      	ldr	r5, [r1, #16]
 8005b6a:	4607      	mov	r7, r0
 8005b6c:	460c      	mov	r4, r1
 8005b6e:	461e      	mov	r6, r3
 8005b70:	f101 0c14 	add.w	ip, r1, #20
 8005b74:	2000      	movs	r0, #0
 8005b76:	f8dc 3000 	ldr.w	r3, [ip]
 8005b7a:	b299      	uxth	r1, r3
 8005b7c:	fb02 6101 	mla	r1, r2, r1, r6
 8005b80:	0c1e      	lsrs	r6, r3, #16
 8005b82:	0c0b      	lsrs	r3, r1, #16
 8005b84:	fb02 3306 	mla	r3, r2, r6, r3
 8005b88:	b289      	uxth	r1, r1
 8005b8a:	3001      	adds	r0, #1
 8005b8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8005b90:	4285      	cmp	r5, r0
 8005b92:	f84c 1b04 	str.w	r1, [ip], #4
 8005b96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8005b9a:	dcec      	bgt.n	8005b76 <__multadd+0x12>
 8005b9c:	b30e      	cbz	r6, 8005be2 <__multadd+0x7e>
 8005b9e:	68a3      	ldr	r3, [r4, #8]
 8005ba0:	42ab      	cmp	r3, r5
 8005ba2:	dc19      	bgt.n	8005bd8 <__multadd+0x74>
 8005ba4:	6861      	ldr	r1, [r4, #4]
 8005ba6:	4638      	mov	r0, r7
 8005ba8:	3101      	adds	r1, #1
 8005baa:	f7ff ff79 	bl	8005aa0 <_Balloc>
 8005bae:	4680      	mov	r8, r0
 8005bb0:	b928      	cbnz	r0, 8005bbe <__multadd+0x5a>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	4b0c      	ldr	r3, [pc, #48]	; (8005be8 <__multadd+0x84>)
 8005bb6:	480d      	ldr	r0, [pc, #52]	; (8005bec <__multadd+0x88>)
 8005bb8:	21ba      	movs	r1, #186	; 0xba
 8005bba:	f000 fd2b 	bl	8006614 <__assert_func>
 8005bbe:	6922      	ldr	r2, [r4, #16]
 8005bc0:	3202      	adds	r2, #2
 8005bc2:	f104 010c 	add.w	r1, r4, #12
 8005bc6:	0092      	lsls	r2, r2, #2
 8005bc8:	300c      	adds	r0, #12
 8005bca:	f000 fd15 	bl	80065f8 <memcpy>
 8005bce:	4621      	mov	r1, r4
 8005bd0:	4638      	mov	r0, r7
 8005bd2:	f7ff ffa5 	bl	8005b20 <_Bfree>
 8005bd6:	4644      	mov	r4, r8
 8005bd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005bdc:	3501      	adds	r5, #1
 8005bde:	615e      	str	r6, [r3, #20]
 8005be0:	6125      	str	r5, [r4, #16]
 8005be2:	4620      	mov	r0, r4
 8005be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005be8:	08006db8 	.word	0x08006db8
 8005bec:	08006dc9 	.word	0x08006dc9

08005bf0 <__hi0bits>:
 8005bf0:	0c03      	lsrs	r3, r0, #16
 8005bf2:	041b      	lsls	r3, r3, #16
 8005bf4:	b9d3      	cbnz	r3, 8005c2c <__hi0bits+0x3c>
 8005bf6:	0400      	lsls	r0, r0, #16
 8005bf8:	2310      	movs	r3, #16
 8005bfa:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8005bfe:	bf04      	itt	eq
 8005c00:	0200      	lsleq	r0, r0, #8
 8005c02:	3308      	addeq	r3, #8
 8005c04:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8005c08:	bf04      	itt	eq
 8005c0a:	0100      	lsleq	r0, r0, #4
 8005c0c:	3304      	addeq	r3, #4
 8005c0e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8005c12:	bf04      	itt	eq
 8005c14:	0080      	lsleq	r0, r0, #2
 8005c16:	3302      	addeq	r3, #2
 8005c18:	2800      	cmp	r0, #0
 8005c1a:	db05      	blt.n	8005c28 <__hi0bits+0x38>
 8005c1c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8005c20:	f103 0301 	add.w	r3, r3, #1
 8005c24:	bf08      	it	eq
 8005c26:	2320      	moveq	r3, #32
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4770      	bx	lr
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e7e4      	b.n	8005bfa <__hi0bits+0xa>

08005c30 <__lo0bits>:
 8005c30:	6803      	ldr	r3, [r0, #0]
 8005c32:	f013 0207 	ands.w	r2, r3, #7
 8005c36:	d00c      	beq.n	8005c52 <__lo0bits+0x22>
 8005c38:	07d9      	lsls	r1, r3, #31
 8005c3a:	d422      	bmi.n	8005c82 <__lo0bits+0x52>
 8005c3c:	079a      	lsls	r2, r3, #30
 8005c3e:	bf49      	itett	mi
 8005c40:	085b      	lsrmi	r3, r3, #1
 8005c42:	089b      	lsrpl	r3, r3, #2
 8005c44:	6003      	strmi	r3, [r0, #0]
 8005c46:	2201      	movmi	r2, #1
 8005c48:	bf5c      	itt	pl
 8005c4a:	6003      	strpl	r3, [r0, #0]
 8005c4c:	2202      	movpl	r2, #2
 8005c4e:	4610      	mov	r0, r2
 8005c50:	4770      	bx	lr
 8005c52:	b299      	uxth	r1, r3
 8005c54:	b909      	cbnz	r1, 8005c5a <__lo0bits+0x2a>
 8005c56:	0c1b      	lsrs	r3, r3, #16
 8005c58:	2210      	movs	r2, #16
 8005c5a:	b2d9      	uxtb	r1, r3
 8005c5c:	b909      	cbnz	r1, 8005c62 <__lo0bits+0x32>
 8005c5e:	3208      	adds	r2, #8
 8005c60:	0a1b      	lsrs	r3, r3, #8
 8005c62:	0719      	lsls	r1, r3, #28
 8005c64:	bf04      	itt	eq
 8005c66:	091b      	lsreq	r3, r3, #4
 8005c68:	3204      	addeq	r2, #4
 8005c6a:	0799      	lsls	r1, r3, #30
 8005c6c:	bf04      	itt	eq
 8005c6e:	089b      	lsreq	r3, r3, #2
 8005c70:	3202      	addeq	r2, #2
 8005c72:	07d9      	lsls	r1, r3, #31
 8005c74:	d403      	bmi.n	8005c7e <__lo0bits+0x4e>
 8005c76:	085b      	lsrs	r3, r3, #1
 8005c78:	f102 0201 	add.w	r2, r2, #1
 8005c7c:	d003      	beq.n	8005c86 <__lo0bits+0x56>
 8005c7e:	6003      	str	r3, [r0, #0]
 8005c80:	e7e5      	b.n	8005c4e <__lo0bits+0x1e>
 8005c82:	2200      	movs	r2, #0
 8005c84:	e7e3      	b.n	8005c4e <__lo0bits+0x1e>
 8005c86:	2220      	movs	r2, #32
 8005c88:	e7e1      	b.n	8005c4e <__lo0bits+0x1e>
	...

08005c8c <__i2b>:
 8005c8c:	b510      	push	{r4, lr}
 8005c8e:	460c      	mov	r4, r1
 8005c90:	2101      	movs	r1, #1
 8005c92:	f7ff ff05 	bl	8005aa0 <_Balloc>
 8005c96:	4602      	mov	r2, r0
 8005c98:	b928      	cbnz	r0, 8005ca6 <__i2b+0x1a>
 8005c9a:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <__i2b+0x24>)
 8005c9c:	4805      	ldr	r0, [pc, #20]	; (8005cb4 <__i2b+0x28>)
 8005c9e:	f240 1145 	movw	r1, #325	; 0x145
 8005ca2:	f000 fcb7 	bl	8006614 <__assert_func>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	6144      	str	r4, [r0, #20]
 8005caa:	6103      	str	r3, [r0, #16]
 8005cac:	bd10      	pop	{r4, pc}
 8005cae:	bf00      	nop
 8005cb0:	08006db8 	.word	0x08006db8
 8005cb4:	08006dc9 	.word	0x08006dc9

08005cb8 <__multiply>:
 8005cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cbc:	4691      	mov	r9, r2
 8005cbe:	690a      	ldr	r2, [r1, #16]
 8005cc0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	bfb8      	it	lt
 8005cc8:	460b      	movlt	r3, r1
 8005cca:	460c      	mov	r4, r1
 8005ccc:	bfbc      	itt	lt
 8005cce:	464c      	movlt	r4, r9
 8005cd0:	4699      	movlt	r9, r3
 8005cd2:	6927      	ldr	r7, [r4, #16]
 8005cd4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8005cd8:	68a3      	ldr	r3, [r4, #8]
 8005cda:	6861      	ldr	r1, [r4, #4]
 8005cdc:	eb07 060a 	add.w	r6, r7, sl
 8005ce0:	42b3      	cmp	r3, r6
 8005ce2:	b085      	sub	sp, #20
 8005ce4:	bfb8      	it	lt
 8005ce6:	3101      	addlt	r1, #1
 8005ce8:	f7ff feda 	bl	8005aa0 <_Balloc>
 8005cec:	b930      	cbnz	r0, 8005cfc <__multiply+0x44>
 8005cee:	4602      	mov	r2, r0
 8005cf0:	4b44      	ldr	r3, [pc, #272]	; (8005e04 <__multiply+0x14c>)
 8005cf2:	4845      	ldr	r0, [pc, #276]	; (8005e08 <__multiply+0x150>)
 8005cf4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8005cf8:	f000 fc8c 	bl	8006614 <__assert_func>
 8005cfc:	f100 0514 	add.w	r5, r0, #20
 8005d00:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005d04:	462b      	mov	r3, r5
 8005d06:	2200      	movs	r2, #0
 8005d08:	4543      	cmp	r3, r8
 8005d0a:	d321      	bcc.n	8005d50 <__multiply+0x98>
 8005d0c:	f104 0314 	add.w	r3, r4, #20
 8005d10:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8005d14:	f109 0314 	add.w	r3, r9, #20
 8005d18:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8005d1c:	9202      	str	r2, [sp, #8]
 8005d1e:	1b3a      	subs	r2, r7, r4
 8005d20:	3a15      	subs	r2, #21
 8005d22:	f022 0203 	bic.w	r2, r2, #3
 8005d26:	3204      	adds	r2, #4
 8005d28:	f104 0115 	add.w	r1, r4, #21
 8005d2c:	428f      	cmp	r7, r1
 8005d2e:	bf38      	it	cc
 8005d30:	2204      	movcc	r2, #4
 8005d32:	9201      	str	r2, [sp, #4]
 8005d34:	9a02      	ldr	r2, [sp, #8]
 8005d36:	9303      	str	r3, [sp, #12]
 8005d38:	429a      	cmp	r2, r3
 8005d3a:	d80c      	bhi.n	8005d56 <__multiply+0x9e>
 8005d3c:	2e00      	cmp	r6, #0
 8005d3e:	dd03      	ble.n	8005d48 <__multiply+0x90>
 8005d40:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d05b      	beq.n	8005e00 <__multiply+0x148>
 8005d48:	6106      	str	r6, [r0, #16]
 8005d4a:	b005      	add	sp, #20
 8005d4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d50:	f843 2b04 	str.w	r2, [r3], #4
 8005d54:	e7d8      	b.n	8005d08 <__multiply+0x50>
 8005d56:	f8b3 a000 	ldrh.w	sl, [r3]
 8005d5a:	f1ba 0f00 	cmp.w	sl, #0
 8005d5e:	d024      	beq.n	8005daa <__multiply+0xf2>
 8005d60:	f104 0e14 	add.w	lr, r4, #20
 8005d64:	46a9      	mov	r9, r5
 8005d66:	f04f 0c00 	mov.w	ip, #0
 8005d6a:	f85e 2b04 	ldr.w	r2, [lr], #4
 8005d6e:	f8d9 1000 	ldr.w	r1, [r9]
 8005d72:	fa1f fb82 	uxth.w	fp, r2
 8005d76:	b289      	uxth	r1, r1
 8005d78:	fb0a 110b 	mla	r1, sl, fp, r1
 8005d7c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8005d80:	f8d9 2000 	ldr.w	r2, [r9]
 8005d84:	4461      	add	r1, ip
 8005d86:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005d8a:	fb0a c20b 	mla	r2, sl, fp, ip
 8005d8e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8005d92:	b289      	uxth	r1, r1
 8005d94:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005d98:	4577      	cmp	r7, lr
 8005d9a:	f849 1b04 	str.w	r1, [r9], #4
 8005d9e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8005da2:	d8e2      	bhi.n	8005d6a <__multiply+0xb2>
 8005da4:	9a01      	ldr	r2, [sp, #4]
 8005da6:	f845 c002 	str.w	ip, [r5, r2]
 8005daa:	9a03      	ldr	r2, [sp, #12]
 8005dac:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005db0:	3304      	adds	r3, #4
 8005db2:	f1b9 0f00 	cmp.w	r9, #0
 8005db6:	d021      	beq.n	8005dfc <__multiply+0x144>
 8005db8:	6829      	ldr	r1, [r5, #0]
 8005dba:	f104 0c14 	add.w	ip, r4, #20
 8005dbe:	46ae      	mov	lr, r5
 8005dc0:	f04f 0a00 	mov.w	sl, #0
 8005dc4:	f8bc b000 	ldrh.w	fp, [ip]
 8005dc8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8005dcc:	fb09 220b 	mla	r2, r9, fp, r2
 8005dd0:	4452      	add	r2, sl
 8005dd2:	b289      	uxth	r1, r1
 8005dd4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8005dd8:	f84e 1b04 	str.w	r1, [lr], #4
 8005ddc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8005de0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005de4:	f8be 1000 	ldrh.w	r1, [lr]
 8005de8:	fb09 110a 	mla	r1, r9, sl, r1
 8005dec:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8005df0:	4567      	cmp	r7, ip
 8005df2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8005df6:	d8e5      	bhi.n	8005dc4 <__multiply+0x10c>
 8005df8:	9a01      	ldr	r2, [sp, #4]
 8005dfa:	50a9      	str	r1, [r5, r2]
 8005dfc:	3504      	adds	r5, #4
 8005dfe:	e799      	b.n	8005d34 <__multiply+0x7c>
 8005e00:	3e01      	subs	r6, #1
 8005e02:	e79b      	b.n	8005d3c <__multiply+0x84>
 8005e04:	08006db8 	.word	0x08006db8
 8005e08:	08006dc9 	.word	0x08006dc9

08005e0c <__pow5mult>:
 8005e0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e10:	4615      	mov	r5, r2
 8005e12:	f012 0203 	ands.w	r2, r2, #3
 8005e16:	4606      	mov	r6, r0
 8005e18:	460f      	mov	r7, r1
 8005e1a:	d007      	beq.n	8005e2c <__pow5mult+0x20>
 8005e1c:	4c25      	ldr	r4, [pc, #148]	; (8005eb4 <__pow5mult+0xa8>)
 8005e1e:	3a01      	subs	r2, #1
 8005e20:	2300      	movs	r3, #0
 8005e22:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005e26:	f7ff fe9d 	bl	8005b64 <__multadd>
 8005e2a:	4607      	mov	r7, r0
 8005e2c:	10ad      	asrs	r5, r5, #2
 8005e2e:	d03d      	beq.n	8005eac <__pow5mult+0xa0>
 8005e30:	69f4      	ldr	r4, [r6, #28]
 8005e32:	b97c      	cbnz	r4, 8005e54 <__pow5mult+0x48>
 8005e34:	2010      	movs	r0, #16
 8005e36:	f7ff fd7f 	bl	8005938 <malloc>
 8005e3a:	4602      	mov	r2, r0
 8005e3c:	61f0      	str	r0, [r6, #28]
 8005e3e:	b928      	cbnz	r0, 8005e4c <__pow5mult+0x40>
 8005e40:	4b1d      	ldr	r3, [pc, #116]	; (8005eb8 <__pow5mult+0xac>)
 8005e42:	481e      	ldr	r0, [pc, #120]	; (8005ebc <__pow5mult+0xb0>)
 8005e44:	f240 11b3 	movw	r1, #435	; 0x1b3
 8005e48:	f000 fbe4 	bl	8006614 <__assert_func>
 8005e4c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005e50:	6004      	str	r4, [r0, #0]
 8005e52:	60c4      	str	r4, [r0, #12]
 8005e54:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8005e58:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005e5c:	b94c      	cbnz	r4, 8005e72 <__pow5mult+0x66>
 8005e5e:	f240 2171 	movw	r1, #625	; 0x271
 8005e62:	4630      	mov	r0, r6
 8005e64:	f7ff ff12 	bl	8005c8c <__i2b>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f8c8 0008 	str.w	r0, [r8, #8]
 8005e6e:	4604      	mov	r4, r0
 8005e70:	6003      	str	r3, [r0, #0]
 8005e72:	f04f 0900 	mov.w	r9, #0
 8005e76:	07eb      	lsls	r3, r5, #31
 8005e78:	d50a      	bpl.n	8005e90 <__pow5mult+0x84>
 8005e7a:	4639      	mov	r1, r7
 8005e7c:	4622      	mov	r2, r4
 8005e7e:	4630      	mov	r0, r6
 8005e80:	f7ff ff1a 	bl	8005cb8 <__multiply>
 8005e84:	4639      	mov	r1, r7
 8005e86:	4680      	mov	r8, r0
 8005e88:	4630      	mov	r0, r6
 8005e8a:	f7ff fe49 	bl	8005b20 <_Bfree>
 8005e8e:	4647      	mov	r7, r8
 8005e90:	106d      	asrs	r5, r5, #1
 8005e92:	d00b      	beq.n	8005eac <__pow5mult+0xa0>
 8005e94:	6820      	ldr	r0, [r4, #0]
 8005e96:	b938      	cbnz	r0, 8005ea8 <__pow5mult+0x9c>
 8005e98:	4622      	mov	r2, r4
 8005e9a:	4621      	mov	r1, r4
 8005e9c:	4630      	mov	r0, r6
 8005e9e:	f7ff ff0b 	bl	8005cb8 <__multiply>
 8005ea2:	6020      	str	r0, [r4, #0]
 8005ea4:	f8c0 9000 	str.w	r9, [r0]
 8005ea8:	4604      	mov	r4, r0
 8005eaa:	e7e4      	b.n	8005e76 <__pow5mult+0x6a>
 8005eac:	4638      	mov	r0, r7
 8005eae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005eb2:	bf00      	nop
 8005eb4:	08006f18 	.word	0x08006f18
 8005eb8:	08006d49 	.word	0x08006d49
 8005ebc:	08006dc9 	.word	0x08006dc9

08005ec0 <__lshift>:
 8005ec0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ec4:	460c      	mov	r4, r1
 8005ec6:	6849      	ldr	r1, [r1, #4]
 8005ec8:	6923      	ldr	r3, [r4, #16]
 8005eca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005ece:	68a3      	ldr	r3, [r4, #8]
 8005ed0:	4607      	mov	r7, r0
 8005ed2:	4691      	mov	r9, r2
 8005ed4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ed8:	f108 0601 	add.w	r6, r8, #1
 8005edc:	42b3      	cmp	r3, r6
 8005ede:	db0b      	blt.n	8005ef8 <__lshift+0x38>
 8005ee0:	4638      	mov	r0, r7
 8005ee2:	f7ff fddd 	bl	8005aa0 <_Balloc>
 8005ee6:	4605      	mov	r5, r0
 8005ee8:	b948      	cbnz	r0, 8005efe <__lshift+0x3e>
 8005eea:	4602      	mov	r2, r0
 8005eec:	4b28      	ldr	r3, [pc, #160]	; (8005f90 <__lshift+0xd0>)
 8005eee:	4829      	ldr	r0, [pc, #164]	; (8005f94 <__lshift+0xd4>)
 8005ef0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8005ef4:	f000 fb8e 	bl	8006614 <__assert_func>
 8005ef8:	3101      	adds	r1, #1
 8005efa:	005b      	lsls	r3, r3, #1
 8005efc:	e7ee      	b.n	8005edc <__lshift+0x1c>
 8005efe:	2300      	movs	r3, #0
 8005f00:	f100 0114 	add.w	r1, r0, #20
 8005f04:	f100 0210 	add.w	r2, r0, #16
 8005f08:	4618      	mov	r0, r3
 8005f0a:	4553      	cmp	r3, sl
 8005f0c:	db33      	blt.n	8005f76 <__lshift+0xb6>
 8005f0e:	6920      	ldr	r0, [r4, #16]
 8005f10:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005f14:	f104 0314 	add.w	r3, r4, #20
 8005f18:	f019 091f 	ands.w	r9, r9, #31
 8005f1c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005f20:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005f24:	d02b      	beq.n	8005f7e <__lshift+0xbe>
 8005f26:	f1c9 0e20 	rsb	lr, r9, #32
 8005f2a:	468a      	mov	sl, r1
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	6818      	ldr	r0, [r3, #0]
 8005f30:	fa00 f009 	lsl.w	r0, r0, r9
 8005f34:	4310      	orrs	r0, r2
 8005f36:	f84a 0b04 	str.w	r0, [sl], #4
 8005f3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f3e:	459c      	cmp	ip, r3
 8005f40:	fa22 f20e 	lsr.w	r2, r2, lr
 8005f44:	d8f3      	bhi.n	8005f2e <__lshift+0x6e>
 8005f46:	ebac 0304 	sub.w	r3, ip, r4
 8005f4a:	3b15      	subs	r3, #21
 8005f4c:	f023 0303 	bic.w	r3, r3, #3
 8005f50:	3304      	adds	r3, #4
 8005f52:	f104 0015 	add.w	r0, r4, #21
 8005f56:	4584      	cmp	ip, r0
 8005f58:	bf38      	it	cc
 8005f5a:	2304      	movcc	r3, #4
 8005f5c:	50ca      	str	r2, [r1, r3]
 8005f5e:	b10a      	cbz	r2, 8005f64 <__lshift+0xa4>
 8005f60:	f108 0602 	add.w	r6, r8, #2
 8005f64:	3e01      	subs	r6, #1
 8005f66:	4638      	mov	r0, r7
 8005f68:	612e      	str	r6, [r5, #16]
 8005f6a:	4621      	mov	r1, r4
 8005f6c:	f7ff fdd8 	bl	8005b20 <_Bfree>
 8005f70:	4628      	mov	r0, r5
 8005f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f76:	f842 0f04 	str.w	r0, [r2, #4]!
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	e7c5      	b.n	8005f0a <__lshift+0x4a>
 8005f7e:	3904      	subs	r1, #4
 8005f80:	f853 2b04 	ldr.w	r2, [r3], #4
 8005f84:	f841 2f04 	str.w	r2, [r1, #4]!
 8005f88:	459c      	cmp	ip, r3
 8005f8a:	d8f9      	bhi.n	8005f80 <__lshift+0xc0>
 8005f8c:	e7ea      	b.n	8005f64 <__lshift+0xa4>
 8005f8e:	bf00      	nop
 8005f90:	08006db8 	.word	0x08006db8
 8005f94:	08006dc9 	.word	0x08006dc9

08005f98 <__mcmp>:
 8005f98:	b530      	push	{r4, r5, lr}
 8005f9a:	6902      	ldr	r2, [r0, #16]
 8005f9c:	690c      	ldr	r4, [r1, #16]
 8005f9e:	1b12      	subs	r2, r2, r4
 8005fa0:	d10e      	bne.n	8005fc0 <__mcmp+0x28>
 8005fa2:	f100 0314 	add.w	r3, r0, #20
 8005fa6:	3114      	adds	r1, #20
 8005fa8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8005fac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005fb0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8005fb4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8005fb8:	42a5      	cmp	r5, r4
 8005fba:	d003      	beq.n	8005fc4 <__mcmp+0x2c>
 8005fbc:	d305      	bcc.n	8005fca <__mcmp+0x32>
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	4610      	mov	r0, r2
 8005fc2:	bd30      	pop	{r4, r5, pc}
 8005fc4:	4283      	cmp	r3, r0
 8005fc6:	d3f3      	bcc.n	8005fb0 <__mcmp+0x18>
 8005fc8:	e7fa      	b.n	8005fc0 <__mcmp+0x28>
 8005fca:	f04f 32ff 	mov.w	r2, #4294967295
 8005fce:	e7f7      	b.n	8005fc0 <__mcmp+0x28>

08005fd0 <__mdiff>:
 8005fd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005fd4:	460c      	mov	r4, r1
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4611      	mov	r1, r2
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4690      	mov	r8, r2
 8005fde:	f7ff ffdb 	bl	8005f98 <__mcmp>
 8005fe2:	1e05      	subs	r5, r0, #0
 8005fe4:	d110      	bne.n	8006008 <__mdiff+0x38>
 8005fe6:	4629      	mov	r1, r5
 8005fe8:	4630      	mov	r0, r6
 8005fea:	f7ff fd59 	bl	8005aa0 <_Balloc>
 8005fee:	b930      	cbnz	r0, 8005ffe <__mdiff+0x2e>
 8005ff0:	4b3a      	ldr	r3, [pc, #232]	; (80060dc <__mdiff+0x10c>)
 8005ff2:	4602      	mov	r2, r0
 8005ff4:	f240 2137 	movw	r1, #567	; 0x237
 8005ff8:	4839      	ldr	r0, [pc, #228]	; (80060e0 <__mdiff+0x110>)
 8005ffa:	f000 fb0b 	bl	8006614 <__assert_func>
 8005ffe:	2301      	movs	r3, #1
 8006000:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006004:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006008:	bfa4      	itt	ge
 800600a:	4643      	movge	r3, r8
 800600c:	46a0      	movge	r8, r4
 800600e:	4630      	mov	r0, r6
 8006010:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006014:	bfa6      	itte	ge
 8006016:	461c      	movge	r4, r3
 8006018:	2500      	movge	r5, #0
 800601a:	2501      	movlt	r5, #1
 800601c:	f7ff fd40 	bl	8005aa0 <_Balloc>
 8006020:	b920      	cbnz	r0, 800602c <__mdiff+0x5c>
 8006022:	4b2e      	ldr	r3, [pc, #184]	; (80060dc <__mdiff+0x10c>)
 8006024:	4602      	mov	r2, r0
 8006026:	f240 2145 	movw	r1, #581	; 0x245
 800602a:	e7e5      	b.n	8005ff8 <__mdiff+0x28>
 800602c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006030:	6926      	ldr	r6, [r4, #16]
 8006032:	60c5      	str	r5, [r0, #12]
 8006034:	f104 0914 	add.w	r9, r4, #20
 8006038:	f108 0514 	add.w	r5, r8, #20
 800603c:	f100 0e14 	add.w	lr, r0, #20
 8006040:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006044:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006048:	f108 0210 	add.w	r2, r8, #16
 800604c:	46f2      	mov	sl, lr
 800604e:	2100      	movs	r1, #0
 8006050:	f859 3b04 	ldr.w	r3, [r9], #4
 8006054:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006058:	fa11 f88b 	uxtah	r8, r1, fp
 800605c:	b299      	uxth	r1, r3
 800605e:	0c1b      	lsrs	r3, r3, #16
 8006060:	eba8 0801 	sub.w	r8, r8, r1
 8006064:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006068:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800606c:	fa1f f888 	uxth.w	r8, r8
 8006070:	1419      	asrs	r1, r3, #16
 8006072:	454e      	cmp	r6, r9
 8006074:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006078:	f84a 3b04 	str.w	r3, [sl], #4
 800607c:	d8e8      	bhi.n	8006050 <__mdiff+0x80>
 800607e:	1b33      	subs	r3, r6, r4
 8006080:	3b15      	subs	r3, #21
 8006082:	f023 0303 	bic.w	r3, r3, #3
 8006086:	3304      	adds	r3, #4
 8006088:	3415      	adds	r4, #21
 800608a:	42a6      	cmp	r6, r4
 800608c:	bf38      	it	cc
 800608e:	2304      	movcc	r3, #4
 8006090:	441d      	add	r5, r3
 8006092:	4473      	add	r3, lr
 8006094:	469e      	mov	lr, r3
 8006096:	462e      	mov	r6, r5
 8006098:	4566      	cmp	r6, ip
 800609a:	d30e      	bcc.n	80060ba <__mdiff+0xea>
 800609c:	f10c 0203 	add.w	r2, ip, #3
 80060a0:	1b52      	subs	r2, r2, r5
 80060a2:	f022 0203 	bic.w	r2, r2, #3
 80060a6:	3d03      	subs	r5, #3
 80060a8:	45ac      	cmp	ip, r5
 80060aa:	bf38      	it	cc
 80060ac:	2200      	movcc	r2, #0
 80060ae:	4413      	add	r3, r2
 80060b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80060b4:	b17a      	cbz	r2, 80060d6 <__mdiff+0x106>
 80060b6:	6107      	str	r7, [r0, #16]
 80060b8:	e7a4      	b.n	8006004 <__mdiff+0x34>
 80060ba:	f856 8b04 	ldr.w	r8, [r6], #4
 80060be:	fa11 f288 	uxtah	r2, r1, r8
 80060c2:	1414      	asrs	r4, r2, #16
 80060c4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80060c8:	b292      	uxth	r2, r2
 80060ca:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80060ce:	f84e 2b04 	str.w	r2, [lr], #4
 80060d2:	1421      	asrs	r1, r4, #16
 80060d4:	e7e0      	b.n	8006098 <__mdiff+0xc8>
 80060d6:	3f01      	subs	r7, #1
 80060d8:	e7ea      	b.n	80060b0 <__mdiff+0xe0>
 80060da:	bf00      	nop
 80060dc:	08006db8 	.word	0x08006db8
 80060e0:	08006dc9 	.word	0x08006dc9

080060e4 <__d2b>:
 80060e4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80060e8:	460f      	mov	r7, r1
 80060ea:	2101      	movs	r1, #1
 80060ec:	ec59 8b10 	vmov	r8, r9, d0
 80060f0:	4616      	mov	r6, r2
 80060f2:	f7ff fcd5 	bl	8005aa0 <_Balloc>
 80060f6:	4604      	mov	r4, r0
 80060f8:	b930      	cbnz	r0, 8006108 <__d2b+0x24>
 80060fa:	4602      	mov	r2, r0
 80060fc:	4b24      	ldr	r3, [pc, #144]	; (8006190 <__d2b+0xac>)
 80060fe:	4825      	ldr	r0, [pc, #148]	; (8006194 <__d2b+0xb0>)
 8006100:	f240 310f 	movw	r1, #783	; 0x30f
 8006104:	f000 fa86 	bl	8006614 <__assert_func>
 8006108:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800610c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006110:	bb2d      	cbnz	r5, 800615e <__d2b+0x7a>
 8006112:	9301      	str	r3, [sp, #4]
 8006114:	f1b8 0300 	subs.w	r3, r8, #0
 8006118:	d026      	beq.n	8006168 <__d2b+0x84>
 800611a:	4668      	mov	r0, sp
 800611c:	9300      	str	r3, [sp, #0]
 800611e:	f7ff fd87 	bl	8005c30 <__lo0bits>
 8006122:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006126:	b1e8      	cbz	r0, 8006164 <__d2b+0x80>
 8006128:	f1c0 0320 	rsb	r3, r0, #32
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	430b      	orrs	r3, r1
 8006132:	40c2      	lsrs	r2, r0
 8006134:	6163      	str	r3, [r4, #20]
 8006136:	9201      	str	r2, [sp, #4]
 8006138:	9b01      	ldr	r3, [sp, #4]
 800613a:	61a3      	str	r3, [r4, #24]
 800613c:	2b00      	cmp	r3, #0
 800613e:	bf14      	ite	ne
 8006140:	2202      	movne	r2, #2
 8006142:	2201      	moveq	r2, #1
 8006144:	6122      	str	r2, [r4, #16]
 8006146:	b1bd      	cbz	r5, 8006178 <__d2b+0x94>
 8006148:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800614c:	4405      	add	r5, r0
 800614e:	603d      	str	r5, [r7, #0]
 8006150:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006154:	6030      	str	r0, [r6, #0]
 8006156:	4620      	mov	r0, r4
 8006158:	b003      	add	sp, #12
 800615a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800615e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006162:	e7d6      	b.n	8006112 <__d2b+0x2e>
 8006164:	6161      	str	r1, [r4, #20]
 8006166:	e7e7      	b.n	8006138 <__d2b+0x54>
 8006168:	a801      	add	r0, sp, #4
 800616a:	f7ff fd61 	bl	8005c30 <__lo0bits>
 800616e:	9b01      	ldr	r3, [sp, #4]
 8006170:	6163      	str	r3, [r4, #20]
 8006172:	3020      	adds	r0, #32
 8006174:	2201      	movs	r2, #1
 8006176:	e7e5      	b.n	8006144 <__d2b+0x60>
 8006178:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800617c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006180:	6038      	str	r0, [r7, #0]
 8006182:	6918      	ldr	r0, [r3, #16]
 8006184:	f7ff fd34 	bl	8005bf0 <__hi0bits>
 8006188:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800618c:	e7e2      	b.n	8006154 <__d2b+0x70>
 800618e:	bf00      	nop
 8006190:	08006db8 	.word	0x08006db8
 8006194:	08006dc9 	.word	0x08006dc9

08006198 <__ssputs_r>:
 8006198:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800619c:	688e      	ldr	r6, [r1, #8]
 800619e:	461f      	mov	r7, r3
 80061a0:	42be      	cmp	r6, r7
 80061a2:	680b      	ldr	r3, [r1, #0]
 80061a4:	4682      	mov	sl, r0
 80061a6:	460c      	mov	r4, r1
 80061a8:	4690      	mov	r8, r2
 80061aa:	d82c      	bhi.n	8006206 <__ssputs_r+0x6e>
 80061ac:	898a      	ldrh	r2, [r1, #12]
 80061ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80061b2:	d026      	beq.n	8006202 <__ssputs_r+0x6a>
 80061b4:	6965      	ldr	r5, [r4, #20]
 80061b6:	6909      	ldr	r1, [r1, #16]
 80061b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80061bc:	eba3 0901 	sub.w	r9, r3, r1
 80061c0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80061c4:	1c7b      	adds	r3, r7, #1
 80061c6:	444b      	add	r3, r9
 80061c8:	106d      	asrs	r5, r5, #1
 80061ca:	429d      	cmp	r5, r3
 80061cc:	bf38      	it	cc
 80061ce:	461d      	movcc	r5, r3
 80061d0:	0553      	lsls	r3, r2, #21
 80061d2:	d527      	bpl.n	8006224 <__ssputs_r+0x8c>
 80061d4:	4629      	mov	r1, r5
 80061d6:	f7ff fbd7 	bl	8005988 <_malloc_r>
 80061da:	4606      	mov	r6, r0
 80061dc:	b360      	cbz	r0, 8006238 <__ssputs_r+0xa0>
 80061de:	6921      	ldr	r1, [r4, #16]
 80061e0:	464a      	mov	r2, r9
 80061e2:	f000 fa09 	bl	80065f8 <memcpy>
 80061e6:	89a3      	ldrh	r3, [r4, #12]
 80061e8:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80061ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f0:	81a3      	strh	r3, [r4, #12]
 80061f2:	6126      	str	r6, [r4, #16]
 80061f4:	6165      	str	r5, [r4, #20]
 80061f6:	444e      	add	r6, r9
 80061f8:	eba5 0509 	sub.w	r5, r5, r9
 80061fc:	6026      	str	r6, [r4, #0]
 80061fe:	60a5      	str	r5, [r4, #8]
 8006200:	463e      	mov	r6, r7
 8006202:	42be      	cmp	r6, r7
 8006204:	d900      	bls.n	8006208 <__ssputs_r+0x70>
 8006206:	463e      	mov	r6, r7
 8006208:	6820      	ldr	r0, [r4, #0]
 800620a:	4632      	mov	r2, r6
 800620c:	4641      	mov	r1, r8
 800620e:	f000 f9c9 	bl	80065a4 <memmove>
 8006212:	68a3      	ldr	r3, [r4, #8]
 8006214:	1b9b      	subs	r3, r3, r6
 8006216:	60a3      	str	r3, [r4, #8]
 8006218:	6823      	ldr	r3, [r4, #0]
 800621a:	4433      	add	r3, r6
 800621c:	6023      	str	r3, [r4, #0]
 800621e:	2000      	movs	r0, #0
 8006220:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006224:	462a      	mov	r2, r5
 8006226:	f000 fa3b 	bl	80066a0 <_realloc_r>
 800622a:	4606      	mov	r6, r0
 800622c:	2800      	cmp	r0, #0
 800622e:	d1e0      	bne.n	80061f2 <__ssputs_r+0x5a>
 8006230:	6921      	ldr	r1, [r4, #16]
 8006232:	4650      	mov	r0, sl
 8006234:	f7ff fb34 	bl	80058a0 <_free_r>
 8006238:	230c      	movs	r3, #12
 800623a:	f8ca 3000 	str.w	r3, [sl]
 800623e:	89a3      	ldrh	r3, [r4, #12]
 8006240:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006244:	81a3      	strh	r3, [r4, #12]
 8006246:	f04f 30ff 	mov.w	r0, #4294967295
 800624a:	e7e9      	b.n	8006220 <__ssputs_r+0x88>

0800624c <_svfiprintf_r>:
 800624c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006250:	4698      	mov	r8, r3
 8006252:	898b      	ldrh	r3, [r1, #12]
 8006254:	061b      	lsls	r3, r3, #24
 8006256:	b09d      	sub	sp, #116	; 0x74
 8006258:	4607      	mov	r7, r0
 800625a:	460d      	mov	r5, r1
 800625c:	4614      	mov	r4, r2
 800625e:	d50e      	bpl.n	800627e <_svfiprintf_r+0x32>
 8006260:	690b      	ldr	r3, [r1, #16]
 8006262:	b963      	cbnz	r3, 800627e <_svfiprintf_r+0x32>
 8006264:	2140      	movs	r1, #64	; 0x40
 8006266:	f7ff fb8f 	bl	8005988 <_malloc_r>
 800626a:	6028      	str	r0, [r5, #0]
 800626c:	6128      	str	r0, [r5, #16]
 800626e:	b920      	cbnz	r0, 800627a <_svfiprintf_r+0x2e>
 8006270:	230c      	movs	r3, #12
 8006272:	603b      	str	r3, [r7, #0]
 8006274:	f04f 30ff 	mov.w	r0, #4294967295
 8006278:	e0d0      	b.n	800641c <_svfiprintf_r+0x1d0>
 800627a:	2340      	movs	r3, #64	; 0x40
 800627c:	616b      	str	r3, [r5, #20]
 800627e:	2300      	movs	r3, #0
 8006280:	9309      	str	r3, [sp, #36]	; 0x24
 8006282:	2320      	movs	r3, #32
 8006284:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006288:	f8cd 800c 	str.w	r8, [sp, #12]
 800628c:	2330      	movs	r3, #48	; 0x30
 800628e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006434 <_svfiprintf_r+0x1e8>
 8006292:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006296:	f04f 0901 	mov.w	r9, #1
 800629a:	4623      	mov	r3, r4
 800629c:	469a      	mov	sl, r3
 800629e:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062a2:	b10a      	cbz	r2, 80062a8 <_svfiprintf_r+0x5c>
 80062a4:	2a25      	cmp	r2, #37	; 0x25
 80062a6:	d1f9      	bne.n	800629c <_svfiprintf_r+0x50>
 80062a8:	ebba 0b04 	subs.w	fp, sl, r4
 80062ac:	d00b      	beq.n	80062c6 <_svfiprintf_r+0x7a>
 80062ae:	465b      	mov	r3, fp
 80062b0:	4622      	mov	r2, r4
 80062b2:	4629      	mov	r1, r5
 80062b4:	4638      	mov	r0, r7
 80062b6:	f7ff ff6f 	bl	8006198 <__ssputs_r>
 80062ba:	3001      	adds	r0, #1
 80062bc:	f000 80a9 	beq.w	8006412 <_svfiprintf_r+0x1c6>
 80062c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80062c2:	445a      	add	r2, fp
 80062c4:	9209      	str	r2, [sp, #36]	; 0x24
 80062c6:	f89a 3000 	ldrb.w	r3, [sl]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f000 80a1 	beq.w	8006412 <_svfiprintf_r+0x1c6>
 80062d0:	2300      	movs	r3, #0
 80062d2:	f04f 32ff 	mov.w	r2, #4294967295
 80062d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062da:	f10a 0a01 	add.w	sl, sl, #1
 80062de:	9304      	str	r3, [sp, #16]
 80062e0:	9307      	str	r3, [sp, #28]
 80062e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80062e6:	931a      	str	r3, [sp, #104]	; 0x68
 80062e8:	4654      	mov	r4, sl
 80062ea:	2205      	movs	r2, #5
 80062ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80062f0:	4850      	ldr	r0, [pc, #320]	; (8006434 <_svfiprintf_r+0x1e8>)
 80062f2:	f7f9 ffa5 	bl	8000240 <memchr>
 80062f6:	9a04      	ldr	r2, [sp, #16]
 80062f8:	b9d8      	cbnz	r0, 8006332 <_svfiprintf_r+0xe6>
 80062fa:	06d0      	lsls	r0, r2, #27
 80062fc:	bf44      	itt	mi
 80062fe:	2320      	movmi	r3, #32
 8006300:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006304:	0711      	lsls	r1, r2, #28
 8006306:	bf44      	itt	mi
 8006308:	232b      	movmi	r3, #43	; 0x2b
 800630a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800630e:	f89a 3000 	ldrb.w	r3, [sl]
 8006312:	2b2a      	cmp	r3, #42	; 0x2a
 8006314:	d015      	beq.n	8006342 <_svfiprintf_r+0xf6>
 8006316:	9a07      	ldr	r2, [sp, #28]
 8006318:	4654      	mov	r4, sl
 800631a:	2000      	movs	r0, #0
 800631c:	f04f 0c0a 	mov.w	ip, #10
 8006320:	4621      	mov	r1, r4
 8006322:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006326:	3b30      	subs	r3, #48	; 0x30
 8006328:	2b09      	cmp	r3, #9
 800632a:	d94d      	bls.n	80063c8 <_svfiprintf_r+0x17c>
 800632c:	b1b0      	cbz	r0, 800635c <_svfiprintf_r+0x110>
 800632e:	9207      	str	r2, [sp, #28]
 8006330:	e014      	b.n	800635c <_svfiprintf_r+0x110>
 8006332:	eba0 0308 	sub.w	r3, r0, r8
 8006336:	fa09 f303 	lsl.w	r3, r9, r3
 800633a:	4313      	orrs	r3, r2
 800633c:	9304      	str	r3, [sp, #16]
 800633e:	46a2      	mov	sl, r4
 8006340:	e7d2      	b.n	80062e8 <_svfiprintf_r+0x9c>
 8006342:	9b03      	ldr	r3, [sp, #12]
 8006344:	1d19      	adds	r1, r3, #4
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	9103      	str	r1, [sp, #12]
 800634a:	2b00      	cmp	r3, #0
 800634c:	bfbb      	ittet	lt
 800634e:	425b      	neglt	r3, r3
 8006350:	f042 0202 	orrlt.w	r2, r2, #2
 8006354:	9307      	strge	r3, [sp, #28]
 8006356:	9307      	strlt	r3, [sp, #28]
 8006358:	bfb8      	it	lt
 800635a:	9204      	strlt	r2, [sp, #16]
 800635c:	7823      	ldrb	r3, [r4, #0]
 800635e:	2b2e      	cmp	r3, #46	; 0x2e
 8006360:	d10c      	bne.n	800637c <_svfiprintf_r+0x130>
 8006362:	7863      	ldrb	r3, [r4, #1]
 8006364:	2b2a      	cmp	r3, #42	; 0x2a
 8006366:	d134      	bne.n	80063d2 <_svfiprintf_r+0x186>
 8006368:	9b03      	ldr	r3, [sp, #12]
 800636a:	1d1a      	adds	r2, r3, #4
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	9203      	str	r2, [sp, #12]
 8006370:	2b00      	cmp	r3, #0
 8006372:	bfb8      	it	lt
 8006374:	f04f 33ff 	movlt.w	r3, #4294967295
 8006378:	3402      	adds	r4, #2
 800637a:	9305      	str	r3, [sp, #20]
 800637c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006444 <_svfiprintf_r+0x1f8>
 8006380:	7821      	ldrb	r1, [r4, #0]
 8006382:	2203      	movs	r2, #3
 8006384:	4650      	mov	r0, sl
 8006386:	f7f9 ff5b 	bl	8000240 <memchr>
 800638a:	b138      	cbz	r0, 800639c <_svfiprintf_r+0x150>
 800638c:	9b04      	ldr	r3, [sp, #16]
 800638e:	eba0 000a 	sub.w	r0, r0, sl
 8006392:	2240      	movs	r2, #64	; 0x40
 8006394:	4082      	lsls	r2, r0
 8006396:	4313      	orrs	r3, r2
 8006398:	3401      	adds	r4, #1
 800639a:	9304      	str	r3, [sp, #16]
 800639c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063a0:	4825      	ldr	r0, [pc, #148]	; (8006438 <_svfiprintf_r+0x1ec>)
 80063a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80063a6:	2206      	movs	r2, #6
 80063a8:	f7f9 ff4a 	bl	8000240 <memchr>
 80063ac:	2800      	cmp	r0, #0
 80063ae:	d038      	beq.n	8006422 <_svfiprintf_r+0x1d6>
 80063b0:	4b22      	ldr	r3, [pc, #136]	; (800643c <_svfiprintf_r+0x1f0>)
 80063b2:	bb1b      	cbnz	r3, 80063fc <_svfiprintf_r+0x1b0>
 80063b4:	9b03      	ldr	r3, [sp, #12]
 80063b6:	3307      	adds	r3, #7
 80063b8:	f023 0307 	bic.w	r3, r3, #7
 80063bc:	3308      	adds	r3, #8
 80063be:	9303      	str	r3, [sp, #12]
 80063c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80063c2:	4433      	add	r3, r6
 80063c4:	9309      	str	r3, [sp, #36]	; 0x24
 80063c6:	e768      	b.n	800629a <_svfiprintf_r+0x4e>
 80063c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80063cc:	460c      	mov	r4, r1
 80063ce:	2001      	movs	r0, #1
 80063d0:	e7a6      	b.n	8006320 <_svfiprintf_r+0xd4>
 80063d2:	2300      	movs	r3, #0
 80063d4:	3401      	adds	r4, #1
 80063d6:	9305      	str	r3, [sp, #20]
 80063d8:	4619      	mov	r1, r3
 80063da:	f04f 0c0a 	mov.w	ip, #10
 80063de:	4620      	mov	r0, r4
 80063e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80063e4:	3a30      	subs	r2, #48	; 0x30
 80063e6:	2a09      	cmp	r2, #9
 80063e8:	d903      	bls.n	80063f2 <_svfiprintf_r+0x1a6>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d0c6      	beq.n	800637c <_svfiprintf_r+0x130>
 80063ee:	9105      	str	r1, [sp, #20]
 80063f0:	e7c4      	b.n	800637c <_svfiprintf_r+0x130>
 80063f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80063f6:	4604      	mov	r4, r0
 80063f8:	2301      	movs	r3, #1
 80063fa:	e7f0      	b.n	80063de <_svfiprintf_r+0x192>
 80063fc:	ab03      	add	r3, sp, #12
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	462a      	mov	r2, r5
 8006402:	4b0f      	ldr	r3, [pc, #60]	; (8006440 <_svfiprintf_r+0x1f4>)
 8006404:	a904      	add	r1, sp, #16
 8006406:	4638      	mov	r0, r7
 8006408:	f7fd ff1a 	bl	8004240 <_printf_float>
 800640c:	1c42      	adds	r2, r0, #1
 800640e:	4606      	mov	r6, r0
 8006410:	d1d6      	bne.n	80063c0 <_svfiprintf_r+0x174>
 8006412:	89ab      	ldrh	r3, [r5, #12]
 8006414:	065b      	lsls	r3, r3, #25
 8006416:	f53f af2d 	bmi.w	8006274 <_svfiprintf_r+0x28>
 800641a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800641c:	b01d      	add	sp, #116	; 0x74
 800641e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006422:	ab03      	add	r3, sp, #12
 8006424:	9300      	str	r3, [sp, #0]
 8006426:	462a      	mov	r2, r5
 8006428:	4b05      	ldr	r3, [pc, #20]	; (8006440 <_svfiprintf_r+0x1f4>)
 800642a:	a904      	add	r1, sp, #16
 800642c:	4638      	mov	r0, r7
 800642e:	f7fe f98f 	bl	8004750 <_printf_i>
 8006432:	e7eb      	b.n	800640c <_svfiprintf_r+0x1c0>
 8006434:	08006f24 	.word	0x08006f24
 8006438:	08006f2e 	.word	0x08006f2e
 800643c:	08004241 	.word	0x08004241
 8006440:	08006199 	.word	0x08006199
 8006444:	08006f2a 	.word	0x08006f2a

08006448 <__sflush_r>:
 8006448:	898a      	ldrh	r2, [r1, #12]
 800644a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800644e:	4605      	mov	r5, r0
 8006450:	0710      	lsls	r0, r2, #28
 8006452:	460c      	mov	r4, r1
 8006454:	d458      	bmi.n	8006508 <__sflush_r+0xc0>
 8006456:	684b      	ldr	r3, [r1, #4]
 8006458:	2b00      	cmp	r3, #0
 800645a:	dc05      	bgt.n	8006468 <__sflush_r+0x20>
 800645c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800645e:	2b00      	cmp	r3, #0
 8006460:	dc02      	bgt.n	8006468 <__sflush_r+0x20>
 8006462:	2000      	movs	r0, #0
 8006464:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006468:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800646a:	2e00      	cmp	r6, #0
 800646c:	d0f9      	beq.n	8006462 <__sflush_r+0x1a>
 800646e:	2300      	movs	r3, #0
 8006470:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006474:	682f      	ldr	r7, [r5, #0]
 8006476:	6a21      	ldr	r1, [r4, #32]
 8006478:	602b      	str	r3, [r5, #0]
 800647a:	d032      	beq.n	80064e2 <__sflush_r+0x9a>
 800647c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800647e:	89a3      	ldrh	r3, [r4, #12]
 8006480:	075a      	lsls	r2, r3, #29
 8006482:	d505      	bpl.n	8006490 <__sflush_r+0x48>
 8006484:	6863      	ldr	r3, [r4, #4]
 8006486:	1ac0      	subs	r0, r0, r3
 8006488:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800648a:	b10b      	cbz	r3, 8006490 <__sflush_r+0x48>
 800648c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800648e:	1ac0      	subs	r0, r0, r3
 8006490:	2300      	movs	r3, #0
 8006492:	4602      	mov	r2, r0
 8006494:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006496:	6a21      	ldr	r1, [r4, #32]
 8006498:	4628      	mov	r0, r5
 800649a:	47b0      	blx	r6
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	89a3      	ldrh	r3, [r4, #12]
 80064a0:	d106      	bne.n	80064b0 <__sflush_r+0x68>
 80064a2:	6829      	ldr	r1, [r5, #0]
 80064a4:	291d      	cmp	r1, #29
 80064a6:	d82b      	bhi.n	8006500 <__sflush_r+0xb8>
 80064a8:	4a29      	ldr	r2, [pc, #164]	; (8006550 <__sflush_r+0x108>)
 80064aa:	410a      	asrs	r2, r1
 80064ac:	07d6      	lsls	r6, r2, #31
 80064ae:	d427      	bmi.n	8006500 <__sflush_r+0xb8>
 80064b0:	2200      	movs	r2, #0
 80064b2:	6062      	str	r2, [r4, #4]
 80064b4:	04d9      	lsls	r1, r3, #19
 80064b6:	6922      	ldr	r2, [r4, #16]
 80064b8:	6022      	str	r2, [r4, #0]
 80064ba:	d504      	bpl.n	80064c6 <__sflush_r+0x7e>
 80064bc:	1c42      	adds	r2, r0, #1
 80064be:	d101      	bne.n	80064c4 <__sflush_r+0x7c>
 80064c0:	682b      	ldr	r3, [r5, #0]
 80064c2:	b903      	cbnz	r3, 80064c6 <__sflush_r+0x7e>
 80064c4:	6560      	str	r0, [r4, #84]	; 0x54
 80064c6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80064c8:	602f      	str	r7, [r5, #0]
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d0c9      	beq.n	8006462 <__sflush_r+0x1a>
 80064ce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80064d2:	4299      	cmp	r1, r3
 80064d4:	d002      	beq.n	80064dc <__sflush_r+0x94>
 80064d6:	4628      	mov	r0, r5
 80064d8:	f7ff f9e2 	bl	80058a0 <_free_r>
 80064dc:	2000      	movs	r0, #0
 80064de:	6360      	str	r0, [r4, #52]	; 0x34
 80064e0:	e7c0      	b.n	8006464 <__sflush_r+0x1c>
 80064e2:	2301      	movs	r3, #1
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	1c41      	adds	r1, r0, #1
 80064ea:	d1c8      	bne.n	800647e <__sflush_r+0x36>
 80064ec:	682b      	ldr	r3, [r5, #0]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d0c5      	beq.n	800647e <__sflush_r+0x36>
 80064f2:	2b1d      	cmp	r3, #29
 80064f4:	d001      	beq.n	80064fa <__sflush_r+0xb2>
 80064f6:	2b16      	cmp	r3, #22
 80064f8:	d101      	bne.n	80064fe <__sflush_r+0xb6>
 80064fa:	602f      	str	r7, [r5, #0]
 80064fc:	e7b1      	b.n	8006462 <__sflush_r+0x1a>
 80064fe:	89a3      	ldrh	r3, [r4, #12]
 8006500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006504:	81a3      	strh	r3, [r4, #12]
 8006506:	e7ad      	b.n	8006464 <__sflush_r+0x1c>
 8006508:	690f      	ldr	r7, [r1, #16]
 800650a:	2f00      	cmp	r7, #0
 800650c:	d0a9      	beq.n	8006462 <__sflush_r+0x1a>
 800650e:	0793      	lsls	r3, r2, #30
 8006510:	680e      	ldr	r6, [r1, #0]
 8006512:	bf08      	it	eq
 8006514:	694b      	ldreq	r3, [r1, #20]
 8006516:	600f      	str	r7, [r1, #0]
 8006518:	bf18      	it	ne
 800651a:	2300      	movne	r3, #0
 800651c:	eba6 0807 	sub.w	r8, r6, r7
 8006520:	608b      	str	r3, [r1, #8]
 8006522:	f1b8 0f00 	cmp.w	r8, #0
 8006526:	dd9c      	ble.n	8006462 <__sflush_r+0x1a>
 8006528:	6a21      	ldr	r1, [r4, #32]
 800652a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800652c:	4643      	mov	r3, r8
 800652e:	463a      	mov	r2, r7
 8006530:	4628      	mov	r0, r5
 8006532:	47b0      	blx	r6
 8006534:	2800      	cmp	r0, #0
 8006536:	dc06      	bgt.n	8006546 <__sflush_r+0xfe>
 8006538:	89a3      	ldrh	r3, [r4, #12]
 800653a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800653e:	81a3      	strh	r3, [r4, #12]
 8006540:	f04f 30ff 	mov.w	r0, #4294967295
 8006544:	e78e      	b.n	8006464 <__sflush_r+0x1c>
 8006546:	4407      	add	r7, r0
 8006548:	eba8 0800 	sub.w	r8, r8, r0
 800654c:	e7e9      	b.n	8006522 <__sflush_r+0xda>
 800654e:	bf00      	nop
 8006550:	dfbffffe 	.word	0xdfbffffe

08006554 <_fflush_r>:
 8006554:	b538      	push	{r3, r4, r5, lr}
 8006556:	690b      	ldr	r3, [r1, #16]
 8006558:	4605      	mov	r5, r0
 800655a:	460c      	mov	r4, r1
 800655c:	b913      	cbnz	r3, 8006564 <_fflush_r+0x10>
 800655e:	2500      	movs	r5, #0
 8006560:	4628      	mov	r0, r5
 8006562:	bd38      	pop	{r3, r4, r5, pc}
 8006564:	b118      	cbz	r0, 800656e <_fflush_r+0x1a>
 8006566:	6a03      	ldr	r3, [r0, #32]
 8006568:	b90b      	cbnz	r3, 800656e <_fflush_r+0x1a>
 800656a:	f7fe fa8d 	bl	8004a88 <__sinit>
 800656e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d0f3      	beq.n	800655e <_fflush_r+0xa>
 8006576:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006578:	07d0      	lsls	r0, r2, #31
 800657a:	d404      	bmi.n	8006586 <_fflush_r+0x32>
 800657c:	0599      	lsls	r1, r3, #22
 800657e:	d402      	bmi.n	8006586 <_fflush_r+0x32>
 8006580:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006582:	f7fe fb97 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 8006586:	4628      	mov	r0, r5
 8006588:	4621      	mov	r1, r4
 800658a:	f7ff ff5d 	bl	8006448 <__sflush_r>
 800658e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006590:	07da      	lsls	r2, r3, #31
 8006592:	4605      	mov	r5, r0
 8006594:	d4e4      	bmi.n	8006560 <_fflush_r+0xc>
 8006596:	89a3      	ldrh	r3, [r4, #12]
 8006598:	059b      	lsls	r3, r3, #22
 800659a:	d4e1      	bmi.n	8006560 <_fflush_r+0xc>
 800659c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800659e:	f7fe fb8a 	bl	8004cb6 <__retarget_lock_release_recursive>
 80065a2:	e7dd      	b.n	8006560 <_fflush_r+0xc>

080065a4 <memmove>:
 80065a4:	4288      	cmp	r0, r1
 80065a6:	b510      	push	{r4, lr}
 80065a8:	eb01 0402 	add.w	r4, r1, r2
 80065ac:	d902      	bls.n	80065b4 <memmove+0x10>
 80065ae:	4284      	cmp	r4, r0
 80065b0:	4623      	mov	r3, r4
 80065b2:	d807      	bhi.n	80065c4 <memmove+0x20>
 80065b4:	1e43      	subs	r3, r0, #1
 80065b6:	42a1      	cmp	r1, r4
 80065b8:	d008      	beq.n	80065cc <memmove+0x28>
 80065ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80065be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80065c2:	e7f8      	b.n	80065b6 <memmove+0x12>
 80065c4:	4402      	add	r2, r0
 80065c6:	4601      	mov	r1, r0
 80065c8:	428a      	cmp	r2, r1
 80065ca:	d100      	bne.n	80065ce <memmove+0x2a>
 80065cc:	bd10      	pop	{r4, pc}
 80065ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80065d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065d6:	e7f7      	b.n	80065c8 <memmove+0x24>

080065d8 <_sbrk_r>:
 80065d8:	b538      	push	{r3, r4, r5, lr}
 80065da:	4d06      	ldr	r5, [pc, #24]	; (80065f4 <_sbrk_r+0x1c>)
 80065dc:	2300      	movs	r3, #0
 80065de:	4604      	mov	r4, r0
 80065e0:	4608      	mov	r0, r1
 80065e2:	602b      	str	r3, [r5, #0]
 80065e4:	f7fa fcb6 	bl	8000f54 <_sbrk>
 80065e8:	1c43      	adds	r3, r0, #1
 80065ea:	d102      	bne.n	80065f2 <_sbrk_r+0x1a>
 80065ec:	682b      	ldr	r3, [r5, #0]
 80065ee:	b103      	cbz	r3, 80065f2 <_sbrk_r+0x1a>
 80065f0:	6023      	str	r3, [r4, #0]
 80065f2:	bd38      	pop	{r3, r4, r5, pc}
 80065f4:	200005ac 	.word	0x200005ac

080065f8 <memcpy>:
 80065f8:	440a      	add	r2, r1
 80065fa:	4291      	cmp	r1, r2
 80065fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006600:	d100      	bne.n	8006604 <memcpy+0xc>
 8006602:	4770      	bx	lr
 8006604:	b510      	push	{r4, lr}
 8006606:	f811 4b01 	ldrb.w	r4, [r1], #1
 800660a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800660e:	4291      	cmp	r1, r2
 8006610:	d1f9      	bne.n	8006606 <memcpy+0xe>
 8006612:	bd10      	pop	{r4, pc}

08006614 <__assert_func>:
 8006614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006616:	4614      	mov	r4, r2
 8006618:	461a      	mov	r2, r3
 800661a:	4b09      	ldr	r3, [pc, #36]	; (8006640 <__assert_func+0x2c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4605      	mov	r5, r0
 8006620:	68d8      	ldr	r0, [r3, #12]
 8006622:	b14c      	cbz	r4, 8006638 <__assert_func+0x24>
 8006624:	4b07      	ldr	r3, [pc, #28]	; (8006644 <__assert_func+0x30>)
 8006626:	9100      	str	r1, [sp, #0]
 8006628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800662c:	4906      	ldr	r1, [pc, #24]	; (8006648 <__assert_func+0x34>)
 800662e:	462b      	mov	r3, r5
 8006630:	f000 f872 	bl	8006718 <fiprintf>
 8006634:	f000 f882 	bl	800673c <abort>
 8006638:	4b04      	ldr	r3, [pc, #16]	; (800664c <__assert_func+0x38>)
 800663a:	461c      	mov	r4, r3
 800663c:	e7f3      	b.n	8006626 <__assert_func+0x12>
 800663e:	bf00      	nop
 8006640:	20000064 	.word	0x20000064
 8006644:	08006f3f 	.word	0x08006f3f
 8006648:	08006f4c 	.word	0x08006f4c
 800664c:	08006f7a 	.word	0x08006f7a

08006650 <_calloc_r>:
 8006650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006652:	fba1 2402 	umull	r2, r4, r1, r2
 8006656:	b94c      	cbnz	r4, 800666c <_calloc_r+0x1c>
 8006658:	4611      	mov	r1, r2
 800665a:	9201      	str	r2, [sp, #4]
 800665c:	f7ff f994 	bl	8005988 <_malloc_r>
 8006660:	9a01      	ldr	r2, [sp, #4]
 8006662:	4605      	mov	r5, r0
 8006664:	b930      	cbnz	r0, 8006674 <_calloc_r+0x24>
 8006666:	4628      	mov	r0, r5
 8006668:	b003      	add	sp, #12
 800666a:	bd30      	pop	{r4, r5, pc}
 800666c:	220c      	movs	r2, #12
 800666e:	6002      	str	r2, [r0, #0]
 8006670:	2500      	movs	r5, #0
 8006672:	e7f8      	b.n	8006666 <_calloc_r+0x16>
 8006674:	4621      	mov	r1, r4
 8006676:	f7fe faa0 	bl	8004bba <memset>
 800667a:	e7f4      	b.n	8006666 <_calloc_r+0x16>

0800667c <__ascii_mbtowc>:
 800667c:	b082      	sub	sp, #8
 800667e:	b901      	cbnz	r1, 8006682 <__ascii_mbtowc+0x6>
 8006680:	a901      	add	r1, sp, #4
 8006682:	b142      	cbz	r2, 8006696 <__ascii_mbtowc+0x1a>
 8006684:	b14b      	cbz	r3, 800669a <__ascii_mbtowc+0x1e>
 8006686:	7813      	ldrb	r3, [r2, #0]
 8006688:	600b      	str	r3, [r1, #0]
 800668a:	7812      	ldrb	r2, [r2, #0]
 800668c:	1e10      	subs	r0, r2, #0
 800668e:	bf18      	it	ne
 8006690:	2001      	movne	r0, #1
 8006692:	b002      	add	sp, #8
 8006694:	4770      	bx	lr
 8006696:	4610      	mov	r0, r2
 8006698:	e7fb      	b.n	8006692 <__ascii_mbtowc+0x16>
 800669a:	f06f 0001 	mvn.w	r0, #1
 800669e:	e7f8      	b.n	8006692 <__ascii_mbtowc+0x16>

080066a0 <_realloc_r>:
 80066a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066a4:	4680      	mov	r8, r0
 80066a6:	4614      	mov	r4, r2
 80066a8:	460e      	mov	r6, r1
 80066aa:	b921      	cbnz	r1, 80066b6 <_realloc_r+0x16>
 80066ac:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066b0:	4611      	mov	r1, r2
 80066b2:	f7ff b969 	b.w	8005988 <_malloc_r>
 80066b6:	b92a      	cbnz	r2, 80066c4 <_realloc_r+0x24>
 80066b8:	f7ff f8f2 	bl	80058a0 <_free_r>
 80066bc:	4625      	mov	r5, r4
 80066be:	4628      	mov	r0, r5
 80066c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c4:	f000 f841 	bl	800674a <_malloc_usable_size_r>
 80066c8:	4284      	cmp	r4, r0
 80066ca:	4607      	mov	r7, r0
 80066cc:	d802      	bhi.n	80066d4 <_realloc_r+0x34>
 80066ce:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80066d2:	d812      	bhi.n	80066fa <_realloc_r+0x5a>
 80066d4:	4621      	mov	r1, r4
 80066d6:	4640      	mov	r0, r8
 80066d8:	f7ff f956 	bl	8005988 <_malloc_r>
 80066dc:	4605      	mov	r5, r0
 80066de:	2800      	cmp	r0, #0
 80066e0:	d0ed      	beq.n	80066be <_realloc_r+0x1e>
 80066e2:	42bc      	cmp	r4, r7
 80066e4:	4622      	mov	r2, r4
 80066e6:	4631      	mov	r1, r6
 80066e8:	bf28      	it	cs
 80066ea:	463a      	movcs	r2, r7
 80066ec:	f7ff ff84 	bl	80065f8 <memcpy>
 80066f0:	4631      	mov	r1, r6
 80066f2:	4640      	mov	r0, r8
 80066f4:	f7ff f8d4 	bl	80058a0 <_free_r>
 80066f8:	e7e1      	b.n	80066be <_realloc_r+0x1e>
 80066fa:	4635      	mov	r5, r6
 80066fc:	e7df      	b.n	80066be <_realloc_r+0x1e>

080066fe <__ascii_wctomb>:
 80066fe:	b149      	cbz	r1, 8006714 <__ascii_wctomb+0x16>
 8006700:	2aff      	cmp	r2, #255	; 0xff
 8006702:	bf85      	ittet	hi
 8006704:	238a      	movhi	r3, #138	; 0x8a
 8006706:	6003      	strhi	r3, [r0, #0]
 8006708:	700a      	strbls	r2, [r1, #0]
 800670a:	f04f 30ff 	movhi.w	r0, #4294967295
 800670e:	bf98      	it	ls
 8006710:	2001      	movls	r0, #1
 8006712:	4770      	bx	lr
 8006714:	4608      	mov	r0, r1
 8006716:	4770      	bx	lr

08006718 <fiprintf>:
 8006718:	b40e      	push	{r1, r2, r3}
 800671a:	b503      	push	{r0, r1, lr}
 800671c:	4601      	mov	r1, r0
 800671e:	ab03      	add	r3, sp, #12
 8006720:	4805      	ldr	r0, [pc, #20]	; (8006738 <fiprintf+0x20>)
 8006722:	f853 2b04 	ldr.w	r2, [r3], #4
 8006726:	6800      	ldr	r0, [r0, #0]
 8006728:	9301      	str	r3, [sp, #4]
 800672a:	f000 f83f 	bl	80067ac <_vfiprintf_r>
 800672e:	b002      	add	sp, #8
 8006730:	f85d eb04 	ldr.w	lr, [sp], #4
 8006734:	b003      	add	sp, #12
 8006736:	4770      	bx	lr
 8006738:	20000064 	.word	0x20000064

0800673c <abort>:
 800673c:	b508      	push	{r3, lr}
 800673e:	2006      	movs	r0, #6
 8006740:	f000 fa0c 	bl	8006b5c <raise>
 8006744:	2001      	movs	r0, #1
 8006746:	f7fa fb8d 	bl	8000e64 <_exit>

0800674a <_malloc_usable_size_r>:
 800674a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800674e:	1f18      	subs	r0, r3, #4
 8006750:	2b00      	cmp	r3, #0
 8006752:	bfbc      	itt	lt
 8006754:	580b      	ldrlt	r3, [r1, r0]
 8006756:	18c0      	addlt	r0, r0, r3
 8006758:	4770      	bx	lr

0800675a <__sfputc_r>:
 800675a:	6893      	ldr	r3, [r2, #8]
 800675c:	3b01      	subs	r3, #1
 800675e:	2b00      	cmp	r3, #0
 8006760:	b410      	push	{r4}
 8006762:	6093      	str	r3, [r2, #8]
 8006764:	da08      	bge.n	8006778 <__sfputc_r+0x1e>
 8006766:	6994      	ldr	r4, [r2, #24]
 8006768:	42a3      	cmp	r3, r4
 800676a:	db01      	blt.n	8006770 <__sfputc_r+0x16>
 800676c:	290a      	cmp	r1, #10
 800676e:	d103      	bne.n	8006778 <__sfputc_r+0x1e>
 8006770:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006774:	f000 b934 	b.w	80069e0 <__swbuf_r>
 8006778:	6813      	ldr	r3, [r2, #0]
 800677a:	1c58      	adds	r0, r3, #1
 800677c:	6010      	str	r0, [r2, #0]
 800677e:	7019      	strb	r1, [r3, #0]
 8006780:	4608      	mov	r0, r1
 8006782:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006786:	4770      	bx	lr

08006788 <__sfputs_r>:
 8006788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800678a:	4606      	mov	r6, r0
 800678c:	460f      	mov	r7, r1
 800678e:	4614      	mov	r4, r2
 8006790:	18d5      	adds	r5, r2, r3
 8006792:	42ac      	cmp	r4, r5
 8006794:	d101      	bne.n	800679a <__sfputs_r+0x12>
 8006796:	2000      	movs	r0, #0
 8006798:	e007      	b.n	80067aa <__sfputs_r+0x22>
 800679a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800679e:	463a      	mov	r2, r7
 80067a0:	4630      	mov	r0, r6
 80067a2:	f7ff ffda 	bl	800675a <__sfputc_r>
 80067a6:	1c43      	adds	r3, r0, #1
 80067a8:	d1f3      	bne.n	8006792 <__sfputs_r+0xa>
 80067aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080067ac <_vfiprintf_r>:
 80067ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067b0:	460d      	mov	r5, r1
 80067b2:	b09d      	sub	sp, #116	; 0x74
 80067b4:	4614      	mov	r4, r2
 80067b6:	4698      	mov	r8, r3
 80067b8:	4606      	mov	r6, r0
 80067ba:	b118      	cbz	r0, 80067c4 <_vfiprintf_r+0x18>
 80067bc:	6a03      	ldr	r3, [r0, #32]
 80067be:	b90b      	cbnz	r3, 80067c4 <_vfiprintf_r+0x18>
 80067c0:	f7fe f962 	bl	8004a88 <__sinit>
 80067c4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067c6:	07d9      	lsls	r1, r3, #31
 80067c8:	d405      	bmi.n	80067d6 <_vfiprintf_r+0x2a>
 80067ca:	89ab      	ldrh	r3, [r5, #12]
 80067cc:	059a      	lsls	r2, r3, #22
 80067ce:	d402      	bmi.n	80067d6 <_vfiprintf_r+0x2a>
 80067d0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80067d2:	f7fe fa6f 	bl	8004cb4 <__retarget_lock_acquire_recursive>
 80067d6:	89ab      	ldrh	r3, [r5, #12]
 80067d8:	071b      	lsls	r3, r3, #28
 80067da:	d501      	bpl.n	80067e0 <_vfiprintf_r+0x34>
 80067dc:	692b      	ldr	r3, [r5, #16]
 80067de:	b99b      	cbnz	r3, 8006808 <_vfiprintf_r+0x5c>
 80067e0:	4629      	mov	r1, r5
 80067e2:	4630      	mov	r0, r6
 80067e4:	f000 f93a 	bl	8006a5c <__swsetup_r>
 80067e8:	b170      	cbz	r0, 8006808 <_vfiprintf_r+0x5c>
 80067ea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80067ec:	07dc      	lsls	r4, r3, #31
 80067ee:	d504      	bpl.n	80067fa <_vfiprintf_r+0x4e>
 80067f0:	f04f 30ff 	mov.w	r0, #4294967295
 80067f4:	b01d      	add	sp, #116	; 0x74
 80067f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067fa:	89ab      	ldrh	r3, [r5, #12]
 80067fc:	0598      	lsls	r0, r3, #22
 80067fe:	d4f7      	bmi.n	80067f0 <_vfiprintf_r+0x44>
 8006800:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006802:	f7fe fa58 	bl	8004cb6 <__retarget_lock_release_recursive>
 8006806:	e7f3      	b.n	80067f0 <_vfiprintf_r+0x44>
 8006808:	2300      	movs	r3, #0
 800680a:	9309      	str	r3, [sp, #36]	; 0x24
 800680c:	2320      	movs	r3, #32
 800680e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006812:	f8cd 800c 	str.w	r8, [sp, #12]
 8006816:	2330      	movs	r3, #48	; 0x30
 8006818:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80069cc <_vfiprintf_r+0x220>
 800681c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006820:	f04f 0901 	mov.w	r9, #1
 8006824:	4623      	mov	r3, r4
 8006826:	469a      	mov	sl, r3
 8006828:	f813 2b01 	ldrb.w	r2, [r3], #1
 800682c:	b10a      	cbz	r2, 8006832 <_vfiprintf_r+0x86>
 800682e:	2a25      	cmp	r2, #37	; 0x25
 8006830:	d1f9      	bne.n	8006826 <_vfiprintf_r+0x7a>
 8006832:	ebba 0b04 	subs.w	fp, sl, r4
 8006836:	d00b      	beq.n	8006850 <_vfiprintf_r+0xa4>
 8006838:	465b      	mov	r3, fp
 800683a:	4622      	mov	r2, r4
 800683c:	4629      	mov	r1, r5
 800683e:	4630      	mov	r0, r6
 8006840:	f7ff ffa2 	bl	8006788 <__sfputs_r>
 8006844:	3001      	adds	r0, #1
 8006846:	f000 80a9 	beq.w	800699c <_vfiprintf_r+0x1f0>
 800684a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800684c:	445a      	add	r2, fp
 800684e:	9209      	str	r2, [sp, #36]	; 0x24
 8006850:	f89a 3000 	ldrb.w	r3, [sl]
 8006854:	2b00      	cmp	r3, #0
 8006856:	f000 80a1 	beq.w	800699c <_vfiprintf_r+0x1f0>
 800685a:	2300      	movs	r3, #0
 800685c:	f04f 32ff 	mov.w	r2, #4294967295
 8006860:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006864:	f10a 0a01 	add.w	sl, sl, #1
 8006868:	9304      	str	r3, [sp, #16]
 800686a:	9307      	str	r3, [sp, #28]
 800686c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006870:	931a      	str	r3, [sp, #104]	; 0x68
 8006872:	4654      	mov	r4, sl
 8006874:	2205      	movs	r2, #5
 8006876:	f814 1b01 	ldrb.w	r1, [r4], #1
 800687a:	4854      	ldr	r0, [pc, #336]	; (80069cc <_vfiprintf_r+0x220>)
 800687c:	f7f9 fce0 	bl	8000240 <memchr>
 8006880:	9a04      	ldr	r2, [sp, #16]
 8006882:	b9d8      	cbnz	r0, 80068bc <_vfiprintf_r+0x110>
 8006884:	06d1      	lsls	r1, r2, #27
 8006886:	bf44      	itt	mi
 8006888:	2320      	movmi	r3, #32
 800688a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800688e:	0713      	lsls	r3, r2, #28
 8006890:	bf44      	itt	mi
 8006892:	232b      	movmi	r3, #43	; 0x2b
 8006894:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006898:	f89a 3000 	ldrb.w	r3, [sl]
 800689c:	2b2a      	cmp	r3, #42	; 0x2a
 800689e:	d015      	beq.n	80068cc <_vfiprintf_r+0x120>
 80068a0:	9a07      	ldr	r2, [sp, #28]
 80068a2:	4654      	mov	r4, sl
 80068a4:	2000      	movs	r0, #0
 80068a6:	f04f 0c0a 	mov.w	ip, #10
 80068aa:	4621      	mov	r1, r4
 80068ac:	f811 3b01 	ldrb.w	r3, [r1], #1
 80068b0:	3b30      	subs	r3, #48	; 0x30
 80068b2:	2b09      	cmp	r3, #9
 80068b4:	d94d      	bls.n	8006952 <_vfiprintf_r+0x1a6>
 80068b6:	b1b0      	cbz	r0, 80068e6 <_vfiprintf_r+0x13a>
 80068b8:	9207      	str	r2, [sp, #28]
 80068ba:	e014      	b.n	80068e6 <_vfiprintf_r+0x13a>
 80068bc:	eba0 0308 	sub.w	r3, r0, r8
 80068c0:	fa09 f303 	lsl.w	r3, r9, r3
 80068c4:	4313      	orrs	r3, r2
 80068c6:	9304      	str	r3, [sp, #16]
 80068c8:	46a2      	mov	sl, r4
 80068ca:	e7d2      	b.n	8006872 <_vfiprintf_r+0xc6>
 80068cc:	9b03      	ldr	r3, [sp, #12]
 80068ce:	1d19      	adds	r1, r3, #4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	9103      	str	r1, [sp, #12]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	bfbb      	ittet	lt
 80068d8:	425b      	neglt	r3, r3
 80068da:	f042 0202 	orrlt.w	r2, r2, #2
 80068de:	9307      	strge	r3, [sp, #28]
 80068e0:	9307      	strlt	r3, [sp, #28]
 80068e2:	bfb8      	it	lt
 80068e4:	9204      	strlt	r2, [sp, #16]
 80068e6:	7823      	ldrb	r3, [r4, #0]
 80068e8:	2b2e      	cmp	r3, #46	; 0x2e
 80068ea:	d10c      	bne.n	8006906 <_vfiprintf_r+0x15a>
 80068ec:	7863      	ldrb	r3, [r4, #1]
 80068ee:	2b2a      	cmp	r3, #42	; 0x2a
 80068f0:	d134      	bne.n	800695c <_vfiprintf_r+0x1b0>
 80068f2:	9b03      	ldr	r3, [sp, #12]
 80068f4:	1d1a      	adds	r2, r3, #4
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	9203      	str	r2, [sp, #12]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	bfb8      	it	lt
 80068fe:	f04f 33ff 	movlt.w	r3, #4294967295
 8006902:	3402      	adds	r4, #2
 8006904:	9305      	str	r3, [sp, #20]
 8006906:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80069dc <_vfiprintf_r+0x230>
 800690a:	7821      	ldrb	r1, [r4, #0]
 800690c:	2203      	movs	r2, #3
 800690e:	4650      	mov	r0, sl
 8006910:	f7f9 fc96 	bl	8000240 <memchr>
 8006914:	b138      	cbz	r0, 8006926 <_vfiprintf_r+0x17a>
 8006916:	9b04      	ldr	r3, [sp, #16]
 8006918:	eba0 000a 	sub.w	r0, r0, sl
 800691c:	2240      	movs	r2, #64	; 0x40
 800691e:	4082      	lsls	r2, r0
 8006920:	4313      	orrs	r3, r2
 8006922:	3401      	adds	r4, #1
 8006924:	9304      	str	r3, [sp, #16]
 8006926:	f814 1b01 	ldrb.w	r1, [r4], #1
 800692a:	4829      	ldr	r0, [pc, #164]	; (80069d0 <_vfiprintf_r+0x224>)
 800692c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006930:	2206      	movs	r2, #6
 8006932:	f7f9 fc85 	bl	8000240 <memchr>
 8006936:	2800      	cmp	r0, #0
 8006938:	d03f      	beq.n	80069ba <_vfiprintf_r+0x20e>
 800693a:	4b26      	ldr	r3, [pc, #152]	; (80069d4 <_vfiprintf_r+0x228>)
 800693c:	bb1b      	cbnz	r3, 8006986 <_vfiprintf_r+0x1da>
 800693e:	9b03      	ldr	r3, [sp, #12]
 8006940:	3307      	adds	r3, #7
 8006942:	f023 0307 	bic.w	r3, r3, #7
 8006946:	3308      	adds	r3, #8
 8006948:	9303      	str	r3, [sp, #12]
 800694a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800694c:	443b      	add	r3, r7
 800694e:	9309      	str	r3, [sp, #36]	; 0x24
 8006950:	e768      	b.n	8006824 <_vfiprintf_r+0x78>
 8006952:	fb0c 3202 	mla	r2, ip, r2, r3
 8006956:	460c      	mov	r4, r1
 8006958:	2001      	movs	r0, #1
 800695a:	e7a6      	b.n	80068aa <_vfiprintf_r+0xfe>
 800695c:	2300      	movs	r3, #0
 800695e:	3401      	adds	r4, #1
 8006960:	9305      	str	r3, [sp, #20]
 8006962:	4619      	mov	r1, r3
 8006964:	f04f 0c0a 	mov.w	ip, #10
 8006968:	4620      	mov	r0, r4
 800696a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800696e:	3a30      	subs	r2, #48	; 0x30
 8006970:	2a09      	cmp	r2, #9
 8006972:	d903      	bls.n	800697c <_vfiprintf_r+0x1d0>
 8006974:	2b00      	cmp	r3, #0
 8006976:	d0c6      	beq.n	8006906 <_vfiprintf_r+0x15a>
 8006978:	9105      	str	r1, [sp, #20]
 800697a:	e7c4      	b.n	8006906 <_vfiprintf_r+0x15a>
 800697c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006980:	4604      	mov	r4, r0
 8006982:	2301      	movs	r3, #1
 8006984:	e7f0      	b.n	8006968 <_vfiprintf_r+0x1bc>
 8006986:	ab03      	add	r3, sp, #12
 8006988:	9300      	str	r3, [sp, #0]
 800698a:	462a      	mov	r2, r5
 800698c:	4b12      	ldr	r3, [pc, #72]	; (80069d8 <_vfiprintf_r+0x22c>)
 800698e:	a904      	add	r1, sp, #16
 8006990:	4630      	mov	r0, r6
 8006992:	f7fd fc55 	bl	8004240 <_printf_float>
 8006996:	4607      	mov	r7, r0
 8006998:	1c78      	adds	r0, r7, #1
 800699a:	d1d6      	bne.n	800694a <_vfiprintf_r+0x19e>
 800699c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800699e:	07d9      	lsls	r1, r3, #31
 80069a0:	d405      	bmi.n	80069ae <_vfiprintf_r+0x202>
 80069a2:	89ab      	ldrh	r3, [r5, #12]
 80069a4:	059a      	lsls	r2, r3, #22
 80069a6:	d402      	bmi.n	80069ae <_vfiprintf_r+0x202>
 80069a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80069aa:	f7fe f984 	bl	8004cb6 <__retarget_lock_release_recursive>
 80069ae:	89ab      	ldrh	r3, [r5, #12]
 80069b0:	065b      	lsls	r3, r3, #25
 80069b2:	f53f af1d 	bmi.w	80067f0 <_vfiprintf_r+0x44>
 80069b6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80069b8:	e71c      	b.n	80067f4 <_vfiprintf_r+0x48>
 80069ba:	ab03      	add	r3, sp, #12
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	462a      	mov	r2, r5
 80069c0:	4b05      	ldr	r3, [pc, #20]	; (80069d8 <_vfiprintf_r+0x22c>)
 80069c2:	a904      	add	r1, sp, #16
 80069c4:	4630      	mov	r0, r6
 80069c6:	f7fd fec3 	bl	8004750 <_printf_i>
 80069ca:	e7e4      	b.n	8006996 <_vfiprintf_r+0x1ea>
 80069cc:	08006f24 	.word	0x08006f24
 80069d0:	08006f2e 	.word	0x08006f2e
 80069d4:	08004241 	.word	0x08004241
 80069d8:	08006789 	.word	0x08006789
 80069dc:	08006f2a 	.word	0x08006f2a

080069e0 <__swbuf_r>:
 80069e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069e2:	460e      	mov	r6, r1
 80069e4:	4614      	mov	r4, r2
 80069e6:	4605      	mov	r5, r0
 80069e8:	b118      	cbz	r0, 80069f2 <__swbuf_r+0x12>
 80069ea:	6a03      	ldr	r3, [r0, #32]
 80069ec:	b90b      	cbnz	r3, 80069f2 <__swbuf_r+0x12>
 80069ee:	f7fe f84b 	bl	8004a88 <__sinit>
 80069f2:	69a3      	ldr	r3, [r4, #24]
 80069f4:	60a3      	str	r3, [r4, #8]
 80069f6:	89a3      	ldrh	r3, [r4, #12]
 80069f8:	071a      	lsls	r2, r3, #28
 80069fa:	d525      	bpl.n	8006a48 <__swbuf_r+0x68>
 80069fc:	6923      	ldr	r3, [r4, #16]
 80069fe:	b31b      	cbz	r3, 8006a48 <__swbuf_r+0x68>
 8006a00:	6823      	ldr	r3, [r4, #0]
 8006a02:	6922      	ldr	r2, [r4, #16]
 8006a04:	1a98      	subs	r0, r3, r2
 8006a06:	6963      	ldr	r3, [r4, #20]
 8006a08:	b2f6      	uxtb	r6, r6
 8006a0a:	4283      	cmp	r3, r0
 8006a0c:	4637      	mov	r7, r6
 8006a0e:	dc04      	bgt.n	8006a1a <__swbuf_r+0x3a>
 8006a10:	4621      	mov	r1, r4
 8006a12:	4628      	mov	r0, r5
 8006a14:	f7ff fd9e 	bl	8006554 <_fflush_r>
 8006a18:	b9e0      	cbnz	r0, 8006a54 <__swbuf_r+0x74>
 8006a1a:	68a3      	ldr	r3, [r4, #8]
 8006a1c:	3b01      	subs	r3, #1
 8006a1e:	60a3      	str	r3, [r4, #8]
 8006a20:	6823      	ldr	r3, [r4, #0]
 8006a22:	1c5a      	adds	r2, r3, #1
 8006a24:	6022      	str	r2, [r4, #0]
 8006a26:	701e      	strb	r6, [r3, #0]
 8006a28:	6962      	ldr	r2, [r4, #20]
 8006a2a:	1c43      	adds	r3, r0, #1
 8006a2c:	429a      	cmp	r2, r3
 8006a2e:	d004      	beq.n	8006a3a <__swbuf_r+0x5a>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	07db      	lsls	r3, r3, #31
 8006a34:	d506      	bpl.n	8006a44 <__swbuf_r+0x64>
 8006a36:	2e0a      	cmp	r6, #10
 8006a38:	d104      	bne.n	8006a44 <__swbuf_r+0x64>
 8006a3a:	4621      	mov	r1, r4
 8006a3c:	4628      	mov	r0, r5
 8006a3e:	f7ff fd89 	bl	8006554 <_fflush_r>
 8006a42:	b938      	cbnz	r0, 8006a54 <__swbuf_r+0x74>
 8006a44:	4638      	mov	r0, r7
 8006a46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a48:	4621      	mov	r1, r4
 8006a4a:	4628      	mov	r0, r5
 8006a4c:	f000 f806 	bl	8006a5c <__swsetup_r>
 8006a50:	2800      	cmp	r0, #0
 8006a52:	d0d5      	beq.n	8006a00 <__swbuf_r+0x20>
 8006a54:	f04f 37ff 	mov.w	r7, #4294967295
 8006a58:	e7f4      	b.n	8006a44 <__swbuf_r+0x64>
	...

08006a5c <__swsetup_r>:
 8006a5c:	b538      	push	{r3, r4, r5, lr}
 8006a5e:	4b2a      	ldr	r3, [pc, #168]	; (8006b08 <__swsetup_r+0xac>)
 8006a60:	4605      	mov	r5, r0
 8006a62:	6818      	ldr	r0, [r3, #0]
 8006a64:	460c      	mov	r4, r1
 8006a66:	b118      	cbz	r0, 8006a70 <__swsetup_r+0x14>
 8006a68:	6a03      	ldr	r3, [r0, #32]
 8006a6a:	b90b      	cbnz	r3, 8006a70 <__swsetup_r+0x14>
 8006a6c:	f7fe f80c 	bl	8004a88 <__sinit>
 8006a70:	89a3      	ldrh	r3, [r4, #12]
 8006a72:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a76:	0718      	lsls	r0, r3, #28
 8006a78:	d422      	bmi.n	8006ac0 <__swsetup_r+0x64>
 8006a7a:	06d9      	lsls	r1, r3, #27
 8006a7c:	d407      	bmi.n	8006a8e <__swsetup_r+0x32>
 8006a7e:	2309      	movs	r3, #9
 8006a80:	602b      	str	r3, [r5, #0]
 8006a82:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006a86:	81a3      	strh	r3, [r4, #12]
 8006a88:	f04f 30ff 	mov.w	r0, #4294967295
 8006a8c:	e034      	b.n	8006af8 <__swsetup_r+0x9c>
 8006a8e:	0758      	lsls	r0, r3, #29
 8006a90:	d512      	bpl.n	8006ab8 <__swsetup_r+0x5c>
 8006a92:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a94:	b141      	cbz	r1, 8006aa8 <__swsetup_r+0x4c>
 8006a96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a9a:	4299      	cmp	r1, r3
 8006a9c:	d002      	beq.n	8006aa4 <__swsetup_r+0x48>
 8006a9e:	4628      	mov	r0, r5
 8006aa0:	f7fe fefe 	bl	80058a0 <_free_r>
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	6363      	str	r3, [r4, #52]	; 0x34
 8006aa8:	89a3      	ldrh	r3, [r4, #12]
 8006aaa:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006aae:	81a3      	strh	r3, [r4, #12]
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	6063      	str	r3, [r4, #4]
 8006ab4:	6923      	ldr	r3, [r4, #16]
 8006ab6:	6023      	str	r3, [r4, #0]
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	f043 0308 	orr.w	r3, r3, #8
 8006abe:	81a3      	strh	r3, [r4, #12]
 8006ac0:	6923      	ldr	r3, [r4, #16]
 8006ac2:	b94b      	cbnz	r3, 8006ad8 <__swsetup_r+0x7c>
 8006ac4:	89a3      	ldrh	r3, [r4, #12]
 8006ac6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006aca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006ace:	d003      	beq.n	8006ad8 <__swsetup_r+0x7c>
 8006ad0:	4621      	mov	r1, r4
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f884 	bl	8006be0 <__smakebuf_r>
 8006ad8:	89a0      	ldrh	r0, [r4, #12]
 8006ada:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ade:	f010 0301 	ands.w	r3, r0, #1
 8006ae2:	d00a      	beq.n	8006afa <__swsetup_r+0x9e>
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60a3      	str	r3, [r4, #8]
 8006ae8:	6963      	ldr	r3, [r4, #20]
 8006aea:	425b      	negs	r3, r3
 8006aec:	61a3      	str	r3, [r4, #24]
 8006aee:	6923      	ldr	r3, [r4, #16]
 8006af0:	b943      	cbnz	r3, 8006b04 <__swsetup_r+0xa8>
 8006af2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006af6:	d1c4      	bne.n	8006a82 <__swsetup_r+0x26>
 8006af8:	bd38      	pop	{r3, r4, r5, pc}
 8006afa:	0781      	lsls	r1, r0, #30
 8006afc:	bf58      	it	pl
 8006afe:	6963      	ldrpl	r3, [r4, #20]
 8006b00:	60a3      	str	r3, [r4, #8]
 8006b02:	e7f4      	b.n	8006aee <__swsetup_r+0x92>
 8006b04:	2000      	movs	r0, #0
 8006b06:	e7f7      	b.n	8006af8 <__swsetup_r+0x9c>
 8006b08:	20000064 	.word	0x20000064

08006b0c <_raise_r>:
 8006b0c:	291f      	cmp	r1, #31
 8006b0e:	b538      	push	{r3, r4, r5, lr}
 8006b10:	4604      	mov	r4, r0
 8006b12:	460d      	mov	r5, r1
 8006b14:	d904      	bls.n	8006b20 <_raise_r+0x14>
 8006b16:	2316      	movs	r3, #22
 8006b18:	6003      	str	r3, [r0, #0]
 8006b1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b1e:	bd38      	pop	{r3, r4, r5, pc}
 8006b20:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8006b22:	b112      	cbz	r2, 8006b2a <_raise_r+0x1e>
 8006b24:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006b28:	b94b      	cbnz	r3, 8006b3e <_raise_r+0x32>
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	f000 f830 	bl	8006b90 <_getpid_r>
 8006b30:	462a      	mov	r2, r5
 8006b32:	4601      	mov	r1, r0
 8006b34:	4620      	mov	r0, r4
 8006b36:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b3a:	f000 b817 	b.w	8006b6c <_kill_r>
 8006b3e:	2b01      	cmp	r3, #1
 8006b40:	d00a      	beq.n	8006b58 <_raise_r+0x4c>
 8006b42:	1c59      	adds	r1, r3, #1
 8006b44:	d103      	bne.n	8006b4e <_raise_r+0x42>
 8006b46:	2316      	movs	r3, #22
 8006b48:	6003      	str	r3, [r0, #0]
 8006b4a:	2001      	movs	r0, #1
 8006b4c:	e7e7      	b.n	8006b1e <_raise_r+0x12>
 8006b4e:	2400      	movs	r4, #0
 8006b50:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006b54:	4628      	mov	r0, r5
 8006b56:	4798      	blx	r3
 8006b58:	2000      	movs	r0, #0
 8006b5a:	e7e0      	b.n	8006b1e <_raise_r+0x12>

08006b5c <raise>:
 8006b5c:	4b02      	ldr	r3, [pc, #8]	; (8006b68 <raise+0xc>)
 8006b5e:	4601      	mov	r1, r0
 8006b60:	6818      	ldr	r0, [r3, #0]
 8006b62:	f7ff bfd3 	b.w	8006b0c <_raise_r>
 8006b66:	bf00      	nop
 8006b68:	20000064 	.word	0x20000064

08006b6c <_kill_r>:
 8006b6c:	b538      	push	{r3, r4, r5, lr}
 8006b6e:	4d07      	ldr	r5, [pc, #28]	; (8006b8c <_kill_r+0x20>)
 8006b70:	2300      	movs	r3, #0
 8006b72:	4604      	mov	r4, r0
 8006b74:	4608      	mov	r0, r1
 8006b76:	4611      	mov	r1, r2
 8006b78:	602b      	str	r3, [r5, #0]
 8006b7a:	f7fa f963 	bl	8000e44 <_kill>
 8006b7e:	1c43      	adds	r3, r0, #1
 8006b80:	d102      	bne.n	8006b88 <_kill_r+0x1c>
 8006b82:	682b      	ldr	r3, [r5, #0]
 8006b84:	b103      	cbz	r3, 8006b88 <_kill_r+0x1c>
 8006b86:	6023      	str	r3, [r4, #0]
 8006b88:	bd38      	pop	{r3, r4, r5, pc}
 8006b8a:	bf00      	nop
 8006b8c:	200005ac 	.word	0x200005ac

08006b90 <_getpid_r>:
 8006b90:	f7fa b950 	b.w	8000e34 <_getpid>

08006b94 <__swhatbuf_r>:
 8006b94:	b570      	push	{r4, r5, r6, lr}
 8006b96:	460c      	mov	r4, r1
 8006b98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006b9c:	2900      	cmp	r1, #0
 8006b9e:	b096      	sub	sp, #88	; 0x58
 8006ba0:	4615      	mov	r5, r2
 8006ba2:	461e      	mov	r6, r3
 8006ba4:	da0d      	bge.n	8006bc2 <__swhatbuf_r+0x2e>
 8006ba6:	89a3      	ldrh	r3, [r4, #12]
 8006ba8:	f013 0f80 	tst.w	r3, #128	; 0x80
 8006bac:	f04f 0100 	mov.w	r1, #0
 8006bb0:	bf0c      	ite	eq
 8006bb2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8006bb6:	2340      	movne	r3, #64	; 0x40
 8006bb8:	2000      	movs	r0, #0
 8006bba:	6031      	str	r1, [r6, #0]
 8006bbc:	602b      	str	r3, [r5, #0]
 8006bbe:	b016      	add	sp, #88	; 0x58
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
 8006bc2:	466a      	mov	r2, sp
 8006bc4:	f000 f848 	bl	8006c58 <_fstat_r>
 8006bc8:	2800      	cmp	r0, #0
 8006bca:	dbec      	blt.n	8006ba6 <__swhatbuf_r+0x12>
 8006bcc:	9901      	ldr	r1, [sp, #4]
 8006bce:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8006bd2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8006bd6:	4259      	negs	r1, r3
 8006bd8:	4159      	adcs	r1, r3
 8006bda:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bde:	e7eb      	b.n	8006bb8 <__swhatbuf_r+0x24>

08006be0 <__smakebuf_r>:
 8006be0:	898b      	ldrh	r3, [r1, #12]
 8006be2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006be4:	079d      	lsls	r5, r3, #30
 8006be6:	4606      	mov	r6, r0
 8006be8:	460c      	mov	r4, r1
 8006bea:	d507      	bpl.n	8006bfc <__smakebuf_r+0x1c>
 8006bec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	6163      	str	r3, [r4, #20]
 8006bf8:	b002      	add	sp, #8
 8006bfa:	bd70      	pop	{r4, r5, r6, pc}
 8006bfc:	ab01      	add	r3, sp, #4
 8006bfe:	466a      	mov	r2, sp
 8006c00:	f7ff ffc8 	bl	8006b94 <__swhatbuf_r>
 8006c04:	9900      	ldr	r1, [sp, #0]
 8006c06:	4605      	mov	r5, r0
 8006c08:	4630      	mov	r0, r6
 8006c0a:	f7fe febd 	bl	8005988 <_malloc_r>
 8006c0e:	b948      	cbnz	r0, 8006c24 <__smakebuf_r+0x44>
 8006c10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006c14:	059a      	lsls	r2, r3, #22
 8006c16:	d4ef      	bmi.n	8006bf8 <__smakebuf_r+0x18>
 8006c18:	f023 0303 	bic.w	r3, r3, #3
 8006c1c:	f043 0302 	orr.w	r3, r3, #2
 8006c20:	81a3      	strh	r3, [r4, #12]
 8006c22:	e7e3      	b.n	8006bec <__smakebuf_r+0xc>
 8006c24:	89a3      	ldrh	r3, [r4, #12]
 8006c26:	6020      	str	r0, [r4, #0]
 8006c28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c2c:	81a3      	strh	r3, [r4, #12]
 8006c2e:	9b00      	ldr	r3, [sp, #0]
 8006c30:	6163      	str	r3, [r4, #20]
 8006c32:	9b01      	ldr	r3, [sp, #4]
 8006c34:	6120      	str	r0, [r4, #16]
 8006c36:	b15b      	cbz	r3, 8006c50 <__smakebuf_r+0x70>
 8006c38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c3c:	4630      	mov	r0, r6
 8006c3e:	f000 f81d 	bl	8006c7c <_isatty_r>
 8006c42:	b128      	cbz	r0, 8006c50 <__smakebuf_r+0x70>
 8006c44:	89a3      	ldrh	r3, [r4, #12]
 8006c46:	f023 0303 	bic.w	r3, r3, #3
 8006c4a:	f043 0301 	orr.w	r3, r3, #1
 8006c4e:	81a3      	strh	r3, [r4, #12]
 8006c50:	89a3      	ldrh	r3, [r4, #12]
 8006c52:	431d      	orrs	r5, r3
 8006c54:	81a5      	strh	r5, [r4, #12]
 8006c56:	e7cf      	b.n	8006bf8 <__smakebuf_r+0x18>

08006c58 <_fstat_r>:
 8006c58:	b538      	push	{r3, r4, r5, lr}
 8006c5a:	4d07      	ldr	r5, [pc, #28]	; (8006c78 <_fstat_r+0x20>)
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	4604      	mov	r4, r0
 8006c60:	4608      	mov	r0, r1
 8006c62:	4611      	mov	r1, r2
 8006c64:	602b      	str	r3, [r5, #0]
 8006c66:	f7fa f94c 	bl	8000f02 <_fstat>
 8006c6a:	1c43      	adds	r3, r0, #1
 8006c6c:	d102      	bne.n	8006c74 <_fstat_r+0x1c>
 8006c6e:	682b      	ldr	r3, [r5, #0]
 8006c70:	b103      	cbz	r3, 8006c74 <_fstat_r+0x1c>
 8006c72:	6023      	str	r3, [r4, #0]
 8006c74:	bd38      	pop	{r3, r4, r5, pc}
 8006c76:	bf00      	nop
 8006c78:	200005ac 	.word	0x200005ac

08006c7c <_isatty_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	4d06      	ldr	r5, [pc, #24]	; (8006c98 <_isatty_r+0x1c>)
 8006c80:	2300      	movs	r3, #0
 8006c82:	4604      	mov	r4, r0
 8006c84:	4608      	mov	r0, r1
 8006c86:	602b      	str	r3, [r5, #0]
 8006c88:	f7fa f94b 	bl	8000f22 <_isatty>
 8006c8c:	1c43      	adds	r3, r0, #1
 8006c8e:	d102      	bne.n	8006c96 <_isatty_r+0x1a>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	b103      	cbz	r3, 8006c96 <_isatty_r+0x1a>
 8006c94:	6023      	str	r3, [r4, #0]
 8006c96:	bd38      	pop	{r3, r4, r5, pc}
 8006c98:	200005ac 	.word	0x200005ac

08006c9c <_init>:
 8006c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c9e:	bf00      	nop
 8006ca0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ca2:	bc08      	pop	{r3}
 8006ca4:	469e      	mov	lr, r3
 8006ca6:	4770      	bx	lr

08006ca8 <_fini>:
 8006ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006caa:	bf00      	nop
 8006cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006cae:	bc08      	pop	{r3}
 8006cb0:	469e      	mov	lr, r3
 8006cb2:	4770      	bx	lr
